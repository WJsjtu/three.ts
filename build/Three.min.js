!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var i in n)("object"==typeof exports?exports:t)[i]=n[i]}}(window,function(){return function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);const i=[];for(let t=0;t<256;t++)i[t]=(t<16?"0":"")+t.toString(16).toUpperCase();class r{static generateUUID(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,r=4294967295*Math.random()|0;return i[255&t]+i[t>>8&255]+i[t>>16&255]+i[t>>24&255]+"-"+i[255&e]+i[e>>8&255]+"-"+i[e>>16&15|64]+i[e>>24&255]+"-"+i[63&n|128]+i[n>>8&255]+"-"+i[n>>16&255]+i[n>>24&255]+i[255&r]+i[r>>8&255]+i[r>>16&255]+i[r>>24&255]}static clamp(t,e,n){return Math.max(e,Math.min(n,t))}static euclideanModulo(t,e){return(t%e+e)%e}static mapLinear(t,e,n,i,r){return i+(t-e)*(r-i)/(n-e)}static lerp(t,e,n){return(1-n)*t+n*e}static smoothstep(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*(3-2*t)}static smootherstep(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*t*(t*(6*t-15)+10)}static randInt(t,e){return t+Math.floor(Math.random()*(e-t+1))}static randFloat(t,e){return t+Math.random()*(e-t)}static randFloatSpread(t){return t*(.5-Math.random())}static degToRad(t){return t*r.DEG2RAD}static radToDeg(t){return t*r.RAD2DEG}static isPowerOfTwo(t){return 0==(t&t-1)&&0!==t}static ceilPowerOfTwo(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))}static floorPowerOfTwo(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}}r.DEG2RAD=Math.PI/180,r.RAD2DEG=180/Math.PI;class s{constructor(t=0,e=0,n=0,i=0){this._x=t,this._y=e,this._z=n,this._w=i}get x(){return this._x}set x(t){this._x=t}get y(){return this._y}set y(t){this._y=t}get z(){return this._z}set z(t){this._z=t}get w(){return this._w}set w(t){this._w=t}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this}setScalar(t){return this.set(t,t,t,t)}copy(t){return this.set(t.x,t.y,t.z,(t instanceof s?t.w:void 0)||1)}add(t){return this.set(this.x+t.x,this.y+t.y,this.z+t.z,this.w+t.w)}addScalar(t){return this.set(this.x+t,this.y+t,this.z+t,this.w+t)}sub(t){return this.set(this.x-t.x,this.y-t.y,this.z-t.z,this.w-t.w)}subScalar(t){return this.set(this.x-t,this.y-t,this.z-t,this.w-t)}multiplyScalar(t){return this.set(this.x*t,this.y*t,this.z*t,this.w*t)}divideScalar(t){return this.set(this.x/t,this.y/t,this.z/t,this.w/t)}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=this.w,s=t.elements;return this.set(s[0]*e+s[4]*n+s[8]*i+s[12]*r,s[1]*e+s[5]*n+s[9]*i+s[13]*r,s[2]*e+s[6]*n+s[10]*i+s[14]*r,s[3]*e+s[7]*n+s[11]*i+s[15]*r)}setAxisAngleFromQuaternion(t){const e=Math.sqrt(1-t.w*t.w);return e<1e-4?this.set(1,0,0,2*Math.acos(t.w)):this.set(t.x/e,t.y/e,t.z/e,2*Math.acos(t.w))}setAxisAngleFromRotationMatrix(t){let e,n,i,r;const s=t.elements,o=s[0],a=s[4],c=s[8],l=s[1],h=s[5],d=s[9],u=s[2],p=s[6],f=s[10];if(Math.abs(a-l)<.01&&Math.abs(c-u)<.01&&Math.abs(d-p)<.01){if(Math.abs(a+l)<.1&&Math.abs(c+u)<.1&&Math.abs(d+p)<.1&&Math.abs(o+h+f-3)<.1)return this.set(1,0,0,0);e=Math.PI;const t=(o+1)/2,s=(h+1)/2,m=(f+1)/2,g=(a+l)/4,v=(c+u)/4,y=(d+p)/4;return t>s&&t>m?t<.01?(n=0,i=.707106781,r=.707106781):(i=g/(n=Math.sqrt(t)),r=v/n):s>m?s<.01?(n=.707106781,i=0,r=.707106781):(n=g/(i=Math.sqrt(s)),r=y/i):m<.01?(n=.707106781,i=.707106781,r=0):(n=v/(r=Math.sqrt(m)),i=y/r),this.set(n,i,r,e)}let m=Math.sqrt((p-d)*(p-d)+(c-u)*(c-u)+(l-a)*(l-a));return Math.abs(m)<.001&&(m=1),this.set((p-d)/m,(c-u)/m,(l-a)/m,Math.acos((o+h+f-1)/2))}min(t){return this.set(Math.min(this.x,t.x),Math.min(this.y,t.y),Math.min(this.z,t.z),Math.min(this.w,t.w))}max(t){return this.set(Math.max(this.x,t.x),Math.max(this.y,t.y),Math.max(this.z,t.z),Math.max(this.w,t.w))}clamp(t,e){return this.set(Math.max(t.x,Math.min(e.x,this.x)),Math.max(t.y,Math.min(e.y,this.y)),Math.max(t.z,Math.min(e.z,this.z)),Math.max(t.w,Math.min(e.w,this.w)))}negate(){return this.set(-this.x,-this.y,-this.z,-this.w)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSquared(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.lengthSquared())}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.set(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e,this.z+(t.z-this.z)*e,this.w+(t.w-this.w)*e)}lerpVectors(t,e,n){return this.copy(e).sub(t).multiplyScalar(n).add(t)}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.set(t[e],t[e+1],t[e+2],t[e+3])}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}clone(){return(new this.constructor).copy(this)}}const o={LEFT:0,MIDDLE:1,RIGHT:2},a=0,c=1,l=2,h=1,d=0,u=1,p=100,f=101,m=102,g=103,v=104,y=200,x=201,_=202,M=203,w=204,S=205,b=206,L=207,P=208,A=209,T=210,E=3,C=0,D=1,N=300,I=301,R=1e3,z=1001,U=1002,F=1003,G=1004,B=1005,O=1006,k=1007,V=1008,H=1009,q=1010,W=1011,X=1012,Y=1013,j=1014,Z=1015,Q=1016,$=1017,K=1018,J=1019,tt=1020,et=1021,nt=1022,it=1023,rt=1024,st=1025,ot=it,at=1026,ct=1027,lt=33776,ht=33777,dt=33778,ut=33779,pt=35840,ft=35841,mt=35842,gt=35843,vt=36196,yt=37808,xt=37809,_t=37810,Mt=37811,wt=37812,St=37813,bt=37814,Lt=37815,Pt=37816,At=37817,Tt=37818,Et=37819,Ct=37820,Dt=37821,Nt=0,It=3e3,Rt=3200;class zt{constructor(){this._listeners={}}addEventListener(t,e){const n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)}hasEventListener(t,e){if(void 0===this._listeners)return!1;const n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)}removeEventListener(t,e){if(void 0===this._listeners)return;const n=this._listeners[t];if(void 0!==n){const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}dispatchEvent(t={}){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const n=e.slice(0);for(let e=0,i=n.length;e<i;e++)n[e].call(this,t)}}}class Ut{constructor(){this.elements=[1,0,0,0,1,0,0,0,1]}set(t,e,n,i,r,s,o,a,c){const l=this.elements;return l[0]=t,l[1]=i,l[2]=o,l[3]=e,l[4]=r,l[5]=a,l[6]=n,l[7]=s,l[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10])}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,s=n[0],o=n[3],a=n[6],c=n[1],l=n[4],h=n[7],d=n[2],u=n[5],p=n[8],f=i[0],m=i[3],g=i[6],v=i[1],y=i[4],x=i[7],_=i[2],M=i[5],w=i[8];return r[0]=s*f+o*v+a*_,r[3]=s*m+o*y+a*M,r[6]=s*g+o*x+a*w,r[1]=c*f+l*v+h*_,r[4]=c*m+l*y+h*M,r[7]=c*g+l*x+h*w,r[2]=d*f+u*v+p*_,r[5]=d*m+u*y+p*M,r[8]=d*g+u*x+p*w,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],o=t[5],a=t[6],c=t[7],l=t[8];return e*s*l-e*o*c-n*r*l+n*o*a+i*r*c-i*s*a}getInverse(t,e=!1){const n=t.elements,i=this.elements,r=n[0],s=n[1],o=n[2],a=n[3],c=n[4],l=n[5],h=n[6],d=n[7],u=n[8],p=u*c-l*d,f=l*h-u*a,m=d*a-c*h,g=r*p+s*f+o*m;if(0===g){const t="THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";if(!0===e)throw new Error(t);return console.warn(t),this.identity()}const v=1/g;return i[0]=p*v,i[1]=(o*d-u*s)*v,i[2]=(l*s-o*c)*v,i[3]=f*v,i[4]=(u*r-o*h)*v,i[5]=(o*a-l*r)*v,i[6]=m*v,i[7]=(s*h-d*r)*v,i[8]=(c*r-s*a)*v,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).getInverse(this).transpose()}setUvTransform(t,e,n,i,r,s,o){const a=Math.cos(r),c=Math.sin(r);return this.set(n*a,n*c,-n*(a*s+c*o)+s+t,-i*c,i*a,-i*(-c*s+a*o)+o+e,0,0,1)}scale(t,e){const n=this.elements;return n[0]*=t,n[3]*=t,n[6]*=t,n[1]*=e,n[4]*=e,n[7]*=e,this}rotate(t){const e=Math.cos(t),n=Math.sin(t),i=this.elements,r=i[0],s=i[3],o=i[6],a=i[1],c=i[4],l=i[7];return i[0]=e*r+n*a,i[3]=e*s+n*c,i[6]=e*o+n*l,i[1]=-n*r+e*a,i[4]=-n*s+e*c,i[7]=-n*o+e*l,this}translate(t,e){const n=this.elements;return n[0]+=t*n[2],n[3]+=t*n[5],n[6]+=t*n[8],n[1]+=e*n[2],n[4]+=e*n[5],n[7]+=e*n[8],this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<9;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return(new this.constructor).copy(this)}}class Ft{get x(){return this._x}set x(t){this._x=t}get y(){return this._y}set y(t){this._y=t}get width(){return this.x}set width(t){this._x=t}get height(){return this.y}set height(t){this._y=t}constructor(t=0,e=0){this._x=t,this._y=e}set(t,e){return this._x=t,this._y=e,this}setScalar(t){return this.set(t,t)}copy(t){return this.set(t.x,t.y)}add(t){return this.set(this.x+t.x,this.y+t.y)}addScalar(t){return this.set(this.x+t,this.y+t)}sub(t){return this.set(this.x-t.x,this.y-t.y)}subScalar(t){return this.set(this.x-t,this.y-t)}multiply(t){return this.set(this.x*t.x,this.y*t.y)}multiplyScalar(t){return this.set(this.x*t,this.y*t)}divide(t){return this.set(this.x/t.x,this.y/t.y)}divideScalar(t){return this.set(this.x/t,this.y/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.set(i[0]*e+i[3]*n+i[6],i[1]*e+i[4]*n+i[7])}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.set(Math.max(t.x,Math.min(e.x,this.x)),Math.max(t.y,Math.min(e.y,this.y)))}negate(){return this.set(-this.x,-this.y)}dot(t){return this.x*t.x+this.y*t.y}lengthSquared(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.lengthSquared())}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.set(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e)}lerpVectors(t,e,n){return this.copy(e).sub(t).multiplyScalar(n).add(t)}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.set(t[e],t[e+1])}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),r=this.x-t.x,s=this.y-t.y;return this.set(r*n-s*i+t.x,r*i+s*n+t.y)}clone(){return(new this.constructor).copy(this)}}let Gt=0;class Bt extends zt{constructor(t=Bt.DEFAULT_IMAGE,e=Bt.DEFAULT_MAPPING,n=z,i=z,s=O,o=V,a=it,c=H,l=1,h=It){super(),this.id=Gt++,this.uuid=r.generateUUID(),this.name="",this.image=Bt.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=Bt.DEFAULT_MAPPING,this.wrapS=z,this.wrapT=z,this.magFilter=O,this.minFilter=V,this.anisotropy=1,this.format=it,this.type=H,this.offset=new Ft(0,0),this.repeat=new Ft(1,1),this.center=new Ft(0,0),this.rotation=0,this.matrix=new Ut,this.matrixAutoUpdate=!0,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=It,this.version=0,this.image=t,this.mapping=e,this.wrapS=n,this.wrapT=i,this.magFilter=s,this.minFilter=o,this.format=a,this.type=c,this.anisotropy=l,this.encoding=h}set needsUpdate(t){!0===t&&this.version++}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==N)return this;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case R:t.x=t.x-Math.floor(t.x);break;case z:t.x=t.x<0?0:1;break;case U:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case R:t.y=t.y-Math.floor(t.y);break;case z:t.y=t.y<0?0:1;break;case U:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this}}Bt.DEFAULT_MAPPING=N;class Ot extends zt{constructor(t,e,n={}){super(),this.uuid=r.generateUUID(),this.scissorTest=!1,this.width=t,this.height=e,this.scissor=new s(0,0,t,e),this.viewport=new s(0,0,t,e),void 0===n.minFilter&&(n.minFilter=O),this.texture=new Bt(void 0,void 0,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0===n.stencilBuffer||n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null}setSize(t,e){this.width===t&&this.height===e||(this.width=t,this.height=e,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}copy(t){return this.width=t.width,this.height=t.height,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this}clone(){return(new this.constructor).copy(this)}dispose(){this.dispatchEvent({type:"dispose"})}}class kt extends Ot{constructor(t,e,n={}){super(t,e,n),this.activeCubeFace=0,this.activeMipMapLevel=0}}class Vt{constructor(){this.localClippingEnabled=!1,this.physicallyCorrectLights=!1,this.toneMapping=D,this.currentRendererTarget=null}allocTextureUnit(){return 0}renderBufferDirect(t,e,n,i,r,s){}setTexture2D(t,e){}setTextureCube(t,e){}getRenderTarget(){return this.currentRendererTarget}setRenderTarget(t){}clear(){}}function Ht(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+6*(e-t)*(2/3-n):t}class qt{constructor(t=0,e=0,n=0){this.r=1,this.g=1,this.b=1,this.setRGB(t,e,n)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this}setRGB(t,e,n){return this.r=t,this.g=e,this.b=n,this}setHSL(t,e,n){if(t=r.euclideanModulo(t,1),e=r.clamp(e,0,1),n=r.clamp(n,0,1),0===e)this.r=this.g=this.b=n;else{const i=n<=.5?n*(1+e):n+e-n*e,r=2*n-i;this.r=Ht(r,i,t+1/3),this.g=Ht(r,i,t),this.b=Ht(r,i,t-1/3)}return this}setStyle(t){let e;if(e=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(t)){let t;const n=e[1],i=e[2];switch(n){case"rgb":case"rgba":if(t=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(i))return this.r=Math.min(255,parseInt(t[1],10))/255,this.g=Math.min(255,parseInt(t[2],10))/255,this.b=Math.min(255,parseInt(t[3],10))/255,this;if(t=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(i))return this.r=Math.min(100,parseInt(t[1],10))/100,this.g=Math.min(100,parseInt(t[2],10))/100,this.b=Math.min(100,parseInt(t[3],10))/100,this;break;case"hsl":case"hsla":if(t=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(i)){const e=parseFloat(t[1])/360,n=parseInt(t[2],10)/100,i=parseInt(t[3],10)/100;return this.setHSL(e,n,i)}}}else if(e=/^\#([A-Fa-f0-9]+)$/.exec(t)){const t=e[1],n=t.length;if(3===n)return this.r=parseInt(t.charAt(0)+t.charAt(0),16)/255,this.g=parseInt(t.charAt(1)+t.charAt(1),16)/255,this.b=parseInt(t.charAt(2)+t.charAt(2),16)/255,this;if(6===n)return this.r=parseInt(t.charAt(0)+t.charAt(1),16)/255,this.g=parseInt(t.charAt(2)+t.charAt(3),16)/255,this.b=parseInt(t.charAt(4)+t.charAt(5),16)/255,this}if(t&&t.length>0){const e=qt.ColorKeywords[t];void 0!==e?this.setHex(e):console.warn("THREE.Color: Unknown color "+t)}return this}convertGammaToLinear(t,e=2){return this.setRGB(Math.pow(t.r,e),Math.pow(t.g,e),Math.pow(t.b,e))}convertLinearToGamma(t,e=2){const n=e>0?1/e:1;return this.setRGB(Math.pow(t.r,n),Math.pow(t.g,n),Math.pow(t.b,n))}getHex(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(t={h:0,s:0,l:0}){const{r:e,g:n,b:i}=this,r=Math.max(e,n,i),s=Math.min(e,n,i);let o,a;const c=(s+r)/2;if(s===r)o=0,a=0;else{const t=r-s;switch(a=c<=.5?t/(r+s):t/(2-r-s),r){case e:o=(n-i)/t+(n<i?6:0);break;case n:o=(i-e)/t+2;break;case i:o=(e-n)/t+4}o/=6}return t.h=o,t.s=a,t.l=c,t}getStyle(){const{r:t,g:e,b:n}=this;return"rgb("+(255*t|0)+","+(255*e|0)+","+(255*n|0)+")"}offsetHSL(t,e,n){const i=this.getHSL();return i.h+=t,i.s+=e,i.l+=n,this.setHSL(i.h,i.s,i.l)}add(t){return this.r=Math.min(1,this.r+t.r),this.g=Math.min(1,this.g+t.g),this.b=Math.min(1,this.b+t.b),this}addScalar(t){return this.r=Math.min(1,this.r+t),this.g=Math.min(1,this.g+t),this.b=Math.min(1,this.b+t),this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}subScalar(t){return this.r=Math.min(1,this.r-t),this.g=Math.min(1,this.g-t),this.b=Math.min(1,this.b-t),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r=Math.min(1,this.r*t),this.g=Math.min(1,this.g*t),this.b=Math.min(1,this.b*t),this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}clone(){return(new this.constructor).copy(this)}}qt.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};class Wt{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}set(t,e,n,i,r,s,o,a,c,l,h,d,u,p,f,m){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=i,g[1]=r,g[5]=s,g[9]=o,g[13]=a,g[2]=c,g[6]=l,g[10]=h,g[14]=d,g[3]=u,g[7]=p,g[11]=f,g[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}extractBasis(t,e,n){return t.fromArray(this.elements,0),e.fromArray(this.elements,4),n.fromArray(this.elements,8),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1)}extractRotation(t){const e=new Zt,n=this.elements,i=t.elements,r=1/e.fromArray(t.elements,0).length(),s=1/e.fromArray(t.elements,4).length(),o=1/e.fromArray(t.elements,8).length();return n[0]=i[0]*r,n[1]=i[1]*r,n[2]=i[2]*r,n[4]=i[4]*s,n[5]=i[5]*s,n[6]=i[6]*s,n[8]=i[8]*o,n[9]=i[9]*o,n[10]=i[10]*o,this}makeRotationFromEuler(t){const e=this.elements,n=t.x,i=t.y,r=t.z,s=Math.cos(n),o=Math.sin(n),a=Math.cos(i),c=Math.sin(i),l=Math.cos(r),h=Math.sin(r);if(t.order===Xt.XYZ){const t=s*l,n=s*h,i=o*l,r=o*h;e[0]=a*l,e[4]=-a*h,e[8]=c,e[1]=n+i*c,e[5]=t-r*c,e[9]=-o*a,e[2]=r-t*c,e[6]=i+n*c,e[10]=s*a}else if(t.order===Xt.YXZ){const t=a*l,n=a*h,i=c*l,r=c*h;e[0]=t+r*o,e[4]=i*o-n,e[8]=s*c,e[1]=s*h,e[5]=s*l,e[9]=-o,e[2]=n*o-i,e[6]=r+t*o,e[10]=s*a}else if(t.order===Xt.ZXY){const t=a*l,n=a*h,i=c*l,r=c*h;e[0]=t-r*o,e[4]=-s*h,e[8]=i+n*o,e[1]=n+i*o,e[5]=s*l,e[9]=r-t*o,e[2]=-s*c,e[6]=o,e[10]=s*a}else if(t.order===Xt.ZYX){const t=s*l,n=s*h,i=o*l,r=o*h;e[0]=a*l,e[4]=i*c-n,e[8]=t*c+r,e[1]=a*h,e[5]=r*c+t,e[9]=n*c-i,e[2]=-c,e[6]=o*a,e[10]=s*a}else if(t.order===Xt.YZX){const t=s*a,n=s*c,i=o*a,r=o*c;e[0]=a*l,e[4]=r-t*h,e[8]=i*h+n,e[1]=h,e[5]=s*l,e[9]=-o*l,e[2]=-c*l,e[6]=n*h+i,e[10]=t-r*h}else if(t.order===Xt.XZY){const t=s*a,n=s*c,i=o*a,r=o*c;e[0]=a*l,e[4]=-h,e[8]=c*l,e[1]=t*h+r,e[5]=s*l,e[9]=n*h-i,e[2]=i*h-n,e[6]=o*l,e[10]=r*h+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){const e=this.elements,n=t.x,i=t.y,r=t.z,s=t.w,o=n+n,a=i+i,c=r+r,l=n*o,h=n*a,d=n*c,u=i*a,p=i*c,f=r*c,m=s*o,g=s*a,v=s*c;return e[0]=1-(u+f),e[4]=h-v,e[8]=d+g,e[1]=h+v,e[5]=1-(l+f),e[9]=p-m,e[2]=d-g,e[6]=p+m,e[10]=1-(l+u),e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}lookAt(t,e,n){const i=new Zt,r=new Zt,s=new Zt,o=this.elements;return s.copy(t).cross(e),0===s.lengthSquared()&&(s.z=1),s.normalize(),i.copy(n).cross(s),0===i.lengthSquared()&&(1===Math.abs(n.z)?s.x+=1e-4:s.z+=1e-4,s.normalize(),i.copy(n).cross(s)),i.normalize(),r.copy(s).cross(i),o[0]=i.x,o[4]=r.x,o[8]=s.x,o[1]=i.y,o[5]=r.y,o[9]=s.y,o[2]=i.z,o[6]=r.z,o[10]=s.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,s=n[0],o=n[4],a=n[8],c=n[12],l=n[1],h=n[5],d=n[9],u=n[13],p=n[2],f=n[6],m=n[10],g=n[14],v=n[3],y=n[7],x=n[11],_=n[15],M=i[0],w=i[4],S=i[8],b=i[12],L=i[1],P=i[5],A=i[9],T=i[13],E=i[2],C=i[6],D=i[10],N=i[14],I=i[3],R=i[7],z=i[11],U=i[15];return r[0]=s*M+o*L+a*E+c*I,r[4]=s*w+o*P+a*C+c*R,r[8]=s*S+o*A+a*D+c*z,r[12]=s*b+o*T+a*N+c*U,r[1]=l*M+h*L+d*E+u*I,r[5]=l*w+h*P+d*C+u*R,r[9]=l*S+h*A+d*D+u*z,r[13]=l*b+h*T+d*N+u*U,r[2]=p*M+f*L+m*E+g*I,r[6]=p*w+f*P+m*C+g*R,r[10]=p*S+f*A+m*D+g*z,r[14]=p*b+f*T+m*N+g*U,r[3]=v*M+y*L+x*E+_*I,r[7]=v*w+y*P+x*C+_*R,r[11]=v*S+y*A+x*D+_*z,r[15]=v*b+y*T+x*N+_*U,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],r=t[12],s=t[1],o=t[5],a=t[9],c=t[13],l=t[2],h=t[6],d=t[10],u=t[14];return t[3]*(+r*a*h-i*c*h-r*o*d+n*c*d+i*o*u-n*a*u)+t[7]*(+e*a*u-e*c*d+r*s*d-i*s*u+i*c*l-r*a*l)+t[11]*(+e*c*h-e*o*u-r*s*h+n*s*u+r*o*l-n*c*l)+t[15]*(-i*o*l-e*a*h+e*o*d+i*s*h-n*s*d+n*a*l)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t){const e=this.elements;return e[12]=t.x,e[13]=t.y,e[14]=t.z,this}getInverse(t,e=!1){const n=this.elements,i=t.elements,r=i[0],s=i[1],o=i[2],a=i[3],c=i[4],l=i[5],h=i[6],d=i[7],u=i[8],p=i[9],f=i[10],m=i[11],g=i[12],v=i[13],y=i[14],x=i[15],_=p*y*d-v*f*d+v*h*m-l*y*m-p*h*x+l*f*x,M=g*f*d-u*y*d-g*h*m+c*y*m+u*h*x-c*f*x,w=u*v*d-g*p*d+g*l*m-c*v*m-u*l*x+c*p*x,S=g*p*h-u*v*h-g*l*f+c*v*f+u*l*y-c*p*y,b=r*_+s*M+o*w+a*S;if(0===b){const t='THREE.Matrix4: .getInverse() can"t invert matrix, determinant is 0';if(!0===e)throw new Error(t);return console.warn(t),this.identity()}const L=1/b;return n[0]=_*L,n[1]=(v*f*a-p*y*a-v*o*m+s*y*m+p*o*x-s*f*x)*L,n[2]=(l*y*a-v*h*a+v*o*d-s*y*d-l*o*x+s*h*x)*L,n[3]=(p*h*a-l*f*a-p*o*d+s*f*d+l*o*m-s*h*m)*L,n[4]=M*L,n[5]=(u*y*a-g*f*a+g*o*m-r*y*m-u*o*x+r*f*x)*L,n[6]=(g*h*a-c*y*a-g*o*d+r*y*d+c*o*x-r*h*x)*L,n[7]=(c*f*a-u*h*a+u*o*d-r*f*d-c*o*m+r*h*m)*L,n[8]=w*L,n[9]=(g*p*a-u*v*a-g*s*m+r*v*m+u*s*x-r*p*x)*L,n[10]=(c*v*a-g*l*a+g*s*d-r*v*d-c*s*x+r*l*x)*L,n[11]=(u*l*a-c*p*a-u*s*d+r*p*d+c*s*m-r*l*m)*L,n[12]=S*L,n[13]=(u*v*o-g*p*o+g*s*f-r*v*f-u*s*y+r*p*y)*L,n[14]=(g*l*o-c*v*o-g*s*h+r*v*h+c*s*y-r*l*y)*L,n[15]=(c*p*o-u*l*o+u*s*h-r*p*h-c*s*f+r*l*f)*L,this}scale(t){const e=this.elements,n=t.x,i=t.y,r=t.z;return e[0]*=n,e[4]*=i,e[8]*=r,e[1]*=n,e[5]*=i,e[9]*=r,e[2]*=n,e[6]*=i,e[10]*=r,e[3]*=n,e[7]*=i,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){return this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1)}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1)}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1)}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1)}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),r=1-n,s=t.x,o=t.y,a=t.z,c=r*s,l=r*o;return this.set(c*s+n,c*o-i*a,c*a+i*o,0,c*o+i*a,l*o+n,l*a-i*s,0,c*a-i*o,l*a+i*s,r*a*a+n,0,0,0,0,1)}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1)}makeShear(t,e,n){return this.set(1,e,n,0,t,1,n,0,t,e,1,0,0,0,0,1)}compose(t,e,n){return this.makeRotationFromQuaternion(e),this.scale(n),this.setPosition(t),this}decompose(t,e,n){const i=new Zt,r=new Wt,s=this.elements;let o=i.set(s[0],s[1],s[2]).length();const a=i.set(s[4],s[5],s[6]).length(),c=i.set(s[8],s[9],s[10]).length();this.determinant()<0&&(o=-o),t.x=s[12],t.y=s[13],t.z=s[14],r.copy(this);const l=1/o,h=1/a,d=1/c;return r.elements[0]*=l,r.elements[1]*=l,r.elements[2]*=l,r.elements[4]*=h,r.elements[5]*=h,r.elements[6]*=h,r.elements[8]*=d,r.elements[9]*=d,r.elements[10]*=d,e.setFromRotationMatrix(r),n.set(o,a,c),this}makePerspective(t,e,n,i,r,s){return this.set(2*r/(e-t),0,(e+t)/(e-t),0,0,2*r/(n-i),(n+i)/(n-i),0,0,0,-(s+r)/(s-r),-2*s*r/(s-r),0,0,-1,0)}makeOrthographic(t,e,n,i,r,s){const o=1/(e-t),a=1/(n-i),c=1/(s-r),l=(e+t)*o,h=(n+i)*a,d=(s+r)*c;return this.set(2*o,0,0,-l,0,2*a,0,-h,0,0,-2*c,-d,0,0,0,1)}equals(t){const e=t.elements;for(let t=0;t<16;t++)if(this.elements[t]!==e[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}clone(){return(new this.constructor).copy(this)}}var Xt;!function(t){t[t.XYZ=0]="XYZ",t[t.YZX=1]="YZX",t[t.ZXY=2]="ZXY",t[t.XZY=3]="XZY",t[t.YXZ=4]="YXZ",t[t.ZYX=5]="ZYX"}(Xt||(Xt={}));class Yt{constructor(t=0,e=0,n=0){this._order=Yt.DefaultOrder,this._x=t,this._y=e,this._z=n}get x(){return this._x}set x(t){this._x=t}get y(){return this._y}set y(t){this._y=t}get z(){return this._z}set z(t){this._z=t}get order(){return this._order}set order(t){this._order=t}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._order=i,this}copy(t){return this.set(t.x,t.y,t.z,t.order)}setFromRotationMatrix(t,e=this.order){const n=r.clamp,i=t.elements,s=i[0],o=i[4],a=i[8],c=i[1],l=i[5],h=i[9],d=i[2],u=i[6],p=i[10];return e===Xt.XYZ?(this._y=Math.asin(n(a,-1,1)),Math.abs(a)<.99999?(this._x=Math.atan2(-h,p),this._z=Math.atan2(-o,s)):(this._x=Math.atan2(u,l),this._z=0)):e===Xt.YXZ?(this._x=Math.asin(-n(h,-1,1)),Math.abs(h)<.99999?(this._y=Math.atan2(a,p),this._z=Math.atan2(c,l)):(this._y=Math.atan2(-d,s),this._z=0)):e===Xt.ZXY?(this._x=Math.asin(n(u,-1,1)),Math.abs(u)<.99999?(this._y=Math.atan2(-d,p),this._z=Math.atan2(-o,l)):(this._y=0,this._z=Math.atan2(c,s))):e===Xt.ZYX?(this._y=Math.asin(-n(d,-1,1)),Math.abs(d)<.99999?(this._x=Math.atan2(u,p),this._z=Math.atan2(c,s)):(this._x=0,this._z=Math.atan2(-o,l))):e===Xt.YZX?(this._z=Math.asin(n(c,-1,1)),Math.abs(c)<.99999?(this._x=Math.atan2(-h,l),this._y=Math.atan2(-d,s)):(this._x=0,this._y=Math.atan2(a,p))):e===Xt.XZY&&(this._z=Math.asin(-n(o,-1,1)),Math.abs(o)<.99999?(this._x=Math.atan2(u,l),this._y=Math.atan2(a,s)):(this._x=Math.atan2(-h,p),this._y=0)),this.order=e,this}setFromQuaternion(t,e){const n=new Wt;return n.makeRotationFromQuaternion(t),this.setFromRotationMatrix(n,e)}reorder(t){const e=new jt;return e.setFromEuler(this),this.setFromQuaternion(e,t)}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.order===this.order}fromArray(t){return this.set(t[0],t[1],t[2],t[3]||this.order)}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.order,t}clone(){return(new this.constructor).copy(this)}}Yt.DefaultOrder=Xt.XYZ;class jt{constructor(t=0,e=0,n=0,i=1){this._x=t,this._y=e,this._z=n,this._w=i}get x(){return this._x}set x(t){this._x=t}get y(){return this._y}set y(t){this._y=t}get z(){return this._z}set z(t){this._z=t}get w(){return this._w}set w(t){this._w=t}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this}copy(t){return this.set(t.x,t.y,t.z,t.w)}setFromEuler(t){const{x:e,y:n,z:i,order:r}=t,s=Math.cos,o=Math.sin,a=s(e/2),c=s(n/2),l=s(i/2),h=o(e/2),d=o(n/2),u=o(i/2);return r===Xt.XYZ?this.set(h*c*l+a*d*u,a*d*l-h*c*u,a*c*u+h*d*l,a*c*l-h*d*u):r===Xt.YXZ?this.set(h*c*l+a*d*u,a*d*l-h*c*u,a*c*u-h*d*l,a*c*l+h*d*u):r===Xt.ZXY?this.set(h*c*l-a*d*u,a*d*l+h*c*u,a*c*u+h*d*l,a*c*l-h*d*u):r===Xt.ZYX?this.set(h*c*l-a*d*u,a*d*l+h*c*u,a*c*u-h*d*l,a*c*l+h*d*u):r===Xt.YZX?this.set(h*c*l+a*d*u,a*d*l+h*c*u,a*c*u-h*d*l,a*c*l-h*d*u):r===Xt.XZY?this.set(h*c*l-a*d*u,a*d*l-h*c*u,a*c*u+h*d*l,a*c*l+h*d*u):this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this.set(t.x*i,t.y*i,t.z*i,Math.cos(n))}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],r=e[8],s=e[1],o=e[5],a=e[9],c=e[2],l=e[6],h=e[10],d=n+o+h;let u;return d>0?(u=.5/Math.sqrt(d+1),this.set((l-a)*u,(r-c)*u,(s-i)*u,.25/u)):n>o&&n>h?(u=2*Math.sqrt(1+n-o-h),this.set(.25*u,(i+s)/u,(r+c)/u,(l-a)/u)):o>h?(u=2*Math.sqrt(1+o-n-h),this.set((i+s)/u,.25*u,(a+l)/u,(r-c)/u)):(u=2*Math.sqrt(1+h-n-o),this.set((r+c)/u,(a+l)/u,.25*u,(s-i)/u))}setFromUnitVectors(t,e){const n=new Zt;let i=t.dot(e)+1;return i<1e-6?(i=0,Math.abs(t.x)>Math.abs(t.z)?n.set(-t.y,t.x,0):n.set(0,-t.z,t.y)):n.copy(t).cross(e),this._x=n.x,this._y=n.y,this._z=n.z,this._w=i,this.normalize()}inverse(){return this.conjugate().normalize()}conjugate(){return this.set(-1*this.x,-1*this.y,-1*this.z,this.w)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSquared(){const{x:t,y:e,z:n,w:i}=this;return t*t+e*e+n*n+i*i}length(){return Math.sqrt(this.lengthSquared())}normalize(){let t=this.length();return 0===t?this.set(0,0,0,1):(t=1/t,this.set(this.x*t,this.y*t,this.z*t,this.w*t))}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t.x,i=t.y,r=t.z,s=t.w,o=e.x,a=e.y,c=e.z,l=e.w;return this.set(n*l+s*o+i*c-r*a,i*l+s*a+r*o-n*c,r*l+s*c+n*a-i*o,s*l-n*o-i*a-r*c)}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const{x:n,y:i,z:r,w:s}=this;let o=s*t.w+n*t.x+i*t.y+r*t.z;if(o<0?(this.set(-t.x,-t.y,-t.z,-t.w),o=-o):this.copy(t),o>=1)return this.set(n,i,r,s);const a=Math.sqrt(1-o*o);if(Math.abs(a)<.001)return this.set(.5*(n+this.x),.5*(i+this.y),.5*(r+this.z),.5*(s+this.w));const c=Math.atan2(a,o),l=Math.sin((1-e)*c)/a,h=Math.sin(e*c)/a;return this.set(n*l+this.x*h,i*l+this.y*h,r*l+this.z*h,s*l+this.w*h)}equals(t){const{x:e,y:n,z:i,w:r}=this;return t.x===e&&t.y===n&&t.z===i&&t.w===r}fromArray(t,e=0){return this.set(t[e],t[e+1],t[e+2],t[e+3])}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}clone(){return(new this.constructor).copy(this)}}class Zt{constructor(t=0,e=0,n=0){this._x=t,this._y=e,this._z=n}get x(){return this._x}set x(t){this._x=t}get y(){return this._y}set y(t){this._y=t}get z(){return this._z}set z(t){this._z=t}set(t,e,n){return this._x=t,this._y=e,this._z=n,this}setScalar(t){return this.set(t,t,t)}copy(t){return this.set(t.x,t.y,t.z)}add(t){return this.set(this.x+t.x,this.y+t.y,this.z+t.z)}addScalar(t){return this.set(this.x+t,this.y+t,this.z+t)}sub(t){return this.set(this.x-t.x,this.y-t.y,this.z-t.z)}subScalar(t){return this.set(this.x-t,this.y-t,this.z-t)}multiply(t){return this.set(this.x*t.x,this.y*t.y,this.z*t.z)}multiplyScalar(t){return this.set(this.x*t,this.y*t,this.z*t)}divide(t){return this.set(this.x/t.x,this.y/t.y,this.z/t.z)}divideScalar(t){return this.set(this.x/t,this.y/t,this.z/t)}applyEuler(t){const e=new jt;return this.applyQuaternion(e.setFromEuler(t))}applyAxisAngle(t,e){const n=new jt;return this.applyQuaternion(n.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.set(r[0]*e+r[3]*n+r[6]*i,r[1]*e+r[4]*n+r[7]*i,r[2]*e+r[5]*n+r[8]*i)}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=t.elements,s=1/(r[3]*e+r[7]*n+r[11]*i+r[15]);return this.set((r[0]*e+r[4]*n+r[8]*i+r[12])*s,(r[1]*e+r[5]*n+r[9]*i+r[13])*s,(r[2]*e+r[6]*n+r[10]*i+r[14])*s)}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,r=t.x,s=t.y,o=t.z,a=t.w,c=a*e+s*i-o*n,l=a*n+o*e-r*i,h=a*i+r*n-s*e,d=-r*e-s*n-o*i;return this.set(c*a+d*-r+l*-o-h*-s,l*a+d*-s+h*-r-c*-o,h*a+d*-o+c*-s-l*-r)}transformDirection(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.set(r[0]*e+r[4]*n+r[8]*i,r[1]*e+r[5]*n+r[9]*i,r[2]*e+r[6]*n+r[10]*i).normalize()}min(t){return this.set(Math.min(this.x,t.x),Math.min(this.y,t.y),Math.min(this.z,t.z))}max(t){return this.set(Math.max(this.x,t.x),Math.max(this.y,t.y),Math.max(this.z,t.z))}clamp(t,e){return this.set(Math.max(t.x,Math.min(e.x,this.x)),Math.max(t.y,Math.min(e.y,this.y)),Math.max(t.z,Math.min(e.z,this.z)))}negate(){return this.set(-this.x,-this.y,-this.z)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSquared(){const t=this.x,e=this.y,n=this.z;return t*t+e*e+n*n}length(){const t=this.x,e=this.y,n=this.z;return Math.sqrt(t*t+e*e+n*n)}setLength(t){return this.normalize().multiplyScalar(t)}manhattanLength(){const t=this.x,e=this.y,n=this.z;return Math.abs(t)+Math.abs(e)+Math.abs(n)}normalize(){return this.divideScalar(this.length()||1)}lerp(t,e){return this.set((t.x-this.x)*e,(t.y-this.y)*e,(t.z-this.z)*e)}lerpVectors(t,e,n){return this.set(e.x-t.x,e.y-t.y,e.z-t.z).multiplyScalar(n).add(t)}cross(t){const e=this.x,n=this.y,i=this.z,r=t.x,s=t.y,o=t.z;return this.set(n*o-i*s,i*r-e*o,e*s-n*r)}projectOnVector(t){const e=t.dot(this)/t.lengthSquared();return this.copy(t).multiplyScalar(e)}projectOnPlane(t){const e=new Zt;return e.copy(this).projectOnVector(t),this.sub(e)}reflect(t){const e=new Zt;return this.sub(e.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=this.dot(t)/Math.sqrt(this.lengthSquared()*t.lengthSquared());return Math.acos(r.clamp(e,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}setFromMatrixPosition(t){const e=t.elements;return this.set(e[12],e[13],e[14])}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}fromArray(t,e=0){return this.set(t[e],t[e+1],t[e+2])}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}clone(){return(new this.constructor).copy(this)}}const Qt={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n",alphatest_fragment:"#ifdef ALPHATEST\n\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n\n#endif\n",aomap_fragment:"#ifdef USE_AOMAP\n\n\t// reads channel R, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\n\t#endif\n\n#endif\n",aomap_pars_fragment:"#ifdef USE_AOMAP\n\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n\n#endif",begin_vertex:"\nvec3 transformed = vec3( position );\n",beginnormal_vertex:"\nvec3 objectNormal = vec3( normal );\n",bsdfs:'float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\n\tif( decayExponent > 0.0 ) {\n\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\n\t\t// based upon Frostbite 3 Moving to Physically-based Rendering\n\t\t// page 32, equation 26: E[window1]\n\t\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t// this is intended to be used on spot and point lights who are represented as luminous intensity\n\t\t// but who must be converted to luminous irradiance for surface lighting calculation\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n\n#else\n\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\n#endif\n\n\t}\n\n\treturn 1.0;\n\n}\n\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\n\treturn RECIPROCAL_PI * diffuseColor;\n\n} // validated\n\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\n\t// Original approximation by Christophe Schlick \'94\n\t// float fresnel = pow( 1.0 - dotLH, 5.0 );\n\n\t// Optimized variant (presented by Epic at SIGGRAPH \'13)\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n\n} // validated\n\n// Microfacet Models for Refraction through Rough Surfaces - equation (34)\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n// alpha is "roughness squared" in Disney’s reparameterization\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\n\t// geometry term (normalized) = G(l)⋅G(v) / 4(n⋅l)(n⋅v)\n\t// also see #12151\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\n\treturn 1.0 / ( gl * gv );\n\n} // validated\n\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\n\tfloat a2 = pow2( alpha );\n\n\t// dotNL and dotNV are explicitly swapped. This is not a mistake.\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\n\treturn 0.5 / max( gv + gl, EPSILON );\n\n}\n\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n// alpha is "roughness squared" in Disney’s reparameterization\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1\n\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n\n}\n\n// GGX Distribution, Schlick Fresnel, GGX-Smith Visibility\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\n\tfloat alpha = pow2( roughness ); // UE4\'s roughness\n\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\n\tfloat D = D_GGX( alpha, dotNH );\n\n\treturn F * ( G * D );\n\n} // validated\n\n// Rect Area Light\n\n// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines\n// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt\n// code: https://github.com/selfshadow/ltc_code/\n\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\n\tfloat dotNV = saturate( dot( N, V ) );\n\n\t// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\n\treturn uv;\n\n}\n\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\n\t// Real-Time Area Lighting: a Journey from Research to Production (p.102)\n\t// An approximation of the form factor of a horizon-clipped rectangle.\n\n\tfloat l = length( f );\n\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n\n}\n\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\n\tfloat x = dot( v1, v2 );\n\n\tfloat y = abs( x );\n\n\t// rational polynomial approximation to theta / sin( theta ) / 2PI\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\n\treturn cross( v1, v2 ) * theta_sintheta;\n\n}\n\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\n\t// bail if point is on back side of plane of light\n\t// assumes ccw winding order of light vertices\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\n\t// construct orthonormal basis around N\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system\n\n\t// compute transform\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\n\t// transform rect\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\n\t// project rect onto sphere\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\n\t// calculate vector form factor\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\n\t// adjust for horizon clipping\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\n\n\n\treturn vec3( result );\n\n}\n\n// End Rect Area Light\n\n// ref: https://www.unrealengine.com/blog/physically-based-shading-on-mobile - environmentBRDF for GGX on mobile\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\n\tvec4 r = roughness * c0 + c1;\n\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\n\treturn specularColor * AB.x + AB.y;\n\n} // validated\n\n\nfloat G_BlinnPhong_Implicit( ) {\n\n\t// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)\n\treturn 0.25;\n\n}\n\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n\n}\n\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\n\t//float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\t//float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\n\tfloat G = G_BlinnPhong_Implicit( );\n\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\n\treturn F * ( G * D );\n\n} // validated\n\n// source: http://simonstechblog.blogspot.ca/2011/12/microfacet-brdf.html\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\n\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n',bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\t// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\n\t// http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\n\n\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n\t\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\t\t// normalized\n\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif\n",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n\n#endif\n",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n\n#endif\n",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n\n",color_fragment:"#ifdef USE_COLOR\n\n\tdiffuseColor.rgb *= vColor;\n\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n",color_pars_vertex:"#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif",color_vertex:"#ifdef USE_COLOR\n\n\tvColor.xyz = color.xyz;\n\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\n\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\n// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.\n// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\n\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\n\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n}\n\n// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n\n}\n\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\n\treturn - distance * planeNormal + point;\n\n}\n\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n\n}\n\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n\n}\n\nmat3 transposeMat3( const in mat3 m ) {\n\n\tmat3 tmp;\n\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\n\treturn tmp;\n\n}\n\n// https://en.wikipedia.org/wiki/Relative_luminance\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\n\treturn dot( weights, color.rgb );\n\n}\n",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\n#define cubeUV_textureSize (1024.0)\n\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\n\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\t// Clamp the value to the max mip level counts. hard coded to 6 mips\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\n\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\t// float powScale = exp2(roughnessLevel + mipLevel);\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\t// float scale =  1.0 / exp2(roughnessLevel + 2.0 + mipLevel);\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\t// float mipOffset = 0.75*(1.0 - 1.0/exp2(mipLevel))/exp2(roughnessLevel);\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\n\tfloat rcpPowScale = 1.0 / powScale;\n\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\n\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\n\t// round to nearest mipmap if we are not interpolating.\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\n\t// Tri linear interpolation.\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\n\tvec4 result = mix(color10, color20, t);\n\n\treturn vec4(result.rgb, 1.0);\n}\n\n#endif\n",defaultnormal_vertex:"vec3 transformedNormal = normalMatrix * objectNormal;\n\n#ifdef FLIP_SIDED\n\n\ttransformedNormal = - transformedNormal;\n\n#endif\n",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n\n#endif\n",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n\n#endif\n",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n\n#endif\n",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\n\tuniform sampler2D emissiveMap;\n\n#endif\n",encodings_fragment:"  gl_FragColor = linearToOutputTexel( gl_FragColor );\n",encodings_pars_fragment:"// For a discussion of what this is, please read this: http://lousodrome.net/blog/light/2013/05/26/gamma-correct-and-hdr-rendering-in-a-32-bits-buffer/\n\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\n\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\n\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\n\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n//  return vec4( value.brg, ( 3.0 + 128.0 ) / 256.0 );\n}\n\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\n\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\n\n// LogLuv reference: http://graphicrants.blogspot.ca/2009/04/rgbm-color-encoding.html\n\n// M matrix, for encoding\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\n\n// Inverse M matrix, for decoding\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n",envmap_fragment:"#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\n\t\t// Transforming Normal Vectors with the Inverse Transformation\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\n\t\tvec2 sampleUV;\n\n\t\treflectVec = normalize( reflectVec );\n\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\n\t\treflectVec = normalize( reflectVec );\n\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\n\t#else\n\n\t\tvec4 envColor = vec4( 0.0 );\n\n\t#endif\n\n\tenvColor = envMapTexelToLinear( envColor );\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n",envmap_pars_fragment:"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n\n#ifdef USE_ENVMAP\n\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n\n#endif\n",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\n\t#else\n\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\n\t#endif\n\n#endif\n",envmap_vertex:"#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tvWorldPosition = worldPosition.xyz;\n\n\t#else\n\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#endif\n\n#endif\n",fog_vertex:"\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\n  varying float fogDepth;\n\n#endif\n",fog_fragment:"#ifdef USE_FOG\n\n\t#ifdef FOG_EXP2\n\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\n\t#endif\n\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n\n#endif\n",fog_pars_fragment:"#ifdef USE_FOG\n\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\n\t#ifdef FOG_EXP2\n\n\t\tuniform float fogDensity;\n\n\t#else\n\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\n\t#endif\n\n#endif\n",gradientmap_pars_fragment:"#ifdef TOON\n\n\tuniform sampler2D gradientMap;\n\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\n\t\t// dotNL will be from -1.0 to 1.0\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\n\t\t#ifdef USE_GRADIENTMAP\n\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\n\t\t#else\n\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\n\t\t#endif\n\n\n\t}\n\n#endif\n",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity; // factor of PI should not be present; included here to prevent breakage\n\n#endif\n",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\n\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\n\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\n\nvLightFront = vec3( 0.0 );\n\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\n\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n\n#if NUM_POINT_LIGHTS > 0\n\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if NUM_SPOT_LIGHTS > 0\n\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\t}\n\n#endif\n\n\n\n#if NUM_DIR_LIGHTS > 0\n\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if NUM_HEMI_LIGHTS > 0\n\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\n\t\t#endif\n\n\t}\n\n#endif\n",lights_pars:"uniform vec3 ambientLightColor;\n\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\n\tvec3 irradiance = ambientLightColor;\n\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\tirradiance *= PI;\n\n\t#endif\n\n\treturn irradiance;\n\n}\n\n#if NUM_DIR_LIGHTS > 0\n\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\n\t}\n\n#endif\n\n\n#if NUM_POINT_LIGHTS > 0\n\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\n\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\n\t}\n\n#endif\n\n\n#if NUM_SPOT_LIGHTS > 0\n\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\n\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\n\t\tif ( angleCos > spotLight.coneCos ) {\n\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\n\t\t} else {\n\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\n\t\t}\n\t}\n\n#endif\n\n\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\n\t// Pre-computed values of LinearTransformedCosine approximation of BRDF\n\t// BRDF approximation Texture is 64x64\n\tuniform sampler2D ltc_1; // RGBA Float\n\tuniform sampler2D ltc_2; // RGBA Float\n\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n\n#endif\n\n\n#if NUM_HEMI_LIGHTS > 0\n\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\t\tirradiance *= PI;\n\n\t\t#endif\n\n\t\treturn irradiance;\n\n\t}\n\n#endif\n\n\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\n\t\t\t// TODO: replace with properly filtered cubemaps and access the irradiance LOD level, be it the last LOD level\n\t\t\t// of a specular cubemap, or just the default level of a specially created irradiance cubemap.\n\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\n\t\t\t#else\n\n\t\t\t\t// force the bias high to get the last LOD level as it is the most blurred.\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\n\t\t\t#endif\n\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\n\t\t#else\n\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\n\t\t#endif\n\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\n\t}\n\n\t// taken from here: http://casual-effects.blogspot.ca/2011/08/plausible-environment-lighting-in-two.html\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\n\t\t//float envMapWidth = pow( 2.0, maxMIPLevelScalar );\n\t\t//float desiredMIPLevel = log2( envMapWidth * sqrt( 3.0 ) ) - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\n\t\t// clamp to allowable LOD ranges.\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\n\t}\n\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\n\t\t#endif\n\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\n\t\t\t#else\n\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\n\t\t\t#endif\n\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\n\t\t\t#else\n\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\n\t\t\t#endif\n\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\n\t\t\t#else\n\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\n\t\t\t#endif\n\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\n\t\t#endif\n\n\t\treturn envMapColor.rgb * envMapIntensity;\n\n\t}\n\n#endif\n",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n\nstruct BlinnPhongMaterial {\n\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n\n};\n\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\n\t#ifdef TOON\n\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\n\t#else\n\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\n\t#endif\n\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\tirradiance *= PI; // punctual light\n\n\t#endif\n\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n\n}\n\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n\n#define Material_LightProbeLOD( material )\t(0)\n",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat ); // Burley clearcoat model\n\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n\n};\n\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\n\n// Clear coat directional hemishperical reflectance (this approximation should be improved)\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n\n}\n\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight; // counterclockwise\n\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\n\t\t// LTC Fresnel Approximation by Stephen Hill\n\t\t// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\n\t}\n\n#endif\n\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\n\tvec3 irradiance = dotNL * directLight.color;\n\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\tirradiance *= PI; // punctual light\n\n\t#endif\n\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n\t#ifndef STANDARD\n\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\n\t#endif\n\n}\n\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n}\n\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\n\t#ifndef STANDARD\n\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\n\t#endif\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\n\n// ref: https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n\n}\n",lights_template:"\n\nGeometricContext geometry;\n\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\n\nIncidentLight directLight;\n\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tPointLight pointLight;\n\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tpointLight = pointLights[ i ];\n\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\n#endif\n\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tSpotLight spotLight;\n\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tspotLight = spotLights[ i ];\n\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\n#endif\n\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tDirectionalLight directionalLight;\n\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tdirectionalLight = directionalLights[ i ];\n\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\n#endif\n\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\n\tRectAreaLight rectAreaLight;\n\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\n\t}\n\n#endif\n\n#if defined( RE_IndirectDiffuse )\n\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\t\tlightMapIrradiance *= PI; // factor of PI should not be present; included here to prevent breakage\n\n\t\t#endif\n\n\t\tirradiance += lightMapIrradiance;\n\n\t#endif\n\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\n\t\t}\n\n\t#endif\n\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\t// TODO, replace 8 with the real maxMIPLevel\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\n\t#endif\n\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n\n#endif\n\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\n\t// TODO, replace 8 with the real maxMIPLevel\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n\n#endif\n",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n\n#endif",logdepthbuf_pars_fragment:"#ifdef USE_LOGDEPTHBUF\n\n\tuniform float logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n#endif\n",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n\tuniform float logDepthBufFC;\n\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\n\t#else\n\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\n\t\tgl_Position.z *= gl_Position.w;\n\n\t#endif\n\n#endif\n",map_fragment:"#ifdef USE_MAP\n\n\tvec4 texelColor = texture2D( map, vUv );\n\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n\n#endif\n",map_pars_fragment:"#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif\n",map_particle_fragment:"#ifdef USE_MAP\n\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n\n#endif\n",map_particle_pars_fragment:"#ifdef USE_MAP\n\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n\n#endif\n",metalnessmap_fragment:"float metalnessFactor = metalness;\n\n#ifdef USE_METALNESSMAP\n\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\n\t// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\tmetalnessFactor *= texelMetalness.b;\n\n#endif\n",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\n\tuniform sampler2D metalnessMap;\n\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n\n#endif\n",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\n\t#ifndef USE_MORPHNORMALS\n\n\tuniform float morphTargetInfluences[ 8 ];\n\n\t#else\n\n\tuniform float morphTargetInfluences[ 4 ];\n\n\t#endif\n\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\n\t#ifndef USE_MORPHNORMALS\n\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\n\t#endif\n\n#endif\n",normal_fragment:"#ifdef FLAT_SHADED\n\n\t// Workaround for Adreno/Nexus5 not able able to do dFdx( vViewPosition ) ...\n\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n\n#else\n\n\tvec3 normal = normalize( vNormal );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n\t#endif\n\n#endif\n\n#ifdef USE_NORMALMAP\n\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\n#elif defined( USE_BUMPMAP )\n\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n#endif\n",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\n\t// Per-Pixel Tangent Space Normal Mapping\n\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\n\t\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\n\t}\n\n#endif\n",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\n\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\n\nconst float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)\nconst float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)\n\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\n\nconst float ShiftRight8 = 1. / 256.;\n\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8; // tidy overflow\n\treturn r * PackUpscale;\n}\n\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\n\n// NOTE: viewZ/eyeZ is < 0 when in front of the camera per OpenGL conventions\n\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\n\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\n\t// Get get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.\n\tgl_FragColor.rgb *= gl_FragColor.a;\n\n#endif\n",project_vertex:"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\ngl_Position = projectionMatrix * mvPosition;\n",dithering_fragment:"#if defined( DITHERING )\n\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n\n#endif\n",dithering_pars_fragment:"#if defined( DITHERING )\n\n\t// based on https://www.shadertoy.com/view/MslGR8\n\tvec3 dithering( vec3 color ) {\n\t\t//Calculate grid position\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\n\t\t//Shift the individual colors differently, thus making it even harder to see the dithering pattern\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\n\t\t//modify shift acording to grid position.\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\n\t\t//shift the color by dither_shift\n\t\treturn color + dither_shift_RGB;\n\t}\n\n#endif\n",roughnessmap_fragment:"float roughnessFactor = roughness;\n\n#ifdef USE_ROUGHNESSMAP\n\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\n\t// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\troughnessFactor *= texelRoughness.g;\n\n#endif\n",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\n\tuniform sampler2D roughnessMap;\n\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHTS > 0\n\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHTS > 0\n\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\n\t#endif\n\n\t\n\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\n\t}\n\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\n\t\tvec2 f = fract( uv * size + 0.5 );\n\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\n\t\treturn c;\n\n\t}\n\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\n\t\tfloat shadow = 1.0;\n\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\n\t\t// if ( something && something ) breaks ATI OpenGL shader compiler\n\t\t// if ( all( something, something ) ) using this instead\n\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n\t\tbool frustumTest = all( frustumTestVec );\n\n\t\tif ( frustumTest ) {\n\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\n\t\t#else // no percentage-closer filtering:\n\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\n\t\t#endif\n\n\t\t}\n\n\t\treturn shadow;\n\n\t}\n\n\t// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\n\t// vector suitable for 2D texture mapping. This code uses the following layout for the\n\t// 2D texture:\n\t//\n\t// xzXZ\n\t//  y Y\n\t//\n\t// Y - Positive y direction\n\t// y - Negative y direction\n\t// X - Positive x direction\n\t// x - Negative x direction\n\t// Z - Positive z direction\n\t// z - Negative z direction\n\t//\n\t// Source and test bed:\n\t// https://gist.github.com/tschw/da10c43c467ce8afd0c4\n\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\n\t\t// Number of texels to avoid at the edge of each square\n\n\t\tvec3 absV = abs( v );\n\n\t\t// Intersect unit cube\n\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\n\t\t// Apply scale to avoid seams\n\n\t\t// two texels less per square (one texel will do for NEAREST)\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\n\t\t// Unwrap\n\n\t\t// space: -1 ... 1 range for each square\n\t\t//\n\t\t// #X##\t\tdim    := ( 4 , 2 )\n\t\t//  # #\t\tcenter := ( 1 , 1 )\n\n\t\tvec2 planar = v.xy;\n\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\n\t\tif ( absV.z >= almostOne ) {\n\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\n\t\t} else if ( absV.x >= almostOne ) {\n\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\n\t\t} else if ( absV.y >= almostOne ) {\n\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\n\t\t}\n\n\t\t// Transform to UV space\n\n\t\t// scale := 0.5 / dim\n\t\t// translate := ( center + 0.5 ) / dim\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\n\t}\n\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\n\t\t// for point lights, the uniform @vShadowCoord is re-purposed to hold\n\t\t// the vector from the light to the world-space position of the fragment.\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\n\t\t// dp = normalized distance from light to fragment position\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear ); // need to clamp?\n\t\tdp += shadowBias;\n\n\t\t// bd3D = base direction 3D\n\t\tvec3 bd3D = normalize( lightToPosition );\n\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\n\t\t#else // no percentage-closer filtering\n\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\n\t\t#endif\n\n\t}\n\n#endif\n",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHTS > 0\n\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHTS > 0\n\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\n\t#endif\n\n\t\n\n#endif\n",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHTS > 0\n\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\n\t}\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHTS > 0\n\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\n\t}\n\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\n\t}\n\n\t#endif\n\n\t\n\n#endif\n",shadowmask_pars_fragment:"float getShadowMask() {\n\n\tfloat shadow = 1.0;\n\n\t#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHTS > 0\n\n\tDirectionalLight directionalLight;\n\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\n\t}\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHTS > 0\n\n\tSpotLight spotLight;\n\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\n\t}\n\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n\n\tPointLight pointLight;\n\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\n\t}\n\n\t#endif\n\n\t\n\n\t#endif\n\n\treturn shadow;\n\n}\n",skinbase_vertex:"#ifdef USE_SKINNING\n\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\t#ifdef BONE_TEXTURE\n\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\n\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t#else\n\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\n\t\t}\n\n\t#endif\n\n#endif\n",skinning_vertex:"#ifdef USE_SKINNING\n\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n\n#endif\n",skinnormal_vertex:"#ifdef USE_SKINNING\n\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\n#endif\n",specularmap_fragment:"float specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n\n#else\n\n\tspecularStrength = 1.0;\n\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\n\tuniform sampler2D specularMap;\n\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n\n#endif\n",tonemapping_pars_fragment:"#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\n\n// exposure only\nvec3 LinearToneMapping( vec3 color ) {\n\n\treturn toneMappingExposure * color;\n\n}\n\n// source: https://www.cs.utah.edu/~reinhard/cdrom/\nvec3 ReinhardToneMapping( vec3 color ) {\n\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n\n}\n\n// source: http://filmicgames.com/archives/75\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\n\t// John Hable's filmic operator from Uncharted 2 video game\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n\n}\n\n// source: http://filmicgames.com/archives/75\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\n\t// optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n\n}\n",uv_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\n\tvarying vec2 vUv;\n\n#endif",uv_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n\n#endif\n",uv_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvarying vec2 vUv2;\n\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvUv2 = uv2;\n\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\n#endif\n",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\n\nvarying vec3 vWorldPosition;\n\nvoid main() {\n\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n\n}\n",cube_vert:"varying vec3 vWorldPosition;\n\n#include <common>\n\nvoid main() {\n\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n\tgl_Position.z = gl_Position.w; // set z to camera.far\n\n}\n",depth_frag:"#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\n\t#endif\n\n}\n",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n}\n",distanceRGBA_frag:"#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n",distanceRGBA_vert:"#define DISTANCE\n\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvWorldPosition = worldPosition.xyz;\n\n}\n",equirect_frag:"uniform sampler2D tEquirect;\n\nvarying vec3 vWorldPosition;\n\n#include <common>\n\nvoid main() {\n\n\tvec3 direction = normalize( vWorldPosition );\n\n\tvec2 sampleUV;\n\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n}\n",equirect_vert:"varying vec3 vWorldPosition;\n\n#include <common>\n\nvoid main() {\n\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n}\n",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\n\nuniform float dashSize;\nuniform float totalSize;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\n\t\tdiscard;\n\n\t}\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\n\toutgoingLight = diffuseColor.rgb; // simple shader\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\n}\n",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <color_vertex>\n\n\tvLineDistance = scale * lineDistance;\n\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n}\n",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\n}\n",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_ENVMAP\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n\n}\n",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\nvarying vec3 vLightFront;\n\n#ifdef DOUBLE_SIDED\n\n\tvarying vec3 vLightBack;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\n\t#include <lightmap_fragment>\n\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\n\t#else\n\n\t\treflectedLight.directDiffuse = vLightFront;\n\n\t#endif\n\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",meshlambert_vert:"#define LAMBERT\n\nvarying vec3 vLightFront;\n\n#ifdef DOUBLE_SIDED\n\n\tvarying vec3 vLightBack;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",meshphong_frag:"#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",meshphong_vert:"#define PHONG\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",meshphysical_frag:"#define PHYSICAL\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",meshphysical_vert:"#define PHYSICAL\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",normal_frag:"#define NORMAL\n\nuniform float opacity;\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\n\tvarying vec3 vViewPosition;\n\n#endif\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n\nvoid main() {\n\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment>\n\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\n}\n",normal_vert:"#define NORMAL\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\n\tvarying vec3 vViewPosition;\n\n#endif\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\n\tvViewPosition = - mvPosition.xyz;\n\n#endif\n\n}\n",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\n\toutgoingLight = diffuseColor.rgb;\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\n}\n",points_vert:"uniform float size;\nuniform float scale;\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n\nvoid main() {\n\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\n\t#include <fog_fragment>\n\n}\n",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n\nvoid main() {\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n"},$t={common:{diffuse:{value:new qt(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new Ut},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Ft(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new qt(16777215)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new qt(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},uvTransform:{value:new Ut}}};class Kt{static merge(t){const e={};for(let n=0;n<t.length;n++){const i=this.clone(t[n]);for(const t in i)i.hasOwnProperty(t)&&(e[t]=i[t])}return e}static clone(t){const e={};for(const n in t)if(t.hasOwnProperty(n)){e[n]={};for(const i in t[n]){if(!t[n].hasOwnProperty(i))continue;const r=t[n][i];r&&(r instanceof qt||r instanceof Ut||r instanceof Wt||r instanceof Ft||r instanceof Zt||r instanceof s||r instanceof Bt)?e[n][i]=r.clone():Array.isArray(r)?e[n][i]=r.slice():e[n][i]=r}}return e}}const Jt={basic:{uniforms:Kt.merge([$t.common,$t.specularmap,$t.envmap,$t.aomap,$t.lightmap,$t.fog]),vertexShader:Qt.meshbasic_vert,fragmentShader:Qt.meshbasic_frag},lambert:{uniforms:Kt.merge([$t.common,$t.specularmap,$t.envmap,$t.aomap,$t.lightmap,$t.emissivemap,$t.fog,$t.lights,{emissive:{value:new qt(0)}}]),vertexShader:Qt.meshlambert_vert,fragmentShader:Qt.meshlambert_frag},phong:{uniforms:Kt.merge([$t.common,$t.specularmap,$t.envmap,$t.aomap,$t.lightmap,$t.emissivemap,$t.bumpmap,$t.normalmap,$t.displacementmap,$t.gradientmap,$t.fog,$t.lights,{emissive:{value:new qt(0)},specular:{value:new qt(1118481)},shininess:{value:30}}]),vertexShader:Qt.meshphong_vert,fragmentShader:Qt.meshphong_frag},standard:{uniforms:Kt.merge([$t.common,$t.envmap,$t.aomap,$t.lightmap,$t.emissivemap,$t.bumpmap,$t.normalmap,$t.displacementmap,$t.roughnessmap,$t.metalnessmap,$t.fog,$t.lights,{emissive:{value:new qt(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:Qt.meshphysical_vert,fragmentShader:Qt.meshphysical_frag},points:{uniforms:Kt.merge([$t.points,$t.fog]),vertexShader:Qt.points_vert,fragmentShader:Qt.points_frag},dashed:{uniforms:Kt.merge([$t.common,$t.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Qt.linedashed_vert,fragmentShader:Qt.linedashed_frag},depth:{uniforms:Kt.merge([$t.common,$t.displacementmap]),vertexShader:Qt.depth_vert,fragmentShader:Qt.depth_frag},normal:{uniforms:Kt.merge([$t.common,$t.bumpmap,$t.normalmap,$t.displacementmap,{opacity:{value:1}}]),vertexShader:Qt.normal_vert,fragmentShader:Qt.normal_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Qt.cube_vert,fragmentShader:Qt.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Qt.equirect_vert,fragmentShader:Qt.equirect_frag},distanceRGBA:{uniforms:Kt.merge([$t.common,$t.displacementmap,{referencePosition:{value:new Zt},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Qt.distanceRGBA_vert,fragmentShader:Qt.distanceRGBA_frag},shadow:{uniforms:Kt.merge([$t.lights,$t.fog,{color:{value:new qt(0)},opacity:{value:1}}]),vertexShader:Qt.shadow_vert,fragmentShader:Qt.shadow_frag}};Jt.physical={uniforms:Kt.merge([Jt.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:Qt.meshphysical_vert,fragmentShader:Qt.meshphysical_frag};class te{constructor(t,e=1){this.name="",this.density=25e-5,t instanceof qt?this.color=(new qt).copy(t):"number"==typeof t?this.color=(new qt).setHex(t):"string"==typeof t&&(this.color=(new qt).setStyle(t)),this.density=e}copy(t){return this.color.copy(t.color),this.density=t.density,this}clone(){return new this.constructor(this.color,this.density).copy(this)}}class ee{constructor(t,e=1,n=1e3){this.name="",this.near=1,this.far=1e3,t instanceof qt?this.color=(new qt).copy(t):"number"==typeof t?this.color=(new qt).setHex(t):"string"==typeof t&&(this.color=(new qt).setStyle(t)),this.near=e,this.far=n}copy(t){return this.color.copy(t.color),this.near=t.near,this.far=t.far,this}clone(){return new this.constructor(this.color,this.near,this.far).copy(this)}}class ne extends se{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new Wt,this.projectionMatrix=new Wt}updateMatrixWorld(t=!1){return super.updateMatrixWorld(t),this.matrixWorldInverse.getInverse(this.matrixWorld),this}copy(t,e=!0){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this}get worldDirection(){return(new Zt).set(0,0,-1).applyQuaternion(this.worldQuaternion)}clone(){return(new this.constructor).copy(this)}}class ie{constructor(){this.mask=1}set(t){this.mask=1<<t|0}enable(t){this.mask|=1<<t|0}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}test(t){return 0!=(this.mask&t.mask)}}let re=0;class se extends zt{constructor(){super(...arguments),this.id=re++,this.uuid=r.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=(new Zt).copy(se.DefaultUp),this.matrix=new Wt,this.matrixWorld=new Wt,this.matrixAutoUpdate=se.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new ie,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={},this.position=new Zt,this.rotation=new Yt,this.quaternion=new jt,this.scale=new Zt(1,1,1),this.modelViewMatrix=new Wt,this.normalMatrix=new Wt}updateMatrix(){return this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0,this}updateMatrixWorld(t=!1){if(this.matrixAutoUpdate)return this.updateMatrix();(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t);return this}raycast(t,e){}applyMatrix(t){return this.matrix.multiplyMatrices(t,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale),this}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){return this.quaternion.setFromAxisAngle(t,e),this}setRotationFromEuler(t){return this.quaternion.setFromEuler(t),this}setRotationFromMatrix(t){return this.quaternion.setFromRotationMatrix(t),this}setRotationFromQuaternion(t){return this.quaternion.copy(t),this}rotateOnAxis(t,e){const n=new jt;return n.setFromAxisAngle(t,e),this.quaternion.multiply(n),this}rotateOnWorldAxis(t,e){const n=new jt;return n.setFromAxisAngle(t,e),this.quaternion.premultiply(n),this}rotateX(t){return this.rotateOnAxis(new Zt(1,0,0),t)}rotateY(t){return this.rotateOnAxis(new Zt(0,1,0),t)}rotateZ(t){return this.rotateOnAxis(new Zt(0,0,1),t)}translateOnAxis(t,e){const n=new Zt;return n.copy(t).applyQuaternion(this.quaternion),this.position.add(n.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(new Zt(1,0,0),t)}translateY(t){return this.translateOnAxis(new Zt(0,1,0),t)}translateZ(t){return this.translateOnAxis(new Zt(0,0,1),t)}localToWorld(t){return t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return t.applyMatrix4((new Wt).getInverse(this.matrixWorld))}lookAt(t){const e=new Wt,n=new Zt;return this instanceof ne?e.lookAt(this.position,n,this.up):e.lookAt(n,this.position,this.up),this.quaternion.setFromRotationMatrix(e),this}add(t,...e){if(e.length>1){for(let t=0;t<e.length;t++)this.add(e[t]);return this}return t===this?(console.error(`THREE.Object3D.add: object can't be added as a child of itself. ${t}`),this):(null!==t.parent&&t.parent.remove(t),t.parent=this,t.dispatchEvent({type:"added"}),this.children.push(t),this)}remove(t,...e){if(e.length>1){for(let t=0;t<e.length;t++)this.remove(e[t]);return this}const n=this.children.indexOf(t);return-1!==n&&(t.parent=null,t.dispatchEvent({type:"removed"}),this.children.splice(n,1)),this}get worldPosition(){return this.updateMatrixWorld(!0),(new Zt).setFromMatrixPosition(this.matrixWorld)}get worldQuaternion(){const t=new Zt,e=new Zt,n=new jt;return this.updateMatrixWorld(!0),this.matrixWorld.decompose(t,n,e),n}get worldRotation(){return(new Yt).setFromQuaternion(this.worldQuaternion,this.rotation.order)}get worldScale(){const t=new Zt,e=new jt,n=new Zt;return this.updateMatrixWorld(!0),this.matrixWorld.decompose(t,e,n),n}get worldDirection(){return(new Zt).set(0,0,1).applyQuaternion(this.worldQuaternion)}traverse(t){t(this);for(let e=0,n=this.children.length;e<n;e++)this.children[e].traverse(t)}traverseVisible(t){if(!1!==this.visible){t(this);for(let e=0,n=this.children.length;e<n;e++)this.children[e].traverseVisible(t)}}traverseAncestors(t){null!==this.parent&&(t(this.parent),this.parent.traverseAncestors(t))}clone(t=!1){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++)this.add(t.children[e].clone());return this}}se.DefaultUp=new Zt(0,1,0),se.DefaultMatrixAutoUpdate=!0;class oe extends se{constructor(){super(...arguments),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0}copy(t){return super.copy(t),null!==t.background&&(this.background=t.background.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this}clone(){return(new this.constructor).copy(this)}}let ae=0;class ce extends zt{constructor(){super(...arguments),this.id=ae++,this.uuid=r.generateUUID(),this.type="Material",this.alphaTest=0,this.blending=u,this.blendDst=S,this.blendDstAlpha=null,this.blendEquation=p,this.blendEquationAlpha=null,this.blendSrc=w,this.blendSrcAlpha=null,this.clipIntersection=!1,this.clippingPlanes=null,this.clipShadows=!1,this.colorWrite=!0,this.depthFunc=E,this.depthTest=!0,this.depthWrite=!0,this.dithering=!1,this.flatShading=!1,this.fog=!0,this.lights=!0,this.morphTargets=!1,this.name="",this.needsUpdate=!0,this.opacity=1,this.overdraw=0,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.premultipliedAlpha=!1,this.side=a,this.transparent=!1,this.userData={},this.vertexColors=d,this.visible=!0}setValues(t){if(void 0===t)return this;for(const e in t){if(!t.hasOwnProperty(e))continue;const n=t[e];if(void 0===n){console.warn(`THREE.Material: "${e}" parameter is undefined.`);continue}if("shading"===e){console.warn(`THREE.${this.type}: .shading has been removed. Use the boolean .flatShading instead.`),this.flatShading=n===h;continue}const i=this[e];void 0!==i?i&&i instanceof qt?n instanceof qt?i.copy(n):"number"==typeof n?i.setHex(n):"string"==typeof n&&i.setStyle(n):i&&i instanceof Zt&&n&&n instanceof Zt?i.copy(n):this[e]="overdraw"===e?Number(n):n:console.warn(`THREE.${this.type}: "${e}" is not a property of this material.`)}return this}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name,this.fog=t.fog,this.lights=t.lights,this.blending=t.blending,this.side=t.side,this.flatShading=t.flatShading,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.premultipliedAlpha=t.premultipliedAlpha,this.overdraw=t.overdraw,this.visible=t.visible,this.userData=JSON.parse(JSON.stringify(t.userData)),this.clipShadows=t.clipShadows,this.clipIntersection=t.clipIntersection;const e=t.clippingPlanes;let n=null;if(null!==e){const t=e.length;n=new Array(t);for(let i=0;i!==t;++i)n[i]=e[i].clone()}return this.clippingPlanes=n,this.shadowSide=t.shadowSide,this}dispose(){this.dispatchEvent({type:"dispose"})}}class le extends ce{constructor(t){super(),this.type="ShadowMaterial",this.color=(new qt).setHex(0),this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this}}class he extends ce{constructor(t){super(),this.type="SpriteMaterial",this.color=(new qt).setHex(16777215),this.fog=!1,this.lights=!1,this.map=null,this.rotation=0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.rotation=t.rotation,this}}class de extends ce{constructor(t){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,drawBuffers:!1,fragDepth:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.setValues(t)}copy(t){return this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=Kt.clone(t.uniforms),this.defines=t.defines,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.extensions=t.extensions,this}}class ue extends ce{constructor(t){super(),this.type="PointsMaterial",this.color=(new qt).setHex(16777215),this.lights=!1,this.map=null,this.size=1,this.sizeAttenuation=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this}}class pe extends ce{constructor(t){super(),this.type="MeshPhysicalMaterial",this.clearCoat=0,this.clearCoatRoughness=0,this.defines={PHYSICAL:""},this.reflectivity=.5,this.setValues(t)}copy(t){return this.defines={PHYSICAL:""},this.reflectivity=t.reflectivity,this.clearCoat=t.clearCoat,this.clearCoatRoughness=t.clearCoatRoughness,this}}class fe extends ce{constructor(t){super(),this.type="MeshStandardMaterial",this.alphaMap=null,this.aoMap=null,this.aoMapIntensity=1,this.bumpMap=null,this.bumpScale=1,this.color=(new qt).setHex(16777215),this.defines={STANDARD:""},this.displacementBias=0,this.displacementMap=null,this.displacementScale=1,this.emissive=(new qt).setHex(0),this.emissiveIntensity=1,this.emissiveMap=null,this.envMap=null,this.envMapIntensity=1,this.lightMap=null,this.lightMapIntensity=1,this.map=null,this.metalness=.5,this.metalnessMap=null,this.morphNormals=!1,this.morphTargets=!1,this.normalMap=null,this.normalScale=new Ft(1,1),this.refractionRatio=.98,this.roughness=.5,this.roughnessMap=null,this.skinning=!1,this.wireframe=!1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this}}class me extends ce{constructor(t){super(),this.type="MeshPhongMaterial",this.alphaMap=null,this.aoMap=null,this.aoMapIntensity=1,this.bumpMap=null,this.bumpScale=1,this.color=(new qt).setHex(16777215),this.combine=C,this.displacementBias=0,this.displacementMap=null,this.displacementScale=1,this.emissive=(new qt).setHex(0),this.emissiveIntensity=1,this.emissiveMap=null,this.envMap=null,this.lightMap=null,this.lightMapIntensity=1,this.map=null,this.morphNormals=!1,this.morphTargets=!1,this.normalMap=null,this.normalScale=new Ft(1,1),this.reflectivity=1,this.refractionRatio=.98,this.shininess=30,this.skinning=!1,this.specular=(new qt).setHex(1118481),this.specularMap=null,this.wireframe=!1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this}}class ge extends me{constructor(t){super(t),this.type="MeshToonMaterial",this.defines={TOON:""},this.gradientMap=null,this.setValues(t)}copy(t){return super.copy(t),this.gradientMap=t.gradientMap,this}}class ve extends ce{constructor(t){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new Ft(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}}class ye extends ce{constructor(t){super(),this.type="MeshLambertMaterial",this.aoMap=null,this.aoMapIntensity=1,this.alphaMap=null,this.color=(new qt).setHex(16777215),this.combine=C,this.emissive=(new qt).setHex(0),this.emissiveIntensity=1,this.emissiveMap=null,this.envMap=null,this.map=null,this.morphNormals=!0,this.morphTargets=!0,this.lightMap=null,this.lightMapIntensity=1,this.skinning=!1,this.specularMap=null,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this}}class xe extends ce{constructor(t){super(),this.type="MeshDepthMaterial",this.alphaMap=null,this.depthPacking=Rt,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.lights=!1,this.map=null,this.morphTargets=!1,this.skinning=!1,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class _e extends ce{constructor(t){super(),this.type="MeshDepthMaterial",this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.farDistance=1,this.fog=!1,this.lights=!1,this.map=null,this.morphTargets=!1,this.nearDistance=1,this.referencePosition=new Zt,this.skinning=!1,this.setValues(t)}copy(t){return super.copy(t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}class Me extends ce{constructor(t){super(),this.type="MeshBasicMaterial",this.alphaMap=null,this.aoMap=null,this.aoMapIntensity=1,this.color=(new qt).setHex(16777215),this.combine=C,this.envMap=null,this.lights=!1,this.lightMap=null,this.lightMapIntensity=1,this.map=null,this.morphTargets=!1,this.reflectivity=1,this.refractionRatio=.98,this.skinning=!1,this.specularMap=null,this.wireframe=!1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this}}class we extends ce{constructor(t){super(),this.type="LineBasicMaterial",this.color=(new qt).setHex(16777215),this.lights=!1,this.linecap="round",this.linejoin="round",this.linewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this}}class Se extends we{constructor(t){super(t),this.type="LineDashedMaterial",this.dashSize=3,this.gapSize=1,this.scale=1,this.setValues(t)}copy(t){return this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}class be extends se{constructor(t=new he){super(),this.type="Sprite",this.material=t}raycast(t,e){const n=(new Zt).setFromMatrixPosition(this.matrixWorld),i=t.ray.closestPointToPoint(n),r=(new Zt).setFromMatrixScale(this.matrixWorld),s=r.x*r.y/4;if(n.distanceToSquared(i)>s)return;const o=t.ray.origin.distanceTo(i);o<t.near||o>t.far||e.push({distance:o,face:null,point:i.clone(),object:this})}clone(){return new this.constructor(this.material).copy(this)}}class Le extends se{constructor(){super(...arguments),this.type="LOD",this.levels=[]}addLevel(t,e=0){const n=this.levels;e=Math.abs(e);let i=0;for(;i<n.length&&!(e<n[i].distance);i++);return n.splice(i,0,{distance:e,object:t}),this.add(t),this}getObjectForDistance(t){const e=this.levels;let n=1;for(const i=e.length;n<i&&!(t<e[n].distance);n++);return e[n-1].object}raycast(t,e=[]){const n=(new Zt).setFromMatrixPosition(this.matrixWorld),i=t.ray.origin.distanceTo(n);return this.getObjectForDistance(i).raycast(t,e),e}update(t){const e=this.levels;if(e.length>1){const n=(new Zt).setFromMatrixPosition(t.matrixWorld),i=(new Zt).setFromMatrixPosition(this.matrixWorld),r=n.distanceTo(i);e[0].object.visible=!0;let s=1;const o=e.length;for(;s<o&&r>=e[s].distance;s++)e[s-1].object.visible=!1,e[s].object.visible=!0;for(;s<o;s++)e[s].object.visible=!1}return this}copy(t){super.copy(t);const e=t.levels;for(let t=0,n=e.length;t<n;t++){const n=e[t];this.addLevel(n.object.clone(),n.distance)}return this}clone(){return(new this.constructor).copy(this)}}class Pe{constructor(t=new Zt,e=0){this.center=new Zt,this.radius=0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){void 0!==e?this.center.copy(e):this.center=(new Ge).setFromPoints(t).getCenter();let n=0;for(let e=0,i=t.length;e<i;e++)n=Math.max(n,this.center.distanceToSquared(t[e]));return this.radius=Math.sqrt(n),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}empty(){return this.radius<=0}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t){const e=this.center.distanceToSquared(t),n=(new Zt).copy(t);return e>this.radius*this.radius&&(n.sub(this.center).normalize(),n.multiplyScalar(this.radius).add(this.center)),n}getBoundingBox(){return(new Ge).set(this.center,this.center).expandByScalar(this.radius)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}}function Ae(t,e){const n=new Zt;for(let i=0,r=e.count;i<r;i++)n.x=e.getProperty(i,"x"),n.y=e.getProperty(i,"y"),n.z=e.getProperty(i,"z"),t instanceof Wt?n.applyMatrix4(t):t instanceof Ut&&n.applyMatrix3(t),e.setProperty(i,"xyz",n);return e}function Te(t,e){let n=1/0,i=1/0,r=1/0,s=-1/0,o=-1/0,a=-1/0;for(let t=0,c=e.count;t<c;t++){const c=e.getProperty(t,"x"),l=e.getProperty(t,"y"),h=e.getProperty(t,"z");c<n&&(n=c),l<i&&(i=l),h<r&&(r=h),c>s&&(s=c),l>o&&(o=l),h>a&&(a=h)}t.min.set(n,i,r),t.max.set(s,o,a)}function Ee(t,e){const n=new Wt;return t.applyMatrix4(n.multiplyMatrices(e.matrixWorld,n.getInverse(e.projectionMatrix))),t}function Ce(t,e,n=0){return t instanceof Ft?t.set(e.getProperty(n,"x"),e.getProperty(n,"y")):t instanceof Zt?t.set(e.getProperty(n,"x"),e.getProperty(n,"y"),e.getProperty(n,"z")):t instanceof s?t.set(e.getProperty(n,"x"),e.getProperty(n,"y"),e.getProperty(n,"z"),e.getProperty(n,"w")):t}class De{constructor(t=new Zt,e=new Zt){this.start=new Zt,this.end=new Zt,this.start=t,this.end=e}set(t,e){return this.start.copy(t),this.end.copy(e),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.start.copy(t.start),this.end.copy(t.end),this}getCenter(){return(new Zt).copy(this.start).add(this.end).multiplyScalar(.5)}delta(){return(new Zt).copy(this.end).sub(this.start)}distanceSquared(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t){return this.delta().multiplyScalar(t).add(this.start)}closestPointToPointParameter(t,e=!1){const n=new Zt,i=new Zt;n.copy(t).sub(this.start),i.copy(this.end).sub(this.start);const s=i.dot(i);let o=i.dot(n)/s;return e&&(o=r.clamp(o,0,1)),o}closestPointToPoint(t,e=!1){const n=this.closestPointToPointParameter(t,e);return this.delta().multiplyScalar(n).add(this.start)}applyMatrix4(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this}equals(t){return t.start.equals(this.start)&&t.end.equals(this.end)}}class Ne{constructor(t=new Zt(1,0,0),e=0){this.normal=new Zt(1,0,0),this.constant=0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=new Zt,r=new Zt,s=i.copy(n).sub(e).cross(r.copy(t).sub(e)).normalize();return this.setFromNormalAndCoplanarPoint(s,t),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t){return(new Zt).copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t){const e=t.delta(),n=this.normal.dot(e);if(0===n)return 0===this.distanceToPoint(t.start)?(new Zt).copy(t.start):void 0;const i=-(t.start.dot(this.normal)+this.constant)/n;return i<0||i>1?void 0:(new Zt).copy(e).multiplyScalar(i).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(){return(new Zt).copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t){const e=(new Ut).getNormalMatrix(t),n=this.coplanarPoint().applyMatrix4(t),i=this.normal.applyMatrix3(e).normalize();return this.constant=-n.dot(i),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}}class Ie{constructor(t=new Zt,e=new Zt,n=new Zt){this.a=new Zt,this.b=new Zt,this.c=new Zt,this.a=t,this.b=e,this.c=n}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}area(){const t=(new Zt).copy(this.c).sub(this.b),e=(new Zt).copy(this.a).sub(this.b);return.5*t.cross(e).length()}midpoint(){return(new Zt).copy(this.a).add(this.b).add(this.c).multiplyScalar(1/3)}normal(){const t=(new Zt).copy(this.a).sub(this.b),e=(new Zt).copy(this.c).sub(this.b).cross(t),n=e.lengthSquared();return n>0?e.multiplyScalar(1/Math.sqrt(n)):e.set(0,0,0)}plane(){return(new Ne).setFromCoplanarPoints(this.a,this.b,this.c)}barycoordFromPoint(t){const e=(new Zt).copy(this.c).sub(this.a),n=(new Zt).copy(this.b).sub(this.a),i=(new Zt).copy(t).sub(this.a),r=e.dot(e),s=e.dot(n),o=e.dot(i),a=n.dot(n),c=n.dot(i),l=r*a-s*s;if(0===l)return(new Zt).set(-2,-1,-1);const h=1/l,d=(a*o-s*c)*h,u=(r*c-s*o)*h;return(new Zt).set(1-d-u,u,d)}containsPoint(t){const e=this.barycoordFromPoint(t);return e.x>=0&&e.y>=0&&e.x+e.y<=1}closestPointToPoint(t){const e=(new Ne).setFromCoplanarPoints(this.a,this.b,this.c).projectPoint(t);if(!0===this.containsPoint(e))return(new Zt).copy(e);{const t=new Zt;let n=1/0;const i=[new De(this.a,this.b),new De(this.b,this.c),new De(this.c,this.a)];for(let r=0;r<i.length;r++){const s=i[r].closestPointToPoint(e,!0),o=e.distanceToSquared(s);o<n&&(n=o,t.copy(s))}return t}}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}class Re{constructor(t=0,e=0,n=0,i=new Zt,r=new qt,s=0){this.a=0,this.b=0,this.c=0,this.normal=new Zt,this.vertexNormals=[],this.color=new qt,this.vertexColors=[],this.materialIndex=0,this.a=t,this.b=e,this.c=n,i instanceof Zt&&(this.normal=i),Array.isArray(i)&&(this.vertexNormals=i),r instanceof qt&&(this.color=r),Array.isArray(r)&&(this.vertexColors=r),this.materialIndex=s}copy(t){this.a=t.a,this.b=t.b,this.c=t.c,this.normal.copy(t.normal),this.color.copy(t.color),this.materialIndex=t.materialIndex;for(let e=0,n=t.vertexNormals.length;e<n;e++)this.vertexNormals[e]=t.vertexNormals[e].clone();for(let e=0,n=t.vertexColors.length;e<n;e++)this.vertexColors[e]=t.vertexColors[e].clone();return this}clone(){return(new this.constructor).copy(this)}}class ze extends Re{}let Ue=0;class Fe extends zt{constructor(){super(...arguments),this.id=Ue+=2,this.uuid=r.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}applyMatrix(t){const e=(new Ut).getNormalMatrix(t);for(let e=0,n=this.vertices.length;e<n;e++)this.vertices[e].applyMatrix4(t);for(let t=0,n=this.faces.length;t<n;t++){const n=this.faces[t];n.normal.applyMatrix3(e).normalize();for(let t=0,i=n.vertexNormals.length;t<i;t++)n.vertexNormals[t].applyMatrix3(e).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this}rotateX(t){return this.applyMatrix((new Wt).makeRotationX(t))}rotateY(t){return this.applyMatrix((new Wt).makeRotationY(t))}rotateZ(t){return this.applyMatrix((new Wt).makeRotationZ(t))}translate(t,e,n){return this.applyMatrix((new Wt).makeTranslation(t,e,n))}scale(t,e,n){return this.applyMatrix((new Wt).makeScale(t,e,n))}lookAt(t){const e=(new se).lookAt(t);return e.updateMatrix(),this.applyMatrix(e.matrix)}fromBufferGeometry(t){const e=null!==t.index?t.index.array:void 0,n=t.attributes,i=n.position.array,r=void 0!==n.normal?n.normal.array:void 0,s=void 0!==n.color?n.color.array:void 0,o=void 0!==n.uv?n.uv.array:void 0,a=void 0!==n.uv2?n.uv2.array:void 0;void 0!==a&&(this.faceVertexUvs[1]=[]);const c=[],l=[],h=[];for(let t=0,e=0;t<i.length;t+=3,e+=2)this.vertices.push(new Zt(i[t],i[t+1],i[t+2])),void 0!==r&&c.push(new Zt(r[t],r[t+1],r[t+2])),void 0!==s&&this.colors.push(new qt(s[t],s[t+1],s[t+2])),void 0!==o&&l.push(new Ft(o[e],o[e+1])),void 0!==a&&h.push(new Ft(a[e],a[e+1]));const d=(t,e,n,i)=>{const d=void 0!==r?[c[t].clone(),c[e].clone(),c[n].clone()]:[],u=void 0!==s?[this.colors[t].clone(),this.colors[e].clone(),this.colors[n].clone()]:[],p=new Re(t,e,n,d,u,i);this.faces.push(p),void 0!==o&&this.faceVertexUvs[0].push([l[t].clone(),l[e].clone(),l[n].clone()]),void 0!==a&&this.faceVertexUvs[1].push([h[t].clone(),h[e].clone(),h[n].clone()])},u=t.groups;if(u.length>0)for(let t=0;t<u.length;t++){const n=u[t],i=n.start;for(let t=i,r=i+n.count;t<r;t+=3)void 0!==e?d(e[t],e[t+1],e[t+2],n.materialIndex):d(t,t+1,t+2,n.materialIndex)}else if(void 0!==e)for(let t=0;t<e.length;t+=3)d(e[t],e[t+1],e[t+2]);else for(let t=0;t<i.length/3;t+=3)d(t,t+1,t+2);return this.computeFaceNormals(),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this}center(){this.computeBoundingBox();const t=this.boundingBox.getCenter().negate();return this.translate(t.x,t.y,t.z),t}normalize(){this.computeBoundingSphere();const t=this.boundingSphere.center,e=this.boundingSphere.radius,n=0===e?1:1/e,i=new Wt;return i.set(n,0,0,-n*t.x,0,n,0,-n*t.y,0,0,n,-n*t.z,0,0,0,1),this.applyMatrix(i)}computeFaceNormals(){const t=new Zt,e=new Zt;for(let n=0,i=this.faces.length;n<i;n++){const i=this.faces[n],r=this.vertices[i.a],s=this.vertices[i.b],o=this.vertices[i.c];t.copy(o).sub(s),e.copy(r).sub(s),t.cross(e),t.normalize(),i.normal.copy(t)}return this}computeVertexNormals(t=!0){const e=new Array(this.vertices.length);for(let t=0,n=this.vertices.length;t<n;t++)e[t]=new Zt;if(t)for(let t=0,n=this.faces.length;t<n;t++){const n=this.faces[t],i=this.vertices[n.a],r=this.vertices[n.b],s=this.vertices[n.c],o=(new Zt).copy(s).sub(r),a=(new Zt).copy(i).sub(r);o.cross(a),e[n.a].add(o),e[n.b].add(o),e[n.c].add(o)}else{this.computeFaceNormals();for(let t=0,n=this.faces.length;t<n;t++){const n=this.faces[t];e[n.a].add(n.normal),e[n.b].add(n.normal),e[n.c].add(n.normal)}}for(let t=0,n=this.vertices.length;t<n;t++)e[t].normalize();for(let t=0,n=this.faces.length;t<n;t++){const n=this.faces[t],i=n.vertexNormals;3===i.length?(i[0].copy(e[n.a]),i[1].copy(e[n.b]),i[2].copy(e[n.c])):(i[0]=e[n.a].clone(),i[1]=e[n.b].clone(),i[2]=e[n.c].clone())}return this.faces.length>0&&(this.normalsNeedUpdate=!0),this}computeFlatVertexNormals(){this.computeFaceNormals();for(let t=0,e=this.faces.length;t<e;t++){const e=this.faces[t],n=e.vertexNormals;3===n.length?(n[0].copy(e.normal),n[1].copy(e.normal),n[2].copy(e.normal)):(n[0]=e.normal.clone(),n[1]=e.normal.clone(),n[2]=e.normal.clone())}return this.faces.length>0&&(this.normalsNeedUpdate=!0),this}computeMorphNormals(){for(let t=0,e=this.faces.length;t<e;t++){const e=this.faces[t];e.originalFaceNormal?e.originalFaceNormal.copy(e.normal):e.originalFaceNormal=e.normal.clone(),e.originalVertexNormals||(e.originalVertexNormals=[]);for(let t=0,n=e.vertexNormals.length;t<n;t++)e.originalVertexNormals[t]?e.originalVertexNormals[t].copy(e.vertexNormals[t]):e.originalVertexNormals[t]=e.vertexNormals[t].clone()}const t=new Fe;t.faces=this.faces;for(let e=0,n=this.morphTargets.length;e<n;e++){if(!this.morphNormals[e]){this.morphNormals[e]={faceNormals:[],vertexNormals:[]};for(let t=0,n=this.faces.length;t<n;t++)this.morphNormals[e].faceNormals.push(new Zt),this.morphNormals[e].vertexNormals.push(new Ie)}const n=this.morphNormals[e];t.vertices=this.morphTargets[e].vertices,t.computeFaceNormals(),t.computeVertexNormals();for(let t=0,e=this.faces.length;t<e;t++){const e=this.faces[t],i=n.faceNormals[t],r=n.vertexNormals[t];i.copy(e.normal),r.a.copy(e.vertexNormals[0]),r.b.copy(e.vertexNormals[1]),r.c.copy(e.vertexNormals[2])}}for(let t=0,e=this.faces.length;t<e;t++){const e=this.faces[t];e.normal=e.originalFaceNormal,e.vertexNormals=e.originalVertexNormals}return this}computeLineDistances(){let t=0;const e=this.vertices;for(let n=0,i=e.length;n<i;n++)n>0&&(t+=e[n].distanceTo(e[n-1])),this.lineDistances[n]=t;return this}computeBoundingBox(){return null===this.boundingBox&&(this.boundingBox=new Ge),this.boundingBox.setFromPoints(this.vertices),this}computeBoundingSphere(){return null===this.boundingSphere&&(this.boundingSphere=new Pe),this.boundingSphere.setFromPoints(this.vertices),this}merge(t,e,n=0){let i;const r=this.vertices.length,s=this.vertices,o=t.vertices,a=this.faces,c=t.faces,l=this.faceVertexUvs[0],h=t.faceVertexUvs[0],d=this.colors,u=t.colors;void 0!==e&&(i=(new Ut).getNormalMatrix(e));for(let t=0,n=o.length;t<n;t++){const n=o[t].clone();void 0!==e&&n.applyMatrix4(e),s.push(n)}for(let t=0,e=u.length;t<e;t++)d.push(u[t].clone());for(let t=0,e=c.length;t<e;t++){const e=c[t],s=e.vertexNormals,o=e.vertexColors,l=new ze(e.a+r,e.b+r,e.c+r);l.normal.copy(e.normal),void 0!==i&&l.normal.applyMatrix3(i).normalize();for(let t=0,e=s.length;t<e;t++){const e=s[t].clone();void 0!==i&&e.applyMatrix3(i).normalize(),l.vertexNormals.push(e)}l.color.copy(e.color);for(let t=0,e=o.length;t<e;t++){const e=o[t];l.vertexColors.push(e.clone())}l.materialIndex=e.materialIndex+n,a.push(l)}for(let t=0,e=h.length;t<e;t++){const e=h[t],n=[];if(void 0!==e){for(let t=0,i=e.length;t<i;t++)n.push(e[t].clone());l.push(n)}}return this}mergeMesh(t){t.geometry instanceof Fe?(t.matrixAutoUpdate&&t.updateMatrix(),this.merge(t.geometry,t.matrix)):console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",t.geometry)}mergeVertices(){const t={},e=[],n=[],i=Math.pow(10,4);for(let r=0,s=this.vertices.length;r<s;r++){const s=this.vertices[r],o=[Math.round(s.x*i),Math.round(s.y*i),Math.round(s.z*i)].join("_");void 0===t[o]?(t[o]=r,e.push(this.vertices[r]),n[r]=e.length-1):n[r]=n[t[o]]}const r=[];for(let t=0,e=this.faces.length;t<e;t++){const e=this.faces[t];e.a=n[e.a],e.b=n[e.b],e.c=n[e.c];const i=[e.a,e.b,e.c];for(let e=0;e<3;e++)if(i[e]===i[(e+1)%3]){r.push(t);break}}for(let t=r.length-1;t>=0;t--){const e=r[t];this.faces.splice(e,1);for(let t=0,n=this.faceVertexUvs.length;t<n;t++)this.faceVertexUvs[t].splice(e,1)}const s=this.vertices.length-e.length;return this.vertices=e,s}setFromPoints(t){this.vertices=[];for(let e=0,n=t.length;e<n;e++){const n=t[e];this.vertices.push(new Zt(n.x,n.y,n.z||0))}return this}sortFacesByMaterialIndex(){const t=this.faces,e=t.length;for(let n=0;n<e;n++)t[n].id=n;t.sort((t,e)=>t.materialIndex-e.materialIndex);const n=this.faceVertexUvs[0],i=this.faceVertexUvs[1];let r,s;n&&n.length===e&&(r=[]),i&&i.length===e&&(s=[]);for(let o=0;o<e;o++){const e=t[o].id;r&&r.push(n[e]),s&&s.push(i[e])}return r&&(this.faceVertexUvs[0]=r),s&&(this.faceVertexUvs[1]=s),this}copy(t){this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;const e=t.vertices;for(let t=0,n=e.length;t<n;t++)this.vertices.push(e[t].clone());const n=t.colors;for(let t=0,e=n.length;t<e;t++)this.colors.push(n[t].clone());const i=t.faces;for(let t=0,e=i.length;t<e;t++)this.faces.push(i[t].clone());for(let e=0,n=t.faceVertexUvs.length;e<n;e++){const n=t.faceVertexUvs[e];void 0===this.faceVertexUvs[e]&&(this.faceVertexUvs[e]=[]);for(let t=0,i=n.length;t<i;t++){const i=n[t],r=[];for(let t=0,e=i.length;t<e;t++)r.push(i[t].clone());this.faceVertexUvs[e].push(r)}}const r=t.morphTargets;for(let t=0,e=r.length;t<e;t++){const e={name:r[t].name};if(void 0!==r[t].vertices){e.vertices=[];for(let n=0,i=r[t].vertices.length;n<i;n++)e.vertices.push(r[t].vertices[n].clone())}if(void 0!==r[t].normals){e.normals=[];for(let n=0,i=r[t].normals.length;n<i;n++)e.normals.push(r[t].normals[n].clone())}this.morphTargets.push(e)}const s=t.morphNormals;for(let t=0,e=s.length;t<e;t++){const e={};if(void 0!==s[t].vertexNormals){e.vertexNormals=[];for(let n=0,i=s[t].vertexNormals.length;n<i;n++)e.vertexNormals.push(s[t].vertexNormals[n].clone())}if(void 0!==s[t].faceNormals){e.faceNormals=[];for(let n=0,i=s[t].faceNormals.length;n<i;n++)e.faceNormals.push(s[t].faceNormals[n].clone())}this.morphNormals.push(e)}const o=t.skinWeights;for(let t=0,e=o.length;t<e;t++)this.skinWeights.push(o[t].clone());const a=t.skinIndices;for(let t=0,e=a.length;t<e;t++)this.skinIndices.push(a[t].clone());const c=t.lineDistances;for(let t=0,e=c.length;t<e;t++)this.lineDistances.push(c[t]);const l=t.boundingBox;null!==l&&(this.boundingBox=l.clone());const h=t.boundingSphere;return null!==h&&(this.boundingSphere=h.clone()),this.elementsNeedUpdate=t.elementsNeedUpdate,this.verticesNeedUpdate=t.verticesNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.lineDistancesNeedUpdate=t.lineDistancesNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,this}clone(){return(new this.constructor).copy(this)}}class Ge{constructor(t=new Zt(1/0,1/0,1/0),e=new Zt(-1/0,-1/0,-1/0)){this.min=new Zt(1/0,1/0,1/0),this.max=new Zt(-1/0,-1/0,-1/0),this.max=e,this.min=t}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){let e=1/0,n=1/0,i=1/0,r=-1/0,s=-1/0,o=-1/0;for(let a=0,c=t.length;a<c;a+=3){const c=t[a],l=t[a+1],h=t[a+2];c<e&&(e=c),l<n&&(n=l),h<i&&(i=h),c>r&&(r=c),l>s&&(s=l),h>o&&(o=h)}return this.min.set(e,n,i),this.max.set(r,s,o),this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=(new Zt).copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t){return this.makeEmpty(),this.expandByObject(t)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(){const t=new Zt;return this.isEmpty()?t.set(0,0,0):t.copy(this.min).add(this.max).multiplyScalar(.5)}getSize(){const t=new Zt;return this.isEmpty()?t.set(0,0,0):t.copy(this.max).sub(this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t){return t.updateMatrixWorld(!0),t.traverse(t=>{const e=t.geometry;if(void 0!==e)if(e instanceof Fe){const n=e.vertices;for(let e=0,i=n.length;e<i;e++){const i=(new Zt).copy(n[e]);i.applyMatrix4(t.matrixWorld),this.expandByPoint(i)}}else if(e instanceof en){const n=e.attributes.position;if(void 0!==n)for(let e=0,i=n.count;e<i;e++){const i=Ce(new Zt,n,e).applyMatrix4(t.matrixWorld);this.expandByPoint(i)}}}),this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t){return(new Zt).set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center).distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=t.constant&&n>=t.constant}clampPoint(t){return(new Zt).copy(t).clamp(this.min,this.max)}distanceToPoint(t){return(new Zt).copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(){const t=new Pe;return t.center=this.getCenter(),t.radius=.5*this.getSize().length(),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){if(this.isEmpty())return this;const e=[new Zt,new Zt,new Zt,new Zt,new Zt,new Zt,new Zt,new Zt];return e[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),e[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),e[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),e[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),e[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),e[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),e[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),e[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(e),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}class Be{constructor(t,e=0,n=!1){this.uuid=r.generateUUID(),this.name="",this.itemSize=1,this.count=0,this.normalized=!1,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0,this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=n}set needsUpdate(t){!0===t&&this.version++}setArray(t){return this.count=void 0!==t?t.length/this.itemSize:0,this.array=t,this}setDynamic(t){return this.dynamic=t,this}copy(t){return this.array=new t.array.constructor,this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.dynamic=t.dynamic,this}set(t,e=0){return this.array.set(t,e),this}get(t=0,e=1){return this.array.slice(t,e)}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}copyColorsArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){const r=t[i]||new qt;e[n++]=r.r,e[n++]=r.g,e[n++]=r.b}return this}copyVector2sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){const r=t[i]||new Ft;e[n++]=r.x,e[n++]=r.y}return this}copyVector3sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){const r=t[i]||new Zt;e[n++]=r.x,e[n++]=r.y,e[n++]=r.z}return this}copyVector4sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){const r=t[i]||new s;e[n++]=r.x,e[n++]=r.y,e[n++]=r.z,e[n++]=r.w}return this}setProperty(t,e,n){if((e=e.toLowerCase())&&e.length<=4&&0===e.replace(/[xyzw]/g,"").length){const i={x:0,y:1,z:2};1===e.length&&"number"==typeof n?this.array[t*this.itemSize+i[e.charAt(0)]]=n:2===e.length&&n instanceof Ft?(this.array[t*this.itemSize+i[e.charAt(0)]]=n.x,this.array[t*this.itemSize+i[e.charAt(1)]]=n.y):3===e.length&&n instanceof Zt?(this.array[t*this.itemSize+i[e.charAt(0)]]=n.x,this.array[t*this.itemSize+i[e.charAt(1)]]=n.y,this.array[t*this.itemSize+i[e.charAt(2)]]=n.z):4===e.length&&n instanceof s&&(this.array[t*this.itemSize+i[e.charAt(0)]]=n.x,this.array[t*this.itemSize+i[e.charAt(1)]]=n.y,this.array[t*this.itemSize+i[e.charAt(2)]]=n.z,this.array[t*this.itemSize+i[e.charAt(3)]]=n.w)}return this}getProperty(t,e){if((e=e.toLowerCase())&&e.length<=4&&0===e.replace(/[xyzw]/g,"").length){const n={x:0,y:1,z:2};if(1===e.length)return this.array[t*this.itemSize+n[e.charAt(0)]];if(2===e.length)return new Ft(this.array[t*this.itemSize+n[e.charAt(0)]],this.array[t*this.itemSize+n[e.charAt(1)]]);if(3===e.length)return new Zt(this.array[t*this.itemSize+n[e.charAt(0)]],this.array[t*this.itemSize+n[e.charAt(1)]],this.array[t*this.itemSize+n[e.charAt(2)]]);if(4===e.length)return new s(this.array[t*this.itemSize+n[e.charAt(0)]],this.array[t*this.itemSize+n[e.charAt(1)]],this.array[t*this.itemSize+n[e.charAt(2)]],this.array[t*this.itemSize+n[e.charAt(3)]])}}clone(){return new this.constructor(this.array,this.itemSize,!0).copy(this)}}class Oe extends Be{constructor(t,e,n){super(new Int8Array(t),e,n)}}class ke extends Be{constructor(t,e,n){super(new Uint8Array(t),e,n)}}class Ve extends Be{constructor(t,e,n){super(new Uint8ClampedArray(t),e,n)}}class He extends Be{constructor(t,e,n){super(new Int16Array(t),e,n)}}class qe extends Be{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class We extends Be{constructor(t,e,n){super(new Int32Array(t),e,n)}}class Xe extends Be{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class Ye extends Be{constructor(t,e,n){super(new Float32Array(t),e,n)}}class je extends Be{constructor(t,e,n){super(new Float64Array(t),e,n)}}class Ze{constructor(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingSphere=null,this.boundingBox=null,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.groupsNeedUpdate=!1}computeGroups(t){let e;const n=[];let i;const r=t.faces;let s=0;for(;s<r.length;s++){const t=r[s];t.materialIndex!==i&&(i=t.materialIndex,void 0!==e&&(e.count=3*s-e.start,n.push(e)),e={materialIndex:i,start:3*s})}void 0!==e&&(e.count=3*s-e.start,n.push(e)),this.groups=n}fromGeometry(t){const e=t.faces,n=t.vertices,i=t.faceVertexUvs,r=i[0]&&i[0].length>0,s=i[1]&&i[1].length>0,o=t.morphTargets,a=o.length;if(a>0){this.morphTargets.position=[];for(let t=0;t<a;t++)this.morphTargets.position[t]=[]}const c=t.morphNormals,l=c.length;if(l>0){this.morphTargets.normal=[];for(let t=0;t<l;t++)this.morphTargets.normal[t]=[]}const h=t.skinIndices,d=t.skinWeights,u=h.length===n.length,p=d.length===n.length;for(let t=0;t<e.length;t++){const f=e[t];this.vertices.push(n[f.a],n[f.b],n[f.c]);const m=f.vertexNormals;if(3===m.length)this.normals.push(m[0],m[1],m[2]);else{const t=f.normal;this.normals.push(t,t,t)}const g=f.vertexColors;if(3===g.length)this.colors.push(g[0],g[1],g[2]);else{const t=f.color;this.colors.push(t,t,t)}if(!0===r){const e=i[0][t];void 0!==e?this.uvs.push(e[0],e[1],e[2]):(console.warn(`THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ${t}`),this.uvs.push(new Ft,new Ft,new Ft))}if(!0===s){const e=i[1][t];void 0!==e?this.uvs2.push(e[0],e[1],e[2]):(console.warn(`THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ${t}`),this.uvs2.push(new Ft,new Ft,new Ft))}for(let t=0;t<a;t++){const e=o[t].vertices;this.morphTargets.position[t].push(e[f.a],e[f.b],e[f.c])}for(let e=0;e<l;e++){const n=c[e].vertexNormals[t];this.morphTargets.normal[e].push(n.a,n.b,n.c)}u&&this.skinIndices.push(h[f.a],h[f.b],h[f.c]),p&&this.skinWeights.push(d[f.a],d[f.b],d[f.c])}return null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),this.computeGroups(t),this.verticesNeedUpdate=t.verticesNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,this}}class Qe{constructor(t=new Zt,e=new Zt){this.origin=new Zt,this.direction=new Zt,this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t){return(new Zt).copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t)),this}closestPointToPoint(t){const e=(new Zt).copy(t).sub(this.origin),n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSquaredToPoint(t))}distanceSquaredToPoint(t){const e=(new Zt).copy(t).sub(this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(new Zt).copy(this.direction).multiplyScalar(e).add(this.origin).distanceToSquared(t)}distanceSqToSegment(t,e,n,i){const r=new Zt,s=new Zt,o=new Zt;r.copy(t).add(e).multiplyScalar(.5),s.copy(e).sub(t).normalize(),o.copy(this.origin).sub(r);const a=.5*t.distanceTo(e),c=-this.direction.dot(s),l=o.dot(this.direction),h=-o.dot(s),d=o.lengthSquared(),u=Math.abs(1-c*c);let p,f,m,g;if(u>0)if(f=c*l-h,g=a*u,(p=c*h-l)>=0)if(f>=-g)if(f<=g){const t=1/u;m=(p*=t)*(p+c*(f*=t)+2*l)+f*(c*p+f+2*h)+d}else f=a,m=-(p=Math.max(0,-(c*f+l)))*p+f*(f+2*h)+d;else f=-a,m=-(p=Math.max(0,-(c*f+l)))*p+f*(f+2*h)+d;else f<=-g?m=-(p=Math.max(0,-(-c*a+l)))*p+(f=p>0?-a:Math.min(Math.max(-a,-h),a))*(f+2*h)+d:f<=g?(p=0,m=(f=Math.min(Math.max(-a,-h),a))*(f+2*h)+d):m=-(p=Math.max(0,-(c*a+l)))*p+(f=p>0?a:Math.min(Math.max(-a,-h),a))*(f+2*h)+d;else f=c>0?-a:a,m=-(p=Math.max(0,-(c*f+l)))*p+f*(f+2*h)+d;return n&&n.copy(this.direction).multiplyScalar(p).add(this.origin),i&&i.copy(s).multiplyScalar(f).add(r),m}intersectSphere(t){const e=(new Zt).copy(t.center).sub(this.origin),n=e.dot(this.direction),i=e.dot(e)-n*n,r=t.radius*t.radius;if(i>r)return null;const s=Math.sqrt(r-i),o=n-s,a=n+s;return o<0&&a<0?null:o<0?this.at(a):this.at(o)}intersectsSphere(t){return this.distanceToPoint(t.center)<=t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:1/0;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:1/0}intersectPlane(t){const e=this.distanceToPlane(t);return isFinite(e)?this.at(e):null}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0}intersectBox(t){let e,n,i,r,s,o;const a=1/this.direction.x,c=1/this.direction.y,l=1/this.direction.z,h=this.origin;return a>=0?(e=(t.min.x-h.x)*a,n=(t.max.x-h.x)*a):(e=(t.max.x-h.x)*a,n=(t.min.x-h.x)*a),c>=0?(i=(t.min.y-h.y)*c,r=(t.max.y-h.y)*c):(i=(t.max.y-h.y)*c,r=(t.min.y-h.y)*c),e>r||i>n?null:((i>e||e!=e)&&(e=i),(r<n||n!=n)&&(n=r),l>=0?(s=(t.min.z-h.z)*l,o=(t.max.z-h.z)*l):(s=(t.max.z-h.z)*l,o=(t.min.z-h.z)*l),e>o||s>n?null:((s>e||e!=e)&&(e=s),(o<n||n!=n)&&(n=o),n<0?null:this.at(e>=0?e:n)))}intersectsBox(t){return null!==this.intersectBox(t)}intersectTriangle(t,e=!1){const n=t.a,i=t.b,r=t.c,s=(new Zt).copy(i).sub(n),o=(new Zt).copy(r).sub(n),a=(new Zt).copy(s).cross(o);let c,l=this.direction.dot(a);if(l>0){if(e)return null;c=1}else{if(!(l<0))return null;c=-1,l=-l}const h=(new Zt).copy(this.origin).sub(n),d=c*this.direction.dot(o.copy(h).cross(o));if(d<0)return null;const u=c*this.direction.dot(s.cross(h));if(u<0)return null;if(d+u>l)return null;const p=-c*h.dot(a);return p<0?null:this.at(p/l)}intersectsTriangle(t){return null!==this.intersectTriangle(t)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}}class $e extends Ke{constructor(){super(...arguments),this.type="LineSegments"}}class Ke extends se{constructor(t=new en,e=new we({color:16777215*Math.random()})){super(),this.type="Line",this.geometry=t,this.material=e}raycast(t,e){const n=t.linePrecision,i=n*n,r=this.geometry,s=this.matrixWorld;null===r.boundingSphere&&r.computeBoundingSphere();const o=(new Pe).copy(r.boundingSphere);if(o.applyMatrix4(s),!1===t.ray.intersectsSphere(o))return;const a=(new Wt).getInverse(s),c=new Qe;c.copy(t.ray).applyMatrix4(a);const l=new Zt,h=new Zt,d=new Zt,u=new Zt,p=this instanceof $e?2:1;if(r instanceof en){const n=r.index,s=r.attributes.position.array;if(null!==n){const r=n.array;for(let n=0,o=r.length-1;n<o;n+=p){const o=r[n],a=r[n+1];if(l.fromArray(s,3*o),h.fromArray(s,3*a),c.distanceSqToSegment(l,h,u,d)>i)continue;u.applyMatrix4(this.matrixWorld);const p=t.ray.origin.distanceTo(u);p<t.near||p>t.far||e.push({distance:p,index:n,object:this,point:d.clone().applyMatrix4(this.matrixWorld)})}}else for(let n=0,r=s.length/3-1;n<r;n+=p){if(l.fromArray(s,3*n),h.fromArray(s,3*n+3),c.distanceSqToSegment(l,h,u,d)>i)continue;u.applyMatrix4(this.matrixWorld);const r=t.ray.origin.distanceTo(u);r<t.near||r>t.far||e.push({distance:r,face:null,faceIndex:null,index:n,object:this,point:d.clone().applyMatrix4(this.matrixWorld)})}}else if(r instanceof Fe){const n=r.vertices,s=n.length;for(let r=0;r<s-1;r+=p){if(c.distanceSqToSegment(n[r],n[r+1],u,d)>i)continue;u.applyMatrix4(this.matrixWorld);const s=t.ray.origin.distanceTo(u);s<t.near||s>t.far||e.push({distance:s,face:null,faceIndex:null,index:r,object:this,point:d.clone().applyMatrix4(this.matrixWorld)})}}}clone(){return new this.constructor(this.geometry,this.material).copy(this)}}class Je extends se{constructor(t=new en,e=new ue({color:16777215*Math.random()})){super(),this.type="Points",this.geometry=t,this.material=e}raycast(t,e){const n=this.geometry,i=this.matrixWorld,r=t.params.Points.threshold;null===n.boundingSphere&&n.computeBoundingSphere();const s=(new Pe).copy(n.boundingSphere);if(s.applyMatrix4(i),s.radius+=r,!1===t.ray.intersectsSphere(s))return;const o=(new Wt).getInverse(i),a=(new Qe).copy(t.ray).applyMatrix4(o),c=(n,s)=>{const o=r/((this.scale.x+this.scale.y+this.scale.z)/3),c=o*o,l=a.distanceSquaredToPoint(n);if(l<c){const r=a.closestPointToPoint(n);r.applyMatrix4(i);const o=t.ray.origin.distanceTo(r);if(o<t.near||o>t.far)return;e.push({distance:o,distanceToRay:Math.sqrt(l),face:null,index:s,object:this,point:r.clone()})}};if(n instanceof en){const t=new Zt,e=n.index,i=n.attributes.position.array;if(null!==e){const n=e.array;for(let e=0,r=n.length;e<r;e++){const r=n[e];t.fromArray(i,3*r),c(t,r)}}else for(let e=0,n=i.length/3;e<n;e++)t.fromArray(i,3*e),c(t,e)}else if(n instanceof Fe){const t=n.vertices;for(let e=0,n=t.length;e<n;e++)c(t[e],e)}}clone(){return new this.constructor(this.geometry,this.material).copy(this)}}let tn=1;class en extends zt{constructor(){super(...arguments),this.id=tn+=2,this.uuid=r.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0}}setIndex(t){return Array.isArray(t)?this.index=new(function(t){if(0===t.length)return-1/0;let e=t[0];for(let n=1,i=t.length;n<i;++n)t[n]>e&&(e=t[n]);return e}(t)>65535?Xe:qe)(t,1):this.index=t,this}addAttribute(t,e){return"index"===t?(this.setIndex(e),this):(this.attributes[t]=e,this)}getAttribute(t){return this.attributes[t]}removeAttribute(t){return delete this.attributes[t],this}addGroup(t,e,n=0){return this.groups.push({count:e,materialIndex:n,start:t}),this}clearGroups(){return this.groups=[],this}setDrawRange(t,e){return this.drawRange.start=t,this.drawRange.count=e,this}applyMatrix(t){const e=this.attributes.position;void 0!==e&&(Ae(t,e),e.needsUpdate=!0);const n=this.attributes.normal;return void 0!==n&&(Ae((new Ut).getNormalMatrix(t),n),n.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}rotateX(t){return this.applyMatrix((new Wt).makeRotationX(t))}rotateY(t){return this.applyMatrix((new Wt).makeRotationY(t))}rotateZ(t){return this.applyMatrix((new Wt).makeRotationZ(t))}translate(t,e,n){return this.applyMatrix((new Wt).makeTranslation(t,e,n))}scale(t,e,n){return this.applyMatrix((new Wt).makeScale(t,e,n))}lookAt(t){const e=(new se).lookAt(t);return e.updateMatrix(),this.applyMatrix(e.matrix)}center(){this.computeBoundingBox();const t=this.boundingBox.getCenter().negate();return this.translate(t.x,t.y,t.z),t}setFromObject(t){const e=t.geometry;if(t instanceof Je||t instanceof Ke){const t=new Ye(3*e.vertices.length,3),n=new Ye(3*e.colors.length,3);if(this.addAttribute("position",t.copyVector3sArray(e.vertices)),this.addAttribute("color",n.copyColorsArray(e.colors)),e.lineDistances&&e.lineDistances.length===e.vertices.length){const t=new Ye(e.lineDistances.length,1);this.addAttribute("lineDistance",t.copyArray(e.lineDistances))}null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone())}else t instanceof nn&&this.fromGeometry(e);return this}setFromPoints(t){const e=[];for(let n=0,i=t.length;n<i;n++){const i=t[n];e.push(i.x,i.y,i.z||0)}return this.addAttribute("position",new Ye(e,3)),this}updateFromObject(t){let e=t.geometry;if(t instanceof nn){let t=e.directGeometry;if(!0===e.elementsNeedUpdate&&(t=void 0,e.elementsNeedUpdate=!1),void 0===t)return this.fromGeometry(e);t.verticesNeedUpdate=e.verticesNeedUpdate,t.normalsNeedUpdate=e.normalsNeedUpdate,t.colorsNeedUpdate=e.colorsNeedUpdate,t.uvsNeedUpdate=e.uvsNeedUpdate,t.groupsNeedUpdate=e.groupsNeedUpdate,e.verticesNeedUpdate=!1,e.normalsNeedUpdate=!1,e.colorsNeedUpdate=!1,e.uvsNeedUpdate=!1,e.groupsNeedUpdate=!1,e=t}if(!0===e.verticesNeedUpdate){const t=this.attributes.position;void 0!==t&&(t.copyVector3sArray(e.vertices),t.needsUpdate=!0),e.verticesNeedUpdate=!1}if(e instanceof Ze&&!0===e.normalsNeedUpdate){const t=this.attributes.normal;void 0!==t&&(t.copyVector3sArray(e.normals),t.needsUpdate=!0),e.normalsNeedUpdate=!1}if(!0===e.colorsNeedUpdate){const t=this.attributes.color;void 0!==t&&(t.copyColorsArray(e.colors),t.needsUpdate=!0),e.colorsNeedUpdate=!1}if(e instanceof Ze&&e.uvsNeedUpdate){const t=this.attributes.uv;void 0!==t&&(t.copyVector2sArray(e.uvs),t.needsUpdate=!0),e.uvsNeedUpdate=!1}if(e instanceof Fe&&e.lineDistancesNeedUpdate){const t=this.attributes.lineDistance;void 0!==t&&(t.copyArray(e.lineDistances),t.needsUpdate=!0),e.lineDistancesNeedUpdate=!1}return e instanceof Ze&&e.groupsNeedUpdate&&(e.computeGroups(t.geometry),this.groups=e.groups,e.groupsNeedUpdate=!1),this}fromGeometry(t){return t.directGeometry=(new Ze).fromGeometry(t),this.fromDirectGeometry(t.directGeometry)}fromDirectGeometry(t){const e=new Float32Array(3*t.vertices.length);if(this.addAttribute("position",new Be(e,3).copyVector3sArray(t.vertices)),t.normals.length>0){const e=new Float32Array(3*t.normals.length);this.addAttribute("normal",new Be(e,3).copyVector3sArray(t.normals))}if(t.colors.length>0){const e=new Float32Array(3*t.colors.length);this.addAttribute("color",new Be(e,3).copyColorsArray(t.colors))}if(t.uvs.length>0){const e=new Float32Array(2*t.uvs.length);this.addAttribute("uv",new Be(e,2).copyVector2sArray(t.uvs))}if(t.uvs2.length>0){const e=new Float32Array(2*t.uvs2.length);this.addAttribute("uv2",new Be(e,2).copyVector2sArray(t.uvs2))}this.groups=t.groups;for(const e in t.morphTargets){if(!t.morphTargets.hasOwnProperty(e))continue;const n=[],i=t.morphTargets[e];for(let t=0,e=i.length;t<e;t++){const e=i[t],r=new Ye(new Array(3*e.length),3);n.push(r.copyVector3sArray(e))}this.morphAttributes[e]=n}if(t.skinIndices.length>0){const e=new Ye(new Array(4*t.skinIndices.length),4);this.addAttribute("skinIndex",e.copyVector4sArray(t.skinIndices))}if(t.skinWeights.length>0){const e=new Ye(new Array(4*t.skinWeights.length),4);this.addAttribute("skinWeight",e.copyVector4sArray(t.skinWeights))}return null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new Ge);const t=this.attributes.position;void 0!==t?Te(this.boundingBox,t):this.boundingBox.makeEmpty(),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Pe);const t=this.attributes.position;if(t){const e=new Ge;Te(e,t);const n=e.getCenter();let i=0;for(let e=0,r=t.count;e<r;e++){const r=new Zt;r.x=t.getProperty(e,"x"),r.y=t.getProperty(e,"y"),r.z=t.getProperty(e,"z"),i=Math.max(i,n.distanceToSquared(r))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeVertexNormals(){const t=this.index,e=this.attributes,n=this.groups;if(e.position){const i=e.position.array;if(void 0===e.normal)this.addAttribute("normal",new Be(new Float32Array(i.length),3));else{const t=e.normal.array;for(let e=0,n=t.length;e<n;e++)t[e]=0}const r=e.normal.array;let s,o,a;const c=new Zt,l=new Zt,h=new Zt,d=new Zt,u=new Zt;if(t){const e=t.array;0===n.length&&this.addGroup(0,e.length);for(let t=0,p=n.length;t<p;++t){const p=n[t],f=p.start;for(let t=f,n=f+p.count;t<n;t+=3)s=3*e[t],o=3*e[t+1],a=3*e[t+2],c.fromArray(i,s),l.fromArray(i,o),h.fromArray(i,a),d.copy(h).sub(l),u.copy(c).sub(l),d.cross(u),r[s]+=d.x,r[s+1]+=d.y,r[s+2]+=d.z,r[o]+=d.x,r[o+1]+=d.y,r[o+2]+=d.z,r[a]+=d.x,r[a+1]+=d.y,r[a+2]+=d.z}}else for(let t=0,e=i.length;t<e;t+=9)c.fromArray(i,t),l.fromArray(i,t+3),h.fromArray(i,t+6),d.copy(h).sub(l),u.copy(c).sub(l),d.cross(u),r[t]=d.x,r[t+1]=d.y,r[t+2]=d.z,r[t+3]=d.x,r[t+4]=d.y,r[t+5]=d.z,r[t+6]=d.x,r[t+7]=d.y,r[t+8]=d.z;this.normalizeNormals(),e.normal.needsUpdate=!0}}normalizeNormals(){const t=new Zt,e=this.attributes.normal;for(let n=0,i=e.count;n<i;n++)t.x=e.getProperty(n,"x"),t.y=e.getProperty(n,"y"),t.z=e.getProperty(n,"z"),t.normalize(),e.setProperty(n,"xyz",t)}toNonIndexed(){if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;const t=new en,e=this.index.array,n=this.attributes;for(const i in n){if(!n.hasOwnProperty(i))continue;const r=n[i],s=r.array,o=r.itemSize,a=new s.constructor(e.length*o);let c=0,l=0;for(let t=0,n=e.length;t<n;t++){c=e[t]*o;for(let t=0;t<o;t++)a[l++]=s[c++]}t.addAttribute(i,new Be(a,o))}return t}clone(){return(new this.constructor).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;const e=t.index;null!==e&&this.setIndex(e.clone());const n=t.attributes;for(const t in n){if(!n.hasOwnProperty(t))continue;const e=n[t];this.addAttribute(t,e.clone())}const i=t.morphAttributes;for(const t in i){if(!n.hasOwnProperty(t))continue;const e=[],r=i[t];for(let t=0,n=r.length;t<n;t++)e.push(r[t].clone());this.morphAttributes[t]=e}const r=t.groups;for(let t=0,e=r.length;t<e;t++){const e=r[t];this.addGroup(e.start,e.count,e.materialIndex)}const s=t.boundingBox;null!==s&&(this.boundingBox=s.clone());const o=t.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this}dispose(){this.dispatchEvent({type:"dispose"})}}class nn extends se{constructor(t=new en,e=new Me({color:16777215*Math.random()})){super(),this.type="Mesh",this.drawMode=Nt,this.morphTargetInfluences=[],this.morphTargetDictionary={},this.geometry=t,this.material=e,this.updateMorphTargets()}static uvIntersection(t,e,n,i,r){const s=e.barycoordFromPoint(t);return n.multiplyScalar(s.x),i.multiplyScalar(s.y),r.multiplyScalar(s.z),n.add(i).add(r),n.clone()}static checkIntersection(t,e,n,i,r,s,o,a){let h;const d=new Zt;if(null===(h=e.side===c?i.intersectTriangle(new Ie(o,s,r),!0):i.intersectTriangle(new Ie(o,s,r),e.side!==l)))return null;a.copy(h),d.copy(a),d.applyMatrix4(t.matrixWorld);const u=n.ray.origin.distanceTo(d);return u<n.near||u>n.far?null:{distance:u,object:t,point:d.clone()}}static checkBufferGeometryIntersection(t,e,n,i,r,s,o,a){const c=new Zt,l=Ce(new Zt,i,s),h=Ce(new Zt,i,o),d=Ce(new Zt,i,a),u=new Ie(Ce(new Zt,i,s),Ce(new Zt,i,o),Ce(new Zt,i,a)),p=nn.checkIntersection(t,t.material,e,n,l,h,d,c);if(p){if(r){const t=Ce(new Ft,r,s),e=Ce(new Ft,r,o),n=Ce(new Ft,r,a);p.uv=nn.uvIntersection(c,u,t,e,n)}p.face=new Re(s,o,a,u.normal()),p.faceIndex=s}return p}setDrawMode(t){return this.drawMode=t,this}updateMorphTargets(){const t=this.geometry;if(t instanceof en){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t)for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}else if(t instanceof Fe){const e=t.morphTargets;if(void 0!==e&&e.length>0)for(let t=0,n=e.length;t<n;t++){const n=e[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=t}}return this}raycast(t,e){const n=this.geometry,i=this.material,r=this.matrixWorld;if(void 0===i)return;null===n.boundingSphere&&n.computeBoundingSphere();const s=(new Pe).copy(n.boundingSphere).applyMatrix4(r);if(!1===t.ray.intersectsSphere(s))return;const o=(new Wt).getInverse(r),a=(new Qe).copy(t.ray).applyMatrix4(o);if(null===n.boundingBox||!1!==a.intersectsBox(n.boundingBox))if(n instanceof en){const i=n.index,r=n.attributes.position,s=n.attributes.uv;if(null!==i)for(let n=0,o=i.count;n<o;n+=3){const o=i.getProperty(n,"x"),c=i.getProperty(n+1,"x"),l=i.getProperty(n+2,"x"),h=nn.checkBufferGeometryIntersection(this,t,a,r,s,o,c,l);h&&(h.faceIndex=Math.floor(n/3),e.push(h))}else if(void 0!==r)for(let n=0,i=r.count;n<i;n+=3){const i=n,o=n+1,c=n+2,l=nn.checkBufferGeometryIntersection(this,t,a,r,s,i,o,c);l&&(l.index=i,e.push(l))}}else if(n instanceof Fe){const r=n.vertices,s=n.faces;let o;const c=n.faceVertexUvs[0];c.length>0&&(o=c);for(let c=0,l=s.length;c<l;c++){const l=s[c],h=Array.isArray(i)?i[l.materialIndex]:i;if(void 0===h)continue;let d=r[l.a],u=r[l.b],p=r[l.c];if(!0===h.morphTargets){const t=n.morphTargets,e=new Zt,i=new Zt,r=new Zt;for(let n=0,s=t.length;n<s;n++){const s=this.morphTargetInfluences[n];if(0===s)continue;const o=t[n].vertices;e.add((new Zt).copy(o[l.a]).sub(d).multiplyScalar(s)),i.add((new Zt).copy(o[l.b]).sub(u).multiplyScalar(s)),r.add((new Zt).copy(o[l.c]).sub(p).multiplyScalar(s))}e.add(d),i.add(u),r.add(p),d=e,u=i,p=r}const f=new Zt,m=nn.checkIntersection(this,h,t,a,d,u,p,f);if(m){if(o&&o[c]){const t=o[c],e=(new Ft).copy(t[0]),n=(new Ft).copy(t[1]),i=(new Ft).copy(t[2]);m.uv=nn.uvIntersection(f,new Ie(d,u,p),e,n,i)}m.face=l,m.faceIndex=c,e.push(m)}}}}clone(){return new this.constructor(this.geometry,this.material).copy(this)}}class rn extends se{constructor(){super(...arguments),this.type="Bone"}}const sn=new Wt,on=new Wt;class an{constructor(t=[],e){if(this.bones=[],this.boneInverses=[],this.bones=t.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),void 0===e)this.calculateInverses();else if(this.bones.length===e.length)this.boneInverses=e.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length.");for(let t=0,e=this.bones.length;t<e;t++)this.boneInverses.push(new Wt)}}calculateInverses(){this.boneInverses=[];for(let t=0,e=this.bones.length;t<e;t++){const e=new Wt;this.bones[t]&&e.getInverse(this.bones[t].matrixWorld),this.boneInverses.push(e)}}pose(){for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&e.matrixWorld.getInverse(this.boneInverses[t])}for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&(e.parent&&e.parent instanceof rn?(e.matrix.getInverse(e.parent.matrixWorld),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))}}update(){const t=this.bones,e=this.boneInverses,n=this.boneMatrices,i=this.boneTexture;for(let i=0,r=t.length;i<r;i++){const r=t[i]?t[i].matrixWorld:on;sn.multiplyMatrices(r,e[i]),sn.toArray(n,16*i)}void 0!==i&&(i.needsUpdate=!0)}getBoneByName(t){for(let e=0,n=this.bones.length;e<n;e++){const n=this.bones[e];if(n.name===t)return n}}clone(){return new this.constructor(this.bones,this.boneInverses)}}class cn extends nn{constructor(t,e){super(t,e),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Wt,this.bindMatrixInverse=new Wt;const n=this.initBones(),i=new an(n);this.bind(i,this.matrixWorld),this.normalizeSkinWeights()}initBones(){const t=[];if(this.geometry&&this.geometry instanceof Fe&&void 0!==this.geometry.bones){for(let e=0,n=this.geometry.bones.length;e<n;e++){const n=this.geometry.bones[e],i=new rn;t.push(i),i.name=n.name,i.position.fromArray(n.pos),i.quaternion.fromArray(n.rotq),void 0!==n.scl&&i.scale.fromArray(n.scl)}for(let e=0,n=this.geometry.bones.length;e<n;e++){const n=this.geometry.bones[e];-1!==n.parent&&null!==n.parent&&void 0!==t[n.parent]?t[n.parent].add(t[e]):this.add(t[e])}}return this.updateMatrixWorld(!0),t}bind(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.getInverse(e)}pose(){this.skeleton.pose()}normalizeSkinWeights(){if(this.geometry&&this.geometry instanceof Fe)for(let t=0;t<this.geometry.skinWeights.length;t++){const e=this.geometry.skinWeights[t],n=1/e.manhattanLength();n!==1/0?e.multiplyScalar(n):e.set(1,0,0,0)}else if(this.geometry&&this.geometry instanceof en){const t=new s,e=this.geometry.attributes.skinWeight;for(let n=0;n<e.count;n++){t.x=e.getProperty(n,"x"),t.y=e.getProperty(n,"y"),t.z=e.getProperty(n,"z"),t.w=e.getProperty(n,"w");const i=1/t.manhattanLength();i!==1/0?t.multiplyScalar(i):t.set(1,0,0,0),e.setProperty(n,"xyzw",t)}}}updateMatrixWorld(t=!1){return super.updateMatrixWorld(t),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode),this}clone(){return new this.constructor(this.geometry,this.material).copy(this)}}class ln extends Ke{constructor(){super(...arguments),this.type="LineLoop"}}class hn extends se{constructor(){super(...arguments),this.type="IGroup"}}class dn extends Bt{constructor(t,e,n,i,r,s,o,a,c){super(t,e,n,i,r,s,o,a,c),this.generateMipmaps=!1}update(){const t=this.image;return t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0),this}}class un extends Bt{constructor(t,e,n,i,r,s,o,a,c,l,h,d){super(null,i,r,s,o,a,c,l,h,d),this.image={data:t,width:e,height:n},this.magFilter=void 0!==o?o:F,this.minFilter=void 0!==a?a:F,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class pn extends Bt{constructor(t,e,n,i,r,s,o,a,c,l,h,d){super(null,i,r,s,o,a,c,l,h,d),this.image={width:e,height:n},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}class fn extends Bt{constructor(t=[],e=I,n,i,r,s,o,a,c,l){super(t,e,n,i,r,s,o,a,c,l),this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class mn extends Bt{constructor(t,e,n,i,r,s,o,a,c){super(t,e,n,i,r,s,o,a,c),this.needsUpdate=!0}}class gn extends Bt{constructor(t,e,n,i,r,s,o,a,c,l,h){if((a=void 0!==a?a:at)!==at&&a!==ct)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===c&&a===at&&(c=X),void 0===c&&a===ct&&(c=tt),super(null,n,i,r,s,o,a,c,l,h),this.image={width:t,height:e},this.magFilter=void 0!==s?s:F,this.minFilter=void 0!==o?o:F,this.flipY=!1,this.generateMipmaps=!1}}class vn extends Fe{constructor(t,e,n,i,r,s,o,a){super(),this.type="CylinderGeometry",this.parameters={height:n,heightSegments:r,openEnded:s,radialSegments:i,radiusBottom:e,radiusTop:t,thetaLength:a,thetaStart:o},this.fromBufferGeometry(new yn(t,e,n,i,r,s,o,a)),this.mergeVertices()}}class yn extends en{constructor(t=1,e=1,n=1,i=9,r=1,s=!1,o=0,a=2*Math.PI){super(),this.type="CylinderBufferGeometry",this.parameters={height:n,heightSegments:r,openEnded:s,radialSegments:i,radiusBottom:e,radiusTop:t,thetaLength:a,thetaStart:o},i=Math.floor(i),r=Math.floor(r);const c=[],l=[],h=[],d=[];let u=0;const p=[],f=n/2;let m=0;const g=n=>{let r,s,p=0;const g=n?t:e,v=n?1:-1;r=u;for(let t=1;t<=i;t++)l.push(0,f*v,0),h.push(0,v,0),d.push(.5,.5),u++;s=u;for(let t=0;t<=i;t++){const e=t/i*a+o,n=Math.cos(e),r=Math.sin(e);l.push(g*r,f*v,g*n),h.push(0,v,0),d.push(.5*n+.5,.5*r*v+.5),u++}for(let t=0;t<i;t++){const e=r+t,i=s+t;n?c.push(i,i+1,e):c.push(i+1,i,e),p+=3}this.addGroup(m,p,!0===n?1:2),m+=p};(()=>{let s=0;const g=(e-t)/n;for(let s=0;s<=r;s++){const c=[],m=s/r,v=m*(e-t)+t;for(let t=0;t<=i;t++){const e=t/i,r=e*a+o,s=Math.sin(r),p=Math.cos(r);l.push(v*s,-m*n+f,v*p);const y=new Zt;y.set(s,g,p).normalize(),h.push(y.x,y.y,y.z),d.push(e,1-m),c.push(u++)}p.push(c)}for(let t=0;t<i;t++)for(let e=0;e<r;e++){const n=p[e][t],i=p[e+1][t],r=p[e+1][t+1],o=p[e][t+1];c.push(n,i,o),c.push(i,r,o),s+=6}this.addGroup(m,s,0),m+=s})(),!1===s&&(t>0&&g(!0),e>0&&g(!1)),this.setIndex(c),this.addAttribute("position",new Ye(l,3)),this.addAttribute("normal",new Ye(h,3)),this.addAttribute("uv",new Ye(d,2))}}class xn extends Fe{constructor(t,e,n,i,r,s,o){super(),this.type="ConeGeometry",vn.call(this,0,t,e,n,i,r,s,o),this.parameters={height:e,heightSegments:i,openEnded:r,radialSegments:n,radius:t,thetaLength:o,thetaStart:s}}}class _n extends en{constructor(t,e,n,i,r,s,o){super(),this.type="ConeBufferGeometry",yn.call(this,0,t,e,n,i,r,s,o),this.parameters={height:e,heightSegments:i,openEnded:r,radialSegments:n,radius:t,thetaLength:o,thetaStart:s}}}class Mn extends Fe{constructor(t,e,n,i){super(),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaLength:i,thetaStart:n},this.fromBufferGeometry(new wn(t,e,n,i)),this.mergeVertices()}}class wn extends en{constructor(t=1,e,n=0,i=2*Math.PI){super(),this.type="CircleBufferGeometry",this.parameters={radius:t,segments:e,thetaLength:i,thetaStart:n},e=void 0!==e?Math.max(3,e):8;const r=[],s=[],o=[],a=[];s.push(0,0,0),o.push(0,0,1),a.push(.5,.5);for(let r=0,c=3;r<=e;r++,c+=3){const l=n+r/e*i;s.push(t*Math.cos(l),t*Math.sin(l),0),o.push(0,0,1),a.push((s[c]/t+1)/2,(s[c+1]/t+1)/2)}for(let t=1;t<=e;t++)r.push(t,t+1,0);this.setIndex(r),this.addAttribute("position",new Ye(s,3)),this.addAttribute("normal",new Ye(o,3)),this.addAttribute("uv",new Ye(a,2))}}class Sn extends Fe{constructor(t,e,n,i,r,s){super(),this.type="BoxGeometry",this.parameters={depth:n,depthSegments:s,height:e,heightSegments:r,width:t,widthSegments:i}}}class bn extends en{constructor(t=1,e=1,n=1,i=1,r=1,s=1){super(),this.type="BoxBufferGeometry",this.parameters={depth:n,depthSegments:s,height:e,heightSegments:r,width:t,widthSegments:i},i=Math.floor(i),r=Math.floor(r);const o=[],a=[],c=[],l=[];let h=0,d=0;const u=(t,e,n,i,r,s,u,p,f,m,g)=>{const v=s/f,y=u/m,x=s/2,_=u/2,M=p/2,w=f+1,S=m+1;let b=0,L=0;for(let s=0;s<S;s++){const o=s*y-_;for(let h=0;h<w;h++){const d=h*v-x,u=new Zt;u[t]=d*i,u[e]=o*r,u[n]=M,a.push(u.x,u.y,u.z),u[t]=0,u[e]=0,u[n]=p>0?1:-1,c.push(u.x,u.y,u.z),l.push(h/f),l.push(1-s/m),b+=1}}for(let t=0;t<m;t++)for(let e=0;e<f;e++){const n=h+e+w*t,i=h+e+w*(t+1),r=h+(e+1)+w*(t+1),s=h+(e+1)+w*t;o.push(n,i,s),o.push(i,r,s),L+=6}this.addGroup(d,L,g),d+=L,h+=b};u("z","y","x",-1,-1,n,e,t,s=Math.floor(s),r,0),u("z","y","x",1,-1,n,e,-t,s,r,1),u("x","z","y",1,1,t,n,e,i,s,2),u("x","z","y",1,-1,t,n,-e,i,s,3),u("x","y","z",1,-1,t,e,n,i,r,4),u("x","y","z",-1,-1,t,e,-n,i,r,5),this.setIndex(o),this.addAttribute("position",new Ye(a,3)),this.addAttribute("normal",new Ye(c,3)),this.addAttribute("uv",new Ye(l,2))}}class Ln extends ne{constructor(t=50,e=1,n=.1,i=2e3){super(),this.type="PerspectiveCamera",this.focus=10,this._fov=50,this._zoom=1,this._near=.1,this._far=2e3,this._aspect=1,this._view=null,this._filmGauge=35,this._filmOffset=0,this._fov=t,this._aspect=e,this._near=n,this._far=i,this.updateProjectionMatrix()}get fov(){return this._fov}set fov(t){this._fov=t,this.updateProjectionMatrix()}get zoom(){return this._zoom}set zoom(t){this._zoom=t,this.updateProjectionMatrix()}get near(){return this._near}set near(t){this._near=t,this.updateProjectionMatrix()}get far(){return this._far}set far(t){this._far=t,this.updateProjectionMatrix()}get aspect(){return this._aspect}set aspect(t){this._aspect=t,this.updateProjectionMatrix()}get view(){return this._view}get filmGauge(){return this._filmGauge}set filmGauge(t){this._filmGauge=t,this.updateProjectionMatrix()}get filmOffset(){return this._filmOffset}set filmOffset(t){this._filmOffset=t,this.updateProjectionMatrix()}setFocalLength(t){const e=.5*this.getFilmHeight()/t;return this._fov=2*r.RAD2DEG*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*r.DEG2RAD*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*r.RAD2DEG*Math.atan(Math.tan(.5*r.DEG2RAD*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,n,i,r,s){return this._view={enabled:!0,fullHeight:e,fullWidth:t,height:s,offsetX:n,offsetY:i,width:r},this.updateProjectionMatrix()}clearViewOffset(){return null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*r.DEG2RAD*this.fov)/this.zoom,n=2*e,i=this.aspect*n,s=-.5*i;const o=this.view;if(null!==this.view&&this.view.enabled){const t=o.fullWidth,r=o.fullHeight;s+=o.offsetX*i/t,e-=o.offsetY*n/r,i*=o.width/t,n*=o.height/r}const a=this.filmOffset;return 0!==a&&(s+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+i,e,e-n,t,this.far),this}copy(t){return super.copy(t),this._fov=t.fov,this._zoom=t.zoom,this._near=t.near,this._far=t.far,this.focus=t.focus,this._aspect=t.aspect,this._view=null===t.view?null:Object.assign({},t.view),this._filmGauge=t.filmGauge,this._filmOffset=t.filmOffset,this.updateProjectionMatrix()}clone(){return(new this.constructor).copy(this)}}class Pn{constructor(t){this.bias=0,this.radius=1,this.mapSize=new Ft(512,512),this.map=null,this.matrix=new Wt,this.camera=t}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}}class An extends Pn{constructor(){super(new Ln(50,1,.5,500))}update(t){const e=this.camera,n=2*r.RAD2DEG*t.angle,i=this.mapSize.width/this.mapSize.height,s=t.distance||e.far;return n===e.fov&&i===e.aspect&&s===e.far||(e.fov=n,e.aspect=i,e.far=s),this}clone(){return super.clone()}}class Tn extends se{constructor(t=new qt,e=1){super(),this.type="Light",this.intensity=1,this.receiveShadow=!1,this.color=t,this.intensity=e}copy(t){return super.copy(t),this.color.copy(t.color),this.intensity=t.intensity,this}}class En extends Tn{constructor(t,e,n=0,i=Math.PI/3,r=0,s=1){super(t,e),this.type="SpotLight",this.target=new se,this.distance=0,this.angle=Math.PI/3,this.penumbra=0,this.decay=0,this.position=se.DefaultUp.clone(),this.updateMatrix(),this.distance=n,this.angle=i,this.penumbra=r,this.decay=s,this.shadow=new An}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}copy(t){return super.copy(t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}class Cn extends Tn{constructor(t,e,n=0,i=1){super(t,e),this.type="PointLight",this.distance=0,this.decay=1,this.distance=n,this.decay=i,this.shadow=new Pn(new Ln(90,1,.5,500))}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}copy(t){return super.copy(t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}class Dn extends Tn{constructor(t,e,n=10,i=10){super(t,e),this.type="RectAreaLight",this.width=10,this.height=10,this.width=n,this.height=i}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}}class Nn extends Tn{constructor(t,e,n){super(t,n),this.type="HemisphereLight",this.castShadow=!1,this.groundColor=e,this.position=se.DefaultUp.clone(),this.updateMatrix()}copy(t){return super.copy(t),this.groundColor.copy(t.groundColor),this}}class In extends ne{constructor(t=0,e=0,n=0,i=0,r=.1,s=2e3){super(),this.type="OrthographicCamera",this._left=0,this._right=0,this._top=0,this._bottom=0,this._zoom=1,this._near=.1,this._far=2e3,this._view=null,this._left=t,this._right=e,this._top=n,this._bottom=i,this._near=r,this._far=s,this.updateProjectionMatrix()}get zoom(){return this._zoom}set zoom(t){this._zoom=t,this.updateProjectionMatrix()}get near(){return this._near}set near(t){this._near=t,this.updateProjectionMatrix()}get far(){return this._far}set far(t){this._far=t,this.updateProjectionMatrix()}get left(){return this._left}set left(t){this._left=t,this.updateProjectionMatrix()}get right(){return this._right}set right(t){this._right=t,this.updateProjectionMatrix()}get top(){return this._top}set top(t){this._top=t,this.updateProjectionMatrix()}get bottom(){return this._bottom}set bottom(t){this._bottom=t,this.updateProjectionMatrix()}get view(){return this._view}setViewOffset(t,e,n,i,r,s){return this._view={enabled:!0,fullHeight:e,fullWidth:t,height:s,offsetX:n,offsetY:i,width:r},this.updateProjectionMatrix()}clearViewOffset(){return null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-t,s=n+t,o=i+e,a=i-e;if(null!==this.view&&this.view.enabled){const t=this.zoom/(this.view.width/this.view.fullWidth),e=this.zoom/(this.view.height/this.view.fullHeight),n=(this.right-this.left)/this._view.width,i=(this.top-this.bottom)/this._view.height;s=(r+=n*(this.view.offsetX/t))+n*(this.view.width/t),a=(o-=i*(this.view.offsetY/e))-i*(this.view.height/e)}return this.projectionMatrix.makeOrthographic(r,s,o,a,this.near,this.far),this}copy(t){return super.copy(t),this._top=t.top,this._bottom=t.bottom,this._left=t.left,this._right=t.right,this._zoom=t.zoom,this._near=t.near,this._far=t.far,this._view=null===t.view?null:Object.assign({},t.view),this.updateProjectionMatrix()}clone(){return(new this.constructor).copy(this)}}class Rn extends Pn{constructor(){super(new In(-5,5,5,-5,.5,500))}}class zn extends Tn{constructor(t,e){super(t,e),this.type="DirectionalLight",this.target=new se,this.shadow=new Rn,this.position=se.DefaultUp.clone(),this.updateMatrix()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}class Un extends Tn{constructor(t,e){super(t,e),this.type="AmbientLight",this.castShadow=!1}}class Fn{static getContext(){return void 0===Fn.context&&(Fn.context=new(window.AudioContext||window.webkitAudioContext)),Fn.context}static setContext(t){Fn.context=t}}Fn.context=void 0;class Gn extends se{constructor(){super(),this.type="AudioListener",this.context=Fn.getContext(),this.filter=null,this.gain=this.context.createGain(),this.gain.connect(this.context.destination)}getInput(){return this.gain}removeFilter(){null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null)}getFilter(){return this.filter}setFilter(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(t){return this.gain.gain.value=t,this}updateMatrixWorld(t=!1){super.updateMatrixWorld(t);const e=new Zt,n=new jt,i=new Zt,r=new Zt,s=this.context.listener,o=this.up;return this.matrixWorld.decompose(e,n,i),r.set(0,0,-1).applyQuaternion(n),s.positionX?(s.positionX.setValueAtTime(e.x,this.context.currentTime),s.positionY.setValueAtTime(e.y,this.context.currentTime),s.positionZ.setValueAtTime(e.z,this.context.currentTime),s.forwardX.setValueAtTime(r.x,this.context.currentTime),s.forwardY.setValueAtTime(r.y,this.context.currentTime),s.forwardZ.setValueAtTime(r.z,this.context.currentTime),s.upX.setValueAtTime(o.x,this.context.currentTime),s.upY.setValueAtTime(o.y,this.context.currentTime),s.upZ.setValueAtTime(o.z,this.context.currentTime)):(s.setPosition(e.x,e.y,e.z),s.setOrientation(r.x,r.y,r.z,o.x,o.y,o.z)),this}}class Bn extends se{constructor(t){super(),this.type="Audio",this.startTime=0,this.offset=0,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this.autoplay=!1,this.buffer=null,this.loop=!1,this.playbackRate=1,this.filters=[],this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput())}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.source=t,this.sourceType="audioNode",this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this}play(){if(!0===this.isPlaying)return console.warn("THREE.Audio: Audio is already playing."),this;if(!1===this.hasPlaybackControl)return console.warn("THREE.Audio: this Audio has no playback control."),this;const t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.onended=this.onEnded.bind(this),t.playbackRate.setValueAtTime(this.playbackRate,this.startTime),this.startTime=this.context.currentTime,t.start(this.startTime,this.offset),this.isPlaying=!0,this.source=t,this.connect()}pause(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),this):(!0===this.isPlaying&&(this.source.stop(),this.offset+=(this.context.currentTime-this.startTime)*this.playbackRate,this.isPlaying=!1),this)}stop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),this):(this.source.stop(),this.offset=0,this.isPlaying=!1,this)}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this}getFilters(){return this.filters}setFilters(t=[]){return!0===this.isPlaying?(this.disconnect(),this.filters=t,this.connect()):this.filters=t,this}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),this):(this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setValueAtTime(this.playbackRate,this.context.currentTime),this)}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(t){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),this):(this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this)}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.value=t,this}}class On extends Bn{constructor(t){super(t),this.panner=this.context.createPanner(),this.panner.connect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(t){this.panner.refDistance=t}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(t){this.panner.rolloffFactor=t}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(t){this.panner.distanceModel=t}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(t){this.panner.maxDistance=t}updateMatrixWorld(t=!1){super.updateMatrixWorld(t);const e=new Zt;return e.setFromMatrixPosition(this.matrixWorld),this.panner.setPosition(e.x,e.y,e.z),this}}class kn{constructor(t,e=2048){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=e,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let t=0;const e=this.getFrequencyData();for(let n=0;n<e.length;n++)t+=e[n];return t/e.length}}class Vn extends en{constructor(){super(...arguments),this.type="InstancedBufferGeometry"}copy(t){return super.copy(t),this.maxInstancedCount=t.maxInstancedCount,this}clone(){return(new this.constructor).copy(this)}}class Hn{constructor(t,e,n,i,s=!1){this.uuid=r.generateUUID(),this.array=void 0,this.stride=1,this.count=0,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0,this.normalized=!1,this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.itemSize=n,this.offset=i,this.normalized=s}set needsUpdate(t){!0===t&&this.version++}setArray(t){return this.count=void 0!==t?t.length/this.stride:0,this.array=t,this}setDynamic(t){return this.dynamic=t,this}copy(t){return this.array=new t.array.constructor(t.array),this.stride=t.stride,this.count=t.count,this.dynamic=t.dynamic,this}set(t,e=0){return this.array.set(t,e),this}get(t=0,e=1){return this.array.slice(t,e)}copyAt(t,e,n){t*=this.stride,n*=e.stride;for(let i=0,r=this.stride;i<r;i++)this.array[t+i]=e.array[n+i];return this}clone(){return new this.constructor(this.array,this.stride).copy(this)}setProperty(t,e,n){if((e=e.toLowerCase())&&e.length<=4&&0===e.replace(/[xyzw]/g,"").length){const i={x:0,y:1,z:2};1===e.length&&"number"==typeof n?this.array[t*this.stride+this.offset+i[e.charAt(0)]]=n:2===e.length&&n instanceof Ft?(this.array[t*this.stride+this.offset+i[e.charAt(0)]]=n.x,this.array[t*this.stride+this.offset+i[e.charAt(1)]]=n.y):3===e.length&&n instanceof Zt?(this.array[t*this.stride+this.offset+i[e.charAt(0)]]=n.x,this.array[t*this.stride+this.offset+i[e.charAt(1)]]=n.y,this.array[t*this.stride+this.offset+i[e.charAt(2)]]=n.z):4===e.length&&n instanceof s&&(this.array[t*this.stride+this.offset+i[e.charAt(0)]]=n.x,this.array[t*this.stride+this.offset+i[e.charAt(1)]]=n.y,this.array[t*this.stride+this.offset+i[e.charAt(2)]]=n.z,this.array[t*this.stride+this.offset+i[e.charAt(3)]]=n.w)}return this}getProperty(t,e){if((e=e.toLowerCase())&&e.length<=4&&0===e.replace(/[xyzw]/g,"").length){const n={x:0,y:1,z:2};if(1===e.length)return this.array[t*this.stride+this.offset+n[e.charAt(0)]];if(2===e.length)return new Ft(this.array[t*this.stride+this.offset+n[e.charAt(0)]],this.array[t*this.stride+this.offset+n[e.charAt(1)]]);if(3===e.length)return new Zt(this.array[t*this.stride+this.offset+n[e.charAt(0)]],this.array[t*this.stride+this.offset+n[e.charAt(1)]],this.array[t*this.stride+this.offset+n[e.charAt(2)]]);if(4===e.length)return new s(this.array[t*this.stride+this.offset+n[e.charAt(0)]],this.array[t*this.stride+this.offset+n[e.charAt(1)]],this.array[t*this.stride+this.offset+n[e.charAt(2)]],this.array[t*this.stride+this.offset+n[e.charAt(3)]])}}}class qn extends Hn{constructor(t,e,n,i,r=!1,s=1){super(t,e,n,i,r),this.meshPerAttribute=1,this.meshPerAttribute=s}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}}class Wn extends Be{constructor(t,e,n=!1,i=1){super(t,e,n),this.meshPerAttribute=1,this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}}function Xn(t,e,n,i=!1){if(!1!==t.visible&&(t.raycast(e,n),!0===i)){const i=t.children;for(let t=0,r=i.length;t<r;t++)Xn(i[t],e,n,!0)}}class Yn{constructor(t,e,n=0,i=1/0){this.params={LOD:{},Line:{},Mesh:{},Points:{threshold:1},Sprite:{}},this.near=0,this.far=1/0,this.linePrecision=1,this.ray=new Qe(t,e),this.near=n,this.far=i}set(t,e){return this.ray.set(t,e),this}setFromCamera(t,e){return e&&e instanceof Ln?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5),Ee(this.ray.direction,e),this.ray.direction.sub(this.ray.origin).normalize()):e&&e instanceof In?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)),Ee(this.ray.origin,e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld)):console.error("THREE.Raycaster: Unsupported camera type."),this}intersectObject(t,e=!1){const n=[];return Xn(t,this,n,e),n.sort((t,e)=>t.distance-e.distance),n}intersectObjects(t,e=!1){const n=[];for(let i=0,r=t.length;i<r;i++)Xn(t[i],this,n,e);return n.sort((t,e)=>t.distance-e.distance),n}}class jn{constructor(t=!1){this.autoStart=!1,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1,this.autoStart=t}start(){this.startTime=("undefined"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const e=("undefined"==typeof performance?Date:performance).now();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}class Zn{constructor(t=new Ne,e=new Ne,n=new Ne,i=new Ne,r=new Ne,s=new Ne){this.planes=[t,e,n,i,r,s]}set(t,e,n,i,r,s){const o=this.planes;return o[0].copy(t),o[1].copy(e),o[2].copy(n),o[3].copy(i),o[4].copy(r),o[5].copy(s),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}clone(){return(new this.constructor).copy(this)}setFromMatrix(t){const e=this.planes,n=t.elements,i=n[0],r=n[1],s=n[2],o=n[3],a=n[4],c=n[5],l=n[6],h=n[7],d=n[8],u=n[9],p=n[10],f=n[11],m=n[12],g=n[13],v=n[14],y=n[15],x=(t,e,n,i,r)=>{t.normal.set(e,n,i),t.constant=r,t.normalize()};return x(e[0],o-i,h-a,f-d,y-m),x(e[1],o+i,h+a,f+d,y+m),x(e[2],o+r,h+c,f+u,y+g),x(e[3],o-r,h-c,f-u,y-g),x(e[4],o-s,h-l,f-p,y-v),x(e[5],o+s,h+l,f+p,y+v),this}intersectsObject(t){const e=t.geometry;null===e.boundingSphere&&e.computeBoundingSphere();const n=(new Pe).copy(e.boundingSphere).applyMatrix4(t.matrixWorld);return this.intersectsSphere(n)}intersectsSprite(t){const e=new Pe;return e.center.set(0,0,0),e.radius=.7071067811865476,e.applyMatrix4(t.matrixWorld),this.intersectsSphere(e)}intersectsSphere(t){const e=this.planes,n=t.center,i=-t.radius;for(let t=0;t<6;t++)if(e[t].distanceToPoint(n)<i)return!1;return!0}intersectsBox(t){const e=new Zt,n=new Zt,i=this.planes;for(let r=0;r<6;r++){const s=i[r];e.x=s.normal.x>0?t.min.x:t.max.x,n.x=s.normal.x>0?t.max.x:t.min.x,e.y=s.normal.y>0?t.min.y:t.max.y,n.y=s.normal.y>0?t.max.y:t.min.y,e.z=s.normal.z>0?t.min.z:t.max.z,n.z=s.normal.z>0?t.max.z:t.min.z;const o=s.distanceToPoint(e),a=s.distanceToPoint(n);if(o<0&&a<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}}class Qn{constructor(){this.elements=[1,0,0,1]}set(t,e,n,i){const r=this.elements;return r[0]=t,r[1]=n,r[3]=e,r[4]=i,this}identity(){return this.set(1,0,0,1)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[2],e[1],e[3])}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,s=n[0],o=n[2],a=n[1],c=n[3],l=i[0],h=i[2],d=i[1],u=i[3];return r[0]=s*l+o*d,r[2]=s*h+o*u,r[1]=a*l+c*d,r[3]=a*h+c*u,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[2]*=t,e[1]*=t,e[3]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2];return e*t[3]-n*i}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[2],e[2]=t,this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<4;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<4;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t}clone(){return(new this.constructor).copy(this)}}class $n{constructor(t,e){this.context=t,this.extensions=e}convert(t){const e=this.extensions,n=this.context;let i;if(t===R)return n.REPEAT;if(t===z)return n.CLAMP_TO_EDGE;if(t===U)return n.MIRRORED_REPEAT;if(t===F)return n.NEAREST;if(t===G)return n.NEAREST_MIPMAP_NEAREST;if(t===B)return n.NEAREST_MIPMAP_LINEAR;if(t===O)return n.LINEAR;if(t===k)return n.LINEAR_MIPMAP_NEAREST;if(t===V)return n.LINEAR_MIPMAP_LINEAR;if(t===H)return n.UNSIGNED_BYTE;if(t===$)return n.UNSIGNED_SHORT_4_4_4_4;if(t===K)return n.UNSIGNED_SHORT_5_5_5_1;if(t===J)return n.UNSIGNED_SHORT_5_6_5;if(t===q)return n.BYTE;if(t===W)return n.SHORT;if(t===X)return n.UNSIGNED_SHORT;if(t===Y)return n.INT;if(t===j)return n.UNSIGNED_INT;if(t===Z)return n.FLOAT;if(t===Q&&null!==(i=e.get("OES_texture_half_float")))return i.HALF_FLOAT_OES;if(t===et)return n.ALPHA;if(t===nt)return n.RGB;if(t===it)return n.RGBA;if(t===rt)return n.LUMINANCE;if(t===st)return n.LUMINANCE_ALPHA;if(t===at)return n.DEPTH_COMPONENT;if(t===ct)return n.DEPTH_STENCIL;if(t===p)return n.FUNC_ADD;if(t===f)return n.FUNC_SUBTRACT;if(t===m)return n.FUNC_REVERSE_SUBTRACT;if(t===y)return n.ZERO;if(t===x)return n.ONE;if(t===_)return n.SRC_COLOR;if(t===M)return n.ONE_MINUS_SRC_COLOR;if(t===w)return n.SRC_ALPHA;if(t===S)return n.ONE_MINUS_SRC_ALPHA;if(t===b)return n.DST_ALPHA;if(t===L)return n.ONE_MINUS_DST_ALPHA;if(t===P)return n.DST_COLOR;if(t===A)return n.ONE_MINUS_DST_COLOR;if(t===T)return n.SRC_ALPHA_SATURATE;if((t===lt||t===ht||t===dt||t===ut)&&null!==(i=e.get("WEBGL_compressed_texture_s3tc"))){if(t===lt)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===ht)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===dt)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===ut)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((t===pt||t===ft||t===mt||t===gt)&&null!==(i=e.get("WEBGL_compressed_texture_pvrtc"))){if(t===pt)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===ft)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===mt)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===gt)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(t===vt&&null!==(i=e.get("WEBGL_compressed_texture_etc1")))return i.COMPRESSED_RGB_ETC1_WEBGL;if((t===yt||t===xt||t===_t||t===Mt||t===wt||t===St||t===bt||t===Lt||t===Pt||t===At||t===Tt||t===Et||t===Ct||t===Dt)&&null!==(i=e.get("WEBGL_compressed_texture_astc")))return t;if((t===g||t===v)&&null!==(i=e.get("EXT_blend_minmax"))){if(t===g)return i.MIN_EXT;if(t===v)return i.MAX_EXT}return t===tt&&null!==(i=e.get("WEBGL_depth_texture"))?i.UNSIGNED_INT_24_8_WEBGL:0}}n.d(e,"WebGLRenderTargetCube",function(){return kt}),n.d(e,"WebGLRenderTarget",function(){return Ot}),n.d(e,"WebGLRenderer",function(){return Vt}),n.d(e,"ShaderLib",function(){return Jt}),n.d(e,"UniformsLib",function(){return $t}),n.d(e,"UniformsUtils",function(){return Kt}),n.d(e,"ShaderChunk",function(){return Qt}),n.d(e,"FogExp2",function(){return te}),n.d(e,"Fog",function(){return ee}),n.d(e,"Scene",function(){return oe}),n.d(e,"Sprite",function(){return be}),n.d(e,"LOD",function(){return Le}),n.d(e,"SkinnedMesh",function(){return cn}),n.d(e,"Skeleton",function(){return an}),n.d(e,"Bone",function(){return rn}),n.d(e,"Mesh",function(){return nn}),n.d(e,"LineSegments",function(){return $e}),n.d(e,"LineLoop",function(){return ln}),n.d(e,"Line",function(){return Ke}),n.d(e,"Points",function(){return Je}),n.d(e,"Group",function(){return hn}),n.d(e,"VideoTexture",function(){return dn}),n.d(e,"DataTexture",function(){return un}),n.d(e,"CompressedTexture",function(){return pn}),n.d(e,"CubeTexture",function(){return fn}),n.d(e,"CanvasTexture",function(){return mn}),n.d(e,"DepthTexture",function(){return gn}),n.d(e,"Texture",function(){return Bt}),n.d(e,"ConeGeometry",function(){return xn}),n.d(e,"ConeBufferGeometry",function(){return _n}),n.d(e,"CylinderGeometry",function(){return vn}),n.d(e,"CylinderBufferGeometry",function(){return yn}),n.d(e,"CircleGeometry",function(){return Mn}),n.d(e,"CircleBufferGeometry",function(){return wn}),n.d(e,"BoxGeometry",function(){return Sn}),n.d(e,"BoxBufferGeometry",function(){return bn}),n.d(e,"ShadowMaterial",function(){return le}),n.d(e,"SpriteMaterial",function(){return he}),n.d(e,"ShaderMaterial",function(){return de}),n.d(e,"PointsMaterial",function(){return ue}),n.d(e,"MeshPhysicalMaterial",function(){return pe}),n.d(e,"MeshStandardMaterial",function(){return fe}),n.d(e,"MeshPhongMaterial",function(){return me}),n.d(e,"MeshToonMaterial",function(){return ge}),n.d(e,"MeshNormalMaterial",function(){return ve}),n.d(e,"MeshLambertMaterial",function(){return ye}),n.d(e,"MeshDepthMaterial",function(){return xe}),n.d(e,"MeshDistanceMaterial",function(){return _e}),n.d(e,"MeshBasicMaterial",function(){return Me}),n.d(e,"LineDashedMaterial",function(){return Se}),n.d(e,"LineBasicMaterial",function(){return we}),n.d(e,"Material",function(){return ce}),n.d(e,"SpotLightShadow",function(){return An}),n.d(e,"SpotLight",function(){return En}),n.d(e,"PointLight",function(){return Cn}),n.d(e,"RectAreaLight",function(){return Dn}),n.d(e,"HemisphereLight",function(){return Nn}),n.d(e,"DirectionalLightShadow",function(){return Rn}),n.d(e,"DirectionalLight",function(){return zn}),n.d(e,"AmbientLight",function(){return Un}),n.d(e,"LightShadow",function(){return Pn}),n.d(e,"Light",function(){return Tn}),n.d(e,"PerspectiveCamera",function(){return Ln}),n.d(e,"OrthographicCamera",function(){return In}),n.d(e,"Camera",function(){return ne}),n.d(e,"AudioListener",function(){return Gn}),n.d(e,"PositionalAudio",function(){return On}),n.d(e,"AudioContext",function(){return Fn}),n.d(e,"AudioAnalyser",function(){return kn}),n.d(e,"Audio",function(){return Bn}),n.d(e,"InstancedBufferGeometry",function(){return Vn}),n.d(e,"BufferGeometry",function(){return en}),n.d(e,"Geometry",function(){return Fe}),n.d(e,"InterleavedBufferAttribute",function(){return Hn}),n.d(e,"InstancedInterleavedBufferAttribute",function(){return qn}),n.d(e,"InstancedBufferAttribute",function(){return Wn}),n.d(e,"BufferAttribute",function(){return Be}),n.d(e,"Int8BufferAttribute",function(){return Oe}),n.d(e,"Uint8BufferAttribute",function(){return ke}),n.d(e,"Uint8ClampedBufferAttribute",function(){return Ve}),n.d(e,"Int16BufferAttribute",function(){return He}),n.d(e,"Uint16BufferAttribute",function(){return qe}),n.d(e,"Int32BufferAttribute",function(){return We}),n.d(e,"Uint32BufferAttribute",function(){return Xe}),n.d(e,"Float32BufferAttribute",function(){return Ye}),n.d(e,"Float64BufferAttribute",function(){return je}),n.d(e,"Face3",function(){return Re}),n.d(e,"Object3D",function(){return se}),n.d(e,"Raycaster",function(){return Yn}),n.d(e,"Layers",function(){return ie}),n.d(e,"EventDispatcher",function(){return zt}),n.d(e,"Clock",function(){return jn}),n.d(e,"Triangle",function(){return Ie}),n.d(e,"Math",function(){return r}),n.d(e,"Plane",function(){return Ne}),n.d(e,"Frustum",function(){return Zn}),n.d(e,"Sphere",function(){return Pe}),n.d(e,"Ray",function(){return Qe}),n.d(e,"Matrix2",function(){return Qn}),n.d(e,"Matrix3",function(){return Ut}),n.d(e,"Matrix4",function(){return Wt}),n.d(e,"Box3",function(){return Ge}),n.d(e,"Line3",function(){return De}),n.d(e,"Euler",function(){return Yt}),n.d(e,"Vector4",function(){return s}),n.d(e,"Vector3",function(){return Zt}),n.d(e,"Vector2",function(){return Ft}),n.d(e,"Quaternion",function(){return jt}),n.d(e,"Color",function(){return qt}),n.d(e,"WebGLUtils",function(){return $n}),n.d(e,"REVISION",function(){return"90dev"}),n.d(e,"MOUSE",function(){return o}),n.d(e,"CullFaceNone",function(){return 0}),n.d(e,"CullFaceBack",function(){return 1}),n.d(e,"CullFaceFront",function(){return 2}),n.d(e,"CullFaceFrontBack",function(){return 3}),n.d(e,"FrontFaceDirectionCW",function(){return 0}),n.d(e,"FrontFaceDirectionCCW",function(){return 1}),n.d(e,"BasicShadowMap",function(){return 0}),n.d(e,"PCFShadowMap",function(){return 1}),n.d(e,"PCFSoftShadowMap",function(){return 2}),n.d(e,"FrontSide",function(){return a}),n.d(e,"BackSide",function(){return c}),n.d(e,"DoubleSide",function(){return l}),n.d(e,"FlatShading",function(){return h}),n.d(e,"SmoothShading",function(){return 2}),n.d(e,"NoColors",function(){return d}),n.d(e,"FaceColors",function(){return 1}),n.d(e,"VertexColors",function(){return 2}),n.d(e,"NoBlending",function(){return 0}),n.d(e,"NormalBlending",function(){return u}),n.d(e,"AdditiveBlending",function(){return 2}),n.d(e,"SubtractiveBlending",function(){return 3}),n.d(e,"MultiplyBlending",function(){return 4}),n.d(e,"CustomBlending",function(){return 5}),n.d(e,"AddEquation",function(){return p}),n.d(e,"SubtractEquation",function(){return f}),n.d(e,"ReverseSubtractEquation",function(){return m}),n.d(e,"MinEquation",function(){return g}),n.d(e,"MaxEquation",function(){return v}),n.d(e,"ZeroFactor",function(){return y}),n.d(e,"OneFactor",function(){return x}),n.d(e,"SrcColorFactor",function(){return _}),n.d(e,"OneMinusSrcColorFactor",function(){return M}),n.d(e,"SrcAlphaFactor",function(){return w}),n.d(e,"OneMinusSrcAlphaFactor",function(){return S}),n.d(e,"DstAlphaFactor",function(){return b}),n.d(e,"OneMinusDstAlphaFactor",function(){return L}),n.d(e,"DstColorFactor",function(){return P}),n.d(e,"OneMinusDstColorFactor",function(){return A}),n.d(e,"SrcAlphaSaturateFactor",function(){return T}),n.d(e,"NeverDepth",function(){return 0}),n.d(e,"AlwaysDepth",function(){return 1}),n.d(e,"LessDepth",function(){return 2}),n.d(e,"LessEqualDepth",function(){return E}),n.d(e,"EqualDepth",function(){return 4}),n.d(e,"GreaterEqualDepth",function(){return 5}),n.d(e,"GreaterDepth",function(){return 6}),n.d(e,"NotEqualDepth",function(){return 7}),n.d(e,"MultiplyOperation",function(){return C}),n.d(e,"MixOperation",function(){return 1}),n.d(e,"AddOperation",function(){return 2}),n.d(e,"NoToneMapping",function(){return 0}),n.d(e,"LinearToneMapping",function(){return D}),n.d(e,"ReinhardToneMapping",function(){return 2}),n.d(e,"Uncharted2ToneMapping",function(){return 3}),n.d(e,"CineonToneMapping",function(){return 4}),n.d(e,"UVMapping",function(){return N}),n.d(e,"CubeReflectionMapping",function(){return I}),n.d(e,"CubeRefractionMapping",function(){return 302}),n.d(e,"EquirectangularReflectionMapping",function(){return 303}),n.d(e,"EquirectangularRefractionMapping",function(){return 304}),n.d(e,"SphericalReflectionMapping",function(){return 305}),n.d(e,"CubeUVReflectionMapping",function(){return 306}),n.d(e,"CubeUVRefractionMapping",function(){return 307}),n.d(e,"RepeatWrapping",function(){return R}),n.d(e,"ClampToEdgeWrapping",function(){return z}),n.d(e,"MirroredRepeatWrapping",function(){return U}),n.d(e,"NearestFilter",function(){return F}),n.d(e,"NearestMipMapNearestFilter",function(){return G}),n.d(e,"NearestMipMapLinearFilter",function(){return B}),n.d(e,"LinearFilter",function(){return O}),n.d(e,"LinearMipMapNearestFilter",function(){return k}),n.d(e,"LinearMipMapLinearFilter",function(){return V}),n.d(e,"UnsignedByteType",function(){return H}),n.d(e,"ByteType",function(){return q}),n.d(e,"ShortType",function(){return W}),n.d(e,"UnsignedShortType",function(){return X}),n.d(e,"IntType",function(){return Y}),n.d(e,"UnsignedIntType",function(){return j}),n.d(e,"FloatType",function(){return Z}),n.d(e,"HalfFloatType",function(){return Q}),n.d(e,"UnsignedShort4444Type",function(){return $}),n.d(e,"UnsignedShort5551Type",function(){return K}),n.d(e,"UnsignedShort565Type",function(){return J}),n.d(e,"UnsignedInt248Type",function(){return tt}),n.d(e,"AlphaFormat",function(){return et}),n.d(e,"RGBFormat",function(){return nt}),n.d(e,"RGBAFormat",function(){return it}),n.d(e,"LuminanceFormat",function(){return rt}),n.d(e,"LuminanceAlphaFormat",function(){return st}),n.d(e,"RGBEFormat",function(){return ot}),n.d(e,"DepthFormat",function(){return at}),n.d(e,"DepthStencilFormat",function(){return ct}),n.d(e,"RGB_S3TC_DXT1_Format",function(){return lt}),n.d(e,"RGBA_S3TC_DXT1_Format",function(){return ht}),n.d(e,"RGBA_S3TC_DXT3_Format",function(){return dt}),n.d(e,"RGBA_S3TC_DXT5_Format",function(){return ut}),n.d(e,"RGB_PVRTC_4BPPV1_Format",function(){return pt}),n.d(e,"RGB_PVRTC_2BPPV1_Format",function(){return ft}),n.d(e,"RGBA_PVRTC_4BPPV1_Format",function(){return mt}),n.d(e,"RGBA_PVRTC_2BPPV1_Format",function(){return gt}),n.d(e,"RGB_ETC1_Format",function(){return vt}),n.d(e,"RGBA_ASTC_4x4_Format",function(){return yt}),n.d(e,"RGBA_ASTC_5x4_Format",function(){return xt}),n.d(e,"RGBA_ASTC_5x5_Format",function(){return _t}),n.d(e,"RGBA_ASTC_6x5_Format",function(){return Mt}),n.d(e,"RGBA_ASTC_6x6_Format",function(){return wt}),n.d(e,"RGBA_ASTC_8x5_Format",function(){return St}),n.d(e,"RGBA_ASTC_8x6_Format",function(){return bt}),n.d(e,"RGBA_ASTC_8x8_Format",function(){return Lt}),n.d(e,"RGBA_ASTC_10x5_Format",function(){return Pt}),n.d(e,"RGBA_ASTC_10x6_Format",function(){return At}),n.d(e,"RGBA_ASTC_10x8_Format",function(){return Tt}),n.d(e,"RGBA_ASTC_10x10_Format",function(){return Et}),n.d(e,"RGBA_ASTC_12x10_Format",function(){return Ct}),n.d(e,"RGBA_ASTC_12x12_Format",function(){return Dt}),n.d(e,"LoopOnce",function(){return 2200}),n.d(e,"LoopRepeat",function(){return 2201}),n.d(e,"LoopPingPong",function(){return 2202}),n.d(e,"InterpolateDiscrete",function(){return 2300}),n.d(e,"InterpolateLinear",function(){return 2301}),n.d(e,"InterpolateSmooth",function(){return 2302}),n.d(e,"ZeroCurvatureEnding",function(){return 2400}),n.d(e,"ZeroSlopeEnding",function(){return 2401}),n.d(e,"WrapAroundEnding",function(){return 2402}),n.d(e,"TrianglesDrawMode",function(){return Nt}),n.d(e,"TriangleStripDrawMode",function(){return 1}),n.d(e,"TriangleFanDrawMode",function(){return 2}),n.d(e,"LinearEncoding",function(){return It}),n.d(e,"sRGBEncoding",function(){return 3001}),n.d(e,"GammaEncoding",function(){return 3007}),n.d(e,"RGBEEncoding",function(){return 3002}),n.d(e,"LogLuvEncoding",function(){return 3003}),n.d(e,"RGBM7Encoding",function(){return 3004}),n.d(e,"RGBM16Encoding",function(){return 3005}),n.d(e,"RGBDEncoding",function(){return 3006}),n.d(e,"BasicDepthPacking",function(){return Rt}),n.d(e,"RGBADepthPacking",function(){return 3201})}])});