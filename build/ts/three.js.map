{"version":3,"sources":["webpack://THREE/webpack/bootstrap","webpack://THREE/./src/Three.ts","webpack://THREE/./src/audio/Audio.ts","webpack://THREE/./src/audio/AudioAnalyser.ts","webpack://THREE/./src/audio/AudioContext.ts","webpack://THREE/./src/audio/AudioListener.ts","webpack://THREE/./src/audio/PositionalAudio.ts","webpack://THREE/./src/cameras/ArrayCamera.ts","webpack://THREE/./src/cameras/Camera.ts","webpack://THREE/./src/cameras/OrthographicCamera.ts","webpack://THREE/./src/cameras/PerspectiveCamera.ts","webpack://THREE/./src/constants.ts","webpack://THREE/./src/core/BufferAttribute.ts","webpack://THREE/./src/core/BufferGeometry.ts","webpack://THREE/./src/core/Clock.ts","webpack://THREE/./src/core/DirectGeometry.ts","webpack://THREE/./src/core/EventDispatcher.ts","webpack://THREE/./src/core/Face3.ts","webpack://THREE/./src/core/Geometry.ts","webpack://THREE/./src/core/InstancedBufferAttribute.ts","webpack://THREE/./src/core/InstancedBufferGeometry.ts","webpack://THREE/./src/core/InstancedInterleavedBufferAttribute.ts","webpack://THREE/./src/core/InterleavedBufferAttribute.ts","webpack://THREE/./src/core/Layers.ts","webpack://THREE/./src/core/Object3D.ts","webpack://THREE/./src/core/Raycaster.ts","webpack://THREE/./src/extras/objects/ImmediateRenderObject.ts","webpack://THREE/./src/geometries/BoxGeometry.ts","webpack://THREE/./src/geometries/CircleGeometry.ts","webpack://THREE/./src/geometries/ConeGeometry.ts","webpack://THREE/./src/geometries/CylinderGeometry.ts","webpack://THREE/./src/geometries/Geometries.ts","webpack://THREE/./src/geometries/PlaneGeometry.ts","webpack://THREE/./src/lights/AmbientLight.ts","webpack://THREE/./src/lights/DirectionalLight.ts","webpack://THREE/./src/lights/DirectionalLightShadow.ts","webpack://THREE/./src/lights/HemisphereLight.ts","webpack://THREE/./src/lights/Light.ts","webpack://THREE/./src/lights/LightShadow.ts","webpack://THREE/./src/lights/PointLight.ts","webpack://THREE/./src/lights/RectAreaLight.ts","webpack://THREE/./src/lights/SpotLight.ts","webpack://THREE/./src/lights/SpotLightShadow.ts","webpack://THREE/./src/materials/LineBasicMaterial.ts","webpack://THREE/./src/materials/LineDashedMaterial.ts","webpack://THREE/./src/materials/Material.ts","webpack://THREE/./src/materials/Materials.ts","webpack://THREE/./src/materials/MeshBasicMaterial.ts","webpack://THREE/./src/materials/MeshDepthMaterial.ts","webpack://THREE/./src/materials/MeshDistanceMaterial.ts","webpack://THREE/./src/materials/MeshLambertMaterial.ts","webpack://THREE/./src/materials/MeshNormalMaterial.ts","webpack://THREE/./src/materials/MeshPhongMaterial.ts","webpack://THREE/./src/materials/MeshPhysicalMaterial.ts","webpack://THREE/./src/materials/MeshStandardMaterial.ts","webpack://THREE/./src/materials/MeshToonMaterial.ts","webpack://THREE/./src/materials/PointsMaterial.ts","webpack://THREE/./src/materials/RawShaderMaterial.ts","webpack://THREE/./src/materials/ShaderMaterial.ts","webpack://THREE/./src/materials/ShadowMaterial.ts","webpack://THREE/./src/materials/SpriteMaterial.ts","webpack://THREE/./src/math/Box3.ts","webpack://THREE/./src/math/Color.ts","webpack://THREE/./src/math/Euler.ts","webpack://THREE/./src/math/Frustum.ts","webpack://THREE/./src/math/Line3.ts","webpack://THREE/./src/math/Math.ts","webpack://THREE/./src/math/Matrix2.ts","webpack://THREE/./src/math/Matrix3.ts","webpack://THREE/./src/math/Matrix4.ts","webpack://THREE/./src/math/Plane.ts","webpack://THREE/./src/math/Quaternion.ts","webpack://THREE/./src/math/Ray.ts","webpack://THREE/./src/math/Sphere.ts","webpack://THREE/./src/math/Spherical.ts","webpack://THREE/./src/math/Triangle.ts","webpack://THREE/./src/math/Vector2.ts","webpack://THREE/./src/math/Vector3.ts","webpack://THREE/./src/math/Vector4.ts","webpack://THREE/./src/objects/Bone.ts","webpack://THREE/./src/objects/Group.ts","webpack://THREE/./src/objects/LOD.ts","webpack://THREE/./src/objects/Line.ts","webpack://THREE/./src/objects/LineLoop.ts","webpack://THREE/./src/objects/LineSegments.ts","webpack://THREE/./src/objects/Mesh.ts","webpack://THREE/./src/objects/Points.ts","webpack://THREE/./src/objects/Skeleton.ts","webpack://THREE/./src/objects/SkinnedMesh.ts","webpack://THREE/./src/objects/Sprite.ts","webpack://THREE/./src/renderers/WebGLRenderTarget.ts","webpack://THREE/./src/renderers/WebGLRenderTargetCube.ts","webpack://THREE/./src/renderers/WebGLRenderer.ts","webpack://THREE/./src/renderers/shaders/ShaderChunk.js","webpack://THREE/./src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/aomap_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/begin_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/bsdfs.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/clipping_planes_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/clipping_planes_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/clipping_planes_pars_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/clipping_planes_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/color_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/color_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/common.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/dithering_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/dithering_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/encodings_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/envmap_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/envmap_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/fog_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/fog_pars_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/fog_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/gradientmap_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/lights_pars.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/lights_physical_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/lights_template.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/map_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/normal_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/packing.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/project_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/skinning_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/uv2_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/uv_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib.ts","webpack://THREE/./src/renderers/shaders/ShaderLib/cube_frag.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/cube_vert.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/depth_frag.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/depth_vert.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/equirect_frag.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/equirect_vert.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/linedashed_frag.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/linedashed_vert.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/meshbasic_frag.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/meshbasic_vert.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/meshlambert_frag.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/meshlambert_vert.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/meshphong_frag.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/meshphong_vert.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/meshphysical_frag.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/meshphysical_vert.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/normal_frag.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/normal_vert.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/points_frag.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/points_vert.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/shadow_frag.glsl","webpack://THREE/./src/renderers/shaders/ShaderLib/shadow_vert.glsl","webpack://THREE/./src/renderers/shaders/UniformsLib.ts","webpack://THREE/./src/renderers/shaders/UniformsUtils.ts","webpack://THREE/./src/renderers/webgl/WebGLAttributes.ts","webpack://THREE/./src/renderers/webgl/WebGLBackground.ts","webpack://THREE/./src/renderers/webgl/WebGLBufferRenderer.ts","webpack://THREE/./src/renderers/webgl/WebGLCapabilities.ts","webpack://THREE/./src/renderers/webgl/WebGLClipping.ts","webpack://THREE/./src/renderers/webgl/WebGLExtensions.ts","webpack://THREE/./src/renderers/webgl/WebGLGeometries.ts","webpack://THREE/./src/renderers/webgl/WebGLIndexedBufferRenderer.ts","webpack://THREE/./src/renderers/webgl/WebGLLights.ts","webpack://THREE/./src/renderers/webgl/WebGLMorphtargets.ts","webpack://THREE/./src/renderers/webgl/WebGLObjects.ts","webpack://THREE/./src/renderers/webgl/WebGLProgram.ts","webpack://THREE/./src/renderers/webgl/WebGLPrograms.ts","webpack://THREE/./src/renderers/webgl/WebGLProperties.ts","webpack://THREE/./src/renderers/webgl/WebGLRenderLists.ts","webpack://THREE/./src/renderers/webgl/WebGLShader.ts","webpack://THREE/./src/renderers/webgl/WebGLShadowMap.ts","webpack://THREE/./src/renderers/webgl/WebGLSpriteRenderer.ts","webpack://THREE/./src/renderers/webgl/WebGLState.ts","webpack://THREE/./src/renderers/webgl/WebGLTextures.ts","webpack://THREE/./src/renderers/webgl/WebGLUniforms.ts","webpack://THREE/./src/renderers/webgl/WebGLUtils.ts","webpack://THREE/./src/scenes/Fog.ts","webpack://THREE/./src/scenes/FogExp2.ts","webpack://THREE/./src/scenes/Scene.ts","webpack://THREE/./src/textures/CanvasTexture.ts","webpack://THREE/./src/textures/CompressedTexture.ts","webpack://THREE/./src/textures/CubeTexture.ts","webpack://THREE/./src/textures/DataTexture.ts","webpack://THREE/./src/textures/DepthTexture.ts","webpack://THREE/./src/textures/Texture.ts","webpack://THREE/./src/textures/VideoTexture.ts","webpack://THREE/./src/utils.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","_WebGLRenderTargetCube","_WebGLRenderTarget","_WebGLRenderer","_ShaderLib","_UniformsLib","_UniformsUtils","_ShaderChunk","_FogExp","_Fog","_Scene","_Sprite","_LOD","_SkinnedMesh","_Skeleton","_Bone","_Mesh","_LineSegments","_LineLoop","_Line","_Points","_Group","_VideoTexture","_DataTexture","_CompressedTexture","_CubeTexture","_CanvasTexture","_DepthTexture","_Texture","_Geometries","_Materials","_SpotLightShadow","_SpotLight","_PointLight","_RectAreaLight","_HemisphereLight","_DirectionalLightShadow","_DirectionalLight","_AmbientLight","_LightShadow","_Light","_PerspectiveCamera","_OrthographicCamera","_ArrayCamera","_Camera","_AudioListener","_PositionalAudio","_AudioContext","_AudioAnalyser","_Audio","_InstancedBufferGeometry","_BufferGeometry","_Geometry","_InterleavedBufferAttribute","_InstancedInterleavedBufferAttribute","_InstancedBufferAttribute","_BufferAttribute","_Face","_Object3D","_Raycaster","_Layers","_EventDispatcher","_Clock","_Triangle","_Math","_Spherical","_Plane","_Frustum","_Sphere","_Ray","_Matrix","_Matrix2","_Matrix3","_Box","_Line2","_Euler","_Vector","_Vector2","_Vector3","_Quaternion","_Color","_ImmediateRenderObject","_WebGLUtils","_constants","_Object3D2","AudioWrapper","listener","_this","_possibleConstructorReturn","this","__proto__","getPrototypeOf","type","startTime","offset","isPlaying","hasPlaybackControl","sourceType","autoplay","buffer","loop","playbackRate","filters","context","gain","createGain","connect","getInput","audioNode","source","audioBuffer","play","console","warn","createBufferSource","onended","onEnded","bind","setValueAtTime","currentTime","start","stop","length","getOutput","disconnect","arguments","undefined","getFilters","filter","setFilters","AudioAnalyserWrapper","audio","fftSize","analyser","createAnalyser","data","Uint8Array","frequencyBinCount","getByteFrequencyData","getFrequencyData","AudioContextWrapper","window","AudioContext","webkitAudioContext","AudioListenerWrapper","getContext","destination","force","_get","position","Vector3","quaternion","Quaternion","scale","orientation","up","matrixWorld","decompose","set","applyQuaternion","positionX","x","positionY","y","positionZ","z","forwardX","forwardY","forwardZ","upX","upY","upZ","setPosition","setOrientation","PositionalAudio","panner","createPanner","refDistance","rolloffFactor","distanceModel","maxDistance","setFromMatrixPosition","_PerspectiveCamera2","ArrayCamera","cameras","Camera","matrixWorldInverse","Matrix4","projectionMatrix","getInverse","recursive","copy","constructor","worldQuaternion","_Camera2","OrthographicCamera","left","right","top","bottom","near","far","_left","_right","_top","_bottom","_zoom","_near","_far","_view","updateProjectionMatrix","fullWidth","fullHeight","width","height","enabled","offsetX","offsetY","view","dx","zoom","dy","cx","cy","zoomW","zoomH","scaleW","scaleH","makeOrthographic","assign","PerspectiveCamera","fov","aspect","focus","_fov","_aspect","_filmGauge","_filmOffset","focalLength","vExtentSlope","getFilmHeight","MathUtil","RAD2DEG","Math","atan","tan","DEG2RAD","filmGauge","min","max","skew","filmOffset","getFilmWidth","makePerspective","REVISION","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","BufferAttribute","array","itemSize","normalized","uuid","generateUUID","count","dynamic","updateRange","version","slice","index1","attribute","index2","colors","color","Color","g","b","vectors","vector","Vector2","Vector4","w","index","toLowerCase","replace","offsetMap","charAt","Int8BufferAttribute","_classCallCheck","Int8Array","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","_utils","_DirectGeometry","_EventDispatcher2","Object3D","bufferGeometryId","BufferGeometry","id","attributes","morphAttributes","groups","boundingBox","boundingSphere","drawRange","Infinity","Array","isArray","arrayMax","setIndex","materialIndex","push","matrix","applyMatrixToBufferAttribute","needsUpdate","normal","normalMatrix","Matrix3","getNormalMatrix","computeBoundingBox","computeBoundingSphere","angle","applyMatrix","makeRotationX","makeRotationY","makeRotationZ","makeTranslation","makeScale","obj","lookAt","updateMatrix","getCenter","negate","translate","geometry","Points","Line","positions","vertices","addAttribute","copyVector3sArray","copyColorsArray","lineDistances","copyArray","clone","Mesh","fromGeometry","points","point","direct","directGeometry","elementsNeedUpdate","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","DirectGeometry","_attribute","normals","_attribute2","_attribute3","uv","copyVector2sArray","uvs","Geometry","lineDistancesNeedUpdate","_attribute4","lineDistance","computeGroups","fromDirectGeometry","uvs2","morphTargets","morphTarget","skinIndices","copyVector4sArray","skinWeights","Box3","setBoxFromBufferAttribute","makeEmpty","isNaN","error","Sphere","box","center","maxRadiusSquare","il","getProperty","distanceToSquared","radius","sqrt","vA","vB","vC","pA","pB","pC","cb","ab","indices","addGroup","j","jl","group","_i","_il","fromArray","sub","cross","_i2","_il2","normalizeNormals","normalize","setProperty","geometry2","array2","_name","morphAttribute","_i3","_l","dispatchEvent","Clock","autoStart","oldTime","elapsedTime","running","performance","Date","now","getElapsedTime","getDelta","diff","newTime","faces","face","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphNormals","morphNormalsLength","hasSkinIndices","hasSkinWeights","a","vertexNormals","vertexColors","vertexUvs","concat","_vertexUvs","_j","morphNormal","EventDispatcher","_listeners","listeners","indexOf","listenerArray","splice","event","target","Face3","_Face2","GeometryFace","geometryId","applyMatrix4","applyMatrix3","uv2","tempNormals","tempUVs","tempUVs2","addFace","_this2","_i4","computeFaceNormals","f","fl","areaWeighted","v","vl","add","_f","_fl","_face","_v","_vl","_f2","_fl2","_face2","originalFaceNormal","originalVertexNormals","tmpGeo","_i5","faceNormals","_f3","_fl3","Triangle","computeVertexNormals","_f4","_fl4","_face3","faceNormal","_f5","_fl5","_face4","distanceTo","setFromPoints","materialIndexOffset","vertexOffset","thisVertices","thatVertices","thisFaces","thatFaces","thisUvs","thatUvs","thisColors","thatColors","vertexCopy","_i6","_il3","_i7","_il4","faceVertexNormals","faceVertexColors","faceCopy","_j2","_jl","_i8","_il5","uvCopy","_j3","_jl2","mesh","matrixAutoUpdate","merge","verticesMap","unique","changes","precisionPoints","precision","pow","key","round","join","faceIndicesToRemove","_i9","_il6","_i10","idx","sort","uvs1","newUvs1","newUvs2","_i11","_i12","_il7","_i13","_il8","_i14","_il9","uvsCopy","k","kl","_i15","_il10","_j4","_jl3","_j5","_jl4","_i16","_il11","_j6","_jl5","_j7","_jl6","_i17","_il12","_i18","_il13","_i19","_il14","_BufferAttribute2","InstancedBufferAttribute","meshPerAttribute","_BufferGeometry2","InstancedBufferGeometry","maxInstancedCount","InstancedInterleavedBufferAttribute","stride","InterleavedBufferAttribute","Layers","mask","channel","layers","object3DId","parent","children","DefaultUp","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","rotation","Euler","modelViewMatrix","onBeforeRender","onAfterRender","onChange","setFromEuler","setFromQuaternion","compose","multiplyMatrices","updateMatrixWorld","raycaster","intersections","q","premultiply","axis","setFromAxisAngle","euler","setFromRotationMatrix","multiply","rotateOnAxis","distance","vec","multiplyScalar","translateOnAxis","mat","remove","callback","traverse","traverseVisible","traverseAncestors","JSON","parse","stringify","result","order","_intersectObject","intersects","raycast","Raycaster","origin","direction","params","LOD","threshold","Sprite","linePrecision","ray","Ray","coords","camera","unprojectVector3OnCamera","transformDirection","objects","ImmediateRenderObject","material","_Geometry2","BoxGeometry","depth","widthSegments","heightSegments","depthSegments","parameters","fromBufferGeometry","BoxBufferGeometry","mergeVertices","floor","numberOfVertices","groupStart","buildPlane","u","uDir","vDir","width2","height2","depth2","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","iy","ix","_iy","_ix","CircleGeometry","segments","thetaStart","thetaLength","CircleBufferGeometry","PI","segment","cos","sin","_CylinderGeometry","ConeGeometry","radialSegments","openEnded","CylinderGeometry","_assertThisInitialized","ConeBufferGeometry","CylinderBufferGeometry","radiusTop","radiusBottom","indexArray","halfHeight","generateCap","centerIndexStart","centerIndexEnd","sign","_x","theta","cosTheta","sinTheta","_x2","generateTorso","slope","indexRow","_x3","_y","_PlaneGeometry","_ConeGeometry","_CircleGeometry","_BoxGeometry","PlaneGeometry","PlaneBufferGeometry","_Light2","AmbientLight","intensity","DirectionalLight","shadow","DirectionalLightShadow","_LightShadow2","HemisphereLight","skyColor","groundColor","Light","LightShadow","bias","mapSize","map","PointLight","decay","power","RectAreaLight","SpotLight","penumbra","SpotLightShadow","light","_Material2","LineBasicMaterial","setHex","lights","linecap","linejoin","linewidth","setValues","_LineBasicMaterial2","LineDashedMaterial","dashSize","gapSize","materialId","Material","alphaTest","blending","blendDst","blendDstAlpha","blendEquation","blendEquationAlpha","blendSrc","blendSrcAlpha","clipIntersection","clippingPlanes","clipShadows","colorWrite","depthFunc","depthTest","depthWrite","dithering","flatShading","fog","opacity","overdraw","onBeforeCompile","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","shadowSide","side","transparent","values","newValue","currentValue","setStyle","Number","srcPlanes","dstPlanes","_ShadowMaterial","_SpriteMaterial","_RawShaderMaterial","_ShaderMaterial","_PointsMaterial","_MeshPhysicalMaterial","_MeshStandardMaterial","_MeshPhongMaterial","_MeshToonMaterial","_MeshNormalMaterial","_MeshLambertMaterial","_MeshDepthMaterial","_MeshDistanceMaterial","_MeshBasicMaterial","_LineDashedMaterial","_LineBasicMaterial","_Material","MeshBasicMaterial","alphaMap","aoMap","aoMapIntensity","combine","envMap","lightMap","lightMapIntensity","reflectivity","refractionRatio","skinning","specularMap","wireframe","wireframeLinecap","wireframeLinejoin","wireframeLinewidth","MeshDepthMaterial","depthPacking","displacementMap","displacementScale","displacementBias","MeshDistanceMaterial","farDistance","nearDistance","referencePosition","MeshLambertMaterial","emissive","emissiveIntensity","emissiveMap","MeshNormalMaterial","paramenters","bumpMap","bumpScale","normalMap","normalScale","MeshPhongMaterial","shininess","specular","MeshPhysicalMaterial","clearCoat","clearCoatRoughness","defines","PHYSICAL","MeshStandardMaterial","STANDARD","envMapIntensity","metalness","metalnessMap","roughness","roughnessMap","_MeshPhongMaterial2","MeshToonMaterial","TOON","gradientMap","PointsMaterial","size","sizeAttenuation","_ShaderMaterial2","RawShaderMaterial","ShaderMaterial","uniforms","vertexShader","fragmentShader","clipping","extensions","derivatives","drawBuffers","fragDepth","shaderTextureLOD","defaultAttributeValues","UniformsUtils","ShadowMaterial","SpriteMaterial","minX","minY","minZ","maxX","maxY","maxZ","expandByPoint","halfSize","expandByObject","isEmpty","scalar","addScalar","node","v1","vectorFromBufferAttribute","sphere","closestPoint","clampPoint","plane","constant","clamp","clampedPoint","getSize","equals","HUE_TO_RGB","t","setRGB","hex","h","euclideanModulo","style","matches","exec","components","parseInt","parseFloat","setHSL","_hex","ColorKeywords","gammaFactor","safeInverse","getHex","toString","hsl","hue","saturation","lightness","delta","getHSL","alpha","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","EulerOrder","_order","DefaultOrder","onChangeCallback","_z","update","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","XYZ","asin","abs","atan2","YXZ","ZXY","ZYX","YZX","XZY","makeRotationFromQuaternion","newOrder","Frustum","p0","Plane","p1","p2","p3","p4","p5","planes","frustum","me","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setPlane","intersectsSphere","sprite","negRadius","distanceToPoint","d1","d2","Line3","end","line","clampToLine","startP","startEnd","startEnd2","dot","startEndStartP","closestPointToPointParameter","lut","toUpperCase","d0","random","d3","a1","a2","b1","b2","low","high","range","degrees","radians","ceil","log","LN2","Matrix2","n11","n12","n21","n22","mat2","ae","be","a11","a12","a21","a22","b11","b12","b21","b22","tmp","n13","n23","n31","n32","n33","mat3","mat4","a13","a23","a31","a32","a33","b13","b23","b31","b32","b33","e","throwOnDegenerate","t11","t12","t13","det","msg","Error","identity","detInv","matrix4","setFromMatrix4","transpose","tx","ty","sx","sy","n14","n24","n34","n41","n42","n43","n44","xAxis","yAxis","zAxis","scaleX","scaleY","scaleZ","af","bf","ce","cf","de","df","_ce","_cf","_de","_df","_ae","_af","_be","_bf","ac","ad","bc","bd","_ac","_ad","_bc","_bd","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","eye","lengthSquared","matA","matB","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","t14","scaleXSq","scaleYSq","scaleZSq","sz","determinant","invSX","invSY","invSZ","v2","setFromNormalAndCoplanarPoint","inverseNormalLength","denominator","startSign","endSign","intersectsPlane","optionalNormalMatrix","referencePoint","coplanarPoint","_w","_set","c1","c2","c3","s1","s2","s3","halfAngle","trace","vFrom","vTo","EPS","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","qb","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","at","directionDistance","distanceSquaredToPoint","v0","optionalPointOnRay","optionalPointOnSegment","segCenter","segDir","segExtent","a01","b0","s0","sqrDist","extDet","invDet","tca","radius2","thc","t0","t1","distanceToPlane","isFinite","distToPoint","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectBox","triangle","backFaceCulling","edge1","edge2","DdN","DdQxE2","DdE1xQ","QdN","intersectTriangle","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSquared","expandByScalar","getMaxScaleOnAxis","Spherical","phi","other","vec3","acos","resultLengthSquared","setFromCoplanarPoints","dot00","dot01","dot02","dot11","dot12","denom","invDenom","barycoordFromPoint","projectedPoint","projectPoint","containsPoint","minDistance","edgeList","closestPointToPoint","divideScalar","qx","qy","qz","qw","iz","iw","ax","ay","az","bx","by","bz","planeNormal","projectOnVector","dz","sinPhiRadius","setFromMatrixColumn","epsilon","epsilon2","Bone","Group","levels","matrixPosition","getObjectForDistance","level","addLevel","precisionSquared","inverseMatrix","vStart","vEnd","interSegment","interRay","step","distSquared","distanceSquareToSegment","_distSquared","_distance","faceIndex","nbVertices","_distSquared2","_distance2","LineLoop","LineSegments","drawMode","morphTargetInfluences","morphTargetDictionary","updateMorphTargets","keys","ml","String","_m","_ml","intersectsBox","intersection","checkBufferGeometryIntersection","_a","_b","_c","_intersection","faceMaterial","fvA","fvB","fvC","tl","influence","targets","intersectionPoint","_intersection2","checkIntersection","uvsF","uvA","uvB","uvC","uvIntersection","uv1","uv3","baryCoord","intersect","intersectionPointWorld","testPoint","localThreshold","localThresholdSquare","rayPointDistanceSquare","intersectPoint","distanceToRay","offsetMatrix","identityMatrix","Skeleton","bones","boneInverses","boneMatrices","calculateInverses","inverse","bone","_bone","boneTexture","toArray","_Mesh2","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","initBones","skeleton","normalizeSkinWeights","gbone","pos","rotq","scl","_gbone","pose","sw","manhattanLength","skinWeight","_scale","worldPosition","worldScale","setFromMatrixScale","guessSizeSq","WebGLRenderTarget","options","scissorTest","scissor","viewport","minFilter","texture","Texture","wrapS","wrapT","magFilter","format","anisotropy","encoding","depthBuffer","stencilBuffer","depthTexture","dispose","_WebGLRenderTarget2","WebGLRenderTargetCube","activeCubeFace","activeMipMapLevel","_WebGLUniforms","_WebGLShadowMap","_WebGLState","_WebGLClipping","_WebGLExtensions","_WebGLCapabilities","_WebGLProperties","_WebGLTextures","_WebGLAttributes","_WebGLGeometries","_WebGLObjects","_WebGLMorphtargets","_WebGLPrograms","_WebGLLights","_WebGLRenderLists","_WebGLBufferRenderer","_WebGLIndexedBufferRenderer","_WebGLSpriteRenderer","_WebGLBackground","WebGLRenderer","lightsArray","shadowsArray","spritesArray","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","gammaInput","gammaOutput","physicallyCorrectLights","toneMapping","toneMappingExposure","toneMappingWhitePoint","maxMorphNormals","maxMorphTargets","isContextLost","currentRenderTarget","currentFramebuffer","currentMaterialId","currentGeometryProgram","currentCamera","currentArrayCamera","currentViewport","currentScissor","currentScissorTest","usedTextureUnits","pixelRatio","WebGLClipping","clippingEnabled","localClippingEnabled","projScreenMatrix","tempVector3","infoMemory","geometries","textures","infoRender","frame","calls","info","render","memory","programs","autoReset","reset","onContextLost","preventDefault","onContextRestore","initGLContext","isAnimating","onAnimationFrame","time","requestAnimationFrame","onMaterialDispose","removeEventListener","deallocateMaterial","setTexture2DWarned","setTextureCubeWarned","domElement","canvas","document","createElementNS","stencil","antialias","preserveDrawingBuffer","powerPreference","contextAttributes","addEventListener","getShaderPrecisionFormat","rangeMin","rangeMax","message","shadowMap","WebGLShadowMap","capabilities","maxTextureSize","getContextAttributes","extension","loseContext","restoreContext","setSize","updateStyle","setViewport","state","setScissorTest","background","getClearColor","setClearColor","getClearAlpha","setClearAlpha","gl","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clear","renderTarget","setRenderTarget","renderLists","properties","WebGLExtensions","utils","WebGLUtils","WebGLCapabilities","WebGLState","WebGLProperties","WebGLTextures","WebGLAttributes","WebGLGeometries","WebGLObjects","morphtargets","WebGLMorphtargets","programCache","WebGLPrograms","WebGLLights","WebGLRenderLists","WebGLBackground","bufferRenderer","WebGLBufferRenderer","indexedBufferRenderer","WebGLIndexedBufferRenderer","spriteRenderer","WebGLSpriteRenderer","scene","setup","initMaterial","forceClear","autoUpdate","setFromMatrix","init","currentRenderList","projectObject","beginShadows","endShadows","opaqueObjects","opaque","transparentObjects","overrideMaterial","renderObjects","updateRenderTargetMipmap","buffers","setTest","setMask","setPolygonOffset","test","intersectsSprite","intersectsObject","groupMaterial","renderList","renderItem","camera2","bounds","renderObject","frontFaceCW","setMaterial","program","setProgram","renderObjectImmediate","renderBufferDirect","_this3","renderBufferImmediate","initAttributes","hasPositions","createBuffer","hasNormals","hasUvs","hasColors","programAttributes","getAttributes","bindBuffer","ARRAY_BUFFER","bufferData","positionArray","DYNAMIC_DRAW","enableAttribute","vertexAttribPointer","FLOAT","normalArray","nx","ny","nz","uvArray","colorArray","disableUnusedAttributes","drawArrays","TRIANGLES","geometryProgram","updateBuffers","rangeFactor","getWireframeAttribute","renderer","setupVertexAttributes","ELEMENT_ARRAY_BUFFER","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","setLineWidth","getTargetPixelRatio","setMode","LINES","TRIANGLE_STRIP","TRIANGLE_FAN","lineWidth","LINE_LOOP","LINE_STRIP","POINTS","renderInstances","materialProperties","useCache","setState","lightsHash","hash","numClippingPlanes","numPlanes","numIntersection","refreshProgram","refreshMaterial","refreshLights","p_uniforms","getUniforms","m_uniforms","shader","useProgram","setValue","logarithmicDepthBuffer","uCamPos","cameraPosition","setOptional","floatVertexTextures","ceilPowerOfTwo","DataTexture","boneTextureSize","markUniformsLightsNeedsUpdate","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","refreshUniformsToon","refreshUniformsPhong","refreshUniformsPhysical","refreshUniformsStandard","refreshUniformsDepth","refreshUniformsDistance","refreshUniformsNormal","refreshUniformsLine","refreshUniformsDash","refreshUniformsPoints","WebGLUniformsWrapper","upload","uniformsList","startIndex","geometryAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","bytesPerElement","enableAttributeAndDivisor","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","getParameters","code","getProgramCode","programChange","releaseMaterialProgramReference","shaderID","ShaderLib","acquireProgram","numSupportedMorphTargets","numSupportedMorphNormals","uniform","ambientLightColor","ambient","directionalLights","directional","spotLights","spot","rectAreaLights","rectArea","pointLights","hemisphereLights","hemi","directionalShadowMap","directionalShadowMatrix","spotShadowMap","spotShadowMatrix","pointShadowMap","pointShadowMatrix","progUniforms","seqWithValue","seq","programInfo","releaseProgram","cullFace","frontFaceDirection","setCullFace","setFlipSided","textureUnit","maxTextures","unit","setTexture2D","cubeTexture","slot","CubeTexture","image","setTextureCube","setTextureCubeDynamic","__webglFramebuffer","setupRenderTarget","framebuffer","isCube","bindFramebuffer","FRAMEBUFFER","textureProperties","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_CUBE_MAP_POSITIVE_X","__webglTexture","restore","textureFormat","textureType","convert","getParameter","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","internalFormat","copyTexImage2D","TEXTURE_2D","diffuse","flipEnvMap","uvScaleMap","repeat","setUvTransform","uvTransform","totalSize","fogColor","Fog","fogNear","fogFar","FogExp2","fogDensity","density","_alphamap_fragment","_interopRequireDefault","_alphamap_pars_fragment","_alphatest_fragment","_aomap_fragment","_aomap_pars_fragment","_begin_vertex","_beginnormal_vertex","_bsdfs","_bumpmap_pars_fragment","_clipping_planes_fragment","_clipping_planes_pars_fragment","_clipping_planes_pars_vertex","_clipping_planes_vertex","_color_fragment","_color_pars_fragment","_color_pars_vertex","_color_vertex","_common","_cube_uv_reflection_fragment","_defaultnormal_vertex","_displacementmap_pars_vertex","_displacementmap_vertex","_emissivemap_fragment","_emissivemap_pars_fragment","_encodings_fragment","_encodings_pars_fragment","_envmap_fragment","_envmap_pars_fragment","_envmap_pars_vertex","_envmap_vertex","_fog_vertex","_fog_pars_vertex","_fog_fragment","_fog_pars_fragment","_gradientmap_pars_fragment","_lightmap_fragment","_lightmap_pars_fragment","_lights_lambert_vertex","_lights_pars","_lights_phong_fragment","_lights_phong_pars_fragment","_lights_physical_fragment","_lights_physical_pars_fragment","_lights_template","_logdepthbuf_fragment","_logdepthbuf_pars_fragment","_logdepthbuf_pars_vertex","_logdepthbuf_vertex","_map_fragment","_map_pars_fragment","_map_particle_fragment","_map_particle_pars_fragment","_metalnessmap_fragment","_metalnessmap_pars_fragment","_morphnormal_vertex","_morphtarget_pars_vertex","_morphtarget_vertex","_normal_fragment","_normalmap_pars_fragment","_packing","_premultiplied_alpha_fragment","_project_vertex","_dithering_fragment","_dithering_pars_fragment","_roughnessmap_fragment","_roughnessmap_pars_fragment","_shadowmap_pars_fragment","_shadowmap_pars_vertex","_shadowmap_vertex","_shadowmask_pars_fragment","_skinbase_vertex","_skinning_pars_vertex","_skinning_vertex","_skinnormal_vertex","_specularmap_fragment","_specularmap_pars_fragment","_tonemapping_fragment","_tonemapping_pars_fragment","_uv_pars_fragment","_uv_pars_vertex","_uv_vertex","_uv2_pars_fragment","_uv2_pars_vertex","_uv2_vertex","_worldpos_vertex","_cube_frag","_cube_vert","_depth_frag","_depth_vert","_distanceRGBA_frag","_distanceRGBA_vert","_equirect_frag","_equirect_vert","_linedashed_frag","_linedashed_vert","_meshbasic_frag","_meshbasic_vert","_meshlambert_frag","_meshlambert_vert","_meshphong_frag","_meshphong_vert","_meshphysical_frag","_meshphysical_vert","_normal_frag","_normal_vert","_points_frag","_points_vert","_shadow_frag","_shadow_vert","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_template","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","__webpack_exports__","basic","UniformsLib","specularmap","envmap","aomap","lightmap","lambert","emissivemap","phong","bumpmap","normalmap","displacementmap","gradientmap","standard","roughnessmap","metalnessmap","dashed","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","physical","shadowBias","shadowRadius","shadowMapSize","coneCos","penumbraCos","shadowCameraNear","shadowCameraFar","merged","uniformsSrc","uniformsDst","parameterSrc","bufferType","usage","STATIC_DRAW","UNSIGNED_SHORT","SHORT","UNSIGNED_INT","INT","BYTE","UNSIGNED_BYTE","BYTES_PER_ELEMENT","bufferSubData","subarray","deleteBuffer","updateBuffer","clearColor","clearAlpha","setClear","boxMesh","removeAttribute","copyPosition","planeCamera","planeMesh","mode","drawArraysInstancedANGLE","maxVertexTextures","maxCubemapSize","maxAttributes","maxVertexUniforms","maxVaryings","maxFragmentUniforms","vertexTextures","floatFragmentTextures","maxAnisotropy","maxPrecision","getMaxPrecision","MAX_TEXTURE_IMAGE_UNITS","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","MAX_VERTEX_ATTRIBS","MAX_VERTEX_UNIFORM_VECTORS","MAX_VARYING_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","getMaxAnisotropy","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","MAX_TEXTURE_MAX_ANISOTROPY_EXT","globalState","numGlobalPlanes","renderingShadows","dstOffset","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","viewNormalMatrix","i4","enableLocalClipping","projectPlanes","resetGlobalState","cache","fromCache","nGlobal","lGlobal","clippingState","getExtension","wireframeAttributes","bufferGeometry","onGeometryDispose","setFromObject","_array","drawElements","drawElementsInstancedANGLE","LightUniformsCache","halfWidth","shadows","vector3","matrix42","directionalLength","pointLength","spotLength","rectAreaLength","hemisphereLength","_uniforms","_shadow","_uniforms2","extractRotation","_uniforms3","_shadow2","_uniforms4","influencesList","morphInfluences","objectInfluences","influences","_influence","_influence2","updateList","updateFromObject","_WebGLShader","generateDefines","chunks","generateExtensions","rendererExtensions","envMapCubeUV","filterEmptyLine","getToneMappingFunction","functionName","toneMappingName","str","getEncodingComponents","getTexelDecodingFunction","getTexelEncodingFunction","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","parseIncludes","match","include","unrollLoops","pattern","snippet","unroll","fetchAttributeLocations","getProgramParameter","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","programIdCount","WebGLProgramWrapper","usedTimes","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","mapping","gammaFactorDefine","customExtensions","customDefines","createProgram","prefixVertex","prefixFragment","supportsVertexTextures","maxBones","useFog","fogExp","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","numClipIntersection","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","vertexGlsl","fragmentGlsl","glVertexShader","WebGLShaderWrapper","glFragmentShader","attachShader","index0AttributeName","bindAttribLocation","linkProgram","programLog","getProgramInfoLog","trim","vertexLog","getShaderInfoLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","prefix","deleteShader","cachedAttributes","cachedUniforms","deleteProgram","_WebGLProgram","getTextureEncodingFromMap","gammaOverrideLinear","nVertexUniforms","nVertexMatrices","nClipPlanes","nClipIntersection","shaderIDs","allocateBones","getRenderTarget","envMapMode","parameterNames","pl","pop","destroy","WebGLRenderList","renderItems","renderItemsIndex","lists","list","addLineNumbers","lines","split","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","lookTarget","lightPositionWorld","morphingFlag","skinningFlag","numberOfMaterialVariants","depthMaterials","distanceMaterials","materialCache","maxShadowMapSize","0","1","2","cubeDirections","cubeUps","cube2DViewPorts","useMorphing","useSkinning","depthMaterial","distanceMaterial","isPointLight","materialVariants","customMaterial","customDepthMaterial","customDistanceMaterial","variantIndex","keyA","keyB","materialsForVariant","cachedMaterial","disable","BLEND","faceCount","shadowCamera","vpWidth","vpHeight","pars","shadowMatrix","vpDimensions","getDepthMaterial","_depthMaterial","_Three","vertexBuffer","elementBuffer","uvOffset","getUniformLocation","uvScale","fogType","fogDepth","fillStyle","fillRect","CanvasTexture","sprites","CULL_FACE","enable","uniformMatrix4fv","activeTexture","TEXTURE0","uniform1i","oldFogType","sceneFogType","uniform3f","uniform1f","_sprite","spritePosition","spriteRotation","spriteScale","uniform2f","uniform2fv","setBlending","ColorBuffer","locked","currentColorMask","currentColorClear","colorMask","lock","DepthBuffer","currentDepthMask","currentDepthFunc","currentDepthClear","DEPTH_TEST","depthMask","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","clearDepth","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","stencilFail","stencilZFail","stencilZPass","stencilOp","clearStencil","lineWidthAvailable","emptyTextures","currentFlipSided","currentCullFace","currentBlending","currentPremultipledAlpha","currentBlendEquation","currentBlendEquationAlpha","currentBlendSrc","currentBlendDst","currentBlendSrcAlpha","currentBlendDstAlpha","compressedTextureFormats","currentProgram","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","currentTextureSlot","currentBoundTextures","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","MAX_COMBINED_TEXTURE_IMAGE_UNITS","VERSION","createTexture","TEXTURE_CUBE_MAP","setFunc","frontFace","CW","CCW","BACK","FRONT","FRONT_AND_BACK","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE","blendFunc","SRC_ALPHA","ZERO","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","SRC_COLOR","disableVertexAttribArray","enableVertexAttribArray","vertexAttribDivisorANGLE","formats","COMPRESSED_TEXTURE_FORMATS","factor","units","POLYGON_OFFSET_FILL","SCISSOR_TEST","boundTexture","bindTexture","internalformat","border","compressedTexImage2D","pixels","texImage2D","_scissor","_viewport","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","RGBA","clampToMaxSize","maxSize","HTMLImageElement","HTMLCanvasElement","ImageBitmap","drawImage","isPowerOfTwo","makePowerOfTwo","floorPowerOfTwo","textureNeedsPowerOfTwo","textureNeedsGenerateMipmaps","generateMipmaps","videoTextures","onTextureDispose","deallocateTexture","VideoTexture","onRenderTargetDispose","deallocateRenderTarget","LINEAR","__image__webglTextureCube","deleteTexture","__webglInit","renderTargetProperties","deleteFramebuffer","__webglDepthbuffer","deleteRenderbuffer","pixelStorei","UNPACK_FLIP_Y_WEBGL","flipY","UNPACK_PREMULTIPLY_ALPHA_WEBGL","premultiplyAlpha","UNPACK_ALIGNMENT","unpackAlignment","isPowerOfTwoImage","glFormat","glType","setTextureParameters","mipmap","mipmaps","DepthTexture","DEPTH_COMPONENT","DEPTH_STENCIL","CompressedTexture","getCompressedTextureFormats","generateMipmap","__version","updateVideoTexture","complete","uploadTexture","isCompressed","isDataTexture","cubeImage","TEXTURE_WRAP_S","TEXTURE_WRAP_T","CLAMP_TO_EDGE","filterFallback","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","attachment","textureTarget","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","RGBA4","webglDepthTexture","setupDepthTexture","createRenderbuffer","setupRenderBufferStorage","isTargetPowerOfTwo","createFramebuffer","setupFrameBufferTexture","setupDepthRenderbuffer","webglTexture","emptyTexture","emptyCubeTexture","UniformSetter","activeInfo","addr","setValue1f","setValue1i","setValue2fv","setValue3fv","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","mat2array","uniformMatrix2fv","setValue3fm","mat3array","uniformMatrix3fv","setValue4fm","mat4array","setValueT1","allocTextureUnit","setValueT6","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","flatten","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","allocTexUnits","setValueT6a","arrayCacheI32","nBlocks","blockSize","arrayCacheF32","SingleUniformSetter","setter","getSingularSetter","PureArrayUniformSetter","getPureArraySetter","UniformContainer","StructuredUniformSetter","RePathPart","ACTIVE_UNIFORMS","getActiveUniform","path","parseUniform","container","pathLength","lastIndex","matchEnd","idIsIndex","subscript","addUniform","next","uniformObject","_n","_n2","parameter","REPEAT","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT_OES","ALPHA","RGB","LUMINANCE","LUMINANCE_ALPHA","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","MIN_EXT","MAX_EXT","UNSIGNED_INT_24_8_WEBGL","Scene","_Texture2","DEFAULT_IMAGE","images","textureId","DEFAULT_MAPPING","video","readyState","HAVE_CURRENT_DATA"],"mappings":"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A7jE,0DAAA,0DACA,IAAAkqE,mBAAArG,uBAAA7jE,6DAAA,6DACA,IAAAmqE,mBAAAtG,uBAAA7jE,6DAAA,6DACA,IAAAoqE,aAAAvG,uBAAA7jE,uDAAA,uDACA,IAAAqqE,aAAAxG,uBAAA7jE,uDAAA,uDACA,IAAAsqE,aAAAzG,uBAAA7jE,uDAAA,uDACA,IAAAuqE,aAAA1G,uBAAA7jE,uDAAA,uDACA,IAAAwqE,aAAA3G,uBAAA7jE,uDAAA,uDACA,IAAAyqE,aAAA5G,uBAAA7jE,uDAAA,yIAEA,IAAM0qE,aACLC,6CACAC,uDACAC,+CACAC,uCACAC,iDACAC,mCACAC,+CACAC,qBACAC,qDACAC,2DACAC,qEACAC,iEACAC,uDACAC,uCACAC,iDACAC,6CACAC,mCACAC,uBACAC,iEACAC,mDACAC,iEACAC,uDACAC,mDACAC,6DACAC,+CACAC,yDACAC,yCACAC,mDACAC,+CACAC,qCACAC,+BACAC,yCACAC,mCACAC,6CACAC,6DACAC,6CACAC,uDACAC,qDACAC,iCACAC,qDACAC,+DACAC,2DACAC,qEACAC,yCACAC,mDACAC,6DACAC,yDACAC,+CACAC,mCACAC,6CACAC,qDACAC,+DACAC,qDACAC,+DACAC,+CACAC,yDACAC,+CACAC,yCACAC,yDACAC,yBACAC,mEACAC,uCACAC,+CACAC,yDACAC,qDACAC,+DACAC,yDACAC,qDACAC,2CACAC,2DACAC,yCACAC,mDACAC,yCACAC,6CACAC,mDACAC,6DACAC,mDACAC,6DACAC,2CACAC,uCACAC,6BACAC,6CACAC,yCACAC,+BACAC,yCAEAC,6BACAC,6BACAC,+BACAC,+BACAC,6CACAC,6CACAC,qCACAC,qCACAC,yCACAC,yCACAC,uCACAC,uCACAC,2CACAC,2CACAC,uCACAC,uCACAC,6CACAC,6CACAC,iCACAC,iCACAC,iCACAC,iCACAC,iCACAC;;;;;;;;4BC7NDC,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;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","file":"three.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/Three.ts\");\n","export { WebGLRenderTargetCube } from \"./renderers/WebGLRenderTargetCube\";\nexport { WebGLRenderTarget } from \"./renderers/WebGLRenderTarget\";\nexport { WebGLRenderer } from \"./renderers/WebGLRenderer\";\n// export { WebGL2Renderer } from './renderers/WebGL2Renderer';\nexport { ShaderLib } from \"./renderers/shaders/ShaderLib\";\nexport { UniformsLib } from \"./renderers/shaders/UniformsLib\";\nexport { UniformsUtils } from \"./renderers/shaders/UniformsUtils\";\nexport { ShaderChunk } from \"./renderers/shaders/ShaderChunk\";\nexport { FogExp2 } from \"./scenes/FogExp2\";\nexport { Fog } from \"./scenes/Fog\";\nexport { Scene } from \"./scenes/Scene\";\nexport { Sprite } from \"./objects/Sprite\";\nexport { LOD } from \"./objects/LOD\";\nexport { SkinnedMesh } from \"./objects/SkinnedMesh\";\nexport { Skeleton } from \"./objects/Skeleton\";\nexport { Bone } from \"./objects/Bone\";\nexport { Mesh } from \"./objects/Mesh\";\nexport { LineSegments } from \"./objects/LineSegments\";\nexport { LineLoop } from \"./objects/LineLoop\";\nexport { Line } from \"./objects/Line\";\nexport { Points } from \"./objects/Points\";\nexport { Group } from \"./objects/Group\";\nexport { VideoTexture } from \"./textures/VideoTexture\";\nexport { DataTexture } from \"./textures/DataTexture\";\nexport { CompressedTexture } from \"./textures/CompressedTexture\";\nexport { CubeTexture } from \"./textures/CubeTexture\";\nexport { CanvasTexture } from \"./textures/CanvasTexture\";\nexport { DepthTexture } from \"./textures/DepthTexture\";\nexport { Texture } from \"./textures/Texture\";\nexport * from \"./geometries/Geometries\";\nexport * from \"./materials/Materials\";\n/*\nexport { CompressedTextureLoader } from './loaders/CompressedTextureLoader';\nexport { DataTextureLoader } from './loaders/DataTextureLoader';\nexport { CubeTextureLoader } from './loaders/CubeTextureLoader';\nexport { TextureLoader } from './loaders/TextureLoader';\nexport { ObjectLoader } from './loaders/ObjectLoader';\nexport { MaterialLoader } from './loaders/MaterialLoader';\nexport { BufferGeometryLoader } from './loaders/BufferGeometryLoader';\nexport { DefaultLoadingManager, LoadingManager } from './loaders/LoadingManager';\nexport { JSONLoader } from './loaders/JSONLoader';\nexport { ImageLoader } from './loaders/ImageLoader';\nexport { ImageBitmapLoader } from './loaders/ImageBitmapLoader';\nexport { FontLoader } from './loaders/FontLoader';\nexport { FileLoader } from './loaders/FileLoader';\nexport { Loader } from './loaders/Loader';\nexport { LoaderUtils } from './loaders/LoaderUtils';\nexport { Cache } from './loaders/Cache';\nexport { AudioLoader } from './loaders/AudioLoader';\n*/\nexport { SpotLightShadow } from \"./lights/SpotLightShadow\";\nexport { SpotLight } from \"./lights/SpotLight\";\nexport { PointLight } from \"./lights/PointLight\";\nexport { RectAreaLight } from \"./lights/RectAreaLight\";\nexport { HemisphereLight } from \"./lights/HemisphereLight\";\nexport { DirectionalLightShadow } from \"./lights/DirectionalLightShadow\";\nexport { DirectionalLight } from \"./lights/DirectionalLight\";\nexport { AmbientLight } from \"./lights/AmbientLight\";\nexport { LightShadow } from \"./lights/LightShadow\";\nexport { Light } from \"./lights/Light\";\n//export { StereoCamera } from './cameras/StereoCamera';\nexport { PerspectiveCamera } from \"./cameras/PerspectiveCamera\";\nexport { OrthographicCamera } from \"./cameras/OrthographicCamera\";\n//export { CubeCamera } from './cameras/CubeCamera';\nexport { ArrayCamera } from \"./cameras/ArrayCamera\";\nexport { Camera } from \"./cameras/Camera\";\nexport { AudioListenerWrapper as AudioListener } from \"./audio/AudioListener\";\nexport { PositionalAudio } from \"./audio/PositionalAudio\";\nexport { AudioContextWrapper as AudioContext } from \"./audio/AudioContext\";\nexport { AudioAnalyserWrapper as AudioAnalyser } from \"./audio/AudioAnalyser\";\nexport { AudioWrapper as Audio } from \"./audio/Audio\";\n/*\nexport { VectorKeyframeTrack } from './animation/tracks/VectorKeyframeTrack';\nexport { StringKeyframeTrack } from './animation/tracks/StringKeyframeTrack';\nexport { QuaternionKeyframeTrack } from './animation/tracks/QuaternionKeyframeTrack';\nexport { NumberKeyframeTrack } from './animation/tracks/NumberKeyframeTrack';\nexport { ColorKeyframeTrack } from './animation/tracks/ColorKeyframeTrack';\nexport { BooleanKeyframeTrack } from './animation/tracks/BooleanKeyframeTrack';\nexport { PropertyMixer } from './animation/PropertyMixer';\nexport { PropertyBinding } from './animation/PropertyBinding';\nexport { KeyframeTrack } from './animation/KeyframeTrack';\nexport { AnimationUtils } from './animation/AnimationUtils';\nexport { AnimationObjectGroup } from './animation/AnimationObjectGroup';\nexport { AnimationMixer } from './animation/AnimationMixer';\nexport { AnimationClip } from './animation/AnimationClip';\n*/\nexport { InstancedBufferGeometry } from \"./core/InstancedBufferGeometry\";\nexport { BufferGeometry } from \"./core/BufferGeometry\";\nexport { Geometry } from \"./core/Geometry\";\nexport { InterleavedBufferAttribute } from \"./core/InterleavedBufferAttribute\";\nexport { InstancedInterleavedBufferAttribute } from \"./core/InstancedInterleavedBufferAttribute\";\nexport { InstancedBufferAttribute } from \"./core/InstancedBufferAttribute\";\nexport * from \"./core/BufferAttribute\";\nexport { Face3 } from \"./core/Face3\";\nexport { Object3D } from \"./core/Object3D\";\nexport { Raycaster } from \"./core/Raycaster\";\nexport { Layers } from \"./core/Layers\";\nexport { EventDispatcher } from \"./core/EventDispatcher\";\nexport { Clock } from \"./core/Clock\";\n/*\nexport { QuaternionLinearInterpolant } from './math/interpolants/QuaternionLinearInterpolant';\nexport { LinearInterpolant } from './math/interpolants/LinearInterpolant';\nexport { DiscreteInterpolant } from './math/interpolants/DiscreteInterpolant';\nexport { CubicInterpolant } from './math/interpolants/CubicInterpolant';\nexport { Interpolant } from './math/Interpolant';\n*/\nexport { Triangle } from \"./math/Triangle\";\nexport { MathUtil as Math } from \"./math/Math\";\nexport { Spherical } from \"./math/Spherical\";\n//export { Cylindrical } from './math/Cylindrical';\nexport { Plane } from \"./math/Plane\";\nexport { Frustum } from \"./math/Frustum\";\nexport { Sphere } from \"./math/Sphere\";\nexport { Ray } from \"./math/Ray\";\nexport { Matrix2 } from \"./math/Matrix2\";\nexport { Matrix3 } from \"./math/Matrix3\";\nexport { Matrix4 } from \"./math/Matrix4\";\nexport { Box3 } from \"./math/Box3\";\n//export { Box2 } from './math/Box2';\nexport { Line3 } from \"./math/Line3\";\nexport { Euler } from \"./math/Euler\";\nexport { Vector4 } from \"./math/Vector4\";\nexport { Vector3 } from \"./math/Vector3\";\nexport { Vector2 } from \"./math/Vector2\";\nexport { Quaternion } from \"./math/Quaternion\";\nexport { Color } from \"./math/Color\";\nexport { ImmediateRenderObject } from \"./extras/objects/ImmediateRenderObject\";\n/*\nexport { VertexNormalsHelper } from './helpers/VertexNormalsHelper';\nexport { SpotLightHelper } from './helpers/SpotLightHelper';\nexport { SkeletonHelper } from './helpers/SkeletonHelper';\nexport { PointLightHelper } from './helpers/PointLightHelper';\nexport { RectAreaLightHelper } from './helpers/RectAreaLightHelper';\nexport { HemisphereLightHelper } from './helpers/HemisphereLightHelper';\nexport { GridHelper } from './helpers/GridHelper';\nexport { PolarGridHelper } from './helpers/PolarGridHelper';\nexport { FaceNormalsHelper } from './helpers/FaceNormalsHelper';\nexport { DirectionalLightHelper } from './helpers/DirectionalLightHelper';\nexport { CameraHelper } from './helpers/CameraHelper';\nexport { BoxHelper } from './helpers/BoxHelper';\nexport { Box3Helper } from './helpers/Box3Helper';\nexport { PlaneHelper } from './helpers/PlaneHelper';\nexport { ArrowHelper } from './helpers/ArrowHelper';\nexport { AxesHelper } from './helpers/AxesHelper';\nexport * from './extras/curves/Curves';\nexport { Shape } from './extras/core/Shape';\nexport { Path } from './extras/core/Path';\nexport { ShapePath } from './extras/core/ShapePath';\nexport { Font } from './extras/core/Font';\nexport { CurvePath } from './extras/core/CurvePath';\nexport { Curve } from './extras/core/Curve';\nexport { ShapeUtils } from './extras/ShapeUtils';\n*/\nexport { WebGLUtils } from \"./renderers/webgl/WebGLUtils\";\nexport * from \"./constants\";\n","import { Object3D } from \"../core/Object3D\";\nimport { AudioListenerWrapper } from \"./AudioListener\";\n\nexport class AudioWrapper extends Object3D {\n    public type: string = \"Audio\";\n    public context: AudioContext;\n    public startTime: number = 0;\n    public offset: number = 0;\n    public isPlaying: boolean = false;\n    public hasPlaybackControl: boolean = true;\n    public source: AudioBufferSourceNode;\n    public sourceType: string = \"empty\";\n    public autoplay: boolean = false;\n\n    protected buffer: AudioBuffer | null = null;\n    protected gain: GainNode;\n    protected loop: boolean = false;\n    protected playbackRate: number = 1;\n    protected filters: AudioNode[] = [];\n\n    constructor(listener: AudioListenerWrapper) {\n        super();\n        this.context = listener.context;\n        this.gain = this.context.createGain();\n        this.gain.connect(listener.getInput());\n    }\n\n    public getOutput(): AudioNode {\n        return this.gain as AudioNode;\n    }\n\n    public setNodeSource(audioNode: AudioBufferSourceNode): this {\n        this.hasPlaybackControl = false;\n        this.source = audioNode;\n        this.sourceType = \"audioNode\";\n        this.connect();\n        return this;\n    }\n\n    public setBuffer(audioBuffer: AudioBuffer): this {\n        this.buffer = audioBuffer;\n        this.sourceType = \"buffer\";\n        if (this.autoplay) this.play();\n        return this;\n    }\n\n    public play(): this {\n        if (this.isPlaying === true) {\n            console.warn(`THREE.Audio: Audio is already playing.`);\n            return this;\n        }\n\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return this;\n        }\n\n        const source = this.context.createBufferSource();\n\n        source.buffer = this.buffer;\n        source.loop = this.loop;\n        source.onended = this.onEnded.bind(this);\n        source.playbackRate.setValueAtTime(this.playbackRate, this.startTime);\n        this.startTime = this.context.currentTime;\n        source.start(this.startTime, this.offset);\n        this.isPlaying = true;\n        this.source = source;\n        return this.connect();\n    }\n\n    public pause(): this {\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return this;\n        }\n        if (this.isPlaying === true) {\n            this.source.stop();\n            this.offset += (this.context.currentTime - this.startTime) * this.playbackRate;\n            this.isPlaying = false;\n        }\n        return this;\n    }\n\n    public stop(): this {\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return this;\n        }\n        this.source.stop();\n        this.offset = 0;\n        this.isPlaying = false;\n        return this;\n    }\n\n    public connect(): this {\n        if (this.filters.length > 0) {\n            this.source.connect(this.filters[0]);\n            for (let i: number = 1, l: number = this.filters.length; i < l; i++) {\n                this.filters[i - 1].connect(this.filters[i]);\n            }\n            this.filters[this.filters.length - 1].connect(this.getOutput());\n        } else {\n            this.source.connect(this.getOutput());\n        }\n        return this;\n    }\n\n    public disconnect(): this {\n        if (this.filters.length > 0) {\n            this.source.disconnect(this.filters[0]);\n            for (let i: number = 1, l: number = this.filters.length; i < l; i++) {\n                this.filters[i - 1].disconnect(this.filters[i]);\n            }\n            this.filters[this.filters.length - 1].disconnect(this.getOutput());\n        } else {\n            this.source.disconnect(this.getOutput());\n        }\n        return this;\n    }\n\n    public getFilters(): AudioNode[] {\n        return this.filters;\n    }\n\n    public setFilters(value: AudioNode[] = []): this {\n        if (this.isPlaying === true) {\n            this.disconnect();\n            this.filters = value;\n            this.connect();\n        } else {\n            this.filters = value;\n        }\n        return this;\n    }\n\n    public getFilter(): AudioNode {\n        return this.getFilters()[0];\n    }\n\n    public setFilter(filter: AudioNode): this {\n        return this.setFilters(filter ? [filter] : []);\n    }\n\n    public setPlaybackRate(value: number): this {\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return this;\n        }\n        this.playbackRate = value;\n        if (this.isPlaying === true) {\n            this.source.playbackRate.setValueAtTime(this.playbackRate, this.context.currentTime);\n        }\n        return this;\n    }\n\n    public getPlaybackRate(): number {\n        return this.playbackRate;\n    }\n\n    public onEnded(): void {\n        this.isPlaying = false;\n    }\n\n    public getLoop(): boolean {\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return false;\n        }\n        return this.loop;\n    }\n\n    public setLoop(value: boolean): this {\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return this;\n        }\n        this.loop = value;\n        if (this.isPlaying === true) {\n            this.source.loop = this.loop;\n        }\n        return this;\n    }\n\n    public getVolume(): number {\n        return this.gain.gain.value;\n    }\n\n    public setVolume(value: number): this {\n        this.gain.gain.value = value;\n        return this;\n    }\n}\n","import { AudioWrapper } from \"./Audio\";\n\nexport class AudioAnalyserWrapper {\n    public analyser: AnalyserNode;\n    public data: Uint8Array;\n\n    constructor(audio: AudioWrapper, fftSize: number = 2048) {\n        this.analyser = audio.context.createAnalyser();\n        this.analyser.fftSize = fftSize;\n        this.data = new Uint8Array(this.analyser.frequencyBinCount);\n        audio.getOutput().connect(this.analyser);\n    }\n\n    public getFrequencyData(): Uint8Array {\n        this.analyser.getByteFrequencyData(this.data);\n        return this.data;\n    }\n\n    public getAverageFrequency(): number {\n        let value: number = 0;\n        const data: Uint8Array = this.getFrequencyData();\n        for (let i: number = 0; i < data.length; i++) {\n            value += data[i];\n        }\n        return value / data.length;\n    }\n}\n","export class AudioContextWrapper {\n    public static context: AudioContext | undefined = undefined;\n\n    public static getContext(): AudioContext {\n        if (AudioContextWrapper.context === undefined) {\n            AudioContextWrapper.context = new ((window as any).AudioContext ||\n                (window as any).webkitAudioContext)() as AudioContext;\n        }\n        return AudioContextWrapper.context;\n    }\n\n    public static setContext(value: AudioContext) {\n        AudioContextWrapper.context = value;\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { AudioContextWrapper } from \"./AudioContext\";\n\nexport class AudioListenerWrapper extends Object3D {\n    public type: string = \"AudioListener\";\n    public context: AudioContext = AudioContextWrapper.getContext();\n    public gain: GainNode;\n\n    protected filter: AudioNode | null = null;\n\n    constructor() {\n        super();\n        this.gain = this.context.createGain();\n        this.gain.connect(this.context.destination);\n    }\n\n    public getInput(): GainNode {\n        return this.gain;\n    }\n\n    public removeFilter() {\n        if (this.filter !== null) {\n            this.gain.disconnect(this.filter);\n            this.filter.disconnect(this.context.destination);\n            this.gain.connect(this.context.destination);\n            this.filter = null;\n        }\n    }\n\n    public getFilter() {\n        return this.filter;\n    }\n\n    public setFilter(value: AudioNode): this {\n        if (this.filter !== null) {\n            this.gain.disconnect(this.filter);\n            this.filter.disconnect(this.context.destination);\n        } else {\n            this.gain.disconnect(this.context.destination);\n        }\n        this.filter = value;\n        this.gain.connect(this.filter);\n        this.filter.connect(this.context.destination);\n        return this;\n    }\n\n    public getMasterVolume(): number {\n        return this.gain.gain.value;\n    }\n\n    public setMasterVolume(value: number): this {\n        this.gain.gain.value = value;\n        return this;\n    }\n\n    public updateMatrixWorld(force: boolean = false): this {\n        super.updateMatrixWorld(force);\n        const position: Vector3 = new Vector3();\n        const quaternion: Quaternion = new Quaternion();\n        const scale: Vector3 = new Vector3();\n        const orientation: Vector3 = new Vector3();\n\n        const listener: any = this.context.listener;\n        const up: Vector3 = this.up;\n        this.matrixWorld.decompose(position, quaternion, scale);\n        orientation.set(0, 0, -1).applyQuaternion(quaternion);\n\n        if (listener.positionX) {\n            listener.positionX.setValueAtTime(position.x, this.context.currentTime);\n            listener.positionY.setValueAtTime(position.y, this.context.currentTime);\n            listener.positionZ.setValueAtTime(position.z, this.context.currentTime);\n            listener.forwardX.setValueAtTime(orientation.x, this.context.currentTime);\n            listener.forwardY.setValueAtTime(orientation.y, this.context.currentTime);\n            listener.forwardZ.setValueAtTime(orientation.z, this.context.currentTime);\n            listener.upX.setValueAtTime(up.x, this.context.currentTime);\n            listener.upY.setValueAtTime(up.y, this.context.currentTime);\n            listener.upZ.setValueAtTime(up.z, this.context.currentTime);\n        } else {\n            listener.setPosition(position.x, position.y, position.z);\n            listener.setOrientation(orientation.x, orientation.y, orientation.z, up.x, up.y, up.z);\n        }\n        return this;\n    }\n}\n","import { Vector3 } from \"../math/Vector3\";\nimport { AudioWrapper } from \"./Audio\";\nimport { AudioListenerWrapper } from \"./AudioListener\";\n\nexport class PositionalAudio extends AudioWrapper {\n    public panner: PannerNode;\n\n    constructor(listener: AudioListenerWrapper) {\n        super(listener);\n        this.panner = this.context.createPanner();\n        this.panner.connect(this.gain);\n    }\n\n    public getOutput(): AudioNode {\n        return this.panner as AudioNode;\n    }\n\n    public getRefDistance(): number {\n        return this.panner.refDistance;\n    }\n\n    public setRefDistance(value: number): void {\n        this.panner.refDistance = value;\n    }\n\n    public getRolloffFactor(): number {\n        return this.panner.rolloffFactor;\n    }\n\n    public setRolloffFactor(value: number): void {\n        this.panner.rolloffFactor = value;\n    }\n\n    public getDistanceModel(): DistanceModelType {\n        return this.panner.distanceModel;\n    }\n\n    public setDistanceModel(value: DistanceModelType): void {\n        this.panner.distanceModel = value;\n    }\n\n    public getMaxDistance(): number {\n        return this.panner.maxDistance;\n    }\n\n    public setMaxDistance(value: number): void {\n        this.panner.maxDistance = value;\n    }\n\n    public updateMatrixWorld(force: boolean = false): this {\n        super.updateMatrixWorld(force);\n        const position = new Vector3();\n        position.setFromMatrixPosition(this.matrixWorld);\n        this.panner.setPosition(position.x, position.y, position.z);\n        return this;\n    }\n}\n","import { Vector4 } from \"../math/Vector4\";\nimport { PerspectiveCamera } from \"./PerspectiveCamera\";\nimport { Camera } from \"./Camera\";\n\nexport interface ArrayCameraCamera extends PerspectiveCamera {\n    bounds: Vector4;\n}\n\nexport class ArrayCamera extends PerspectiveCamera {\n    public cameras: ArrayCameraCamera[] = [];\n    constructor(cameras: ArrayCameraCamera[] = []) {\n        super();\n        this.cameras = cameras;\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Vector3 } from \"../math/Vector3\";\n\nexport class Camera extends Object3D {\n    public readonly type: string = \"Camera\";\n\n    public matrixWorldInverse: Matrix4 = new Matrix4();\n    public projectionMatrix: Matrix4 = new Matrix4();\n\n    constructor() {\n        super();\n    }\n\n    public updateMatrixWorld(force: boolean = false): this {\n        super.updateMatrixWorld(force);\n        this.matrixWorldInverse.getInverse(this.matrixWorld);\n        return this;\n    }\n\n    public copy(source: Camera, recursive: boolean = true): this {\n        super.copy(source, recursive);\n        this.matrixWorldInverse.copy(source.matrixWorldInverse);\n        this.projectionMatrix.copy(source.projectionMatrix);\n        return this;\n    }\n\n    get worldDirection(): Vector3 {\n        return new Vector3().set(0, 0, -1).applyQuaternion(this.worldQuaternion);\n    }\n\n    public clone(): Camera {\n        return new (this.constructor as new () => Camera)().copy(this);\n    }\n}\n\nexport interface IFrustumView {\n    fullWidth: number;\n    fullHeight: number;\n    offsetX: number;\n    offsetY: number;\n    width: number;\n    height: number;\n    enabled: boolean;\n}\n","import { Camera, IFrustumView } from \"./Camera\";\n\nexport class OrthographicCamera extends Camera {\n    public readonly type: string = \"OrthographicCamera\";\n\n    protected _left: number = 0;\n    protected _right: number = 0;\n    protected _top: number = 0;\n    protected _bottom: number = 0;\n    protected _zoom: number = 1;\n    protected _near: number = 0.1;\n    protected _far: number = 2000;\n    protected _view: IFrustumView | null = null;\n\n    constructor(\n        left: number = 0,\n        right: number = 0,\n        top: number = 0,\n        bottom: number = 0,\n        near: number = 0.1,\n        far: number = 2000,\n    ) {\n        super();\n\n        this._left = left;\n        this._right = right;\n        this._top = top;\n        this._bottom = bottom;\n\n        this._near = near;\n        this._far = far;\n\n        this.updateProjectionMatrix();\n    }\n\n    get zoom(): number {\n        return this._zoom;\n    }\n\n    set zoom(_zoom: number) {\n        this._zoom = _zoom;\n        this.updateProjectionMatrix();\n    }\n\n    get near(): number {\n        return this._near;\n    }\n\n    set near(_near: number) {\n        this._near = _near;\n        this.updateProjectionMatrix();\n    }\n\n    get far(): number {\n        return this._far;\n    }\n\n    set far(_far: number) {\n        this._far = _far;\n        this.updateProjectionMatrix();\n    }\n\n    get left(): number {\n        return this._left;\n    }\n\n    set left(_left: number) {\n        this._left = _left;\n        this.updateProjectionMatrix();\n    }\n\n    get right(): number {\n        return this._right;\n    }\n\n    set right(_right: number) {\n        this._right = _right;\n        this.updateProjectionMatrix();\n    }\n\n    get top(): number {\n        return this._top;\n    }\n\n    set top(_top: number) {\n        this._top = _top;\n        this.updateProjectionMatrix();\n    }\n\n    get bottom(): number {\n        return this._bottom;\n    }\n\n    set bottom(_bottom: number) {\n        this._bottom = _bottom;\n        this.updateProjectionMatrix();\n    }\n\n    get view(): IFrustumView | null {\n        return this._view;\n    }\n\n    public setViewOffset(\n        fullWidth: number,\n        fullHeight: number,\n        x: number,\n        y: number,\n        width: number,\n        height: number,\n    ): this {\n        this._view = {\n            enabled: true,\n            fullHeight: fullHeight,\n            fullWidth: fullWidth,\n            height: height,\n            offsetX: x,\n            offsetY: y,\n            width: width,\n        };\n        return this.updateProjectionMatrix();\n    }\n\n    public clearViewOffset(): this {\n        if (this.view !== null) {\n            this.view.enabled = false;\n        }\n        return this.updateProjectionMatrix();\n    }\n\n    public updateProjectionMatrix(): this {\n        const dx = (this.right - this.left) / (2 * this.zoom);\n        const dy = (this.top - this.bottom) / (2 * this.zoom);\n        const cx = (this.right + this.left) / 2;\n        const cy = (this.top + this.bottom) / 2;\n\n        let left = cx - dx;\n        let right = cx + dx;\n        let top = cy + dy;\n        let bottom = cy - dy;\n\n        if (this.view !== null && this.view.enabled) {\n            const zoomW = this.zoom / (this.view.width / this.view.fullWidth);\n            const zoomH = this.zoom / (this.view.height / this.view.fullHeight);\n            const scaleW = (this.right - this.left) / this._view.width;\n            const scaleH = (this.top - this.bottom) / this._view.height;\n            left += scaleW * (this.view.offsetX / zoomW);\n            right = left + scaleW * (this.view.width / zoomW);\n            top -= scaleH * (this.view.offsetY / zoomH);\n            bottom = top - scaleH * (this.view.height / zoomH);\n        }\n\n        this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n        return this;\n    }\n\n    public copy(source: OrthographicCamera): this {\n        super.copy(source);\n        this._top = source.top;\n        this._bottom = source.bottom;\n        this._left = source.left;\n        this._right = source.right;\n        this._zoom = source.zoom;\n\n        this._near = source.near;\n        this._far = source.far;\n\n        this._view = source.view === null ? null : { ...source.view };\n\n        return this.updateProjectionMatrix();\n    }\n\n    public clone(): OrthographicCamera {\n        return new (this.constructor as new () => OrthographicCamera)().copy(this);\n    }\n}\n","import { MathUtil } from \"../math/Math\";\nimport { Camera, IFrustumView } from \"./Camera\";\n\nexport class PerspectiveCamera extends Camera {\n    public readonly type: string = \"PerspectiveCamera\";\n    public focus: number = 10;\n\n    protected _fov: number = 50;\n    protected _zoom: number = 1;\n    protected _near: number = 0.1;\n    protected _far: number = 2000;\n    protected _aspect: number = 1;\n    protected _view: IFrustumView | null = null;\n\n    /**\n     * width of the film (default in millimeters)\n     * @type {number}\n     */\n    protected _filmGauge: number = 35;\n\n    /**\n     * horizontal film offset (same unit as gauge)\n     * @type {number}\n     */\n    protected _filmOffset: number = 0;\n\n    get fov(): number {\n        return this._fov;\n    }\n\n    set fov(_fov: number) {\n        this._fov = _fov;\n        this.updateProjectionMatrix();\n    }\n\n    get zoom(): number {\n        return this._zoom;\n    }\n\n    set zoom(_zoom: number) {\n        this._zoom = _zoom;\n        this.updateProjectionMatrix();\n    }\n\n    get near(): number {\n        return this._near;\n    }\n\n    set near(_near: number) {\n        this._near = _near;\n        this.updateProjectionMatrix();\n    }\n\n    get far(): number {\n        return this._far;\n    }\n\n    set far(_far: number) {\n        this._far = _far;\n        this.updateProjectionMatrix();\n    }\n\n    get aspect(): number {\n        return this._aspect;\n    }\n\n    set aspect(_aspect: number) {\n        this._aspect = _aspect;\n        this.updateProjectionMatrix();\n    }\n\n    get view(): IFrustumView | null {\n        return this._view;\n    }\n\n    get filmGauge(): number {\n        return this._filmGauge;\n    }\n\n    set filmGauge(_filmGauge: number) {\n        this._filmGauge = _filmGauge;\n        this.updateProjectionMatrix();\n    }\n\n    get filmOffset(): number {\n        return this._filmOffset;\n    }\n\n    set filmOffset(_filmOffset: number) {\n        this._filmOffset = _filmOffset;\n        this.updateProjectionMatrix();\n    }\n\n    constructor(fov: number = 50, aspect: number = 1, near: number = 0.1, far: number = 2000) {\n        super();\n        this._fov = fov;\n        this._aspect = aspect;\n        this._near = near;\n        this._far = far;\n        this.updateProjectionMatrix();\n    }\n\n    /**\n     * see http://www.bobatkins.com/photography/technical/field_of_view.html\n     * Sets the FOV by focal length in respect to the current .filmGauge.\n     *\n     * The default film gauge is 35, so that the focal length can be specified for\n     * a 35mm (full frame) camera.\n     *\n     * Values for focal length and film gauge must have the same unit.\n     * @param focalLength\n     * @returns {PerspectiveCamera}\n     */\n    public setFocalLength(focalLength: number): this {\n        const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n        this._fov = MathUtil.RAD2DEG * 2 * Math.atan(vExtentSlope);\n        return this.updateProjectionMatrix();\n    }\n\n    public getFocalLength(): number {\n        const vExtentSlope = Math.tan(MathUtil.DEG2RAD * 0.5 * this.fov);\n        return 0.5 * this.getFilmHeight() / vExtentSlope;\n    }\n\n    public getEffectiveFOV(): number {\n        return MathUtil.RAD2DEG * 2 * Math.atan(Math.tan(MathUtil.DEG2RAD * 0.5 * this.fov) / this.zoom);\n    }\n\n    /**\n     * film not completely covered in portrait format (aspect < 1)\n     * @returns {number}\n     */\n    public getFilmWidth(): number {\n        return this.filmGauge * Math.min(this.aspect, 1);\n    }\n\n    /**\n     * film not completely covered in landscape format (aspect > 1)\n     * @returns {number}\n     */\n    public getFilmHeight(): number {\n        return this.filmGauge / Math.max(this.aspect, 1);\n    }\n\n    /**\n     * Sets an offset in a larger frustum. This is useful for multi-window or\n     * multi-monitor/multi-machine setups.\n     *\n     * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n     * the monitors are in grid like this\n     *\n     *   +---+---+---+\n     *   | A | B | C |\n     *   +---+---+---+\n     *   | D | E | F |\n     *   +---+---+---+\n     *\n     * then for each monitor you would call it like this\n     *\n     *   var w = 1920;\n     *   var h = 1080;\n     *   var fullWidth = w * 3;\n     *   var fullHeight = h * 2;\n     *\n     *   --A--\n     *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n     *   --B--\n     *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n     *   --C--\n     *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n     *   --D--\n     *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n     *   --E--\n     *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n     *   --F--\n     *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n     *\n     *   Note there is no reason monitors have to be the same size or in a grid.\n     */\n    public setViewOffset(\n        fullWidth: number,\n        fullHeight: number,\n        x: number,\n        y: number,\n        width: number,\n        height: number,\n    ): this {\n        this._view = {\n            enabled: true,\n            fullHeight: fullHeight,\n            fullWidth: fullWidth,\n            height: height,\n            offsetX: x,\n            offsetY: y,\n            width: width,\n        };\n        return this.updateProjectionMatrix();\n    }\n\n    public clearViewOffset(): this {\n        if (this.view !== null) {\n            this.view.enabled = false;\n        }\n        return this.updateProjectionMatrix();\n    }\n\n    public updateProjectionMatrix(): this {\n        const near: number = this.near;\n        let top: number = near * Math.tan(MathUtil.DEG2RAD * 0.5 * this.fov) / this.zoom;\n        let height: number = 2 * top;\n        let width: number = this.aspect * height;\n        let left: number = -0.5 * width;\n        const view: IFrustumView = this.view;\n        if (this.view !== null && this.view.enabled) {\n            const fullWidth: number = view.fullWidth,\n                fullHeight: number = view.fullHeight;\n            left += view.offsetX * width / fullWidth;\n            top -= view.offsetY * height / fullHeight;\n            width *= view.width / fullWidth;\n            height *= view.height / fullHeight;\n        }\n        const skew: number = this.filmOffset;\n        if (skew !== 0) left += near * skew / this.getFilmWidth();\n        this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n        return this;\n    }\n\n    public copy(source: PerspectiveCamera): this {\n        super.copy(source);\n        this._fov = source.fov;\n        this._zoom = source.zoom;\n\n        this._near = source.near;\n        this._far = source.far;\n        this.focus = source.focus;\n\n        this._aspect = source.aspect;\n        this._view = source.view === null ? null : { ...source.view };\n\n        this._filmGauge = source.filmGauge;\n        this._filmOffset = source.filmOffset;\n        return this.updateProjectionMatrix();\n    }\n\n    public clone(): PerspectiveCamera {\n        return new (this.constructor as new () => PerspectiveCamera)().copy(this);\n    }\n}\n","/* tslint:disable */\nexport const REVISION: string = \"90dev\";\nexport const MOUSE: any = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\nexport const CullFaceNone: number = 0;\nexport const CullFaceBack: number = 1;\nexport const CullFaceFront: number = 2;\nexport const CullFaceFrontBack: number = 3;\nexport const FrontFaceDirectionCW: number = 0;\nexport const FrontFaceDirectionCCW: number = 1;\nexport const BasicShadowMap: number = 0;\nexport const PCFShadowMap: number = 1;\nexport const PCFSoftShadowMap: number = 2;\nexport const FrontSide: number = 0;\nexport const BackSide: number = 1;\nexport const DoubleSide: number = 2;\nexport const FlatShading: number = 1;\nexport const SmoothShading: number = 2;\nexport const NoColors: number = 0;\nexport const FaceColors: number = 1;\nexport const VertexColors: number = 2;\nexport const NoBlending: number = 0;\nexport const NormalBlending: number = 1;\nexport const AdditiveBlending: number = 2;\nexport const SubtractiveBlending: number = 3;\nexport const MultiplyBlending: number = 4;\nexport const CustomBlending: number = 5;\nexport const AddEquation: number = 100;\nexport const SubtractEquation: number = 101;\nexport const ReverseSubtractEquation: number = 102;\nexport const MinEquation: number = 103;\nexport const MaxEquation: number = 104;\nexport const ZeroFactor: number = 200;\nexport const OneFactor: number = 201;\nexport const SrcColorFactor: number = 202;\nexport const OneMinusSrcColorFactor: number = 203;\nexport const SrcAlphaFactor: number = 204;\nexport const OneMinusSrcAlphaFactor: number = 205;\nexport const DstAlphaFactor: number = 206;\nexport const OneMinusDstAlphaFactor: number = 207;\nexport const DstColorFactor: number = 208;\nexport const OneMinusDstColorFactor: number = 209;\nexport const SrcAlphaSaturateFactor: number = 210;\nexport const NeverDepth: number = 0;\nexport const AlwaysDepth: number = 1;\nexport const LessDepth: number = 2;\nexport const LessEqualDepth: number = 3;\nexport const EqualDepth: number = 4;\nexport const GreaterEqualDepth: number = 5;\nexport const GreaterDepth: number = 6;\nexport const NotEqualDepth: number = 7;\nexport const MultiplyOperation: number = 0;\nexport const MixOperation: number = 1;\nexport const AddOperation: number = 2;\nexport const NoToneMapping: number = 0;\nexport const LinearToneMapping: number = 1;\nexport const ReinhardToneMapping: number = 2;\nexport const Uncharted2ToneMapping: number = 3;\nexport const CineonToneMapping: number = 4;\nexport const UVMapping: number = 300;\nexport const CubeReflectionMapping: number = 301;\nexport const CubeRefractionMapping: number = 302;\nexport const EquirectangularReflectionMapping: number = 303;\nexport const EquirectangularRefractionMapping: number = 304;\nexport const SphericalReflectionMapping: number = 305;\nexport const CubeUVReflectionMapping: number = 306;\nexport const CubeUVRefractionMapping: number = 307;\nexport const RepeatWrapping: number = 1000;\nexport const ClampToEdgeWrapping: number = 1001;\nexport const MirroredRepeatWrapping: number = 1002;\nexport const NearestFilter: number = 1003;\nexport const NearestMipMapNearestFilter: number = 1004;\nexport const NearestMipMapLinearFilter: number = 1005;\nexport const LinearFilter: number = 1006;\nexport const LinearMipMapNearestFilter: number = 1007;\nexport const LinearMipMapLinearFilter: number = 1008;\nexport const UnsignedByteType: number = 1009;\nexport const ByteType: number = 1010;\nexport const ShortType: number = 1011;\nexport const UnsignedShortType: number = 1012;\nexport const IntType: number = 1013;\nexport const UnsignedIntType: number = 1014;\nexport const FloatType: number = 1015;\nexport const HalfFloatType: number = 1016;\nexport const UnsignedShort4444Type: number = 1017;\nexport const UnsignedShort5551Type: number = 1018;\nexport const UnsignedShort565Type: number = 1019;\nexport const UnsignedInt248Type: number = 1020;\nexport const AlphaFormat: number = 1021;\nexport const RGBFormat: number = 1022;\nexport const RGBAFormat: number = 1023;\nexport const LuminanceFormat: number = 1024;\nexport const LuminanceAlphaFormat: number = 1025;\nexport const RGBEFormat: number = RGBAFormat;\nexport const DepthFormat: number = 1026;\nexport const DepthStencilFormat: number = 1027;\nexport const RGB_S3TC_DXT1_Format: number = 33776;\nexport const RGBA_S3TC_DXT1_Format: number = 33777;\nexport const RGBA_S3TC_DXT3_Format: number = 33778;\nexport const RGBA_S3TC_DXT5_Format: number = 33779;\nexport const RGB_PVRTC_4BPPV1_Format: number = 35840;\nexport const RGB_PVRTC_2BPPV1_Format: number = 35841;\nexport const RGBA_PVRTC_4BPPV1_Format: number = 35842;\nexport const RGBA_PVRTC_2BPPV1_Format: number = 35843;\nexport const RGB_ETC1_Format: number = 36196;\nexport const RGBA_ASTC_4x4_Format: number = 37808;\nexport const RGBA_ASTC_5x4_Format: number = 37809;\nexport const RGBA_ASTC_5x5_Format: number = 37810;\nexport const RGBA_ASTC_6x5_Format: number = 37811;\nexport const RGBA_ASTC_6x6_Format: number = 37812;\nexport const RGBA_ASTC_8x5_Format: number = 37813;\nexport const RGBA_ASTC_8x6_Format: number = 37814;\nexport const RGBA_ASTC_8x8_Format: number = 37815;\nexport const RGBA_ASTC_10x5_Format: number = 37816;\nexport const RGBA_ASTC_10x6_Format: number = 37817;\nexport const RGBA_ASTC_10x8_Format: number = 37818;\nexport const RGBA_ASTC_10x10_Format: number = 37819;\nexport const RGBA_ASTC_12x10_Format: number = 37820;\nexport const RGBA_ASTC_12x12_Format: number = 37821;\nexport const LoopOnce: number = 2200;\nexport const LoopRepeat: number = 2201;\nexport const LoopPingPong: number = 2202;\nexport const InterpolateDiscrete: number = 2300;\nexport const InterpolateLinear: number = 2301;\nexport const InterpolateSmooth: number = 2302;\nexport const ZeroCurvatureEnding: number = 2400;\nexport const ZeroSlopeEnding: number = 2401;\nexport const WrapAroundEnding: number = 2402;\nexport const TrianglesDrawMode: number = 0;\nexport const TriangleStripDrawMode: number = 1;\nexport const TriangleFanDrawMode: number = 2;\nexport const LinearEncoding: number = 3000;\nexport const sRGBEncoding: number = 3001;\nexport const GammaEncoding: number = 3007;\nexport const RGBEEncoding: number = 3002;\nexport const LogLuvEncoding: number = 3003;\nexport const RGBM7Encoding: number = 3004;\nexport const RGBM16Encoding: number = 3005;\nexport const RGBDEncoding: number = 3006;\nexport const BasicDepthPacking: number = 3200;\nexport const RGBADepthPacking: number = 3201;\n","import { Color } from \"../math/Color\";\nimport { MathUtil } from \"../math/Math\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Vector4 } from \"../math/Vector4\";\n\nexport interface IBufferRange {\n    offset: number;\n    count: number;\n}\n\nexport type TypedArray =\n    | Int8Array\n    | Uint8Array\n    | Uint8ClampedArray\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Float32Array\n    | Float64Array;\n\nexport class BufferAttribute {\n    public readonly uuid: string = MathUtil.generateUUID();\n    public name: string = \"\";\n    public array: TypedArray | undefined;\n    public itemSize: number = 1;\n    public count: number = 0;\n    public normalized: boolean = false;\n    public dynamic: boolean = false;\n    public updateRange: IBufferRange = { offset: 0, count: -1 };\n    public version: number = 0;\n\n    constructor(array?: TypedArray, itemSize: number = 0, normalized: boolean = false) {\n        this.array = array;\n        this.itemSize = itemSize;\n        this.count = array !== undefined ? array.length / itemSize : 0;\n        this.normalized = normalized;\n    }\n\n    set needsUpdate(value: boolean) {\n        if (value === true) this.version++;\n    }\n\n    public setArray(array?: TypedArray): this {\n        this.count = array !== undefined ? array.length / this.itemSize : 0;\n        this.array = array;\n        return this;\n    }\n\n    public setDynamic(value: boolean): this {\n        this.dynamic = value;\n        return this;\n    }\n\n    public copy(source: BufferAttribute): this {\n        this.array = new (source.array as any).constructor() as TypedArray;\n        this.itemSize = source.itemSize;\n        this.count = source.count;\n        this.normalized = source.normalized;\n        this.dynamic = source.dynamic;\n        return this;\n    }\n\n    public set(value: TypedArray | number[], offset: number = 0): this {\n        this.array.set(value, offset);\n        return this;\n    }\n\n    public get(offset: number = 0, length: number = 1): TypedArray {\n        return this.array.slice(offset, length);\n    }\n\n    public copyAt(index1: number, attribute: BufferAttribute, index2: number): this {\n        index1 *= this.itemSize;\n        index2 *= attribute.itemSize;\n        for (let i: number = 0, l: number = this.itemSize; i < l; i++) {\n            this.array[index1 + i] = attribute.array[index2 + i];\n        }\n        return this;\n    }\n\n    public copyArray(array: number[]): this {\n        this.array.set(array);\n        return this;\n    }\n\n    public copyColorsArray(colors: Color[]): this {\n        const array: TypedArray = this.array;\n        let offset: number = 0;\n        for (let i: number = 0, l: number = colors.length; i < l; i++) {\n            const color: Color = colors[i] || new Color();\n            array[offset++] = color.r;\n            array[offset++] = color.g;\n            array[offset++] = color.b;\n        }\n        return this;\n    }\n\n    /**\n     * TODO question https://discourse.threejs.org/t/question-about-fromdirectgeometry-function-of-buffergeometry/1890/2\n     * @param indices\n     * @returns {BufferAttribute}\n     public copyIndicesArray(indices: Face3[]): BufferAttribute {\n        const array: TypedArray = this.array;\n        let offset: number = 0;\n        for (let i: number = 0, l: number = indices.length; i < l; i++) {\n            const index = indices[i];\n            array[offset++] = index.a;\n            array[offset++] = index.b;\n            array[offset++] = index.c;\n        }\n        return this;\n    }\n     */\n\n    public copyVector2sArray(vectors: Vector2[]): this {\n        const array: TypedArray = this.array;\n        let offset: number = 0;\n        for (let i: number = 0, l: number = vectors.length; i < l; i++) {\n            const vector: Vector2 = vectors[i] || new Vector2();\n            array[offset++] = vector.x;\n            array[offset++] = vector.y;\n        }\n        return this;\n    }\n\n    public copyVector3sArray(vectors: Vector3[]): this {\n        const array: TypedArray = this.array;\n        let offset: number = 0;\n        for (let i: number = 0, l: number = vectors.length; i < l; i++) {\n            const vector: Vector3 = vectors[i] || new Vector3();\n            array[offset++] = vector.x;\n            array[offset++] = vector.y;\n            array[offset++] = vector.z;\n        }\n        return this;\n    }\n\n    public copyVector4sArray(vectors: Vector4[]): this {\n        const array: TypedArray = this.array;\n        let offset: number = 0;\n        for (let i: number = 0, l: number = vectors.length; i < l; i++) {\n            const vector: Vector4 = vectors[i] || new Vector4();\n            array[offset++] = vector.x;\n            array[offset++] = vector.y;\n            array[offset++] = vector.z;\n            array[offset++] = vector.w;\n        }\n        return this;\n    }\n\n    public setProperty(index: number, property: string, value: Vector2 | Vector3 | Vector4 | number): this {\n        property = property.toLowerCase();\n        if (property && property.length <= 4 && property.replace(/[xyzw]/g, \"\").length === 0) {\n            const offsetMap = { x: 0, y: 1, z: 2 };\n            if (property.length === 1 && typeof value === \"number\") {\n                this.array[index * this.itemSize + offsetMap[property.charAt(0)]] = value;\n            } else if (property.length === 2 && value instanceof Vector2) {\n                this.array[index * this.itemSize + offsetMap[property.charAt(0)]] = value.x;\n                this.array[index * this.itemSize + offsetMap[property.charAt(1)]] = value.y;\n            } else if (property.length === 3 && value instanceof Vector3) {\n                this.array[index * this.itemSize + offsetMap[property.charAt(0)]] = value.x;\n                this.array[index * this.itemSize + offsetMap[property.charAt(1)]] = value.y;\n                this.array[index * this.itemSize + offsetMap[property.charAt(2)]] = value.z;\n            } else if (property.length === 4 && value instanceof Vector4) {\n                this.array[index * this.itemSize + offsetMap[property.charAt(0)]] = value.x;\n                this.array[index * this.itemSize + offsetMap[property.charAt(1)]] = value.y;\n                this.array[index * this.itemSize + offsetMap[property.charAt(2)]] = value.z;\n                this.array[index * this.itemSize + offsetMap[property.charAt(3)]] = value.w;\n            }\n        }\n        return this;\n    }\n\n    public getProperty(index: number, property: string): Vector2 | Vector3 | Vector4 | number | undefined {\n        property = property.toLowerCase();\n        if (property && property.length <= 4 && property.replace(/[xyzw]/g, \"\").length === 0) {\n            const offsetMap = { x: 0, y: 1, z: 2 };\n            if (property.length === 1) {\n                return this.array[index * this.itemSize + offsetMap[property.charAt(0)]];\n            } else if (property.length === 2) {\n                return new Vector2(\n                    this.array[index * this.itemSize + offsetMap[property.charAt(0)]],\n                    this.array[index * this.itemSize + offsetMap[property.charAt(1)]],\n                );\n            } else if (property.length === 3) {\n                return new Vector3(\n                    this.array[index * this.itemSize + offsetMap[property.charAt(0)]],\n                    this.array[index * this.itemSize + offsetMap[property.charAt(1)]],\n                    this.array[index * this.itemSize + offsetMap[property.charAt(2)]],\n                );\n            } else if (property.length === 4) {\n                return new Vector4(\n                    this.array[index * this.itemSize + offsetMap[property.charAt(0)]],\n                    this.array[index * this.itemSize + offsetMap[property.charAt(1)]],\n                    this.array[index * this.itemSize + offsetMap[property.charAt(2)]],\n                    this.array[index * this.itemSize + offsetMap[property.charAt(3)]],\n                );\n            }\n        }\n        return undefined;\n    }\n\n    public clone(): BufferAttribute {\n        return new (this.constructor as new (\n            array: TypedArray,\n            itemSize: number,\n            normalized: boolean,\n        ) => BufferAttribute)(this.array, this.itemSize, true).copy(this);\n    }\n}\n\nexport class Int8BufferAttribute extends BufferAttribute {\n    constructor(array: number | ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Int8Array(array as ArrayBufferLike), itemSize, normalized);\n    }\n}\n\nexport class Uint8BufferAttribute extends BufferAttribute {\n    constructor(array: number | ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Uint8Array(array as ArrayBufferLike), itemSize, normalized);\n    }\n}\n\nexport class Uint8ClampedBufferAttribute extends BufferAttribute {\n    constructor(array: number | ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Uint8ClampedArray(array as ArrayBufferLike), itemSize, normalized);\n    }\n}\n\nexport class Int16BufferAttribute extends BufferAttribute {\n    constructor(array: number | ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Int16Array(array as ArrayBufferLike), itemSize, normalized);\n    }\n}\n\nexport class Uint16BufferAttribute extends BufferAttribute {\n    constructor(array: number | ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Uint16Array(array as ArrayBufferLike), itemSize, normalized);\n    }\n}\n\nexport class Int32BufferAttribute extends BufferAttribute {\n    constructor(array: number | ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Int32Array(array as ArrayBufferLike), itemSize, normalized);\n    }\n}\n\nexport class Uint32BufferAttribute extends BufferAttribute {\n    constructor(array: number | ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Uint32Array(array as ArrayBufferLike), itemSize, normalized);\n    }\n}\n\nexport class Float32BufferAttribute extends BufferAttribute {\n    constructor(array: number, itemSize: number, normalized?: boolean);\n    constructor(array: ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Float32Array(array), itemSize, normalized);\n    }\n}\n\nexport class Float64BufferAttribute extends BufferAttribute {\n    constructor(array: number | ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: ArrayBufferLike | ArrayLike<number>, itemSize: number, normalized?: boolean);\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Float64Array(array as ArrayBufferLike), itemSize, normalized);\n    }\n}\n\nexport type TypedBufferAttribute =\n    | Int8BufferAttribute\n    | Uint8BufferAttribute\n    | Uint8ClampedBufferAttribute\n    | Int16BufferAttribute\n    | Uint16BufferAttribute\n    | Int32BufferAttribute\n    | Uint32BufferAttribute\n    | Float32BufferAttribute\n    | Float64BufferAttribute;\n","import { Box3, ObjectWithGeometry } from \"../math/Box3\";\nimport { MathUtil } from \"../math/Math\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { applyMatrixToBufferAttribute, arrayMax, setBoxFromBufferAttribute } from \"../utils\";\nimport {\n    BufferAttribute,\n    Float32BufferAttribute,\n    TypedArray,\n    Uint16BufferAttribute,\n    Uint32BufferAttribute,\n} from \"./BufferAttribute\";\nimport { DirectGeometry, IGroup } from \"./DirectGeometry\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport { Geometry } from \"./Geometry\";\nimport { Object3D } from \"./Object3D\";\nimport { Mesh } from \"../objects/Mesh\";\nimport { Line } from \"../objects/Line\";\nimport { Points } from \"../objects/Points\";\n\nconst object: Object3D = new Object3D();\n\nexport interface IDrawRange {\n    start: number;\n    count: number;\n}\n\nlet bufferGeometryId: number = 1;\nexport class BufferGeometry extends EventDispatcher {\n    public readonly id: number = (bufferGeometryId += 2);\n    public readonly uuid: string = MathUtil.generateUUID();\n    public name: string = \"\";\n    public readonly type: string = \"BufferGeometry\";\n\n    public index: BufferAttribute | null = null;\n    public attributes: { [key: string]: BufferAttribute } = {};\n\n    public morphAttributes: { [key: string]: BufferAttribute[] } = {};\n\n    public groups: IGroup[] = [];\n\n    public boundingBox: Box3 | null = null;\n    public boundingSphere: Sphere | null = null;\n\n    public drawRange: IDrawRange = { start: 0, count: Infinity };\n\n    public setIndex(index: number[] | BufferAttribute): this {\n        if (Array.isArray(index)) {\n            this.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n        } else {\n            this.index = index;\n        }\n        return this;\n    }\n\n    public addAttribute(name: string, attribute: BufferAttribute): this {\n        if (name === \"index\") {\n            this.setIndex(attribute);\n            return this;\n        }\n        this.attributes[name] = attribute;\n        return this;\n    }\n\n    public getAttribute(name: string): BufferAttribute {\n        return this.attributes[name];\n    }\n\n    public removeAttribute(name: string): this {\n        delete this.attributes[name];\n        return this;\n    }\n\n    public addGroup(start: number, count: number, materialIndex: number = 0): this {\n        this.groups.push({\n            count: count,\n            materialIndex: materialIndex,\n            start: start,\n        });\n        return this;\n    }\n\n    public clearGroups(): this {\n        this.groups = [];\n        return this;\n    }\n\n    public setDrawRange(start: number, count: number): this {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n        return this;\n    }\n\n    public applyMatrix(matrix: Matrix4): this {\n        const position: BufferAttribute = this.attributes.position;\n        if (position !== undefined) {\n            applyMatrixToBufferAttribute(matrix, position);\n            position.needsUpdate = true;\n        }\n        const normal: BufferAttribute = this.attributes.normal;\n        if (normal !== undefined) {\n            const normalMatrix: Matrix3 = new Matrix3().getNormalMatrix(matrix);\n            applyMatrixToBufferAttribute(normalMatrix, normal);\n            normal.needsUpdate = true;\n        }\n        if (this.boundingBox !== null) {\n            this.computeBoundingBox();\n        }\n        if (this.boundingSphere !== null) {\n            this.computeBoundingSphere();\n        }\n        return this;\n    }\n\n    public rotateX(angle: number): this {\n        return this.applyMatrix(new Matrix4().makeRotationX(angle));\n    }\n\n    public rotateY(angle: number): this {\n        return this.applyMatrix(new Matrix4().makeRotationY(angle));\n    }\n\n    public rotateZ(angle: number): this {\n        return this.applyMatrix(new Matrix4().makeRotationZ(angle));\n    }\n\n    public translate(x: number, y: number, z: number): this {\n        return this.applyMatrix(new Matrix4().makeTranslation(x, y, z));\n    }\n\n    public scale(x: number, y: number, z: number): this {\n        return this.applyMatrix(new Matrix4().makeScale(x, y, z));\n    }\n\n    public lookAt(vector: Vector3): this {\n        const obj: Object3D = object.lookAt(vector);\n        obj.updateMatrix();\n        return this.applyMatrix(obj.matrix);\n    }\n\n    public center(): Vector3 {\n        this.computeBoundingBox();\n        const offset: Vector3 = this.boundingBox.getCenter().negate();\n        this.translate(offset.x, offset.y, offset.z);\n        return offset;\n    }\n\n    /**\n     * Same as updateFromObject\n     * @param object\n     */\n    public setFromObject(object: ObjectWithGeometry): this {\n        const geometry: Geometry = object.geometry as Geometry;\n        if (object instanceof Points || object instanceof Line) {\n            const positions: Float32BufferAttribute = new Float32BufferAttribute(geometry.vertices.length * 3, 3);\n            const colors: Float32BufferAttribute = new Float32BufferAttribute(geometry.colors.length * 3, 3);\n            this.addAttribute(\"position\", positions.copyVector3sArray(geometry.vertices));\n            this.addAttribute(\"color\", colors.copyColorsArray(geometry.colors));\n            if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {\n                const lineDistances: Float32BufferAttribute = new Float32BufferAttribute(\n                    geometry.lineDistances.length,\n                    1,\n                );\n                this.addAttribute(\"lineDistance\", lineDistances.copyArray(geometry.lineDistances));\n            }\n            if (geometry.boundingSphere !== null) {\n                this.boundingSphere = geometry.boundingSphere.clone();\n            }\n            if (geometry.boundingBox !== null) {\n                this.boundingBox = geometry.boundingBox.clone();\n            }\n        } else if (object instanceof Mesh) {\n            this.fromGeometry(geometry);\n        }\n        return this;\n    }\n\n    public setFromPoints(points: Vector3[]): this {\n        const position: number[] = [];\n        for (let i: number = 0, l: number = points.length; i < l; i++) {\n            const point: Vector3 = points[i];\n            position.push(point.x, point.y, point.z || 0);\n        }\n        this.addAttribute(\"position\", new Float32BufferAttribute(position, 3));\n        return this;\n    }\n\n    /**\n     * This function is a mess.\n     * The argument has implicit requirement for arg `object`\n     * Since the only use of this function is in `WebGLObjects`,\n     * and it requires the object's `geometry` property should be a `Geometry` instance,\n     * So we can/must assert the object.geometry as type `Geometry`.\n     * So the whole function is dealing with no BufferGeometry instance,\n     * which may be the reason why BufferGeometry is faster.\n     *\n     * @param object\n     * @returns {BufferGeometry}\n     */\n    public updateFromObject(object: ObjectWithGeometry): this {\n        let geometry: Geometry | DirectGeometry = object.geometry as Geometry;\n        if (object instanceof Mesh) {\n            let direct: DirectGeometry | undefined = geometry.directGeometry;\n            if (geometry.elementsNeedUpdate === true) {\n                direct = undefined;\n                geometry.elementsNeedUpdate = false;\n            }\n            if (direct === undefined) {\n                // Geometry -> DirectGeometry -> BufferGeometry\n                return this.fromGeometry(geometry);\n            }\n            direct.verticesNeedUpdate = geometry.verticesNeedUpdate;\n            direct.normalsNeedUpdate = geometry.normalsNeedUpdate;\n            direct.colorsNeedUpdate = geometry.colorsNeedUpdate;\n            direct.uvsNeedUpdate = geometry.uvsNeedUpdate;\n            direct.groupsNeedUpdate = geometry.groupsNeedUpdate;\n            geometry.verticesNeedUpdate = false;\n            geometry.normalsNeedUpdate = false;\n            geometry.colorsNeedUpdate = false;\n            geometry.uvsNeedUpdate = false;\n            geometry.groupsNeedUpdate = false;\n            geometry = direct;\n        }\n\n        // Used by both Geometry and DirectGeometry\n        if (geometry.verticesNeedUpdate === true) {\n            const attribute: BufferAttribute = this.attributes.position;\n            if (attribute !== undefined) {\n                attribute.copyVector3sArray(geometry.vertices);\n                attribute.needsUpdate = true;\n            }\n            geometry.verticesNeedUpdate = false;\n        }\n\n        // Used only by DirectGeometry\n        if (geometry instanceof DirectGeometry && geometry.normalsNeedUpdate === true) {\n            const attribute: BufferAttribute = this.attributes.normal;\n            if (attribute !== undefined) {\n                attribute.copyVector3sArray(geometry.normals);\n                attribute.needsUpdate = true;\n            }\n            geometry.normalsNeedUpdate = false;\n        }\n\n        // Used by both Geometry and DirectGeometry\n        if (geometry.colorsNeedUpdate === true) {\n            const attribute: BufferAttribute = this.attributes.color;\n            if (attribute !== undefined) {\n                attribute.copyColorsArray(geometry.colors);\n                attribute.needsUpdate = true;\n            }\n            geometry.colorsNeedUpdate = false;\n        }\n\n        // Used only by DirectGeometry\n        if (geometry instanceof DirectGeometry && geometry.uvsNeedUpdate) {\n            const attribute: BufferAttribute = this.attributes.uv;\n            if (attribute !== undefined) {\n                attribute.copyVector2sArray(geometry.uvs);\n                attribute.needsUpdate = true;\n            }\n            geometry.uvsNeedUpdate = false;\n        }\n\n        // Used only by Geometry\n        if (geometry instanceof Geometry && geometry.lineDistancesNeedUpdate) {\n            const attribute: BufferAttribute = this.attributes.lineDistance;\n            if (attribute !== undefined) {\n                attribute.copyArray(geometry.lineDistances);\n                attribute.needsUpdate = true;\n            }\n            geometry.lineDistancesNeedUpdate = false;\n        }\n\n        // Used only by DirectGeometry\n        if (geometry instanceof DirectGeometry && geometry.groupsNeedUpdate) {\n            geometry.computeGroups(object.geometry as Geometry);\n            this.groups = geometry.groups;\n            geometry.groupsNeedUpdate = false;\n        }\n\n        // Well, IMO!!\n        return this;\n    }\n\n    /**\n     * Geometry of a Mesh\n     * @param geometry\n     */\n    public fromGeometry(geometry: Geometry): this {\n        geometry.directGeometry = new DirectGeometry().fromGeometry(geometry);\n        return this.fromDirectGeometry(geometry.directGeometry);\n    }\n\n    public fromDirectGeometry(geometry: DirectGeometry): this {\n        const positions: Float32Array = new Float32Array(geometry.vertices.length * 3);\n        this.addAttribute(\"position\", new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));\n        if (geometry.normals.length > 0) {\n            const normals: Float32Array = new Float32Array(geometry.normals.length * 3);\n            this.addAttribute(\"normal\", new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));\n        }\n        if (geometry.colors.length > 0) {\n            const colors: Float32Array = new Float32Array(geometry.colors.length * 3);\n            this.addAttribute(\"color\", new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));\n        }\n        if (geometry.uvs.length > 0) {\n            const uvs: Float32Array = new Float32Array(geometry.uvs.length * 2);\n            this.addAttribute(\"uv\", new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));\n        }\n        if (geometry.uvs2.length > 0) {\n            const uvs2: Float32Array = new Float32Array(geometry.uvs2.length * 2);\n            this.addAttribute(\"uv2\", new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));\n        }\n        /**\n         * TODO question https://discourse.threejs.org/t/question-about-fromdirectgeometry-function-of-buffergeometry/1890/2\n         if (geometry.indices.length > 0) {\n            const indices: Uint32Array | Uint16Array = new (arrayMax(geometry.indices) > 65535 ? Uint32Array : Uint16Array)(geometry.indices.length * 3);\n            this.setIndex(new BufferAttribute(indices, 1).copyIndicesArray(geometry.indices));\n        }\n         */\n        // groups\n        this.groups = geometry.groups;\n        // morphs\n        for (const name in geometry.morphTargets) {\n            if (!geometry.morphTargets.hasOwnProperty(name)) continue;\n            const array: Float32BufferAttribute[] = [];\n            const morphTargets: Vector3[][] = geometry.morphTargets[name];\n            for (let i: number = 0, l: number = morphTargets.length; i < l; i++) {\n                const morphTarget: Vector3[] = morphTargets[i];\n                const attribute: Float32BufferAttribute = new Float32BufferAttribute(\n                    new Array(morphTarget.length * 3),\n                    3,\n                );\n                array.push(attribute.copyVector3sArray(morphTarget));\n            }\n            this.morphAttributes[name] = array;\n        }\n        // skinning\n        if (geometry.skinIndices.length > 0) {\n            const skinIndices: Float32BufferAttribute = new Float32BufferAttribute(\n                new Array(geometry.skinIndices.length * 4),\n                4,\n            );\n            this.addAttribute(\"skinIndex\", skinIndices.copyVector4sArray(geometry.skinIndices));\n        }\n        if (geometry.skinWeights.length > 0) {\n            const skinWeights: Float32BufferAttribute = new Float32BufferAttribute(\n                new Array(geometry.skinWeights.length * 4),\n                4,\n            );\n            this.addAttribute(\"skinWeight\", skinWeights.copyVector4sArray(geometry.skinWeights));\n        }\n\n        if (geometry.boundingSphere !== null) {\n            this.boundingSphere = geometry.boundingSphere.clone();\n        }\n        if (geometry.boundingBox !== null) {\n            this.boundingBox = geometry.boundingBox.clone();\n        }\n\n        return this;\n    }\n\n    public computeBoundingBox(): void {\n        if (this.boundingBox === null) {\n            this.boundingBox = new Box3();\n        }\n        const position: BufferAttribute = this.attributes.position;\n        if (position !== undefined) {\n            setBoxFromBufferAttribute(this.boundingBox, position);\n        } else {\n            this.boundingBox.makeEmpty();\n        }\n        if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n            console.error(\n                `THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.`,\n                this,\n            );\n        }\n    }\n\n    public computeBoundingSphere(): void {\n        if (this.boundingSphere === null) {\n            this.boundingSphere = new Sphere();\n        }\n        const position: BufferAttribute = this.attributes.position;\n        if (position) {\n            const box: Box3 = new Box3();\n            setBoxFromBufferAttribute(box, position);\n            const center: Vector3 = box.getCenter();\n            // hoping to find a boundingSphere with a radius smaller than the\n            // boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n            let maxRadiusSquare: number = 0;\n            for (let i: number = 0, il: number = position.count; i < il; i++) {\n                const vector: Vector3 = new Vector3();\n                vector.x = position.getProperty(i, \"x\") as number;\n                vector.y = position.getProperty(i, \"y\") as number;\n                vector.z = position.getProperty(i, \"z\") as number;\n                maxRadiusSquare = Math.max(maxRadiusSquare, center.distanceToSquared(vector));\n            }\n            this.boundingSphere.radius = Math.sqrt(maxRadiusSquare);\n            if (isNaN(this.boundingSphere.radius)) {\n                console.error(\n                    `THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.`,\n                    this,\n                );\n            }\n        }\n    }\n\n    public computeVertexNormals(): void {\n        const index: BufferAttribute | null = this.index;\n        const attributes: { [key: string]: BufferAttribute } = this.attributes;\n        const groups: IGroup[] = this.groups;\n        if (attributes.position) {\n            const positions: TypedArray = attributes.position.array;\n            if (attributes.normal === undefined) {\n                this.addAttribute(\"normal\", new BufferAttribute(new Float32Array(positions.length), 3));\n            } else {\n                // reset existing normals to zero\n                const array: TypedArray = attributes.normal.array;\n                for (let i: number = 0, il: number = array.length; i < il; i++) {\n                    array[i] = 0;\n                }\n            }\n            const normals: TypedArray = attributes.normal.array;\n\n            let vA: number, vB: number, vC: number;\n            const pA: Vector3 = new Vector3(),\n                pB: Vector3 = new Vector3(),\n                pC: Vector3 = new Vector3();\n            const cb: Vector3 = new Vector3(),\n                ab: Vector3 = new Vector3();\n            // indexed elements\n            if (index) {\n                const indices: TypedArray = index.array;\n                if (groups.length === 0) {\n                    this.addGroup(0, indices.length);\n                }\n                for (let j: number = 0, jl: number = groups.length; j < jl; ++j) {\n                    const group: IGroup = groups[j];\n                    const start: number = group.start;\n                    const count: number = group.count;\n                    for (let i: number = start, il: number = start + count; i < il; i += 3) {\n                        vA = indices[i] * 3;\n                        vB = indices[i + 1] * 3;\n                        vC = indices[i + 2] * 3;\n                        pA.fromArray(positions, vA);\n                        pB.fromArray(positions, vB);\n                        pC.fromArray(positions, vC);\n                        cb.copy(pC).sub(pB);\n                        ab.copy(pA).sub(pB);\n                        cb.cross(ab);\n                        normals[vA] += cb.x;\n                        normals[vA + 1] += cb.y;\n                        normals[vA + 2] += cb.z;\n                        normals[vB] += cb.x;\n                        normals[vB + 1] += cb.y;\n                        normals[vB + 2] += cb.z;\n                        normals[vC] += cb.x;\n                        normals[vC + 1] += cb.y;\n                        normals[vC + 2] += cb.z;\n                    }\n                }\n            } else {\n                // non-indexed elements (unconnected triangle soup)\n                for (let i: number = 0, il: number = positions.length; i < il; i += 9) {\n                    pA.fromArray(positions, i);\n                    pB.fromArray(positions, i + 3);\n                    pC.fromArray(positions, i + 6);\n                    cb.copy(pC).sub(pB);\n                    ab.copy(pA).sub(pB);\n                    cb.cross(ab);\n                    normals[i] = cb.x;\n                    normals[i + 1] = cb.y;\n                    normals[i + 2] = cb.z;\n                    normals[i + 3] = cb.x;\n                    normals[i + 4] = cb.y;\n                    normals[i + 5] = cb.z;\n                    normals[i + 6] = cb.x;\n                    normals[i + 7] = cb.y;\n                    normals[i + 8] = cb.z;\n                }\n            }\n            this.normalizeNormals();\n            attributes.normal.needsUpdate = true;\n        }\n    }\n\n    public normalizeNormals(): void {\n        const vector: Vector3 = new Vector3();\n        const normals: BufferAttribute = this.attributes.normal;\n        for (let i: number = 0, il: number = normals.count; i < il; i++) {\n            vector.x = normals.getProperty(i, \"x\") as number;\n            vector.y = normals.getProperty(i, \"y\") as number;\n            vector.z = normals.getProperty(i, \"z\") as number;\n            vector.normalize();\n            normals.setProperty(i, \"xyz\", vector);\n        }\n    }\n\n    public toNonIndexed(): BufferGeometry {\n        if (this.index === null) {\n            console.warn(`THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.`);\n            return this;\n        }\n        const geometry2: BufferGeometry = new BufferGeometry();\n        const indices: TypedArray = this.index.array;\n        const attributes: { [key: string]: BufferAttribute } = this.attributes;\n        for (const name in attributes) {\n            if (!attributes.hasOwnProperty(name)) continue;\n            const attribute: BufferAttribute = attributes[name];\n            const array: TypedArray = attribute.array;\n            const itemSize: number = attribute.itemSize;\n            const array2: TypedArray = new (array.constructor as new (length: number) => TypedArray)(\n                indices.length * itemSize,\n            );\n            let index: number = 0,\n                index2: number = 0;\n            for (let i: number = 0, l: number = indices.length; i < l; i++) {\n                index = indices[i] * itemSize;\n                for (let j: number = 0; j < itemSize; j++) {\n                    array2[index2++] = array[index++];\n                }\n            }\n            geometry2.addAttribute(name, new BufferAttribute(array2, itemSize));\n        }\n\n        return geometry2;\n    }\n\n    public clone(): BufferGeometry {\n        return new (this.constructor as new () => BufferGeometry)().copy(this);\n    }\n\n    public copy(source: BufferGeometry): this {\n        // reset\n        this.index = null;\n        this.attributes = {};\n        this.morphAttributes = {};\n        this.groups = [];\n        this.boundingBox = null;\n        this.boundingSphere = null;\n        // name\n        this.name = source.name;\n        // index\n        const index: BufferAttribute = source.index;\n        if (index !== null) {\n            this.setIndex(index.clone());\n        }\n        // attributes\n        const attributes: { [key: string]: BufferAttribute } = source.attributes;\n        for (const name in attributes) {\n            if (!attributes.hasOwnProperty(name)) continue;\n            const attribute: BufferAttribute = attributes[name];\n            this.addAttribute(name, attribute.clone());\n        }\n        // morph attributes\n        const morphAttributes: { [key: string]: BufferAttribute[] } = source.morphAttributes;\n        for (const name in morphAttributes) {\n            if (!attributes.hasOwnProperty(name)) continue;\n            const array: BufferAttribute[] = [];\n            const morphAttribute: BufferAttribute[] = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n            for (let i: number = 0, l: number = morphAttribute.length; i < l; i++) {\n                array.push(morphAttribute[i].clone());\n            }\n            this.morphAttributes[name] = array;\n        }\n        // groups\n        const groups: IGroup[] = source.groups;\n        for (let i: number = 0, l: number = groups.length; i < l; i++) {\n            const group: IGroup = groups[i];\n            this.addGroup(group.start, group.count, group.materialIndex);\n        }\n        // bounding box\n        const boundingBox: Box3 = source.boundingBox;\n        if (boundingBox !== null) {\n            this.boundingBox = boundingBox.clone();\n        }\n        // bounding sphere\n        const boundingSphere: Sphere = source.boundingSphere;\n        if (boundingSphere !== null) {\n            this.boundingSphere = boundingSphere.clone();\n        }\n        // draw range\n        this.drawRange.start = source.drawRange.start;\n        this.drawRange.count = source.drawRange.count;\n        return this;\n    }\n\n    public dispose(): void {\n        this.dispatchEvent({ type: \"dispose\" });\n    }\n}\n","export class Clock {\n    public autoStart: boolean = false;\n    protected startTime: number = 0;\n    protected oldTime: number = 0;\n    protected elapsedTime: number = 0;\n    protected running: boolean = false;\n\n    constructor(autoStart: boolean = false) {\n        this.autoStart = autoStart;\n    }\n\n    public start(): void {\n        this.startTime = (typeof performance === \"undefined\" ? Date : performance).now(); // see #10732\n        this.oldTime = this.startTime;\n        this.elapsedTime = 0;\n        this.running = true;\n    }\n\n    public stop(): void {\n        this.getElapsedTime();\n        this.running = false;\n        this.autoStart = false;\n    }\n\n    public getElapsedTime(): number {\n        this.getDelta();\n        return this.elapsedTime;\n    }\n\n    public getDelta(): number {\n        let diff: number = 0;\n        if (this.autoStart && !this.running) {\n            this.start();\n            return 0;\n        }\n        if (this.running) {\n            const newTime: number = (typeof performance === \"undefined\" ? Date : performance).now();\n            diff = (newTime - this.oldTime) / 1000;\n            this.oldTime = newTime;\n            this.elapsedTime += diff;\n        }\n        return diff;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Triangle } from \"../math/Triangle\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Vector4 } from \"../math/Vector4\";\nimport { Geometry, GeometryFace, IMorphNormal, IMorphTarget } from \"./Geometry\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Box3 } from \"../math/Box3\";\n\nexport interface IGroup {\n    start: number;\n    materialIndex: number;\n    count?: number;\n}\n\nexport class DirectGeometry {\n    public vertices: Vector3[] = [];\n    public normals: Vector3[] = [];\n    public colors: Color[] = [];\n    public uvs: Vector2[] = [];\n    public uvs2: Vector2[] = [];\n\n    public groups: IGroup[] = [];\n\n    public morphTargets: {\n        position?: Vector3[][];\n        normal?: Vector3[][];\n    } = {};\n\n    public skinWeights: Vector4[] = [];\n    public skinIndices: Vector4[] = [];\n\n    public boundingSphere: Sphere | null = null;\n    public boundingBox: Box3 | null = null;\n\n    public verticesNeedUpdate: boolean = false;\n    public uvsNeedUpdate: boolean = false;\n    public normalsNeedUpdate: boolean = false;\n    public colorsNeedUpdate: boolean = false;\n    public groupsNeedUpdate: boolean = false;\n\n    public computeGroups(geometry: Geometry): void {\n        let group: IGroup;\n        const groups: IGroup[] = [];\n        let materialIndex: number;\n        const faces: GeometryFace[] = geometry.faces;\n        let i: number = 0;\n        for (; i < faces.length; i++) {\n            const face: GeometryFace = faces[i];\n            // materials\n            if (face.materialIndex !== materialIndex) {\n                materialIndex = face.materialIndex;\n                if (group !== undefined) {\n                    group.count = i * 3 - group.start;\n                    groups.push(group);\n                }\n                group = {\n                    materialIndex: materialIndex,\n                    start: i * 3,\n                };\n            }\n        }\n        if (group !== undefined) {\n            group.count = i * 3 - group.start;\n            groups.push(group);\n        }\n        this.groups = groups;\n    }\n\n    public fromGeometry(geometry: Geometry): this {\n        const faces: GeometryFace[] = geometry.faces;\n        const vertices: Vector3[] = geometry.vertices;\n        const faceVertexUvs: Vector2[][][] = geometry.faceVertexUvs;\n\n        const hasFaceVertexUv: boolean = faceVertexUvs[0] && faceVertexUvs[0].length > 0;\n        const hasFaceVertexUv2: boolean = faceVertexUvs[1] && faceVertexUvs[1].length > 0;\n\n        // morphs\n        const morphTargets: IMorphTarget[] = geometry.morphTargets;\n        const morphTargetsLength: number = morphTargets.length;\n        if (morphTargetsLength > 0) {\n            this.morphTargets.position = [];\n            for (let i: number = 0; i < morphTargetsLength; i++) {\n                this.morphTargets.position[i] = [];\n            }\n        }\n        const morphNormals: IMorphNormal[] = geometry.morphNormals;\n        const morphNormalsLength: number = morphNormals.length;\n        if (morphNormalsLength > 0) {\n            this.morphTargets.normal = [];\n            for (let i: number = 0; i < morphNormalsLength; i++) {\n                this.morphTargets.normal[i] = [];\n            }\n        }\n        // skins\n        const skinIndices: Vector4[] = geometry.skinIndices;\n        const skinWeights: Vector4[] = geometry.skinWeights;\n        const hasSkinIndices: boolean = skinIndices.length === vertices.length;\n        const hasSkinWeights: boolean = skinWeights.length === vertices.length;\n        for (let i: number = 0; i < faces.length; i++) {\n            const face: GeometryFace = faces[i];\n            this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);\n            const vertexNormals: Vector3[] = face.vertexNormals;\n            if (vertexNormals.length === 3) {\n                this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);\n            } else {\n                const normal: Vector3 = face.normal;\n                this.normals.push(normal, normal, normal);\n            }\n            const vertexColors: Color[] = face.vertexColors;\n            if (vertexColors.length === 3) {\n                this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);\n            } else {\n                const color: Color = face.color;\n                this.colors.push(color, color, color);\n            }\n            if (hasFaceVertexUv === true) {\n                const vertexUvs: Vector2[] = faceVertexUvs[0][i];\n                if (vertexUvs !== undefined) {\n                    this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n                } else {\n                    console.warn(`THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ${i}`);\n                    this.uvs.push(new Vector2(), new Vector2(), new Vector2());\n                }\n            }\n            if (hasFaceVertexUv2 === true) {\n                const vertexUvs: Vector2[] = faceVertexUvs[1][i];\n                if (vertexUvs !== undefined) {\n                    this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n                } else {\n                    console.warn(`THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ${i}`);\n                    this.uvs2.push(new Vector2(), new Vector2(), new Vector2());\n                }\n            }\n            // morphs\n            for (let j: number = 0; j < morphTargetsLength; j++) {\n                const morphTarget: Vector3[] = morphTargets[j].vertices;\n                this.morphTargets.position[j].push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);\n            }\n            for (let j: number = 0; j < morphNormalsLength; j++) {\n                const morphNormal: Triangle = morphNormals[j].vertexNormals[i];\n                this.morphTargets.normal[j].push(morphNormal.a, morphNormal.b, morphNormal.c);\n            }\n            // skins\n            if (hasSkinIndices) {\n                this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);\n            }\n            if (hasSkinWeights) {\n                this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);\n            }\n        }\n\n        if (geometry.boundingSphere !== null) {\n            this.boundingSphere = geometry.boundingSphere.clone();\n        }\n        if (geometry.boundingBox !== null) {\n            this.boundingBox = geometry.boundingBox.clone();\n        }\n\n        this.computeGroups(geometry);\n        this.verticesNeedUpdate = geometry.verticesNeedUpdate;\n        this.normalsNeedUpdate = geometry.normalsNeedUpdate;\n        this.colorsNeedUpdate = geometry.colorsNeedUpdate;\n        this.uvsNeedUpdate = geometry.uvsNeedUpdate;\n        this.groupsNeedUpdate = geometry.groupsNeedUpdate;\n        return this;\n    }\n}\n","export interface IEventObject {\n    target?: EventDispatcher;\n    type?: string;\n}\n\nexport class EventDispatcher {\n    protected _listeners: { [key: string]: Array<(args: any) => any> } = {};\n\n    public addEventListener(type: string, listener: (args: any) => any): void {\n        const listeners: { [key: string]: Array<(args: any) => any> } = this._listeners;\n        if (listeners[type] === undefined) {\n            listeners[type] = [];\n        }\n        if (listeners[type].indexOf(listener) === -1) {\n            listeners[type].push(listener);\n        }\n    }\n\n    public hasEventListener(type: string, listener: (args: any) => any): boolean {\n        if (this._listeners === undefined) return false;\n        const listeners: { [key: string]: Array<(args: any) => any> } = this._listeners;\n        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n    }\n\n    public removeEventListener(type: string, listener: (args: any) => any) {\n        if (this._listeners === undefined) return;\n        const listeners: { [key: string]: Array<(args: any) => any> } = this._listeners;\n        const listenerArray: Array<(args: any) => any> = listeners[type];\n        if (listenerArray !== undefined) {\n            const index = listenerArray.indexOf(listener);\n            if (index !== -1) {\n                listenerArray.splice(index, 1);\n            }\n        }\n    }\n\n    public dispatchEvent(event: IEventObject = {}) {\n        if (this._listeners === undefined) return;\n        const listeners: { [key: string]: Array<(args: any) => any> } = this._listeners;\n        const listenerArray: Array<(args: any) => any> = listeners[event.type];\n        if (listenerArray !== undefined) {\n            event.target = this;\n            const array: Array<(args: any) => any> = listenerArray.slice(0);\n            for (let i = 0, l = array.length; i < l; i++) {\n                array[i].call(this, event);\n            }\n        }\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Vector3 } from \"../math/Vector3\";\n\nexport class Face3 {\n    public a: number = 0;\n    public b: number = 0;\n    public c: number = 0;\n\n    public normal: Vector3 = new Vector3();\n    public vertexNormals: Vector3[] = [];\n    public color: Color = new Color();\n    public vertexColors: Color[] = [];\n    public materialIndex: number = 0;\n\n    constructor(\n        a: number = 0,\n        b: number = 0,\n        c: number = 0,\n        normal: Vector3 | Vector3[] = new Vector3(),\n        color: Color | Color[] = new Color(),\n        materialIndex: number = 0,\n    ) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n\n        if (normal instanceof Vector3) this.normal = normal;\n        if (Array.isArray(normal)) this.vertexNormals = normal;\n\n        if (color instanceof Color) this.color = color;\n        if (Array.isArray(color)) this.vertexColors = color;\n\n        this.materialIndex = materialIndex;\n    }\n\n    public copy(source: Face3): this {\n        this.a = source.a;\n        this.b = source.b;\n        this.c = source.c;\n        this.normal.copy(source.normal);\n        this.color.copy(source.color);\n        this.materialIndex = source.materialIndex;\n        for (let i: number = 0, il: number = source.vertexNormals.length; i < il; i++) {\n            this.vertexNormals[i] = source.vertexNormals[i].clone();\n        }\n        for (let i: number = 0, il: number = source.vertexColors.length; i < il; i++) {\n            this.vertexColors[i] = source.vertexColors[i].clone();\n        }\n        return this;\n    }\n\n    public clone(): Face3 {\n        return new (this.constructor as new () => Face3)().copy(this);\n    }\n}\n","import { Box3 } from \"../math/Box3\";\nimport { Color } from \"../math/Color\";\nimport { MathUtil } from \"../math/Math\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Triangle } from \"../math/Triangle\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Vector4 } from \"../math/Vector4\";\nimport { Mesh } from \"../objects/Mesh\";\nimport { BufferAttribute, TypedArray } from \"./BufferAttribute\";\nimport { BufferGeometry } from \"./BufferGeometry\";\nimport { DirectGeometry, IGroup } from \"./DirectGeometry\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport { Face3 } from \"./Face3\";\nimport { Object3D } from \"./Object3D\";\nimport { IGeometeryBone } from \"../objects/SkinnedMesh\";\n\nconst object: Object3D = new Object3D();\n\nexport class GeometryFace extends Face3 {\n    public id?: number;\n    public originalFaceNormal?: Vector3;\n    public originalVertexNormals?: Vector3[];\n}\n\nexport interface IMorphNormal {\n    faceNormals?: Vector3[];\n    vertexNormals?: Triangle[];\n}\n\nexport interface IMorphTarget {\n    name: string;\n    vertices?: Vector3[];\n    normals?: Vector3[];\n}\n\nlet geometryId: number = 0;\n\nexport class Geometry extends EventDispatcher {\n    /**\n     * Used in WebGLGeometries\n     * @type {BufferGeometry}\n     */\n    public bufferGeometry?: BufferGeometry;\n\n    public readonly id: number = (geometryId += 2);\n    public readonly uuid: string = MathUtil.generateUUID();\n    public name: string = \"\";\n    public readonly type: string = \"Geometry\";\n\n    public vertices: Vector3[] = [];\n    public colors: Color[] = [];\n    public faces: GeometryFace[] = [];\n    public faceVertexUvs: Vector2[][][] = [[]];\n\n    public morphTargets: IMorphTarget[] = [];\n    public morphNormals: IMorphNormal[] = [];\n\n    public skinWeights: Vector4[] = [];\n    public skinIndices: Vector4[] = [];\n\n    public lineDistances: number[] = [];\n\n    public boundingBox: Box3 | null = null;\n    public boundingSphere: Sphere | null = null;\n\n    public elementsNeedUpdate: boolean = false;\n    public verticesNeedUpdate: boolean = false;\n    public uvsNeedUpdate: boolean = false;\n    public normalsNeedUpdate: boolean = false;\n    public colorsNeedUpdate: boolean = false;\n    public lineDistancesNeedUpdate: boolean = false;\n    public groupsNeedUpdate: boolean = false;\n\n    // used for internal transform\n    public directGeometry?: DirectGeometry;\n    // for SkinnedMesh SkeletonHelper Loaded Object from JSONLoader and etc\n    public bones?: IGeometeryBone[];\n\n    public applyMatrix(matrix: Matrix4): this {\n        const normalMatrix: Matrix3 = new Matrix3().getNormalMatrix(matrix);\n        for (let i: number = 0, il: number = this.vertices.length; i < il; i++) {\n            this.vertices[i].applyMatrix4(matrix);\n        }\n        for (let i: number = 0, il: number = this.faces.length; i < il; i++) {\n            const face: GeometryFace = this.faces[i];\n            face.normal.applyMatrix3(normalMatrix).normalize();\n            for (let j: number = 0, jl: number = face.vertexNormals.length; j < jl; j++) {\n                face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();\n            }\n        }\n        if (this.boundingBox !== null) {\n            this.computeBoundingBox();\n        }\n        if (this.boundingSphere !== null) {\n            this.computeBoundingSphere();\n        }\n        this.verticesNeedUpdate = true;\n        this.normalsNeedUpdate = true;\n        return this;\n    }\n\n    public rotateX(angle: number): this {\n        return this.applyMatrix(new Matrix4().makeRotationX(angle));\n    }\n\n    public rotateY(angle: number): this {\n        return this.applyMatrix(new Matrix4().makeRotationY(angle));\n    }\n\n    public rotateZ(angle: number): this {\n        return this.applyMatrix(new Matrix4().makeRotationZ(angle));\n    }\n\n    public translate(x: number, y: number, z: number): this {\n        return this.applyMatrix(new Matrix4().makeTranslation(x, y, z));\n    }\n\n    public scale(x: number, y: number, z: number): this {\n        return this.applyMatrix(new Matrix4().makeScale(x, y, z));\n    }\n\n    public lookAt(vector: Vector3): this {\n        const obj: Object3D = object.lookAt(vector);\n        obj.updateMatrix();\n        return this.applyMatrix(obj.matrix);\n    }\n\n    public fromBufferGeometry(geometry: BufferGeometry): this {\n        const indices: TypedArray = geometry.index !== null ? geometry.index.array : undefined;\n        const attributes: { [key: string]: BufferAttribute } = geometry.attributes;\n        const positions: TypedArray = attributes.position.array;\n        const normals: TypedArray = attributes.normal !== undefined ? attributes.normal.array : undefined;\n        const colors: TypedArray = attributes.color !== undefined ? attributes.color.array : undefined;\n        const uvs: TypedArray = attributes.uv !== undefined ? attributes.uv.array : undefined;\n        const uvs2: TypedArray = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n        if (uvs2 !== undefined) this.faceVertexUvs[1] = [];\n        const tempNormals: Vector3[] = [];\n        const tempUVs: Vector2[] = [];\n        const tempUVs2: Vector2[] = [];\n\n        for (let i: number = 0, j: number = 0; i < positions.length; i += 3, j += 2) {\n            this.vertices.push(new Vector3(positions[i], positions[i + 1], positions[i + 2]));\n            if (normals !== undefined) {\n                tempNormals.push(new Vector3(normals[i], normals[i + 1], normals[i + 2]));\n            }\n            if (colors !== undefined) {\n                this.colors.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n            }\n            if (uvs !== undefined) {\n                tempUVs.push(new Vector2(uvs[j], uvs[j + 1]));\n            }\n            if (uvs2 !== undefined) {\n                tempUVs2.push(new Vector2(uvs2[j], uvs2[j + 1]));\n            }\n        }\n        const addFace = (a: number, b: number, c: number, materialIndex?: number): void => {\n            const vertexNormals: Vector3[] =\n                normals !== undefined ? [tempNormals[a].clone(), tempNormals[b].clone(), tempNormals[c].clone()] : [];\n            const vertexColors: Color[] =\n                colors !== undefined ? [this.colors[a].clone(), this.colors[b].clone(), this.colors[c].clone()] : [];\n            const face: Face3 = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);\n            this.faces.push(face);\n            if (uvs !== undefined) {\n                this.faceVertexUvs[0].push([tempUVs[a].clone(), tempUVs[b].clone(), tempUVs[c].clone()]);\n            }\n            if (uvs2 !== undefined) {\n                this.faceVertexUvs[1].push([tempUVs2[a].clone(), tempUVs2[b].clone(), tempUVs2[c].clone()]);\n            }\n        };\n\n        const groups: IGroup[] = geometry.groups;\n        if (groups.length > 0) {\n            for (let i: number = 0; i < groups.length; i++) {\n                const group: IGroup = groups[i];\n                const start: number = group.start;\n                const count: number = group.count;\n                for (let j: number = start, jl: number = start + count; j < jl; j += 3) {\n                    if (indices !== undefined) {\n                        addFace(indices[j], indices[j + 1], indices[j + 2], group.materialIndex);\n                    } else {\n                        addFace(j, j + 1, j + 2, group.materialIndex);\n                    }\n                }\n            }\n        } else {\n            if (indices !== undefined) {\n                for (let i: number = 0; i < indices.length; i += 3) {\n                    addFace(indices[i], indices[i + 1], indices[i + 2]);\n                }\n            } else {\n                for (let i: number = 0; i < positions.length / 3; i += 3) {\n                    addFace(i, i + 1, i + 2);\n                }\n            }\n        }\n        this.computeFaceNormals();\n        if (geometry.boundingBox !== null) {\n            this.boundingBox = geometry.boundingBox.clone();\n        }\n        if (geometry.boundingSphere !== null) {\n            this.boundingSphere = geometry.boundingSphere.clone();\n        }\n        return this;\n    }\n\n    public center(): Vector3 {\n        this.computeBoundingBox();\n        const offset: Vector3 = this.boundingBox.getCenter().negate();\n        this.translate(offset.x, offset.y, offset.z);\n        return offset;\n    }\n\n    public normalize(): this {\n        this.computeBoundingSphere();\n        const center: Vector3 = this.boundingSphere.center;\n        const radius: number = this.boundingSphere.radius;\n        const s: number = radius === 0 ? 1 : 1.0 / radius;\n        const matrix: Matrix4 = new Matrix4();\n        matrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);\n        return this.applyMatrix(matrix);\n    }\n\n    public computeFaceNormals(): this {\n        const cb: Vector3 = new Vector3(),\n            ab: Vector3 = new Vector3();\n        for (let f: number = 0, fl: number = this.faces.length; f < fl; f++) {\n            const face: GeometryFace = this.faces[f];\n            const vA: Vector3 = this.vertices[face.a];\n            const vB: Vector3 = this.vertices[face.b];\n            const vC: Vector3 = this.vertices[face.c];\n            cb.copy(vC).sub(vB);\n            ab.copy(vA).sub(vB);\n            cb.cross(ab);\n            cb.normalize();\n            face.normal.copy(cb);\n        }\n        return this;\n    }\n\n    public computeVertexNormals(areaWeighted: boolean = true): this {\n        const vertices: Vector3[] = new Array(this.vertices.length);\n        for (let v: number = 0, vl: number = this.vertices.length; v < vl; v++) {\n            vertices[v] = new Vector3();\n        }\n        if (areaWeighted) {\n            // vertex normals weighted by triangle areas\n            // http://www.iquilezles.org/www/articles/normals/normals.htm\n            for (let f: number = 0, fl: number = this.faces.length; f < fl; f++) {\n                const face: GeometryFace = this.faces[f];\n                const vA: Vector3 = this.vertices[face.a];\n                const vB: Vector3 = this.vertices[face.b];\n                const vC: Vector3 = this.vertices[face.c];\n                const cb: Vector3 = new Vector3().copy(vC).sub(vB);\n                const ab: Vector3 = new Vector3().copy(vA).sub(vB);\n                cb.cross(ab);\n                vertices[face.a].add(cb);\n                vertices[face.b].add(cb);\n                vertices[face.c].add(cb);\n            }\n        } else {\n            this.computeFaceNormals();\n            for (let f: number = 0, fl: number = this.faces.length; f < fl; f++) {\n                const face: GeometryFace = this.faces[f];\n                vertices[face.a].add(face.normal);\n                vertices[face.b].add(face.normal);\n                vertices[face.c].add(face.normal);\n            }\n        }\n        for (let v: number = 0, vl: number = this.vertices.length; v < vl; v++) {\n            vertices[v].normalize();\n        }\n        for (let f: number = 0, fl: number = this.faces.length; f < fl; f++) {\n            const face: GeometryFace = this.faces[f];\n            const vertexNormals: Vector3[] = face.vertexNormals;\n            if (vertexNormals.length === 3) {\n                vertexNormals[0].copy(vertices[face.a]);\n                vertexNormals[1].copy(vertices[face.b]);\n                vertexNormals[2].copy(vertices[face.c]);\n            } else {\n                vertexNormals[0] = vertices[face.a].clone();\n                vertexNormals[1] = vertices[face.b].clone();\n                vertexNormals[2] = vertices[face.c].clone();\n            }\n        }\n        if (this.faces.length > 0) {\n            this.normalsNeedUpdate = true;\n        }\n        return this;\n    }\n\n    public computeFlatVertexNormals(): this {\n        this.computeFaceNormals();\n        for (let f: number = 0, fl: number = this.faces.length; f < fl; f++) {\n            const face: GeometryFace = this.faces[f];\n            const vertexNormals: Vector3[] = face.vertexNormals;\n            if (vertexNormals.length === 3) {\n                vertexNormals[0].copy(face.normal);\n                vertexNormals[1].copy(face.normal);\n                vertexNormals[2].copy(face.normal);\n            } else {\n                vertexNormals[0] = face.normal.clone();\n                vertexNormals[1] = face.normal.clone();\n                vertexNormals[2] = face.normal.clone();\n            }\n        }\n        if (this.faces.length > 0) {\n            this.normalsNeedUpdate = true;\n        }\n        return this;\n    }\n\n    public computeMorphNormals(): this {\n        // save original normals\n        // - create temp variables on first access\n        //   otherwise just copy (for faster repeated calls)\n\n        for (let f: number = 0, fl: number = this.faces.length; f < fl; f++) {\n            const face = this.faces[f];\n            if (!face.originalFaceNormal) {\n                face.originalFaceNormal = face.normal.clone();\n            } else {\n                face.originalFaceNormal.copy(face.normal);\n            }\n            if (!face.originalVertexNormals) face.originalVertexNormals = [];\n            for (let i: number = 0, il: number = face.vertexNormals.length; i < il; i++) {\n                if (!face.originalVertexNormals[i]) {\n                    face.originalVertexNormals[i] = face.vertexNormals[i].clone();\n                } else {\n                    face.originalVertexNormals[i].copy(face.vertexNormals[i]);\n                }\n            }\n        }\n\n        // use temp geometry to compute face and vertex normals for each morph\n\n        const tmpGeo: Geometry = new Geometry();\n        tmpGeo.faces = this.faces;\n\n        for (let i: number = 0, il: number = this.morphTargets.length; i < il; i++) {\n            // create on first access\n            if (!this.morphNormals[i]) {\n                this.morphNormals[i] = {\n                    faceNormals: [],\n                    vertexNormals: [],\n                };\n                for (let f: number = 0, fl: number = this.faces.length; f < fl; f++) {\n                    this.morphNormals[i].faceNormals.push(new Vector3());\n                    this.morphNormals[i].vertexNormals.push(new Triangle());\n                }\n            }\n            const morphNormals: IMorphNormal = this.morphNormals[i];\n            // set vertices to morph target\n            tmpGeo.vertices = this.morphTargets[i].vertices;\n            // compute morph normals\n            tmpGeo.computeFaceNormals();\n            tmpGeo.computeVertexNormals();\n            // store morph normals\n            for (let f: number = 0, fl: number = this.faces.length; f < fl; f++) {\n                const face: GeometryFace = this.faces[f];\n                const faceNormal = morphNormals.faceNormals[f];\n                const vertexNormals = morphNormals.vertexNormals[f];\n                faceNormal.copy(face.normal);\n                vertexNormals.a.copy(face.vertexNormals[0]);\n                vertexNormals.b.copy(face.vertexNormals[1]);\n                vertexNormals.c.copy(face.vertexNormals[2]);\n            }\n        }\n\n        // restore original normals\n        for (let f: number = 0, fl: number = this.faces.length; f < fl; f++) {\n            const face: GeometryFace = this.faces[f];\n            face.normal = face.originalFaceNormal;\n            face.vertexNormals = face.originalVertexNormals;\n        }\n        return this;\n    }\n\n    public computeLineDistances(): this {\n        let d: number = 0;\n        const vertices: Vector3[] = this.vertices;\n        for (let i: number = 0, il: number = vertices.length; i < il; i++) {\n            if (i > 0) {\n                d += vertices[i].distanceTo(vertices[i - 1]);\n            }\n            this.lineDistances[i] = d;\n        }\n        return this;\n    }\n\n    public computeBoundingBox(): this {\n        if (this.boundingBox === null) {\n            this.boundingBox = new Box3();\n        }\n        this.boundingBox.setFromPoints(this.vertices);\n        return this;\n    }\n\n    public computeBoundingSphere(): this {\n        if (this.boundingSphere === null) {\n            this.boundingSphere = new Sphere();\n        }\n        this.boundingSphere.setFromPoints(this.vertices);\n        return this;\n    }\n\n    public merge(geometry: Geometry, matrix?: Matrix4, materialIndexOffset: number = 0): this {\n        let normalMatrix: Matrix3;\n        const vertexOffset: number = this.vertices.length,\n            thisVertices: Vector3[] = this.vertices,\n            thatVertices: Vector3[] = geometry.vertices,\n            thisFaces: GeometryFace[] = this.faces,\n            thatFaces: GeometryFace[] = geometry.faces,\n            thisUvs: Vector2[][] = this.faceVertexUvs[0],\n            thatUvs: Vector2[][] = geometry.faceVertexUvs[0],\n            thisColors: Color[] = this.colors,\n            thatColors: Color[] = geometry.colors;\n        if (matrix !== undefined) {\n            normalMatrix = new Matrix3().getNormalMatrix(matrix);\n        }\n        // vertices\n        for (let i: number = 0, il: number = thatVertices.length; i < il; i++) {\n            const vertexCopy: Vector3 = thatVertices[i].clone();\n            if (matrix !== undefined) vertexCopy.applyMatrix4(matrix);\n            thisVertices.push(vertexCopy);\n        }\n        // colors\n        for (let i: number = 0, il: number = thatColors.length; i < il; i++) {\n            thisColors.push(thatColors[i].clone());\n        }\n        // faces\n        for (let i: number = 0, il: number = thatFaces.length; i < il; i++) {\n            const face: GeometryFace = thatFaces[i],\n                faceVertexNormals: Vector3[] = face.vertexNormals,\n                faceVertexColors: Color[] = face.vertexColors;\n            const faceCopy: GeometryFace = new GeometryFace(\n                face.a + vertexOffset,\n                face.b + vertexOffset,\n                face.c + vertexOffset,\n            );\n            faceCopy.normal.copy(face.normal);\n            if (normalMatrix !== undefined) {\n                faceCopy.normal.applyMatrix3(normalMatrix).normalize();\n            }\n            for (let j: number = 0, jl: number = faceVertexNormals.length; j < jl; j++) {\n                const normal: Vector3 = faceVertexNormals[j].clone();\n                if (normalMatrix !== undefined) {\n                    normal.applyMatrix3(normalMatrix).normalize();\n                }\n                faceCopy.vertexNormals.push(normal);\n            }\n            faceCopy.color.copy(face.color);\n            for (let j: number = 0, jl = faceVertexColors.length; j < jl; j++) {\n                const color: Color = faceVertexColors[j];\n                faceCopy.vertexColors.push(color.clone());\n            }\n            faceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n            thisFaces.push(faceCopy);\n        }\n        // uvs\n        for (let i: number = 0, il: number = thatUvs.length; i < il; i++) {\n            const uv: Vector2[] = thatUvs[i],\n                uvCopy: Vector2[] = [];\n            if (uv === undefined) {\n                continue;\n            }\n            for (let j: number = 0, jl: number = uv.length; j < jl; j++) {\n                uvCopy.push(uv[j].clone());\n            }\n            thisUvs.push(uvCopy);\n        }\n        return this;\n    }\n\n    public mergeMesh(mesh: Mesh): void {\n        if (mesh.geometry instanceof Geometry) {\n            if (mesh.matrixAutoUpdate) {\n                mesh.updateMatrix();\n            }\n            this.merge(mesh.geometry, mesh.matrix);\n        } else {\n            console.error(`THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.`, mesh.geometry);\n        }\n    }\n\n    /**\n     * Checks for duplicate vertices with hashmap.\n     * Duplicated vertices are removed\n     * and faces' vertices are updated.\n     * @returns {number}\n     */\n    public mergeVertices(): number {\n        /**\n         * Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n         * @type {{}}\n         */\n        const verticesMap: { [key: string]: number } = {};\n        const unique: Vector3[] = [],\n            changes: number[] = [];\n\n        /**\n         * number of decimal points, e.g. 4 for epsilon of 0.0001\n         * @type {number}\n         */\n        const precisionPoints: number = 4;\n        const precision: number = Math.pow(10, precisionPoints);\n\n        for (let i: number = 0, il: number = this.vertices.length; i < il; i++) {\n            const v = this.vertices[i];\n            const key: string = [\n                Math.round(v.x * precision),\n                Math.round(v.y * precision),\n                Math.round(v.z * precision),\n            ].join(\"_\");\n\n            if (verticesMap[key] === undefined) {\n                verticesMap[key] = i;\n                unique.push(this.vertices[i]);\n                changes[i] = unique.length - 1;\n            } else {\n                // console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n                changes[i] = changes[verticesMap[key]];\n            }\n        }\n\n        // if faces are completely degenerate after merging vertices, we\n        // have to remove them from the geometry.\n        const faceIndicesToRemove: number[] = [];\n        for (let i: number = 0, il: number = this.faces.length; i < il; i++) {\n            const face: GeometryFace = this.faces[i];\n            face.a = changes[face.a];\n            face.b = changes[face.b];\n            face.c = changes[face.c];\n            const indices = [face.a, face.b, face.c];\n            // if any duplicate vertices are found in a Face3\n            // we have to remove the face as nothing can be saved\n            for (let n: number = 0; n < 3; n++) {\n                if (indices[n] === indices[(n + 1) % 3]) {\n                    faceIndicesToRemove.push(i);\n                    break;\n                }\n            }\n        }\n        for (let i: number = faceIndicesToRemove.length - 1; i >= 0; i--) {\n            const idx: number = faceIndicesToRemove[i];\n            this.faces.splice(idx, 1);\n            for (let j: number = 0, jl: number = this.faceVertexUvs.length; j < jl; j++) {\n                this.faceVertexUvs[j].splice(idx, 1);\n            }\n        }\n        // Use unique set of vertices\n        const diff: number = this.vertices.length - unique.length;\n        this.vertices = unique;\n        return diff;\n    }\n\n    public setFromPoints(points: Vector3[]): this {\n        this.vertices = [];\n        for (let i: number = 0, l: number = points.length; i < l; i++) {\n            const point: Vector3 = points[i];\n            this.vertices.push(new Vector3(point.x, point.y, point.z || 0));\n        }\n        return this;\n    }\n\n    public sortFacesByMaterialIndex(): this {\n        const faces: GeometryFace[] = this.faces;\n        const length: number = faces.length;\n        // tag faces\n        for (let i: number = 0; i < length; i++) {\n            faces[i].id = i;\n        }\n        // sort faces\n        faces.sort((a: GeometryFace, b: GeometryFace): number => {\n            return a.materialIndex - b.materialIndex;\n        });\n        // sort uvs\n        const uvs1: Vector2[][] = this.faceVertexUvs[0];\n        const uvs2: Vector2[][] = this.faceVertexUvs[1];\n\n        let newUvs1: Vector2[][], newUvs2: Vector2[][];\n        if (uvs1 && uvs1.length === length) newUvs1 = [];\n        if (uvs2 && uvs2.length === length) newUvs2 = [];\n        for (let i: number = 0; i < length; i++) {\n            const id: number = faces[i].id;\n            if (newUvs1) newUvs1.push(uvs1[id]);\n            if (newUvs2) newUvs2.push(uvs2[id]);\n        }\n        if (newUvs1) this.faceVertexUvs[0] = newUvs1;\n        if (newUvs2) this.faceVertexUvs[1] = newUvs2;\n        return this;\n    }\n\n    public copy(source: Geometry): this {\n        // reset\n        this.vertices = [];\n        this.colors = [];\n        this.faces = [];\n        this.faceVertexUvs = [[]];\n        this.morphTargets = [];\n        this.morphNormals = [];\n        this.skinWeights = [];\n        this.skinIndices = [];\n        this.lineDistances = [];\n        this.boundingBox = null;\n        this.boundingSphere = null;\n        // name\n        this.name = source.name;\n        // vertices\n        const vertices: Vector3[] = source.vertices;\n        for (let i: number = 0, il: number = vertices.length; i < il; i++) {\n            this.vertices.push(vertices[i].clone());\n        }\n        // colors\n        const colors: Color[] = source.colors;\n        for (let i: number = 0, il: number = colors.length; i < il; i++) {\n            this.colors.push(colors[i].clone());\n        }\n        // faces\n        const faces: GeometryFace[] = source.faces;\n        for (let i: number = 0, il: number = faces.length; i < il; i++) {\n            this.faces.push(faces[i].clone() as GeometryFace);\n        }\n        // face vertex uvs\n        for (let i: number = 0, il: number = source.faceVertexUvs.length; i < il; i++) {\n            const faceVertexUvs: Vector2[][] = source.faceVertexUvs[i];\n            if (this.faceVertexUvs[i] === undefined) {\n                this.faceVertexUvs[i] = [];\n            }\n            for (let j: number = 0, jl: number = faceVertexUvs.length; j < jl; j++) {\n                const uvs: Vector2[] = faceVertexUvs[j];\n                const uvsCopy: Vector2[] = [];\n                for (let k: number = 0, kl: number = uvs.length; k < kl; k++) {\n                    uvsCopy.push(uvs[k].clone());\n                }\n                this.faceVertexUvs[i].push(uvsCopy);\n            }\n        }\n\n        // morph targets\n        const morphTargets: IMorphTarget[] = source.morphTargets;\n        for (let i: number = 0, il: number = morphTargets.length; i < il; i++) {\n            const morphTarget: IMorphTarget = { name: morphTargets[i].name };\n            // vertices\n            if (morphTargets[i].vertices !== undefined) {\n                morphTarget.vertices = [];\n                for (let j: number = 0, jl: number = morphTargets[i].vertices.length; j < jl; j++) {\n                    morphTarget.vertices.push(morphTargets[i].vertices[j].clone());\n                }\n            }\n            // normals\n            if (morphTargets[i].normals !== undefined) {\n                morphTarget.normals = [];\n                for (let j: number = 0, jl: number = morphTargets[i].normals.length; j < jl; j++) {\n                    morphTarget.normals.push(morphTargets[i].normals[j].clone());\n                }\n            }\n            this.morphTargets.push(morphTarget);\n        }\n        // morph normals\n        const morphNormals: IMorphNormal[] = source.morphNormals;\n        for (let i: number = 0, il: number = morphNormals.length; i < il; i++) {\n            const morphNormal: IMorphNormal = {};\n            // vertex normals\n            if (morphNormals[i].vertexNormals !== undefined) {\n                morphNormal.vertexNormals = [];\n                for (let j: number = 0, jl: number = morphNormals[i].vertexNormals.length; j < jl; j++) {\n                    morphNormal.vertexNormals.push(morphNormals[i].vertexNormals[j].clone());\n                }\n            }\n            // face normals\n            if (morphNormals[i].faceNormals !== undefined) {\n                morphNormal.faceNormals = [];\n                for (let j: number = 0, jl: number = morphNormals[i].faceNormals.length; j < jl; j++) {\n                    morphNormal.faceNormals.push(morphNormals[i].faceNormals[j].clone());\n                }\n            }\n            this.morphNormals.push(morphNormal);\n        }\n        // skin weights\n        const skinWeights: Vector4[] = source.skinWeights;\n        for (let i: number = 0, il: number = skinWeights.length; i < il; i++) {\n            this.skinWeights.push(skinWeights[i].clone());\n        }\n        // skin indices\n        const skinIndices: Vector4[] = source.skinIndices;\n        for (let i: number = 0, il: number = skinIndices.length; i < il; i++) {\n            this.skinIndices.push(skinIndices[i].clone());\n        }\n        // line distances\n        const lineDistances: number[] = source.lineDistances;\n        for (let i: number = 0, il: number = lineDistances.length; i < il; i++) {\n            this.lineDistances.push(lineDistances[i]);\n        }\n        // bounding box\n        const boundingBox = source.boundingBox;\n        if (boundingBox !== null) {\n            this.boundingBox = boundingBox.clone();\n        }\n        // bounding sphere\n        const boundingSphere = source.boundingSphere;\n        if (boundingSphere !== null) {\n            this.boundingSphere = boundingSphere.clone();\n        }\n        // update flags\n        this.elementsNeedUpdate = source.elementsNeedUpdate;\n        this.verticesNeedUpdate = source.verticesNeedUpdate;\n        this.uvsNeedUpdate = source.uvsNeedUpdate;\n        this.normalsNeedUpdate = source.normalsNeedUpdate;\n        this.colorsNeedUpdate = source.colorsNeedUpdate;\n        this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n        this.groupsNeedUpdate = source.groupsNeedUpdate;\n        return this;\n    }\n\n    public clone(): Geometry {\n        return new (this.constructor as new () => Geometry)().copy(this);\n    }\n}\n","import { BufferAttribute, TypedArray } from \"./BufferAttribute\";\n\nexport class InstancedBufferAttribute extends BufferAttribute {\n    public meshPerAttribute: number = 1;\n\n    constructor(array: TypedArray, itemSize: number, normalized: boolean = false, meshPerAttribute: number = 1) {\n        super(array, itemSize, normalized);\n        this.meshPerAttribute = meshPerAttribute;\n    }\n\n    public copy(source: InstancedBufferAttribute): this {\n        super.copy(source);\n        this.meshPerAttribute = source.meshPerAttribute;\n        return this;\n    }\n}\n","import { BufferGeometry } from \"./BufferGeometry\";\nexport class InstancedBufferGeometry extends BufferGeometry {\n    public readonly type: string = \"InstancedBufferGeometry\";\n    public maxInstancedCount: number;\n\n    public copy(source: InstancedBufferGeometry): this {\n        super.copy(source);\n        this.maxInstancedCount = source.maxInstancedCount;\n        return this;\n    }\n\n    public clone(): InstancedBufferGeometry {\n        return new (this.constructor as new () => InstancedBufferGeometry)().copy(this);\n    }\n}\n","import { TypedArray } from \"./BufferAttribute\";\nimport { InterleavedBufferAttribute } from \"./InterleavedBufferAttribute\";\n\nexport class InstancedInterleavedBufferAttribute extends InterleavedBufferAttribute {\n    public meshPerAttribute: number = 1;\n\n    constructor(\n        array: TypedArray,\n        stride: number,\n        itemSize: number,\n        offset: number,\n        normalized: boolean = false,\n        meshPerAttribute: number = 1,\n    ) {\n        super(array, stride, itemSize, offset, normalized);\n        this.meshPerAttribute = meshPerAttribute;\n    }\n\n    public copy(source: InstancedInterleavedBufferAttribute): this {\n        super.copy(source);\n        this.meshPerAttribute = source.meshPerAttribute;\n        return this;\n    }\n}\n","import { MathUtil } from \"../math/Math\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Vector4 } from \"../math/Vector4\";\nimport { IBufferRange, TypedArray } from \"./BufferAttribute\";\n\nexport class InterleavedBufferAttribute {\n    public readonly uuid: string = MathUtil.generateUUID();\n\n    public array: TypedArray = undefined;\n    public stride: number = 1;\n    public count: number = 0;\n    public dynamic: boolean = false;\n    public updateRange: IBufferRange = { offset: 0, count: -1 };\n    public version: number = 0;\n\n    public itemSize: number;\n    public offset: number;\n    public normalized: boolean = false;\n\n    constructor(array: TypedArray, stride: number, itemSize: number, offset: number, normalized: boolean = false) {\n        this.array = array;\n        this.stride = stride;\n        this.count = array !== undefined ? array.length / stride : 0;\n        this.itemSize = itemSize;\n        this.offset = offset;\n        this.normalized = normalized;\n    }\n\n    set needsUpdate(value: boolean) {\n        if (value === true) this.version++;\n    }\n\n    public setArray(array: TypedArray): this {\n        this.count = array !== undefined ? array.length / this.stride : 0;\n        this.array = array;\n        return this;\n    }\n\n    public setDynamic(value: boolean): this {\n        this.dynamic = value;\n        return this;\n    }\n\n    public copy(source: InterleavedBufferAttribute): this {\n        this.array = new ((source.array as any).constructor as new (arg: TypedArray) => TypedArray)(source.array);\n        this.stride = source.stride;\n        this.count = source.count;\n        this.dynamic = source.dynamic;\n        return this;\n    }\n\n    public set(value: TypedArray | number[], offset: number = 0): this {\n        this.array.set(value, offset);\n        return this;\n    }\n\n    public get(offset: number = 0, length: number = 1): TypedArray {\n        return this.array.slice(offset, length);\n    }\n\n    public copyAt(index1: number, attribute: InterleavedBufferAttribute, index2: number): this {\n        index1 *= this.stride;\n        index2 *= attribute.stride;\n        for (let i: number = 0, l: number = this.stride; i < l; i++) {\n            this.array[index1 + i] = attribute.array[index2 + i];\n        }\n        return this;\n    }\n\n    public clone(): InterleavedBufferAttribute {\n        return new (this.constructor as new (array: TypedArray, itemSize: number) => InterleavedBufferAttribute)(\n            this.array,\n            this.stride,\n        ).copy(this);\n    }\n\n    public setProperty(index: number, property: string, value: Vector2 | Vector3 | Vector4 | number): this {\n        property = property.toLowerCase();\n        if (property && property.length <= 4 && property.replace(/[xyzw]/g, \"\").length === 0) {\n            const offsetMap = { x: 0, y: 1, z: 2 };\n            if (property.length === 1 && typeof value === \"number\") {\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(0)]] = value;\n            } else if (property.length === 2 && value instanceof Vector2) {\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(0)]] = value.x;\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(1)]] = value.y;\n            } else if (property.length === 3 && value instanceof Vector3) {\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(0)]] = value.x;\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(1)]] = value.y;\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(2)]] = value.z;\n            } else if (property.length === 4 && value instanceof Vector4) {\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(0)]] = value.x;\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(1)]] = value.y;\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(2)]] = value.z;\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(3)]] = value.w;\n            }\n        }\n        return this;\n    }\n\n    public getProperty(index: number, property: string): Vector2 | Vector3 | Vector4 | number | undefined {\n        property = property.toLowerCase();\n        if (property && property.length <= 4 && property.replace(/[xyzw]/g, \"\").length === 0) {\n            const offsetMap = { x: 0, y: 1, z: 2 };\n            if (property.length === 1) {\n                return this.array[index * this.stride + this.offset + offsetMap[property.charAt(0)]];\n            } else if (property.length === 2) {\n                return new Vector2(\n                    this.array[index * this.stride + this.offset + offsetMap[property.charAt(0)]],\n                    this.array[index * this.stride + this.offset + offsetMap[property.charAt(1)]],\n                );\n            } else if (property.length === 3) {\n                return new Vector3(\n                    this.array[index * this.stride + this.offset + offsetMap[property.charAt(0)]],\n                    this.array[index * this.stride + this.offset + offsetMap[property.charAt(1)]],\n                    this.array[index * this.stride + this.offset + offsetMap[property.charAt(2)]],\n                );\n            } else if (property.length === 4) {\n                return new Vector4(\n                    this.array[index * this.stride + this.offset + offsetMap[property.charAt(0)]],\n                    this.array[index * this.stride + this.offset + offsetMap[property.charAt(1)]],\n                    this.array[index * this.stride + this.offset + offsetMap[property.charAt(2)]],\n                    this.array[index * this.stride + this.offset + offsetMap[property.charAt(3)]],\n                );\n            }\n        }\n        return undefined;\n    }\n}\n","export class Layers {\n    public mask: number = 1 | 0;\n\n    public set(channel: number): void {\n        this.mask = (1 << channel) | 0;\n    }\n\n    public enable(channel: number): void {\n        this.mask |= (1 << channel) | 0;\n    }\n\n    public toggle(channel: number): void {\n        this.mask ^= (1 << channel) | 0;\n    }\n\n    public disable(channel: number): void {\n        this.mask &= ~((1 << channel) | 0);\n    }\n\n    public test(layers: Layers): boolean {\n        return (this.mask & layers.mask) !== 0;\n    }\n}\n","import { Camera } from \"../cameras/Camera\";\nimport { Euler } from \"../math/Euler\";\nimport { MathUtil } from \"../math/Math\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Vector4 } from \"../math/Vector4\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport { Layers } from \"./Layers\";\nimport { IIntersection, Raycaster } from \"./Raycaster\";\nimport { MeshDepthMaterial, MeshDistanceMaterial } from \"../materials/Materials\";\nimport { WebGLRenderer } from \"../renderers/WebGLRenderer\";\nimport { Scene } from \"../scenes/Scene\";\n\nlet object3DId: number = 0;\n\nexport class Object3D extends EventDispatcher {\n    public static DefaultUp = new Vector3(0, 1, 0);\n    public static DefaultMatrixAutoUpdate: boolean = true;\n\n    public readonly id: number = object3DId++;\n    public readonly uuid: string = MathUtil.generateUUID();\n    public name: string = \"\";\n    public readonly type: string = \"Object3D\";\n    public parent: Object3D | null = null;\n    public children: Object3D[] = [];\n    public up: Vector3 = new Vector3().copy(Object3D.DefaultUp);\n    public matrix: Matrix4 = new Matrix4();\n    public matrixWorld: Matrix4 = new Matrix4();\n    public matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n    public matrixWorldNeedsUpdate: boolean = false;\n    public layers: Layers = new Layers();\n    public visible: boolean = true;\n    public castShadow: boolean = false;\n    public receiveShadow: boolean = false;\n    public frustumCulled: boolean = true;\n    public renderOrder: number = 0;\n    public userData: any = {};\n\n    public position: Vector3 = new Vector3();\n    public rotation: Euler = new Euler();\n    public quaternion: Quaternion = new Quaternion();\n    public scale: Vector3 = new Vector3(1, 1, 1);\n    public modelViewMatrix: Matrix4 = new Matrix4();\n    public normalMatrix: Matrix3 = new Matrix3();\n\n    public customDepthMaterial?: MeshDepthMaterial;\n    public customDistanceMaterial?: MeshDistanceMaterial;\n\n    public onBeforeRender: (\n        renderer?: WebGLRenderer,\n        scene?: Scene,\n        camera?: Camera,\n        ...args: any[]\n    ) => any = function() {};\n    public onAfterRender: (\n        renderer?: WebGLRenderer,\n        scene?: Scene,\n        camera?: Camera,\n        ...args: any[]\n    ) => any = function() {};\n\n    constructor() {\n        super();\n        this.rotation.onChange(() => {\n            this.quaternion.setFromEuler(this.rotation, false);\n        });\n        this.quaternion.onChange(() => {\n            this.rotation.setFromQuaternion(this.quaternion, undefined, false);\n        });\n    }\n\n    public updateMatrix(): this {\n        this.matrix.compose(this.position, this.quaternion, this.scale);\n        this.matrixWorldNeedsUpdate = true;\n        return this;\n    }\n\n    public updateMatrixWorld(force: boolean = false): this {\n        if (this.matrixAutoUpdate) {\n            this.updateMatrix();\n        }\n        if (this.matrixWorldNeedsUpdate || force) {\n            if (this.parent === null) {\n                this.matrixWorld.copy(this.matrix);\n            } else {\n                this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n            }\n            this.matrixWorldNeedsUpdate = false;\n            force = true;\n        }\n        // update children\n        const children: Object3D[] = this.children;\n        for (let i: number = 0, l: number = children.length; i < l; i++) {\n            children[i].updateMatrixWorld(force);\n        }\n        return this;\n    }\n\n    public raycast(raycaster: Raycaster, intersections: IIntersection[]): void {}\n\n    public applyMatrix(matrix: Matrix4): this {\n        this.matrix.multiplyMatrices(matrix, this.matrix);\n        this.matrix.decompose(this.position, this.quaternion, this.scale);\n        return this;\n    }\n\n    public applyQuaternion(q: Quaternion): this {\n        this.quaternion.premultiply(q);\n        return this;\n    }\n\n    /**\n     * assumes axis is normalized\n     * @param axis\n     * @param angle\n     * @returns {Object3D}\n     */\n    public setRotationFromAxisAngle(axis: Vector3, angle: number): this {\n        this.quaternion.setFromAxisAngle(axis, angle);\n        return this;\n    }\n\n    public setRotationFromEuler(euler: Euler): this {\n        this.quaternion.setFromEuler(euler);\n        return this;\n    }\n\n    /**\n     * assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n     * @param m\n     * @returns {Object3D}\n     */\n    public setRotationFromMatrix(m: Matrix4): this {\n        this.quaternion.setFromRotationMatrix(m);\n        return this;\n    }\n\n    /**\n     * assumes q is normalized\n     * @param q\n     * @returns {Object3D}\n     */\n    public setRotationFromQuaternion(q: Quaternion): this {\n        this.quaternion.copy(q);\n        return this;\n    }\n\n    public rotateOnAxis(axis: Vector3, angle: number): this {\n        const q: Quaternion = new Quaternion();\n        q.setFromAxisAngle(axis, angle);\n        this.quaternion.multiply(q);\n        return this;\n    }\n\n    /**\n     * rotate object on axis in world space\n     * axis is assumed to be normalized\n     * method assumes no rotated parent\n     * @param axis\n     * @param angle\n     * @returns {Object3D}\n     */\n    public rotateOnWorldAxis(axis: Vector3, angle: number): this {\n        const q = new Quaternion();\n        q.setFromAxisAngle(axis, angle);\n        this.quaternion.premultiply(q);\n        return this;\n    }\n\n    public rotateX(angle: number): this {\n        return this.rotateOnAxis(new Vector3(1, 0, 0), angle);\n    }\n\n    public rotateY(angle: number): this {\n        return this.rotateOnAxis(new Vector3(0, 1, 0), angle);\n    }\n\n    public rotateZ(angle: number): this {\n        return this.rotateOnAxis(new Vector3(0, 0, 1), angle);\n    }\n\n    /**\n     * translate object by distance along axis in object space\n     * axis is assumed to be normalized\n     * @param axis\n     * @param distance\n     * @returns {Object3D}\n     */\n    public translateOnAxis(axis: Vector3, distance: number): this {\n        const vec = new Vector3();\n        vec.copy(axis).applyQuaternion(this.quaternion);\n        this.position.add(vec.multiplyScalar(distance));\n        return this;\n    }\n\n    public translateX(distance: number): this {\n        return this.translateOnAxis(new Vector3(1, 0, 0), distance);\n    }\n\n    public translateY(distance: number): this {\n        return this.translateOnAxis(new Vector3(0, 1, 0), distance);\n    }\n\n    public translateZ(distance: number): this {\n        return this.translateOnAxis(new Vector3(0, 0, 1), distance);\n    }\n\n    public localToWorld(vector: Vector3 | Vector4): Vector3 | Vector4 {\n        return vector.applyMatrix4(this.matrixWorld);\n    }\n\n    public worldToLocal(vector: Vector3 | Vector4): Vector3 | Vector4 {\n        return vector.applyMatrix4(new Matrix4().getInverse(this.matrixWorld));\n    }\n\n    public lookAt(vec: Vector3): this {\n        const mat: Matrix4 = new Matrix4();\n        if (this instanceof Camera) {\n            mat.lookAt(this.position, vec, this.up);\n        } else {\n            mat.lookAt(vec, this.position, this.up);\n        }\n        this.quaternion.setFromRotationMatrix(mat);\n        return this;\n    }\n\n    public add(object: Object3D, ...objects: Object3D[]): this {\n        if (objects.length > 1) {\n            for (let i: number = 0; i < objects.length; i++) {\n                this.add(objects[i]);\n            }\n            return this;\n        }\n        if (object === this) {\n            console.error(`THREE.Object3D.add: object can't be added as a child of itself. ${object}`);\n            return this;\n        }\n        if (object.parent !== null) {\n            object.parent.remove(object);\n        }\n        object.parent = this;\n        object.dispatchEvent({ type: \"added\" });\n        this.children.push(object);\n        return this;\n    }\n\n    public remove(object: Object3D, ...objects: Object3D[]): this {\n        if (objects.length > 1) {\n            for (let i: number = 0; i < objects.length; i++) {\n                this.remove(objects[i]);\n            }\n            return this;\n        }\n        const index = this.children.indexOf(object);\n        if (index !== -1) {\n            object.parent = null;\n            object.dispatchEvent({ type: \"removed\" });\n            this.children.splice(index, 1);\n        }\n        return this;\n    }\n\n    get worldPosition(): Vector3 {\n        this.updateMatrixWorld(true);\n        return new Vector3().setFromMatrixPosition(this.matrixWorld);\n    }\n\n    get worldQuaternion(): Quaternion {\n        const position: Vector3 = new Vector3();\n        const scale: Vector3 = new Vector3();\n        const result: Quaternion = new Quaternion();\n        this.updateMatrixWorld(true);\n        this.matrixWorld.decompose(position, result, scale);\n        return result;\n    }\n\n    get worldRotation(): Euler {\n        return new Euler().setFromQuaternion(this.worldQuaternion, this.rotation.order, false);\n    }\n\n    get worldScale(): Vector3 {\n        const position: Vector3 = new Vector3();\n        const quaternion: Quaternion = new Quaternion();\n        const result: Vector3 = new Vector3();\n        this.updateMatrixWorld(true);\n        this.matrixWorld.decompose(position, quaternion, result);\n        return result;\n    }\n\n    get worldDirection(): Vector3 {\n        return new Vector3().set(0, 0, 1).applyQuaternion(this.worldQuaternion);\n    }\n\n    public traverse(callback: (object: Object3D) => any): void {\n        callback(this);\n        for (let i: number = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverse(callback);\n        }\n    }\n\n    public traverseVisible(callback: (object: Object3D) => any): void {\n        if (this.visible === false) return;\n        callback(this);\n        for (let i: number = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverseVisible(callback);\n        }\n    }\n\n    public traverseAncestors(callback: (object: Object3D) => any): void {\n        if (this.parent !== null) {\n            callback(this.parent);\n            this.parent.traverseAncestors(callback);\n        }\n    }\n\n    public clone(recursive: boolean = false) {\n        return new (this.constructor as new () => Object3D)().copy(this, recursive);\n    }\n\n    public copy(source: Object3D, recursive: boolean = true): this {\n        this.name = source.name;\n        this.up.copy(source.up);\n        this.position.copy(source.position);\n        this.quaternion.copy(source.quaternion);\n        this.scale.copy(source.scale);\n        this.matrix.copy(source.matrix);\n        this.matrixWorld.copy(source.matrixWorld);\n        this.matrixAutoUpdate = source.matrixAutoUpdate;\n        this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n        this.layers.mask = source.layers.mask;\n        this.visible = source.visible;\n        this.castShadow = source.castShadow;\n        this.receiveShadow = source.receiveShadow;\n        this.frustumCulled = source.frustumCulled;\n        this.renderOrder = source.renderOrder;\n        this.userData = JSON.parse(JSON.stringify(source.userData));\n        if (recursive === true) {\n            for (let i: number = 0; i < source.children.length; i++) {\n                this.add(source.children[i].clone());\n            }\n        }\n        return this;\n    }\n}\n","import { Camera } from \"../cameras/Camera\";\nimport { OrthographicCamera } from \"../cameras/OrthographicCamera\";\nimport { PerspectiveCamera } from \"../cameras/PerspectiveCamera\";\nimport { Ray } from \"../math/Ray\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { unprojectVector3OnCamera } from \"../utils\";\nimport { Face3 } from \"./Face3\";\nimport { Object3D } from \"./Object3D\";\n\nexport interface IIntersection {\n    index?: number;\n    distanceToRay?: number;\n    face?: Face3 | null;\n    faceIndex?: number | null;\n    uv?: Vector2;\n    distance: number;\n    point: Vector3;\n    object: Object3D;\n}\n\nfunction intersectObject(\n    object: Object3D,\n    raycaster: Raycaster,\n    intersects: IIntersection[],\n    recursive: boolean = false,\n) {\n    if (object.visible === false) return;\n    object.raycast(raycaster, intersects);\n    if (recursive === true) {\n        const children: Object3D[] = object.children;\n        for (let i: number = 0, l: number = children.length; i < l; i++) {\n            intersectObject(children[i], raycaster, intersects, true);\n        }\n    }\n}\n\nexport class Raycaster {\n    public params: any = {\n        LOD: {},\n        Line: {},\n        Mesh: {},\n        Points: { threshold: 1 },\n        Sprite: {},\n    };\n\n    public near: number = 0;\n    public far: number = Infinity;\n    public ray: Ray;\n    public linePrecision: number = 1;\n\n    constructor(origin: Vector3, direction: Vector3, near: number = 0, far: number = Infinity) {\n        this.ray = new Ray(origin, direction);\n        this.near = near;\n        this.far = far;\n    }\n\n    public set(origin: Vector3, direction: Vector3): this {\n        this.ray.set(origin, direction);\n        return this;\n    }\n\n    public setFromCamera(coords: Vector2, camera: Camera): this {\n        if (camera && camera instanceof PerspectiveCamera) {\n            this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n            this.ray.direction.set(coords.x, coords.y, 0.5);\n            unprojectVector3OnCamera(this.ray.direction, camera);\n            this.ray.direction.sub(this.ray.origin).normalize();\n        } else if (camera && camera instanceof OrthographicCamera) {\n            this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far));\n            unprojectVector3OnCamera(this.ray.origin, camera); // set origin in plane of camera\n            this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n        } else {\n            console.error(`THREE.Raycaster: Unsupported camera type.`);\n        }\n        return this;\n    }\n\n    public intersectObject(object: Object3D, recursive: boolean = false): IIntersection[] {\n        const intersects: IIntersection[] = [];\n        intersectObject(object, this, intersects, recursive);\n        intersects.sort((a: IIntersection, b: IIntersection) => a.distance - b.distance);\n        return intersects;\n    }\n\n    public intersectObjects(objects: Object3D[], recursive: boolean = false): IIntersection[] {\n        const intersects: IIntersection[] = [];\n        for (let i: number = 0, l: number = objects.length; i < l; i++) {\n            intersectObject(objects[i], this, intersects, recursive);\n        }\n        intersects.sort((a: IIntersection, b: IIntersection) => a.distance - b.distance);\n        return intersects;\n    }\n}\n","import { Object3D } from \"../../core/Object3D\";\nimport { Material } from \"../../materials/Material\";\nimport { TypedArray } from \"../../core/BufferAttribute\";\n\nexport class ImmediateRenderObject extends Object3D {\n    public material: Material;\n\n    public hasPositions?: boolean;\n    public hasNormals?: boolean;\n    public hasUvs?: boolean;\n    public hasColors?: boolean;\n    public count?: number;\n    public positionArray?: TypedArray;\n    public normalArray?: TypedArray;\n    public uvArray?: TypedArray;\n    public colorArray?: TypedArray;\n\n    public render: (arg1: any, ...arg2: any[]) => any;\n\n    constructor(material: Material) {\n        super();\n        this.material = material;\n    }\n}\n","import { Float32BufferAttribute } from \"../core/BufferAttribute\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Vector3 } from \"../math/Vector3\";\n\nexport interface IBoxGeometryParameters {\n    width: number;\n    height: number;\n    depth: number;\n    widthSegments: number;\n    heightSegments: number;\n    depthSegments: number;\n}\n\nexport class BoxGeometry extends Geometry {\n    public readonly type: string = \"BoxGeometry\";\n    public parameters: IBoxGeometryParameters;\n\n    constructor(\n        width?: number,\n        height?: number,\n        depth?: number,\n        widthSegments?: number,\n        heightSegments?: number,\n        depthSegments?: number,\n    ) {\n        super();\n        this.parameters = {\n            depth: depth,\n            depthSegments: depthSegments,\n            height: height,\n            heightSegments: heightSegments,\n            width: width,\n            widthSegments: widthSegments,\n        };\n        this.fromBufferGeometry(\n            new BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments),\n        );\n        this.mergeVertices();\n    }\n}\n\nexport class BoxBufferGeometry extends BufferGeometry {\n    public readonly type: string = \"BoxBufferGeometry\";\n    public parameters: IBoxGeometryParameters;\n\n    constructor(\n        width: number = 1,\n        height: number = 1,\n        depth: number = 1,\n        widthSegments: number = 1,\n        heightSegments: number = 1,\n        depthSegments: number = 1,\n    ) {\n        super();\n        this.parameters = {\n            depth: depth,\n            depthSegments: depthSegments,\n            height: height,\n            heightSegments: heightSegments,\n            width: width,\n            widthSegments: widthSegments,\n        };\n\n        widthSegments = Math.floor(widthSegments);\n        heightSegments = Math.floor(heightSegments);\n        depthSegments = Math.floor(depthSegments);\n\n        // buffers\n\n        const indices: number[] = [];\n        const vertices: number[] = [];\n        const normals: number[] = [];\n        const uvs: number[] = [];\n\n        // helper variables\n\n        let numberOfVertices: number = 0;\n        let groupStart: number = 0;\n\n        const buildPlane = (\n            u: string,\n            v: string,\n            w: string,\n            uDir: number,\n            vDir: number,\n            width2: number,\n            height2: number,\n            depth2: number,\n            gridX: number,\n            gridY: number,\n            materialIndex: number,\n        ): void => {\n            const segmentWidth: number = width2 / gridX;\n            const segmentHeight: number = height2 / gridY;\n\n            const widthHalf: number = width2 / 2;\n            const heightHalf: number = height2 / 2;\n            const depthHalf: number = depth2 / 2;\n\n            const gridX1: number = gridX + 1;\n            const gridY1: number = gridY + 1;\n\n            let vertexCounter: number = 0;\n            let groupCount: number = 0;\n\n            // generate vertices, normals and uvs\n\n            for (let iy: number = 0; iy < gridY1; iy++) {\n                const y: number = iy * segmentHeight - heightHalf;\n\n                for (let ix: number = 0; ix < gridX1; ix++) {\n                    const x: number = ix * segmentWidth - widthHalf;\n                    const vector: Vector3 = new Vector3();\n                    // set values to correct vector component\n                    vector[u] = x * uDir;\n                    vector[v] = y * vDir;\n                    vector[w] = depthHalf;\n                    // now apply vector to vertex buffer\n                    vertices.push(vector.x, vector.y, vector.z);\n                    // set values to correct vector component\n                    vector[u] = 0;\n                    vector[v] = 0;\n                    vector[w] = depth2 > 0 ? 1 : -1;\n                    // now apply vector to normal buffer\n                    normals.push(vector.x, vector.y, vector.z);\n                    // uvs\n                    uvs.push(ix / gridX);\n                    uvs.push(1 - iy / gridY);\n                    // counters\n                    vertexCounter += 1;\n                }\n            }\n            // indices\n            // 1. you need three indices to draw a single face\n            // 2. a single segment consists of two faces\n            // 3. so we need to generate six (2*3) indices per segment\n            for (let iy: number = 0; iy < gridY; iy++) {\n                for (let ix: number = 0; ix < gridX; ix++) {\n                    const a: number = numberOfVertices + ix + gridX1 * iy;\n                    const b: number = numberOfVertices + ix + gridX1 * (iy + 1);\n                    const c: number = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n                    const d: number = numberOfVertices + (ix + 1) + gridX1 * iy;\n                    // faces\n                    indices.push(a, b, d);\n                    indices.push(b, c, d);\n                    // increase counter\n                    groupCount += 6;\n                }\n            }\n            // add a group to the geometry. this will ensure multi material support\n            this.addGroup(groupStart, groupCount, materialIndex);\n            // calculate new start value for groups\n            groupStart += groupCount;\n            // update total number of vertices\n            numberOfVertices += vertexCounter;\n        };\n\n        // build each side of the box geometry\n        buildPlane(\"z\", \"y\", \"x\", -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n        buildPlane(\"z\", \"y\", \"x\", 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n        buildPlane(\"x\", \"z\", \"y\", 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n        buildPlane(\"x\", \"z\", \"y\", 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n        buildPlane(\"x\", \"y\", \"z\", 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n        buildPlane(\"x\", \"y\", \"z\", -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\n        // build geometry\n        this.setIndex(indices);\n        this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n        this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    }\n}\n","import { Float32BufferAttribute } from \"../core/BufferAttribute\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\n\nexport interface ICircleGeometryParameters {\n    radius: number;\n    segments: number;\n    thetaStart: number;\n    thetaLength: number;\n}\n\nexport class CircleGeometry extends Geometry {\n    public readonly type: string = \"CircleGeometry\";\n    public parameters: ICircleGeometryParameters;\n\n    constructor(radius?: number, segments?: number, thetaStart?: number, thetaLength?: number) {\n        super();\n        this.parameters = {\n            radius: radius,\n            segments: segments,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n        this.fromBufferGeometry(new CircleBufferGeometry(radius, segments, thetaStart, thetaLength));\n        this.mergeVertices();\n    }\n}\n\nexport class CircleBufferGeometry extends BufferGeometry {\n    public readonly type: string = \"CircleBufferGeometry\";\n    public parameters: ICircleGeometryParameters;\n\n    constructor(\n        radius: number = 1,\n        segments: number | undefined,\n        thetaStart: number = 0,\n        thetaLength: number = Math.PI * 2,\n    ) {\n        super();\n        this.parameters = {\n            radius: radius,\n            segments: segments,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n        segments = segments !== undefined ? Math.max(3, segments) : 8;\n        // buffers\n        const indices: number[] = [];\n        const vertices: number[] = [];\n        const normals: number[] = [];\n        const uvs: number[] = [];\n        // center point\n        vertices.push(0, 0, 0);\n        normals.push(0, 0, 1);\n        uvs.push(0.5, 0.5);\n        for (let s: number = 0, i: number = 3; s <= segments; s++, i += 3) {\n            const segment: number = thetaStart + s / segments * thetaLength;\n            // vertex\n            vertices.push(radius * Math.cos(segment), radius * Math.sin(segment), 0);\n            // normal\n            normals.push(0, 0, 1);\n            // uvs\n            uvs.push((vertices[i] / radius + 1) / 2, (vertices[i + 1] / radius + 1) / 2);\n        }\n        // indices\n        for (let i: number = 1; i <= segments; i++) {\n            indices.push(i, i + 1, 0);\n        }\n        // build geometry\n        this.setIndex(indices);\n        this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n        this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    }\n}\n","import { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { CylinderBufferGeometry, CylinderGeometry } from \"./CylinderGeometry\";\n\nexport interface IConeGeometryParameters {\n    radius: number;\n    height: number;\n    radialSegments: number;\n    heightSegments: number;\n    openEnded: boolean;\n    thetaStart: number;\n    thetaLength: number;\n}\n\nexport class ConeGeometry extends Geometry {\n    public readonly type: string = \"ConeGeometry\";\n    public parameters: IConeGeometryParameters;\n\n    constructor(\n        radius?: number,\n        height?: number,\n        radialSegments?: number,\n        heightSegments?: number,\n        openEnded?: boolean,\n        thetaStart?: number,\n        thetaLength?: number,\n    ) {\n        super();\n        CylinderGeometry.call(\n            this,\n            0,\n            radius,\n            height,\n            radialSegments,\n            heightSegments,\n            openEnded,\n            thetaStart,\n            thetaLength,\n        );\n        this.parameters = {\n            height: height,\n            heightSegments: heightSegments,\n            openEnded: openEnded,\n            radialSegments: radialSegments,\n            radius: radius,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n    }\n}\n\nexport class ConeBufferGeometry extends BufferGeometry {\n    public readonly type: string = \"ConeBufferGeometry\";\n    public parameters: IConeGeometryParameters;\n\n    constructor(\n        radius?: number,\n        height?: number,\n        radialSegments?: number,\n        heightSegments?: number,\n        openEnded?: boolean,\n        thetaStart?: number,\n        thetaLength?: number,\n    ) {\n        super();\n        CylinderBufferGeometry.call(\n            this,\n            0,\n            radius,\n            height,\n            radialSegments,\n            heightSegments,\n            openEnded,\n            thetaStart,\n            thetaLength,\n        );\n        this.parameters = {\n            height: height,\n            heightSegments: heightSegments,\n            openEnded: openEnded,\n            radialSegments: radialSegments,\n            radius: radius,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n    }\n}\n","import { Float32BufferAttribute } from \"../core/BufferAttribute\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Vector3 } from \"../math/Vector3\";\n\nexport interface ICylinderGeometryParameters {\n    radiusTop: number;\n    radiusBottom: number;\n    height: number;\n    radialSegments: number;\n    heightSegments: number;\n    openEnded: boolean;\n    thetaStart: number;\n    thetaLength: number;\n}\n\nexport class CylinderGeometry extends Geometry {\n    public readonly type: string = \"CylinderGeometry\";\n    public parameters: ICylinderGeometryParameters;\n\n    constructor(\n        radiusTop?: number,\n        radiusBottom?: number,\n        height?: number,\n        radialSegments?: number,\n        heightSegments?: number,\n        openEnded?: boolean,\n        thetaStart?: number,\n        thetaLength?: number,\n    ) {\n        super();\n        this.parameters = {\n            height: height,\n            heightSegments: heightSegments,\n            openEnded: openEnded,\n            radialSegments: radialSegments,\n            radiusBottom: radiusBottom,\n            radiusTop: radiusTop,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n        this.fromBufferGeometry(\n            new CylinderBufferGeometry(\n                radiusTop,\n                radiusBottom,\n                height,\n                radialSegments,\n                heightSegments,\n                openEnded,\n                thetaStart,\n                thetaLength,\n            ),\n        );\n        this.mergeVertices();\n    }\n}\n\nexport class CylinderBufferGeometry extends BufferGeometry {\n    public readonly type: string = \"CylinderBufferGeometry\";\n    public parameters: ICylinderGeometryParameters;\n\n    constructor(\n        radiusTop: number = 1,\n        radiusBottom: number = 1,\n        height: number = 1,\n        radialSegments: number = 9,\n        heightSegments: number = 1,\n        openEnded: boolean = false,\n        thetaStart: number = 0,\n        thetaLength: number = Math.PI * 2,\n    ) {\n        super();\n        this.parameters = {\n            height: height,\n            heightSegments: heightSegments,\n            openEnded: openEnded,\n            radialSegments: radialSegments,\n            radiusBottom: radiusBottom,\n            radiusTop: radiusTop,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n        radialSegments = Math.floor(radialSegments);\n        heightSegments = Math.floor(heightSegments);\n\n        // buffers\n        const indices: number[] = [];\n        const vertices: number[] = [];\n        const normals: number[] = [];\n        const uvs: number[] = [];\n\n        // helper variables\n        let index: number = 0;\n        const indexArray: number[][] = [];\n        const halfHeight: number = height / 2;\n        let groupStart: number = 0;\n\n        const generateCap = (top: boolean): void => {\n            let centerIndexStart: number, centerIndexEnd: number;\n            let groupCount: number = 0;\n            const radius: number = top ? radiusTop : radiusBottom;\n            const sign: number = top ? 1 : -1;\n            // save the index of the first center vertex\n            centerIndexStart = index;\n            // first we generate the center vertex data of the cap.\n            // because the geometry needs one set of uvs per face,\n            // we must generate a center vertex per face/segment\n            for (let x: number = 1; x <= radialSegments; x++) {\n                // vertex\n                vertices.push(0, halfHeight * sign, 0);\n                // normal\n                normals.push(0, sign, 0);\n                // uv\n                uvs.push(0.5, 0.5);\n                // increase index\n                index++;\n            }\n            // save the index of the last center vertex\n            centerIndexEnd = index;\n            // now we generate the surrounding vertices, normals and uvs\n            for (let x: number = 0; x <= radialSegments; x++) {\n                const u: number = x / radialSegments;\n                const theta: number = u * thetaLength + thetaStart;\n                const cosTheta: number = Math.cos(theta);\n                const sinTheta: number = Math.sin(theta);\n                // vertex\n\n                vertices.push(radius * sinTheta, halfHeight * sign, radius * cosTheta);\n                // normal\n                normals.push(0, sign, 0);\n                // uv\n                uvs.push(cosTheta * 0.5 + 0.5, sinTheta * 0.5 * sign + 0.5);\n                // increase index\n                index++;\n            }\n            // generate indices\n            for (let x: number = 0; x < radialSegments; x++) {\n                const c: number = centerIndexStart + x;\n                const i: number = centerIndexEnd + x;\n                if (top) {\n                    // face top\n                    indices.push(i, i + 1, c);\n                } else {\n                    // face bottom\n                    indices.push(i + 1, i, c);\n                }\n                groupCount += 3;\n            }\n            // add a group to the geometry. this will ensure multi material support\n            this.addGroup(groupStart, groupCount, top === true ? 1 : 2);\n            // calculate new start value for groups\n            groupStart += groupCount;\n        };\n\n        const generateTorso = (): void => {\n            let groupCount: number = 0;\n            // this will be used to calculate the normal\n            const slope: number = (radiusBottom - radiusTop) / height;\n            // generate vertices, normals and uvs\n            for (let y: number = 0; y <= heightSegments; y++) {\n                const indexRow: number[] = [];\n                const v: number = y / heightSegments;\n                // calculate the radius of the current row\n                const radius: number = v * (radiusBottom - radiusTop) + radiusTop;\n                for (let x: number = 0; x <= radialSegments; x++) {\n                    const u: number = x / radialSegments;\n                    const theta: number = u * thetaLength + thetaStart;\n                    const sinTheta: number = Math.sin(theta);\n                    const cosTheta: number = Math.cos(theta);\n                    // vertex\n                    vertices.push(radius * sinTheta, -v * height + halfHeight, radius * cosTheta);\n                    // normal\n                    const normal: Vector3 = new Vector3();\n                    normal.set(sinTheta, slope, cosTheta).normalize();\n                    normals.push(normal.x, normal.y, normal.z);\n                    // uv\n                    uvs.push(u, 1 - v);\n                    // save index of vertex in respective row\n                    indexRow.push(index++);\n                }\n                // now save vertices of the row in our index array\n                indexArray.push(indexRow);\n            }\n            // generate indices\n            for (let x: number = 0; x < radialSegments; x++) {\n                for (let y: number = 0; y < heightSegments; y++) {\n                    // we use the index array to access the correct indices\n                    const a: number = indexArray[y][x];\n                    const b: number = indexArray[y + 1][x];\n                    const c: number = indexArray[y + 1][x + 1];\n                    const d: number = indexArray[y][x + 1];\n                    // faces\n                    indices.push(a, b, d);\n                    indices.push(b, c, d);\n                    // update group counter\n                    groupCount += 6;\n                }\n            }\n            // add a group to the geometry. this will ensure multi material support\n            this.addGroup(groupStart, groupCount, 0);\n            // calculate new start value for groups\n            groupStart += groupCount;\n        };\n        // generate geometry\n        generateTorso();\n        if (openEnded === false) {\n            if (radiusTop > 0) generateCap(true);\n            if (radiusBottom > 0) generateCap(false);\n        }\n        // build geometry\n        this.setIndex(indices);\n        this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n        this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    }\n}\n","/*\nexport { WireframeGeometry } from './WireframeGeometry';\nexport { ParametricGeometry, ParametricBufferGeometry } from './ParametricGeometry';\nexport { TetrahedronGeometry, TetrahedronBufferGeometry } from './TetrahedronGeometry';\nexport { OctahedronGeometry, OctahedronBufferGeometry } from './OctahedronGeometry';\nexport { IcosahedronGeometry, IcosahedronBufferGeometry } from './IcosahedronGeometry';\nexport { DodecahedronGeometry, DodecahedronBufferGeometry } from './DodecahedronGeometry';\nexport { PolyhedronGeometry, PolyhedronBufferGeometry } from './PolyhedronGeometry';\nexport { TubeGeometry, TubeBufferGeometry } from './TubeGeometry';\nexport { TorusKnotGeometry, TorusKnotBufferGeometry } from './TorusKnotGeometry';\nexport { TorusGeometry, TorusBufferGeometry } from './TorusGeometry';\nexport { TextGeometry, TextBufferGeometry } from './TextGeometry';\nexport { SphereGeometry, SphereBufferGeometry } from './SphereGeometry';\nexport { RingGeometry, RingBufferGeometry } from './RingGeometry';\nexport { LatheGeometry, LatheBufferGeometry } from './LatheGeometry';\nexport { ShapeGeometry, ShapeBufferGeometry } from './ShapeGeometry';\nexport { ExtrudeGeometry, ExtrudeBufferGeometry } from './ExtrudeGeometry';\nexport { EdgesGeometry } from './EdgesGeometry';\n*/\nexport { PlaneGeometry, PlaneBufferGeometry } from \"./PlaneGeometry\";\nexport { ConeGeometry, ConeBufferGeometry } from \"./ConeGeometry\";\nexport { CylinderGeometry, CylinderBufferGeometry } from \"./CylinderGeometry\";\nexport { CircleGeometry, CircleBufferGeometry } from \"./CircleGeometry\";\nexport { BoxGeometry, BoxBufferGeometry } from \"./BoxGeometry\";\n","import { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Float32BufferAttribute } from \"../core/BufferAttribute\";\n\nexport interface IPlaneGeometryParameters {\n    width: number;\n    height: number;\n    widthSegments: number;\n    heightSegments: number;\n}\n\nexport class PlaneGeometry extends Geometry {\n    public readonly type: string = \"PlaneGeometry\";\n\n    public parameters: IPlaneGeometryParameters;\n\n    constructor(width?: number, height?: number, widthSegments?: number, heightSegments?: number) {\n        super();\n        this.parameters = {\n            width: width,\n            height: height,\n            widthSegments: widthSegments,\n            heightSegments: heightSegments,\n        };\n        this.fromBufferGeometry(new PlaneBufferGeometry(width, height, widthSegments, heightSegments));\n        this.mergeVertices();\n    }\n}\n\nexport class PlaneBufferGeometry extends BufferGeometry {\n    public readonly type: string = \"PlaneBufferGeometry\";\n\n    public parameters: IPlaneGeometryParameters;\n\n    constructor(width: number = 1, height: number = 1, widthSegments: number = 1, heightSegments: number = 1) {\n        super();\n        this.parameters = {\n            width: width,\n            height: height,\n            widthSegments: widthSegments,\n            heightSegments: heightSegments,\n        };\n        const widthHalf: number = width / 2;\n        const heightHalf: number = height / 2;\n\n        const gridX: number = Math.floor(widthSegments) || 1;\n        const gridY: number = Math.floor(heightSegments) || 1;\n\n        const gridX1: number = gridX + 1;\n        const gridY1: number = gridY + 1;\n        const segmentWidth: number = width / gridX;\n        const segmentHeight: number = height / gridY;\n        // buffers\n        const indices: number[] = [];\n        const vertices: number[] = [];\n        const normals: number[] = [];\n        const uvs: number[] = [];\n        // generate vertices, normals and uvs\n        for (let iy: number = 0; iy < gridY1; iy++) {\n            const y: number = iy * segmentHeight - heightHalf;\n            for (let ix: number = 0; ix < gridX1; ix++) {\n                const x: number = ix * segmentWidth - widthHalf;\n                vertices.push(x, -y, 0);\n                normals.push(0, 0, 1);\n                uvs.push(ix / gridX);\n                uvs.push(1 - iy / gridY);\n            }\n        }\n        // indices\n        for (let iy: number = 0; iy < gridY; iy++) {\n            for (let ix: number = 0; ix < gridX; ix++) {\n                const a: number = ix + gridX1 * iy;\n                const b: number = ix + gridX1 * (iy + 1);\n                const c: number = ix + 1 + gridX1 * (iy + 1);\n                const d: number = ix + 1 + gridX1 * iy;\n                // faces\n                indices.push(a, b, d);\n                indices.push(b, c, d);\n            }\n        }\n        // build geometry\n        this.setIndex(indices);\n        this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n        this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Light } from \"./Light\";\n\nexport class AmbientLight extends Light {\n    public readonly type: string = \"AmbientLight\";\n    public castShadow: boolean = false;\n\n    constructor(color: Color, intensity: number) {\n        super(color, intensity);\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Color } from \"../math/Color\";\nimport { DirectionalLightShadow } from \"./DirectionalLightShadow\";\nimport { Light } from \"./Light\";\n\nexport class DirectionalLight extends Light {\n    public readonly type: string = \"DirectionalLight\";\n    public target: Object3D = new Object3D();\n    public shadow: DirectionalLightShadow = new DirectionalLightShadow();\n\n    constructor(color: Color, intensity: number) {\n        super(color, intensity);\n        this.position = Object3D.DefaultUp.clone();\n        this.updateMatrix();\n    }\n\n    public copy(source: DirectionalLight): this {\n        super.copy(source);\n        this.target = source.target.clone();\n        this.shadow = source.shadow.clone();\n        return this;\n    }\n}\n","import { OrthographicCamera } from \"../cameras/OrthographicCamera\";\nimport { LightShadow } from \"./LightShadow\";\n\nexport class DirectionalLightShadow extends LightShadow {\n    constructor() {\n        super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Color } from \"../math/Color\";\nimport { Light } from \"./Light\";\n\nexport class HemisphereLight extends Light {\n    public readonly type: string = \"HemisphereLight\";\n    public castShadow: boolean = false;\n    public groundColor: Color;\n\n    constructor(skyColor: Color, groundColor: Color, intensity: number) {\n        super(skyColor, intensity);\n        this.groundColor = groundColor;\n        this.position = Object3D.DefaultUp.clone();\n        this.updateMatrix();\n    }\n\n    public copy(source: HemisphereLight): this {\n        super.copy(source);\n        this.groundColor.copy(source.groundColor);\n        return this;\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Color } from \"../math/Color\";\nimport { LightShadow } from \"./LightShadow\";\n\nexport class Light extends Object3D {\n    public readonly type: string = \"Light\";\n\n    public color: Color;\n    public intensity: number = 1;\n    public receiveShadow: boolean = false;\n    public shadow?: LightShadow;\n    public distance?: number;\n\n    constructor(color: Color = new Color(), intensity: number = 1) {\n        super();\n        this.color = color;\n        this.intensity = intensity;\n    }\n\n    public copy(source: Light): this {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.intensity = source.intensity;\n        return this;\n    }\n}\n","import { Matrix4 } from \"../math/Matrix4\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { WebGLRenderTarget } from \"../renderers/WebGLRenderTarget\";\nimport { PerspectiveCamera } from \"../cameras/PerspectiveCamera\";\nimport { OrthographicCamera } from \"../cameras/OrthographicCamera\";\n\n/**\n * updateMatrixWorld\n * near\n * far\n * Above properties and method is needed in WebGLShadowMap.render\n */\nexport type LightShadowCamera = PerspectiveCamera | OrthographicCamera;\n\nexport class LightShadow {\n    public camera: LightShadowCamera;\n    public bias: number = 0;\n    public radius: number = 1;\n    public mapSize: Vector2 = new Vector2(512, 512);\n    public map: WebGLRenderTarget | null = null;\n    public matrix: Matrix4 = new Matrix4();\n\n    constructor(camera: LightShadowCamera) {\n        this.camera = camera;\n    }\n\n    public copy(source: LightShadow): this {\n        this.camera = source.camera.clone();\n        this.bias = source.bias;\n        this.radius = source.radius;\n        this.mapSize.copy(source.mapSize);\n        return this;\n    }\n\n    public clone(): LightShadow {\n        return new (this.constructor as new () => LightShadow)().copy(this);\n    }\n}\n","import { PerspectiveCamera } from \"../cameras/PerspectiveCamera\";\nimport { Color } from \"../math/Color\";\nimport { Light } from \"./Light\";\nimport { LightShadow } from \"./LightShadow\";\n\nexport class PointLight extends Light {\n    public readonly type: string = \"PointLight\";\n    public distance: number = 0;\n    public decay: number = 1;\n    public shadow: LightShadow;\n\n    constructor(color: Color, intensity: number, distance: number = 0, decay: number = 1) {\n        super(color, intensity);\n        this.distance = distance;\n        this.decay = decay;\n        this.shadow = new LightShadow(new PerspectiveCamera(90, 1, 0.5, 500));\n    }\n\n    /**\n     * ntensity = power per solid angle.\n     * ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n     * @returns {number}\n     */\n    get power(): number {\n        return this.intensity * 4 * Math.PI;\n    }\n\n    set power(power: number) {\n        this.intensity = power / (4 * Math.PI);\n    }\n\n    public copy(source: PointLight): this {\n        super.copy(source);\n        this.distance = source.distance;\n        this.decay = source.decay;\n        this.shadow = source.shadow.clone();\n        return this;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Light } from \"./Light\";\n\nexport class RectAreaLight extends Light {\n    public readonly type: string = \"RectAreaLight\";\n    public width: number = 10;\n    public height: number = 10;\n\n    constructor(color: Color, intensity: number, width: number = 10, height: number = 10) {\n        super(color, intensity);\n        this.width = width;\n        this.height = height;\n    }\n\n    public copy(source: RectAreaLight): this {\n        super.copy(source);\n        this.width = source.width;\n        this.height = source.height;\n        return this;\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Color } from \"../math/Color\";\nimport { Light } from \"./Light\";\nimport { SpotLightShadow } from \"./SpotLightShadow\";\n\nexport class SpotLight extends Light {\n    public readonly type: string = \"SpotLight\";\n    public target: Object3D = new Object3D();\n    public distance: number = 0;\n    public angle: number = Math.PI / 3;\n    public penumbra: number = 0;\n    public decay: number = 0;\n    public shadow: SpotLightShadow = new SpotLightShadow();\n\n    constructor(\n        color: Color,\n        intensity: number,\n        distance: number = 0,\n        angle: number = Math.PI / 3,\n        penumbra: number = 0,\n        decay: number = 1,\n    ) {\n        super(color, intensity);\n        this.position = Object3D.DefaultUp.clone();\n        this.updateMatrix();\n        this.distance = distance;\n        this.angle = angle;\n        this.penumbra = penumbra;\n        this.decay = decay;\n    }\n\n    get power(): number {\n        return this.intensity * Math.PI;\n    }\n\n    set power(power: number) {\n        this.intensity = power / Math.PI;\n    }\n\n    public copy(source: SpotLight): this {\n        super.copy(source);\n        this.distance = source.distance;\n        this.angle = source.angle;\n        this.penumbra = source.penumbra;\n        this.decay = source.decay;\n        this.target = source.target.clone();\n        this.shadow = source.shadow.clone();\n        return this;\n    }\n}\n","import { PerspectiveCamera } from \"../cameras/PerspectiveCamera\";\nimport { MathUtil } from \"../math/Math\";\nimport { LightShadow } from \"./LightShadow\";\nimport { SpotLight } from \"./SpotLight\";\n\nexport class SpotLightShadow extends LightShadow {\n    constructor() {\n        super(new PerspectiveCamera(50, 1, 0.5, 500));\n    }\n\n    public update(light: SpotLight): this {\n        const camera: PerspectiveCamera = this.camera as PerspectiveCamera;\n        const fov: number = MathUtil.RAD2DEG * 2 * light.angle;\n        const aspect: number = this.mapSize.width / this.mapSize.height;\n        const far: number = light.distance || camera.far;\n        if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n            camera.fov = fov;\n            camera.aspect = aspect;\n            camera.far = far;\n            camera.updateProjectionMatrix();\n        }\n        return this;\n    }\n\n    public clone(): SpotLightShadow {\n        return super.clone() as SpotLightShadow;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface ILineBasicMaterialParameters extends IMaterialParameters {\n    color?: Color | number | string;\n    linewidth?: number;\n    linecap?: string;\n    linejoin?: string;\n}\n\nexport class LineBasicMaterial extends Material {\n    public readonly type: string = \"LineBasicMaterial\";\n\n    public color: Color = new Color().setHex(0xffffff);\n    public lights: boolean = false;\n    public linecap: string = \"round\";\n    public linejoin: string = \"round\";\n    public linewidth: number = 1;\n\n    constructor(parameters: ILineBasicMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: LineBasicMaterial): this {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.linewidth = source.linewidth;\n        this.linecap = source.linecap;\n        this.linejoin = source.linejoin;\n        return this;\n    }\n}\n","import { ILineBasicMaterialParameters, LineBasicMaterial } from \"./LineBasicMaterial\";\n\nexport interface ILineDashedMaterialParameters extends ILineBasicMaterialParameters {\n    dashSize?: number;\n    gapSize?: number;\n    scale?: number;\n}\n\nexport class LineDashedMaterial extends LineBasicMaterial {\n    public readonly type: string = \"LineDashedMaterial\";\n\n    public dashSize: number = 3;\n    public gapSize: number = 1;\n    public scale: number = 1;\n\n    constructor(parameters: ILineDashedMaterialParameters) {\n        super(parameters);\n        this.setValues(parameters);\n    }\n\n    public copy(source: LineDashedMaterial): this {\n        this.scale = source.scale;\n        this.dashSize = source.dashSize;\n        this.gapSize = source.gapSize;\n        return this;\n    }\n}\n","import {\n    AddEquation,\n    FlatShading,\n    FrontSide,\n    LessEqualDepth,\n    NoColors,\n    NormalBlending,\n    OneMinusSrcAlphaFactor,\n    SrcAlphaFactor,\n} from \"../constants\";\nimport { EventDispatcher } from \"../core/EventDispatcher\";\nimport { Color } from \"../math/Color\";\nimport { MathUtil } from \"../math/Math\";\nimport { Plane } from \"../math/Plane\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { CubeTexture } from \"../textures/CubeTexture\";\nimport { Texture } from \"../textures/Texture\";\n\nlet materialId: number = 0;\n\nexport interface IMaterialParameters {\n    alphaTest?: number;\n    blending?: number;\n    blendDst?: number;\n    blendDstAlpha?: number;\n    blendEquation?: number;\n    blendEquationAlpha?: number;\n    blendSrc?: number;\n    blendSrcAlpha?: number;\n    clipIntersection?: boolean;\n    clippingPlanes?: Plane[];\n    clipShadows?: boolean;\n    colorWrite?: boolean;\n    depthFunc?: number;\n    depthTest?: boolean;\n    depthWrite?: boolean;\n    dithering?: boolean;\n    flatShading?: boolean;\n    fog?: boolean;\n    lights?: boolean;\n    name?: string;\n    needsUpdate?: boolean;\n    opacity?: number;\n    overdraw?: number;\n    polygonOffset?: boolean;\n    polygonOffsetFactor?: number;\n    polygonOffsetUnits?: number;\n    precision?: string;\n    premultipliedAlpha?: boolean;\n    shadowSide?: number;\n    side?: number;\n    transparent?: boolean;\n    userData?: object;\n    vertexColors?: number;\n    visible?: boolean;\n}\n\nexport class Material extends EventDispatcher {\n    public readonly id: number = materialId++;\n    public readonly uuid: string = MathUtil.generateUUID();\n    public readonly type: string = \"Material\";\n\n    public alphaTest: number = 0;\n\n    public blending: number = NormalBlending;\n    public blendDst: number = OneMinusSrcAlphaFactor;\n    public blendDstAlpha: number | null = null;\n    public blendEquation: number = AddEquation;\n    public blendEquationAlpha: number | null = null;\n    public blendSrc: number = SrcAlphaFactor;\n    public blendSrcAlpha: number | null = null;\n\n    public clipIntersection: boolean = false;\n    public clippingPlanes: Plane[] | null = null;\n    public clipShadows: boolean = false;\n\n    public colorWrite: boolean = true;\n\n    public depthFunc: number = LessEqualDepth;\n    public depthTest: boolean = true;\n    public depthWrite: boolean = true;\n\n    public dithering: boolean = false;\n    public flatShading: boolean = false;\n    public fog: boolean = true;\n    public lights: boolean = true;\n    /**\n     * For mesh type extension\n     */\n    public morphTargets: boolean = false;\n    public name: string = \"\";\n    public needsUpdate: boolean = true;\n    public opacity: number = 1;\n    public overdraw: number = 0;\n\n    public onBeforeCompile: (shader?: WebGLShader) => any = function() {};\n\n    public polygonOffset: boolean = false;\n    public polygonOffsetFactor: number = 0;\n    public polygonOffsetUnits: number = 0;\n\n    /**\n     * override the renderer's default precision for this material\n     * \"highp\", \"mediump\" or \"lowp\"\n     * @type {string}\n     */\n    public precision: string | null = null; // Question type\n    public premultipliedAlpha: boolean = false;\n\n    /**\n     * For WebGLRenderList\n     */\n    public program?: any;\n\n    /**\n     * THREE.FrontSide  back side\n     * THREE.BackSide   front side\n     * THREE.DoubleSide both sides\n     * @type {number}\n     */\n    public shadowSide: number | null = null; // Question type\n    public side: number = FrontSide;\n    public transparent: boolean = false;\n    public userData: object = {};\n\n    /**\n     * THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n     */\n    public vertexColors: number = NoColors;\n\n    /**\n     * Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n     * @type {number}\n     */\n    public visible: boolean = true;\n\n    public alphaMap?: Texture;\n    public aoMap?: Texture;\n    public aoMapIntensity?: number;\n    public bumpMap?: Texture;\n    public bumpScale?: number;\n    public clearCoat?: number;\n    public clearCoatRoughness?: number;\n    public combine?: number;\n    public color?: Color;\n    public dashSize?: number;\n    public defaultAttributeValues?: { [key: string]: number[] };\n    public defines?: { [key: string]: object };\n    public depthPacking?: number;\n    public displacementScale?: number;\n    public displacementBias?: number;\n    public displacementMap?: Texture;\n    public emissive?: Color;\n    public emissiveIntensity?: number;\n    public emissiveMap?: Texture;\n    public envMap?: CubeTexture;\n    public envMapIntensity?: number;\n    public extensions?: { [key: string]: boolean };\n    public farDistance?: number;\n    public fragmentShader?: string;\n    public gapSize?: number;\n    public gradientMap?: Texture;\n    public index0AttributeName?: string;\n    public lightMap?: Texture;\n    public lightMapIntensity?: number;\n    public linewidth?: number;\n    public map?: Texture;\n    public metalness?: number;\n    public metalnessMap?: Texture;\n    public morphNormals?: boolean;\n    public nearDistance?: number;\n    public normalMap?: Texture;\n    public normalScale?: Vector2;\n    public referencePosition?: Vector3;\n    public reflectivity?: number;\n    public refractionRatio?: number;\n    public rotation?: number;\n    public roughness?: number;\n    public roughnessMap?: Texture;\n    public scale?: number;\n    public size?: number;\n    public sizeAttenuation?: boolean;\n    public shininess?: number;\n    public skinning?: boolean;\n    public specular?: Color;\n    public specularMap?: Texture;\n    public vertexShader?: string;\n    public wireframe?: boolean;\n    public wireframeLinewidth?: number;\n\n    // in renderer\n    public numSupportedMorphNormals: number;\n    public numSupportedMorphTargets: number;\n\n    public setValues(values: IMaterialParameters): this {\n        if (values === undefined) return this;\n        for (const key in values) {\n            if (!values.hasOwnProperty(key)) continue;\n            const newValue = values[key];\n            if (newValue === undefined) {\n                console.warn(`THREE.Material: \"${key}\" parameter is undefined.`);\n                continue;\n            }\n            /**\n             * for backward compatability if shading is set in the constructor\n             */\n            if (key === \"shading\") {\n                console.warn(`THREE.${this.type}: .shading has been removed. Use the boolean .flatShading instead.`);\n                this.flatShading = newValue === FlatShading;\n                continue;\n            }\n\n            const currentValue = this[key];\n            if (currentValue === undefined) {\n                console.warn(`THREE.${this.type}: \"${key}\" is not a property of this material.`);\n                continue;\n            }\n            if (currentValue && currentValue instanceof Color) {\n                if (newValue instanceof Color) currentValue.copy(newValue);\n                else if (typeof newValue === \"number\") {\n                    currentValue.setHex(newValue);\n                } else if (typeof newValue === \"string\") {\n                    currentValue.setStyle(newValue);\n                }\n            } else if (currentValue && currentValue instanceof Vector3 && (newValue && newValue instanceof Vector3)) {\n                currentValue.copy(newValue);\n            } else if (key === \"overdraw\") {\n                /**\n                 * ensure overdraw is backwards-compatible with legacy boolean type\n                 * @type {Number}\n                 */\n                this[key] = Number(newValue);\n            } else {\n                this[key] = newValue;\n            }\n        }\n        return this;\n    }\n\n    public clone(): Material {\n        return new (this.constructor as new () => Material)().copy(this);\n    }\n\n    public copy(source: Material): this {\n        this.name = source.name;\n        this.fog = source.fog;\n        this.lights = source.lights;\n        this.blending = source.blending;\n        this.side = source.side;\n        this.flatShading = source.flatShading;\n        this.vertexColors = source.vertexColors;\n        this.opacity = source.opacity;\n        this.transparent = source.transparent;\n        this.blendSrc = source.blendSrc;\n        this.blendDst = source.blendDst;\n        this.blendEquation = source.blendEquation;\n        this.blendSrcAlpha = source.blendSrcAlpha;\n        this.blendDstAlpha = source.blendDstAlpha;\n        this.blendEquationAlpha = source.blendEquationAlpha;\n        this.depthFunc = source.depthFunc;\n        this.depthTest = source.depthTest;\n        this.depthWrite = source.depthWrite;\n        this.colorWrite = source.colorWrite;\n        this.precision = source.precision;\n        this.polygonOffset = source.polygonOffset;\n        this.polygonOffsetFactor = source.polygonOffsetFactor;\n        this.polygonOffsetUnits = source.polygonOffsetUnits;\n        this.dithering = source.dithering;\n        this.alphaTest = source.alphaTest;\n        this.premultipliedAlpha = source.premultipliedAlpha;\n        this.overdraw = source.overdraw;\n        this.visible = source.visible;\n        this.userData = JSON.parse(JSON.stringify(source.userData));\n        this.clipShadows = source.clipShadows;\n        this.clipIntersection = source.clipIntersection;\n        const srcPlanes: Plane[] = source.clippingPlanes;\n        let dstPlanes: Plane[] | null = null;\n        if (srcPlanes !== null) {\n            const n: number = srcPlanes.length;\n            dstPlanes = new Array(n);\n            for (let i: number = 0; i !== n; ++i) {\n                dstPlanes[i] = srcPlanes[i].clone();\n            }\n        }\n        this.clippingPlanes = dstPlanes;\n        this.shadowSide = source.shadowSide;\n        return this;\n    }\n\n    public dispose(): void {\n        this.dispatchEvent({ type: \"dispose\" });\n    }\n}\n","export { ShadowMaterial } from \"./ShadowMaterial\";\nexport { SpriteMaterial } from \"./SpriteMaterial\";\nexport { RawShaderMaterial } from \"./RawShaderMaterial\";\nexport { ShaderMaterial } from \"./ShaderMaterial\";\nexport { PointsMaterial } from \"./PointsMaterial\";\nexport { MeshPhysicalMaterial } from \"./MeshPhysicalMaterial\";\nexport { MeshStandardMaterial } from \"./MeshStandardMaterial\";\nexport { MeshPhongMaterial } from \"./MeshPhongMaterial\";\nexport { MeshToonMaterial } from \"./MeshToonMaterial\";\nexport { MeshNormalMaterial } from \"./MeshNormalMaterial\";\nexport { MeshLambertMaterial } from \"./MeshLambertMaterial\";\nexport { MeshDepthMaterial } from \"./MeshDepthMaterial\";\nexport { MeshDistanceMaterial } from \"./MeshDistanceMaterial\";\nexport { MeshBasicMaterial } from \"./MeshBasicMaterial\";\nexport { LineDashedMaterial } from \"./LineDashedMaterial\";\nexport { LineBasicMaterial } from \"./LineBasicMaterial\";\nexport { Material } from \"./Material\";\n","import { MultiplyOperation } from \"../constants\";\nimport { Color } from \"../math/Color\";\nimport { CubeTexture } from \"../textures/CubeTexture\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IMeshBasicMaterialParameter extends IMaterialParameters {\n    alphaMap?: Texture;\n    aoMap?: Texture;\n    aoMapIntensity?: number;\n    color?: Color | number | string;\n    combine?: number;\n    envMap?: CubeTexture;\n    lightMap?: Texture;\n    lightMapIntensity?: number;\n    map?: Texture;\n    morphTargets?: boolean;\n    reflectivity?: number;\n    refractionRatio?: number;\n    skinning?: boolean;\n    specularMap?: Texture;\n    wireframe?: boolean;\n    wireframeLinecap?: string;\n    wireframeLinejoin?: string;\n    wireframeLinewidth?: number;\n}\n\nexport class MeshBasicMaterial extends Material {\n    public readonly type: string = \"MeshBasicMaterial\";\n\n    public alphaMap: Texture | null = null;\n    public aoMap: Texture | null = null;\n    public aoMapIntensity: number = 1.0;\n    public color: Color = new Color().setHex(0xffffff);\n    public combine: number = MultiplyOperation;\n    public envMap: CubeTexture | null = null;\n    public lights: boolean = false;\n    public lightMap: Texture | null = null;\n    public lightMapIntensity: number = 1.0;\n    public map: Texture | null = null;\n    public morphTargets: boolean = false;\n    public reflectivity: number = 1;\n    public refractionRatio: number = 0.98;\n    public skinning: boolean = false;\n    public specularMap: Texture | null = null;\n    public wireframe: boolean = false;\n    public wireframeLinecap: string = \"round\";\n    public wireframeLinejoin: string = \"round\";\n    public wireframeLinewidth: number = 1;\n\n    constructor(parameters: IMeshBasicMaterialParameter) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: MeshBasicMaterial): this {\n        super.copy(source);\n        this.color.copy(source.color);\n\n        this.map = source.map;\n\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n\n        this.specularMap = source.specularMap;\n\n        this.alphaMap = source.alphaMap;\n\n        this.envMap = source.envMap;\n        this.combine = source.combine;\n        this.reflectivity = source.reflectivity;\n        this.refractionRatio = source.refractionRatio;\n\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n\n        return this;\n    }\n}\n","import { BasicDepthPacking } from \"../constants\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IMeshDepthMaterialParameters extends IMaterialParameters {\n    alphaMap?: Texture;\n    depthPacking?: number;\n    displacementMap?: Texture;\n    displacementScale?: number;\n    displacementBias?: number;\n    map?: Texture;\n    morphTargets?: boolean;\n    skinning?: boolean;\n    wireframe?: boolean;\n    wireframeLinewidth?: number;\n}\n\nexport class MeshDepthMaterial extends Material {\n    public readonly type: string = \"MeshDepthMaterial\";\n\n    public alphaMap: Texture | null = null;\n    public depthPacking: number = BasicDepthPacking;\n    public displacementMap: Texture | null = null;\n    public displacementScale: number = 1;\n    public displacementBias: number = 0;\n\n    public fog: boolean = false;\n    public lights: boolean = false;\n\n    public map: Texture | null = null;\n    public morphTargets: boolean = false;\n    public skinning: boolean = false;\n    public wireframe: boolean = false;\n    public wireframeLinewidth: number = 1;\n\n    constructor(parameters: IMeshDepthMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: MeshDepthMaterial): this {\n        super.copy(source);\n        this.depthPacking = source.depthPacking;\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        this.map = source.map;\n        this.alphaMap = source.alphaMap;\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        return this;\n    }\n}\n","import { BasicDepthPacking } from \"../constants\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IMeshDistanceMaterialParameters extends IMaterialParameters {\n    alphaMap?: Texture;\n    displacementMap?: Texture;\n    displacementScale?: number;\n    displacementBias?: number;\n    farDistance?: number;\n    map?: Texture;\n    morphTargets?: boolean;\n    nearDistance?: number;\n    referencePosition?: Vector3;\n    skinning?: boolean;\n}\n\nexport class MeshDistanceMaterial extends Material {\n    public readonly type: string = \"MeshDepthMaterial\";\n\n    public alphaMap: Texture | null = null;\n    public displacementMap: Texture | null = null;\n    public displacementScale: number = 1;\n    public displacementBias: number = 0;\n\n    public farDistance: number = 1;\n    public fog: boolean = false;\n    public lights: boolean = false;\n\n    public map: Texture | null = null;\n    public morphTargets: boolean = false;\n    public nearDistance: number = 1;\n    public referencePosition: Vector3 = new Vector3();\n    public skinning: boolean = false;\n\n    constructor(parameters: IMeshDistanceMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: MeshDistanceMaterial): this {\n        super.copy(source);\n        this.referencePosition.copy(source.referencePosition);\n        this.nearDistance = source.nearDistance;\n        this.farDistance = source.farDistance;\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        this.map = source.map;\n        this.alphaMap = source.alphaMap;\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n        return this;\n    }\n}\n","import { MultiplyOperation } from \"../constants\";\nimport { Color } from \"../math/Color\";\nimport { CubeTexture } from \"../textures/CubeTexture\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IMeshLambertMaterialParameters extends IMaterialParameters {\n    aoMap?: Texture;\n    aoMapIntensity?: number;\n    alphaMap?: Texture;\n    color?: Color | number | string;\n    combine?: number;\n    emissive?: Color | number | string;\n    emissiveIntensity?: number;\n    emissiveMap?: Texture;\n    envMap?: CubeTexture;\n    map?: Texture;\n    morphNormals?: boolean;\n    morphTargets?: boolean;\n    lightMap?: Texture;\n    lightMapIntensity?: number;\n    skinning?: boolean;\n    specularMap?: Texture;\n    reflectivity?: number;\n    refractionRatio?: number;\n    wireframe?: boolean;\n    wireframeLinecap?: string;\n    wireframeLinejoin?: string;\n    wireframeLinewidth?: number;\n}\n\nexport class MeshLambertMaterial extends Material {\n    public readonly type: string = \"MeshLambertMaterial\";\n\n    public aoMap: Texture | null = null;\n    public aoMapIntensity: number = 1;\n\n    public alphaMap: Texture | null = null;\n\n    public color: Color = new Color().setHex(0xffffff);\n    public combine: number = MultiplyOperation;\n\n    public emissive: Color = new Color().setHex(0x000000);\n    public emissiveIntensity: number = 1;\n    public emissiveMap: Texture | null = null;\n    public envMap: CubeTexture | null = null;\n\n    public map: Texture | null = null;\n    public morphNormals: boolean = true;\n    public morphTargets: boolean = true;\n\n    public lightMap: Texture = null;\n    public lightMapIntensity: number = 1;\n\n    public skinning: boolean = false;\n    public specularMap: Texture | null = null;\n\n    public reflectivity: number = 1;\n    public refractionRatio: number = 0.98;\n\n    public wireframe: boolean = false;\n    public wireframeLinecap: string = \"round\";\n    public wireframeLinejoin: string = \"round\";\n    public wireframeLinewidth: number = 1;\n\n    constructor(parameters: IMeshLambertMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: MeshLambertMaterial): this {\n        super.copy(source);\n        this.color.copy(source.color);\n\n        this.map = source.map;\n\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n\n        this.emissive.copy(source.emissive);\n        this.emissiveMap = source.emissiveMap;\n        this.emissiveIntensity = source.emissiveIntensity;\n\n        this.specularMap = source.specularMap;\n\n        this.alphaMap = source.alphaMap;\n\n        this.envMap = source.envMap;\n        this.combine = source.combine;\n        this.reflectivity = source.reflectivity;\n        this.refractionRatio = source.refractionRatio;\n\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        this.morphNormals = source.morphNormals;\n\n        return this;\n    }\n}\n","import { Vector2 } from \"../math/Vector2\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IMeshNormalMaterialParameters extends IMaterialParameters {\n    bumpMap?: Texture;\n    bumpScale?: number;\n    normalMap?: Texture;\n    normalScale?: Vector2;\n    displacementMap?: Texture;\n    displacementScale?: number;\n    displacementBias?: number;\n    wireframe?: boolean;\n    wireframeLinewidth?: number;\n    skinning?: boolean;\n    morphTargets?: boolean;\n    morphNormals?: boolean;\n}\n\nexport class MeshNormalMaterial extends Material {\n    public readonly type: string = \"MeshNormalMaterial\";\n\n    public bumpMap: Texture | null = null;\n    public bumpScale: number = 1;\n\n    public normalMap: Texture | null = null;\n    public normalScale: Vector2 = new Vector2(1, 1);\n\n    public displacementMap: Texture | null = null;\n    public displacementScale: number = 1;\n    public displacementBias: number = 0;\n\n    public wireframe: boolean = false;\n    public wireframeLinewidth: number = 1;\n\n    public fog: boolean = false;\n    public lights: boolean = false;\n\n    public skinning: boolean = false;\n    public morphTargets: boolean = false;\n    public morphNormals: boolean = false;\n\n    constructor(paramenters: IMeshNormalMaterialParameters) {\n        super();\n        this.setValues(paramenters);\n    }\n}\n","import { MultiplyOperation } from \"../constants\";\nimport { Color } from \"../math/Color\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { CubeTexture } from \"../textures/CubeTexture\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IMeshPhongMaterialParameters extends IMaterialParameters {\n    alphaMap?: Texture;\n    aoMap?: Texture;\n    aoMapIntensity?: number;\n    bumpMap?: Texture;\n    bumpScale?: number;\n    color?: Color | number | string;\n    combine?: number;\n    displacementBias?: number;\n    displacementMap?: Texture;\n    displacementScale?: number;\n    emissive?: Color | number | string;\n    emissiveIntensity?: number;\n    emissiveMap?: Texture;\n    envMap?: CubeTexture;\n    lightMap?: Texture;\n    lightMapIntensity?: number;\n    map?: Texture;\n    morphNormals?: boolean;\n    morphTargets?: boolean;\n    normalMap?: Texture;\n    normalScale?: Vector2;\n    reflectivity?: number;\n    refractionRatio?: number;\n    shininess?: number;\n    skinning?: boolean;\n    specular?: Color | number | string;\n    specularMap?: Texture;\n    wireframe?: boolean;\n    wireframeLinecap?: string;\n    wireframeLinejoin?: string;\n    wireframeLinewidth?: number;\n}\n/**\n * parameters = {\n *  color: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\nexport class MeshPhongMaterial extends Material {\n    public readonly type: string = \"MeshPhongMaterial\";\n\n    public alphaMap: Texture | null = null;\n    public aoMap: Texture | null = null;\n    public aoMapIntensity: number = 1.0;\n    public bumpMap: Texture | null = null;\n    public bumpScale: number = 1;\n    public color: Color = new Color().setHex(0xffffff);\n    public combine: number = MultiplyOperation;\n    public displacementBias: number = 0;\n    public displacementMap: Texture | null = null;\n    public displacementScale: number = 1;\n    public emissive: Color = new Color().setHex(0x000000);\n    public emissiveIntensity: number = 1.0;\n    public emissiveMap: Texture | null = null;\n    public envMap: CubeTexture | null = null;\n    public lightMap: Texture | null = null;\n    public lightMapIntensity: number = 1.0;\n    public map: Texture | null = null;\n    public morphNormals: boolean = false;\n    public morphTargets: boolean = false;\n    public normalMap: Texture | null = null;\n    public normalScale: Vector2 = new Vector2(1, 1);\n    public reflectivity: number = 1;\n    public refractionRatio: number = 0.98;\n    public shininess: number = 30;\n    public skinning: boolean = false;\n    public specular: Color = new Color().setHex(0x111111);\n    public specularMap: Texture | null = null;\n    public wireframe: boolean = false;\n    public wireframeLinecap: string = \"round\";\n    public wireframeLinejoin: string = \"round\";\n    public wireframeLinewidth: number = 1;\n\n    constructor(parameters: IMeshPhongMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: MeshPhongMaterial): this {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.specular.copy(source.specular);\n        this.shininess = source.shininess;\n\n        this.map = source.map;\n\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n\n        this.emissive.copy(source.emissive);\n        this.emissiveMap = source.emissiveMap;\n        this.emissiveIntensity = source.emissiveIntensity;\n\n        this.bumpMap = source.bumpMap;\n        this.bumpScale = source.bumpScale;\n\n        this.normalMap = source.normalMap;\n        this.normalScale.copy(source.normalScale);\n\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n\n        this.specularMap = source.specularMap;\n\n        this.alphaMap = source.alphaMap;\n\n        this.envMap = source.envMap;\n        this.combine = source.combine;\n        this.reflectivity = source.reflectivity;\n        this.refractionRatio = source.refractionRatio;\n\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        this.morphNormals = source.morphNormals;\n        return this;\n    }\n}\n","import { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IMeshPhysicalMaterialParameters extends IMaterialParameters {\n    clearCoat?: number;\n    clearCoatRoughness?: number;\n    reflectivity?: number;\n}\n\nexport class MeshPhysicalMaterial extends Material {\n    public readonly type: string = \"MeshPhysicalMaterial\";\n\n    // maps to F0 = 0.04\n    public clearCoat: number = 0.0;\n    public clearCoatRoughness: number = 0.0;\n    public defines: { [key: string]: any } = { PHYSICAL: \"\" };\n    public reflectivity: number = 0.5;\n\n    constructor(parameters: IMeshPhysicalMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: MeshPhysicalMaterial): this {\n        this.defines = { PHYSICAL: \"\" };\n        this.reflectivity = source.reflectivity;\n        this.clearCoat = source.clearCoat;\n        this.clearCoatRoughness = source.clearCoatRoughness;\n        return this;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { CubeTexture } from \"../textures/CubeTexture\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IMeshStandardMaterialParameters extends IMaterialParameters {\n    alphaMap?: Texture;\n    aoMap?: Texture;\n    aoMapIntensity?: number;\n    bumpMap?: Texture;\n    bumpScale?: number;\n    color?: Color | number | string;\n    displacementBias?: number;\n    displacementMap?: Texture;\n    displacementScale?: number;\n    emissive?: Color | number | string;\n    emissiveIntensity?: number;\n    emissiveMap?: Texture;\n    envMap?: CubeTexture;\n    envMapIntensity?: number;\n    lightMap?: Texture;\n    lightMapIntensity?: number;\n    map?: Texture;\n    metalness?: number;\n    metalnessMap?: Texture;\n    morphNormals?: boolean;\n    morphTargets?: boolean;\n    normalMap?: Texture;\n    normalScale?: Vector2;\n    refractionRatio?: number;\n    roughness?: number;\n    roughnessMap?: Texture;\n    skinning?: boolean;\n    wireframe?: boolean;\n    wireframeLinecap?: string;\n    wireframeLinejoin?: string;\n    wireframeLinewidth?: number;\n}\n\n/**\n *\n * parameters = {\n *  color: <hex>,\n *  roughness: <float>,\n *  metalness: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  roughnessMap: new THREE.Texture( <Image> ),\n *\n *  metalnessMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  envMapIntensity: <float>\n *\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nexport class MeshStandardMaterial extends Material {\n    public readonly type: string = \"MeshStandardMaterial\";\n\n    public alphaMap: Texture | null = null;\n    public aoMap: Texture | null = null;\n    public aoMapIntensity: number = 1.0;\n    public bumpMap: Texture | null = null;\n    public bumpScale: number = 1;\n    public color: Color = new Color().setHex(0xffffff);\n    public defines: { [key: string]: any } = { STANDARD: \"\" };\n    public displacementBias: number = 0;\n    public displacementMap: Texture | null = null;\n    public displacementScale: number = 1;\n    public emissive: Color = new Color().setHex(0x000000);\n    public emissiveIntensity: number = 1.0;\n    public emissiveMap: Texture | null = null;\n    public envMap: CubeTexture | null = null;\n    public envMapIntensity: number = 1.0;\n    public lightMap: Texture | null = null;\n    public lightMapIntensity: number = 1.0;\n    public map: Texture | null = null;\n    public metalness: number = 0.5;\n    public metalnessMap: Texture | null = null;\n    public morphNormals: boolean = false;\n    public morphTargets: boolean = false;\n    public normalMap: Texture | null = null;\n    public normalScale: Vector2 = new Vector2(1, 1);\n    public refractionRatio: number = 0.98;\n    public roughness: number = 0.5;\n    public roughnessMap: Texture | null = null;\n    public skinning: boolean = false;\n    public wireframe: boolean = false;\n    public wireframeLinecap: string = \"round\";\n    public wireframeLinejoin: string = \"round\";\n    public wireframeLinewidth: number = 1;\n\n    constructor(parameters: IMeshStandardMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: MeshStandardMaterial): this {\n        super.copy(source);\n        this.defines = { STANDARD: \"\" };\n        this.color.copy(source.color);\n        this.roughness = source.roughness;\n        this.metalness = source.metalness;\n\n        this.map = source.map;\n\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n\n        this.emissive.copy(source.emissive);\n        this.emissiveMap = source.emissiveMap;\n        this.emissiveIntensity = source.emissiveIntensity;\n\n        this.bumpMap = source.bumpMap;\n        this.bumpScale = source.bumpScale;\n\n        this.normalMap = source.normalMap;\n        this.normalScale.copy(source.normalScale);\n\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n\n        this.roughnessMap = source.roughnessMap;\n\n        this.metalnessMap = source.metalnessMap;\n\n        this.alphaMap = source.alphaMap;\n\n        this.envMap = source.envMap;\n        this.envMapIntensity = source.envMapIntensity;\n\n        this.refractionRatio = source.refractionRatio;\n\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        this.morphNormals = source.morphNormals;\n        return this;\n    }\n}\n","import { Texture } from \"../textures/Texture\";\nimport { IMeshPhongMaterialParameters, MeshPhongMaterial } from \"./MeshPhongMaterial\";\n\nexport interface IMeshToonMaterialParameters extends IMeshPhongMaterialParameters {\n    gradientMap?: Texture;\n}\n\nexport class MeshToonMaterial extends MeshPhongMaterial {\n    public readonly type: string = \"MeshToonMaterial\";\n\n    public defines: { [key: string]: any } = { TOON: \"\" };\n    public gradientMap: Texture | null = null;\n\n    constructor(parameters: IMeshPhongMaterialParameters) {\n        super(parameters);\n        this.setValues(parameters);\n    }\n\n    public copy(source: MeshToonMaterial): this {\n        super.copy(source);\n        this.gradientMap = source.gradientMap;\n        return this;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IPointsMaterialParameters extends IMaterialParameters {\n    color?: Color | number | string;\n    map?: Texture;\n    size?: number;\n    sizeAttenuation?: boolean;\n}\n\nexport class PointsMaterial extends Material {\n    public readonly type: string = \"PointsMaterial\";\n\n    public color: Color = new Color().setHex(0xffffff);\n    public lights: boolean = false;\n    public map: Texture | null = null;\n    public size: number = 1;\n    public sizeAttenuation: boolean = true;\n\n    constructor(parameters: IPointsMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: PointsMaterial): this {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.map = source.map;\n        this.size = source.size;\n        this.sizeAttenuation = source.sizeAttenuation;\n        return this;\n    }\n}\n","import { ShaderMaterial } from \"./ShaderMaterial\";\n\nexport class RawShaderMaterial extends ShaderMaterial {}\n","import { IUniform, UniformsUtils } from \"../renderers/shaders/UniformsUtils\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IShaderMaterialParameters extends IMaterialParameters {\n    clipping?: boolean;\n    fog?: boolean;\n    fragmentShader?: string;\n    index0AttributeName?: string;\n    linewidth?: number;\n    morphNormals?: boolean;\n    morphTargets?: boolean;\n    skinning?: boolean;\n    vertexShader?: string;\n    wireframe?: boolean;\n    wireframeLinewidth?: number;\n}\n\nexport class ShaderMaterial extends Material {\n    public readonly type: string = \"ShaderMaterial\";\n\n    public defines: { [key: string]: any } = {};\n    public uniforms: { [key: string]: IUniform } = {};\n\n    public vertexShader: string = `void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}`;\n    public fragmentShader: string = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n    public linewidth: number = 1;\n    public wireframe: boolean = false;\n    public wireframeLinewidth: number = 1;\n\n    public fog: boolean = false; // set to use scene fog\n    public lights: boolean = false; // set to use scene lights\n    public clipping: boolean = false; // set to use user-defined clipping planes\n\n    public skinning: boolean = false; // set to use skinning attribute streams\n    public morphTargets: boolean = false; // set to use morph targets\n    public morphNormals: boolean = false; // set to use morph normals\n\n    public extensions: { [key: string]: boolean } = {\n        derivatives: false, // set to use derivatives\n        drawBuffers: false, // set to use draw buffers\n        fragDepth: false, // set to use fragment depth values\n        shaderTextureLOD: false, // set to use shader texture LOD\n    };\n\n    // When rendered geometry doesn't include these attributes but the material does,\n    // use these default values in WebGL. This avoids errors when buffer data is missing.\n    public defaultAttributeValues: { [key: string]: number[] } = {\n        color: [1, 1, 1],\n        uv: [0, 0],\n        uv2: [0, 0],\n    };\n\n    public index0AttributeName: string;\n\n    constructor(parameters: IShaderMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: ShaderMaterial): this {\n        this.fragmentShader = source.fragmentShader;\n        this.vertexShader = source.vertexShader;\n\n        this.uniforms = UniformsUtils.clone(source.uniforms);\n\n        this.defines = source.defines;\n\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n\n        this.lights = source.lights;\n        this.clipping = source.clipping;\n\n        this.skinning = source.skinning;\n\n        this.morphTargets = source.morphTargets;\n        this.morphNormals = source.morphNormals;\n\n        this.extensions = source.extensions;\n\n        return this;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IShadowMaterialParameters extends IMaterialParameters {\n    color?: Color | number | string;\n}\n\nexport class ShadowMaterial extends Material {\n    public readonly type: string = \"ShadowMaterial\";\n\n    public color: Color = new Color().setHex(0x000000);\n    public transparent: boolean = true;\n\n    constructor(parameters: IShadowMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: ShadowMaterial): this {\n        super.copy(source);\n        this.color.copy(source.color);\n        return this;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface ISpriteMaterialParameters extends IMaterialParameters {\n    color?: Color | number | string;\n    fog?: boolean;\n    map?: Texture;\n    rotation?: number;\n}\n\nexport class SpriteMaterial extends Material {\n    public readonly type: string = \"SpriteMaterial\";\n\n    public color: Color = new Color().setHex(0xffffff);\n    public fog: boolean = false;\n    public lights: boolean = false;\n    public map: Texture | null = null;\n    public rotation: number = 0;\n\n    constructor(parameters?: ISpriteMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: SpriteMaterial): this {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.map = source.map;\n        this.rotation = source.rotation;\n        return this;\n    }\n}\n","import { Matrix4 } from \"./Matrix4\";\nimport { Plane } from \"./Plane\";\nimport { Sphere } from \"./Sphere\";\nimport { Vector3 } from \"./Vector3\";\nimport { vectorFromBufferAttribute } from \"../utils\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { BufferAttribute } from \"../core/BufferAttribute\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Mesh } from \"../objects/Mesh\";\nimport { Line } from \"../objects/Line\";\nimport { LineLoop } from \"../objects/LineLoop\";\nimport { LineSegments } from \"../objects/LineSegments\";\nimport { Points } from \"../objects/Points\";\n\nexport type ObjectWithGeometry = Mesh | Line | LineLoop | LineSegments | Points;\n\nexport class Box3 {\n    public min: Vector3 = new Vector3(+Infinity, +Infinity, +Infinity);\n    public max: Vector3 = new Vector3(-Infinity, -Infinity, -Infinity);\n\n    constructor(\n        min: Vector3 = new Vector3(+Infinity, +Infinity, +Infinity),\n        max: Vector3 = new Vector3(-Infinity, -Infinity, -Infinity),\n    ) {\n        this.max = max;\n        this.min = min;\n    }\n\n    public set(min: Vector3, max: Vector3): this {\n        this.min.copy(min);\n        this.max.copy(max);\n        return this;\n    }\n\n    public setFromArray(array: number[]): this {\n        let minX: number = +Infinity,\n            minY: number = +Infinity,\n            minZ: number = +Infinity;\n        let maxX: number = -Infinity,\n            maxY: number = -Infinity,\n            maxZ: number = -Infinity;\n        for (let i: number = 0, l: number = array.length; i < l; i += 3) {\n            const x: number = array[i],\n                y: number = array[i + 1],\n                z: number = array[i + 2];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (z < minZ) minZ = z;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            if (z > maxZ) maxZ = z;\n        }\n        this.min.set(minX, minY, minZ);\n        this.max.set(maxX, maxY, maxZ);\n        return this;\n    }\n\n    public setFromPoints(points: Vector3[]): this {\n        this.makeEmpty();\n        for (let i: number = 0, il: number = points.length; i < il; i++) {\n            this.expandByPoint(points[i]);\n        }\n        return this;\n    }\n\n    public setFromCenterAndSize(center: Vector3, size: Vector3): this {\n        const halfSize: Vector3 = new Vector3().copy(size).multiplyScalar(0.5);\n        this.min.copy(center).sub(halfSize);\n        this.max.copy(center).add(halfSize);\n        return this;\n    }\n\n    public setFromObject(object: ObjectWithGeometry): this {\n        this.makeEmpty();\n        return this.expandByObject(object);\n    }\n\n    public clone(): Box3 {\n        return new (this.constructor as new () => Box3)().copy(this);\n    }\n\n    public copy(box: Box3): this {\n        this.min.copy(box.min);\n        this.max.copy(box.max);\n        return this;\n    }\n\n    public makeEmpty(): this {\n        this.min.x = this.min.y = this.min.z = +Infinity;\n        this.max.x = this.max.y = this.max.z = -Infinity;\n        return this;\n    }\n\n    /**\n     * this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n     * @returns {boolean}\n     */\n    public isEmpty(): boolean {\n        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n    }\n\n    public getCenter(): Vector3 {\n        const result: Vector3 = new Vector3();\n        return this.isEmpty()\n            ? result.set(0, 0, 0)\n            : result\n                  .copy(this.min)\n                  .add(this.max)\n                  .multiplyScalar(0.5);\n    }\n\n    public getSize(): Vector3 {\n        const result = new Vector3();\n        return this.isEmpty() ? result.set(0, 0, 0) : result.copy(this.max).sub(this.min);\n    }\n\n    public expandByPoint(point: Vector3): this {\n        this.min.min(point);\n        this.max.max(point);\n        return this;\n    }\n\n    public expandByVector(vector: Vector3): this {\n        this.min.sub(vector);\n        this.max.add(vector);\n        return this;\n    }\n\n    public expandByScalar(scalar: number): this {\n        this.min.addScalar(-scalar);\n        this.max.addScalar(scalar);\n        return this;\n    }\n\n    /**\n     * TODO expandByObject\n     * @param object\n     * @returns {Box3}\n     */\n    public expandByObject(object: ObjectWithGeometry): this {\n        // Computes the world-axis-aligned bounding box of an object (including its children),\n        // accounting for both the object's, and children's, world transforms\n        const traverse = (node: ObjectWithGeometry) => {\n            const geometry: Geometry | BufferGeometry = node.geometry;\n            if (geometry !== undefined) {\n                if (geometry instanceof Geometry) {\n                    const vertices: Vector3[] = geometry.vertices;\n                    for (let i: number = 0, l: number = vertices.length; i < l; i++) {\n                        const v1: Vector3 = new Vector3().copy(vertices[i]);\n                        v1.applyMatrix4(node.matrixWorld);\n                        this.expandByPoint(v1);\n                    }\n                } else if (geometry instanceof BufferGeometry) {\n                    const attribute: BufferAttribute = geometry.attributes.position;\n                    if (attribute !== undefined) {\n                        for (let i: number = 0, l: number = attribute.count; i < l; i++) {\n                            const v1: Vector3 = vectorFromBufferAttribute(new Vector3(), attribute, i).applyMatrix4(\n                                node.matrixWorld,\n                            );\n                            this.expandByPoint(v1);\n                        }\n                    }\n                }\n            }\n        };\n        object.updateMatrixWorld(true);\n        object.traverse(traverse);\n        return this;\n    }\n\n    public containsPoint(point: Vector3): boolean {\n        return !(\n            point.x < this.min.x ||\n            point.x > this.max.x ||\n            point.y < this.min.y ||\n            point.y > this.max.y ||\n            point.z < this.min.z ||\n            point.z > this.max.z\n        );\n    }\n\n    public containsBox(box: Box3): boolean {\n        return (\n            this.min.x <= box.min.x &&\n            box.max.x <= this.max.x &&\n            this.min.y <= box.min.y &&\n            box.max.y <= this.max.y &&\n            this.min.z <= box.min.z &&\n            box.max.z <= this.max.z\n        );\n    }\n\n    /**\n     * This can potentially have a divide by zero if the box has a size dimension of 0.\n     * @param point\n     * @returns {Vector3}\n     */\n    public getParameter(point: Vector3): Vector3 {\n        const result: Vector3 = new Vector3();\n        return result.set(\n            (point.x - this.min.x) / (this.max.x - this.min.x),\n            (point.y - this.min.y) / (this.max.y - this.min.y),\n            (point.z - this.min.z) / (this.max.z - this.min.z),\n        );\n    }\n\n    /**\n     * using 6 splitting planes to rule out intersections\n     * @param box\n     * @returns {boolean}\n     */\n    public intersectsBox(box: Box3): boolean {\n        return !(\n            box.max.x < this.min.x ||\n            box.min.x > this.max.x ||\n            box.max.y < this.min.y ||\n            box.min.y > this.max.y ||\n            box.max.z < this.min.z ||\n            box.min.z > this.max.z\n        );\n    }\n\n    /**\n     * Find the point on the AABB closest to the sphere center.\n     * If that point is inside the sphere, the AABB and sphere intersect.\n     * @param sphere\n     * @returns {boolean}\n     */\n    public intersectsSphere(sphere: Sphere): boolean {\n        const closestPoint: Vector3 = this.clampPoint(sphere.center);\n        return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n    }\n\n    /**\n     * We compute the minimum and maximum dot product values. If those values\n     * are on the same side (back or front) of the plane, then there is no intersection.\n     * @param plane\n     * @returns {boolean}\n     */\n    public intersectsPlane(plane: Plane): boolean {\n        let min: number, max: number;\n        if (plane.normal.x > 0) {\n            min = plane.normal.x * this.min.x;\n            max = plane.normal.x * this.max.x;\n        } else {\n            min = plane.normal.x * this.max.x;\n            max = plane.normal.x * this.min.x;\n        }\n        if (plane.normal.y > 0) {\n            min += plane.normal.y * this.min.y;\n            max += plane.normal.y * this.max.y;\n        } else {\n            min += plane.normal.y * this.max.y;\n            max += plane.normal.y * this.min.y;\n        }\n        if (plane.normal.z > 0) {\n            min += plane.normal.z * this.min.z;\n            max += plane.normal.z * this.max.z;\n        } else {\n            min += plane.normal.z * this.max.z;\n            max += plane.normal.z * this.min.z;\n        }\n        return min <= plane.constant && max >= plane.constant;\n    }\n\n    public clampPoint(point: Vector3): Vector3 {\n        return new Vector3().copy(point).clamp(this.min, this.max);\n    }\n\n    public distanceToPoint(point: Vector3): number {\n        const clampedPoint: Vector3 = new Vector3().copy(point).clamp(this.min, this.max);\n        return clampedPoint.sub(point).length();\n    }\n\n    public getBoundingSphere(): Sphere {\n        const result: Sphere = new Sphere();\n        result.center = this.getCenter();\n        result.radius = this.getSize().length() * 0.5;\n        return result;\n    }\n\n    public intersect(box: Box3): this {\n        this.min.max(box.min);\n        this.max.min(box.max);\n        // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n        if (this.isEmpty()) this.makeEmpty();\n        return this;\n    }\n\n    public union(box: Box3): this {\n        this.min.min(box.min);\n        this.max.max(box.max);\n        return this;\n    }\n\n    public applyMatrix4(matrix: Matrix4): this {\n        // transform of empty box is an empty box.\n        if (this.isEmpty()) return this;\n        const points: Vector3[] = [\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n        ];\n        // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n        points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n        points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n        points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n        points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n        points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n        points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n        points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n        points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n        this.setFromPoints(points);\n        return this;\n    }\n\n    public translate(offset: Vector3): this {\n        this.min.add(offset);\n        this.max.add(offset);\n        return this;\n    }\n\n    public equals(box: Box3): boolean {\n        return box.min.equals(this.min) && box.max.equals(this.max);\n    }\n}\n","import { MathUtil } from \"./Math\";\n\nfunction HUE_TO_RGB(p: number, q: number, t: number): number {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n    return p;\n}\n\nexport class Color {\n    public static ColorKeywords: { [key: string]: number } = {\n        aliceblue: 0xf0f8ff,\n        antiquewhite: 0xfaebd7,\n        aqua: 0x00ffff,\n        aquamarine: 0x7fffd4,\n        azure: 0xf0ffff,\n        beige: 0xf5f5dc,\n        bisque: 0xffe4c4,\n        black: 0x000000,\n        blanchedalmond: 0xffebcd,\n        blue: 0x0000ff,\n        blueviolet: 0x8a2be2,\n        brown: 0xa52a2a,\n        burlywood: 0xdeb887,\n        cadetblue: 0x5f9ea0,\n        chartreuse: 0x7fff00,\n        chocolate: 0xd2691e,\n        coral: 0xff7f50,\n        cornflowerblue: 0x6495ed,\n        cornsilk: 0xfff8dc,\n        crimson: 0xdc143c,\n        cyan: 0x00ffff,\n        darkblue: 0x00008b,\n        darkcyan: 0x008b8b,\n        darkgoldenrod: 0xb8860b,\n        darkgray: 0xa9a9a9,\n        darkgreen: 0x006400,\n        darkgrey: 0xa9a9a9,\n        darkkhaki: 0xbdb76b,\n        darkmagenta: 0x8b008b,\n        darkolivegreen: 0x556b2f,\n        darkorange: 0xff8c00,\n        darkorchid: 0x9932cc,\n        darkred: 0x8b0000,\n        darksalmon: 0xe9967a,\n        darkseagreen: 0x8fbc8f,\n        darkslateblue: 0x483d8b,\n        darkslategray: 0x2f4f4f,\n        darkslategrey: 0x2f4f4f,\n        darkturquoise: 0x00ced1,\n        darkviolet: 0x9400d3,\n        deeppink: 0xff1493,\n        deepskyblue: 0x00bfff,\n        dimgray: 0x696969,\n        dimgrey: 0x696969,\n        dodgerblue: 0x1e90ff,\n        firebrick: 0xb22222,\n        floralwhite: 0xfffaf0,\n        forestgreen: 0x228b22,\n        fuchsia: 0xff00ff,\n        gainsboro: 0xdcdcdc,\n        ghostwhite: 0xf8f8ff,\n        gold: 0xffd700,\n        goldenrod: 0xdaa520,\n        gray: 0x808080,\n        green: 0x008000,\n        greenyellow: 0xadff2f,\n        grey: 0x808080,\n        honeydew: 0xf0fff0,\n        hotpink: 0xff69b4,\n        indianred: 0xcd5c5c,\n        indigo: 0x4b0082,\n        ivory: 0xfffff0,\n        khaki: 0xf0e68c,\n        lavender: 0xe6e6fa,\n        lavenderblush: 0xfff0f5,\n        lawngreen: 0x7cfc00,\n        lemonchiffon: 0xfffacd,\n        lightblue: 0xadd8e6,\n        lightcoral: 0xf08080,\n        lightcyan: 0xe0ffff,\n        lightgoldenrodyellow: 0xfafad2,\n        lightgray: 0xd3d3d3,\n        lightgreen: 0x90ee90,\n        lightgrey: 0xd3d3d3,\n        lightpink: 0xffb6c1,\n        lightsalmon: 0xffa07a,\n        lightseagreen: 0x20b2aa,\n        lightskyblue: 0x87cefa,\n        lightslategray: 0x778899,\n        lightslategrey: 0x778899,\n        lightsteelblue: 0xb0c4de,\n        lightyellow: 0xffffe0,\n        lime: 0x00ff00,\n        limegreen: 0x32cd32,\n        linen: 0xfaf0e6,\n        magenta: 0xff00ff,\n        maroon: 0x800000,\n        mediumaquamarine: 0x66cdaa,\n        mediumblue: 0x0000cd,\n        mediumorchid: 0xba55d3,\n        mediumpurple: 0x9370db,\n        mediumseagreen: 0x3cb371,\n        mediumslateblue: 0x7b68ee,\n        mediumspringgreen: 0x00fa9a,\n        mediumturquoise: 0x48d1cc,\n        mediumvioletred: 0xc71585,\n        midnightblue: 0x191970,\n        mintcream: 0xf5fffa,\n        mistyrose: 0xffe4e1,\n        moccasin: 0xffe4b5,\n        navajowhite: 0xffdead,\n        navy: 0x000080,\n        oldlace: 0xfdf5e6,\n        olive: 0x808000,\n        olivedrab: 0x6b8e23,\n        orange: 0xffa500,\n        orangered: 0xff4500,\n        orchid: 0xda70d6,\n        palegoldenrod: 0xeee8aa,\n        palegreen: 0x98fb98,\n        paleturquoise: 0xafeeee,\n        palevioletred: 0xdb7093,\n        papayawhip: 0xffefd5,\n        peachpuff: 0xffdab9,\n        peru: 0xcd853f,\n        pink: 0xffc0cb,\n        plum: 0xdda0dd,\n        powderblue: 0xb0e0e6,\n        purple: 0x800080,\n        rebeccapurple: 0x663399,\n        red: 0xff0000,\n        rosybrown: 0xbc8f8f,\n        royalblue: 0x4169e1,\n        saddlebrown: 0x8b4513,\n        salmon: 0xfa8072,\n        sandybrown: 0xf4a460,\n        seagreen: 0x2e8b57,\n        seashell: 0xfff5ee,\n        sienna: 0xa0522d,\n        silver: 0xc0c0c0,\n        skyblue: 0x87ceeb,\n        slateblue: 0x6a5acd,\n        slategray: 0x708090,\n        slategrey: 0x708090,\n        snow: 0xfffafa,\n        springgreen: 0x00ff7f,\n        steelblue: 0x4682b4,\n        tan: 0xd2b48c,\n        teal: 0x008080,\n        thistle: 0xd8bfd8,\n        tomato: 0xff6347,\n        turquoise: 0x40e0d0,\n        violet: 0xee82ee,\n        wheat: 0xf5deb3,\n        white: 0xffffff,\n        whitesmoke: 0xf5f5f5,\n        yellow: 0xffff00,\n        yellowgreen: 0x9acd32,\n    };\n\n    public r: number = 1;\n    public g: number = 1;\n    public b: number = 1;\n\n    constructor(r: number = 0, g: number = 0, b: number = 0) {\n        this.setRGB(r, g, b);\n    }\n\n    public copy(color: Color): this {\n        this.r = color.r;\n        this.g = color.g;\n        this.b = color.b;\n        return this;\n    }\n\n    public setScalar(scalar: number): this {\n        this.r = scalar;\n        this.g = scalar;\n        this.b = scalar;\n        return this;\n    }\n\n    public setHex(hex: number): this {\n        hex = Math.floor(hex);\n        this.r = ((hex >> 16) & 255) / 255;\n        this.g = ((hex >> 8) & 255) / 255;\n        this.b = (hex & 255) / 255;\n        return this;\n    }\n\n    public setRGB(r: number, g: number, b: number): this {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        return this;\n    }\n\n    /**\n     * HSL即是代表色相，饱和度，明度三个通道的颜色\n     * H: Hue 色相 S：Saturation 饱和度 L Lightness 明度\n     * @param h\n     * @param s\n     * @param l\n     * @returns {Color}\n     */\n    public setHSL(h: number, s: number, l: number): this {\n        // h,s,l ranges are in 0.0 - 1.0\n        h = MathUtil.euclideanModulo(h, 1);\n        s = MathUtil.clamp(s, 0, 1);\n        l = MathUtil.clamp(l, 0, 1);\n        if (s === 0) {\n            this.r = this.g = this.b = l;\n        } else {\n            const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n            const q = 2 * l - p;\n            this.r = HUE_TO_RGB(q, p, h + 1 / 3);\n            this.g = HUE_TO_RGB(q, p, h);\n            this.b = HUE_TO_RGB(q, p, h - 1 / 3);\n        }\n        return this;\n    }\n\n    public setStyle(style: string): this {\n        let matches;\n        /**\n         * rgb || hsl\n         */\n        if ((matches = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(style))) {\n            let color;\n            const name = matches[1];\n            const components = matches[2];\n\n            switch (name) {\n                case \"rgb\":\n                case \"rgba\":\n                    if ((color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components))) {\n                        // rgb(255,0,0) rgba(255,0,0,0.5)\n                        this.r = Math.min(255, parseInt(color[1], 10)) / 255;\n                        this.g = Math.min(255, parseInt(color[2], 10)) / 255;\n                        this.b = Math.min(255, parseInt(color[3], 10)) / 255;\n                        // handleAlpha(color[5]);\n                        return this;\n                    }\n\n                    if (\n                        (color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components))\n                    ) {\n                        // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n                        this.r = Math.min(100, parseInt(color[1], 10)) / 100;\n                        this.g = Math.min(100, parseInt(color[2], 10)) / 100;\n                        this.b = Math.min(100, parseInt(color[3], 10)) / 100;\n                        // handleAlpha(color[5]);\n                        return this;\n                    }\n                    break;\n                case \"hsl\":\n                case \"hsla\":\n                    if (\n                        (color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(\n                            components,\n                        ))\n                    ) {\n                        // hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n                        const h = parseFloat(color[1]) / 360;\n                        const s = parseInt(color[2], 10) / 100;\n                        const l = parseInt(color[3], 10) / 100;\n                        // handleAlpha(color[5]);\n                        return this.setHSL(h, s, l);\n                    }\n                    break;\n            }\n        } else if ((matches = /^\\#([A-Fa-f0-9]+)$/.exec(style))) {\n            // hex color\n            const hex = matches[1];\n            const size = hex.length;\n            if (size === 3) {\n                // #ff0\n                this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n                this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n                this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n                return this;\n            } else if (size === 6) {\n                // #ff0000\n                this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n                this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n                this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n                return this;\n            }\n        }\n\n        if (style && style.length > 0) {\n            // color keywords\n            const hex = Color.ColorKeywords[style];\n            if (hex !== undefined) {\n                // red\n                this.setHex(hex);\n            } else {\n                console.warn(\"THREE.Color: Unknown color \" + style);\n            }\n        }\n        return this;\n    }\n\n    public convertGammaToLinear(color: Color, gammaFactor: number = 2.0): this {\n        return this.setRGB(\n            Math.pow(color.r, gammaFactor),\n            Math.pow(color.g, gammaFactor),\n            Math.pow(color.b, gammaFactor),\n        );\n    }\n\n    public convertLinearToGamma(color: Color, gammaFactor: number = 2.0): this {\n        const safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n        return this.setRGB(\n            Math.pow(color.r, safeInverse),\n            Math.pow(color.g, safeInverse),\n            Math.pow(color.b, safeInverse),\n        );\n    }\n\n    public getHex(): number {\n        return ((this.r * 255) << 16) ^ ((this.g * 255) << 8) ^ ((this.b * 255) << 0);\n    }\n\n    public getHexString(): string {\n        return (\"000000\" + this.getHex().toString(16)).slice(-6);\n    }\n\n    public getHSL(\n        hsl: { h: number; s: number; l: number } = { h: 0, s: 0, l: 0 },\n    ): { h: number; s: number; l: number } {\n        // h,s,l ranges are in 0.0 - 1.0\n        const { r, g, b } = this;\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n\n        let hue, saturation;\n        const lightness = (min + max) / 2.0;\n\n        if (min === max) {\n            hue = 0;\n            saturation = 0;\n        } else {\n            const delta = max - min;\n            saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n            switch (max) {\n                case r:\n                    hue = (g - b) / delta + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    hue = (b - r) / delta + 2;\n                    break;\n                case b:\n                    hue = (r - g) / delta + 4;\n                    break;\n            }\n            hue /= 6;\n        }\n        hsl.h = hue;\n        hsl.s = saturation;\n        hsl.l = lightness;\n        return hsl;\n    }\n\n    public getStyle(): string {\n        const { r, g, b } = this;\n        return \"rgb(\" + ((r * 255) | 0) + \",\" + ((g * 255) | 0) + \",\" + ((b * 255) | 0) + \")\";\n    }\n\n    public offsetHSL(h: number, s: number, l: number): this {\n        const hsl = this.getHSL();\n        hsl.h += h;\n        hsl.s += s;\n        hsl.l += l;\n        return this.setHSL(hsl.h, hsl.s, hsl.l);\n    }\n\n    public add(color: Color): this {\n        this.r = Math.min(1, this.r + color.r);\n        this.g = Math.min(1, this.g + color.g);\n        this.b = Math.min(1, this.b + color.b);\n        return this;\n    }\n\n    public addScalar(scalar: number): this {\n        this.r = Math.min(1, this.r + scalar);\n        this.g = Math.min(1, this.g + scalar);\n        this.b = Math.min(1, this.b + scalar);\n        return this;\n    }\n\n    public sub(color: Color): this {\n        this.r = Math.max(0, this.r - color.r);\n        this.g = Math.max(0, this.g - color.g);\n        this.b = Math.max(0, this.b - color.b);\n        return this;\n    }\n\n    public subScalar(scalar: number): this {\n        this.r = Math.min(1, this.r - scalar);\n        this.g = Math.min(1, this.g - scalar);\n        this.b = Math.min(1, this.b - scalar);\n        return this;\n    }\n\n    public multiply(color: Color): this {\n        this.r *= color.r;\n        this.g *= color.g;\n        this.b *= color.b;\n        return this;\n    }\n\n    public multiplyScalar(scalar: number): this {\n        this.r = Math.min(1, this.r * scalar);\n        this.g = Math.min(1, this.g * scalar);\n        this.b = Math.min(1, this.b * scalar);\n        return this;\n    }\n\n    public lerp(color: Color, alpha: number): this {\n        this.r += (color.r - this.r) * alpha;\n        this.g += (color.g - this.g) * alpha;\n        this.b += (color.b - this.b) * alpha;\n        return this;\n    }\n\n    public equals(c: Color): boolean {\n        return c.r === this.r && c.g === this.g && c.b === this.b;\n    }\n\n    public clone(): Color {\n        return new (this.constructor as new () => Color)().copy(this);\n    }\n}\n","import { MathUtil } from \"./Math\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Quaternion } from \"./Quaternion\";\n\nexport enum EulerOrder {\n    XYZ,\n    YZX,\n    ZXY,\n    XZY,\n    YXZ,\n    ZYX,\n}\n\n/**\n * TODO: setFromVector3\n */\nexport class Euler {\n    public static DefaultOrder: EulerOrder = EulerOrder.XYZ;\n\n    protected _order: EulerOrder = Euler.DefaultOrder;\n    protected _x: number;\n    protected _y: number;\n    protected _z: number;\n\n    protected onChangeCallback: (arg1?: any, ...arg2: any[]) => any = function() {};\n    public onChange(callback: (arg1?: any, ...arg2: any[]) => any): this {\n        this.onChangeCallback = callback;\n        return this;\n    }\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    set x(x: number) {\n        this._x = x;\n        this.onChangeCallback();\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set y(y: number) {\n        this._y = y;\n        this.onChangeCallback();\n    }\n\n    get z() {\n        return this._z;\n    }\n\n    set z(z: number) {\n        this._z = z;\n        this.onChangeCallback();\n    }\n\n    get order(): EulerOrder {\n        return this._order;\n    }\n\n    set order(_order: EulerOrder) {\n        this._order = _order;\n        this.onChangeCallback();\n    }\n\n    public set(x: number, y: number, z: number, order: EulerOrder): this {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._order = order;\n        this.onChangeCallback();\n        return this;\n    }\n\n    public copy(euler: Euler): this {\n        this.set(euler.x, euler.y, euler.z, euler.order);\n        this.onChangeCallback();\n        return this;\n    }\n\n    /**\n     * assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n     * @param m\n     * @param order\n     * @returns {Euler}\n     */\n    public setFromRotationMatrix(m: Matrix4, order: EulerOrder = this.order, update?: boolean): this {\n        const clamp: (value: number, min: number, max: number) => number = MathUtil.clamp;\n        const te: number[] = m.elements;\n        const m11: number = te[0],\n            m12: number = te[4],\n            m13: number = te[8];\n        const m21: number = te[1],\n            m22: number = te[5],\n            m23: number = te[9];\n        const m31: number = te[2],\n            m32: number = te[6],\n            m33: number = te[10];\n\n        if (order === EulerOrder.XYZ) {\n            this._y = Math.asin(clamp(m13, -1, 1));\n            if (Math.abs(m13) < 0.99999) {\n                this._x = Math.atan2(-m23, m33);\n                this._z = Math.atan2(-m12, m11);\n            } else {\n                this._x = Math.atan2(m32, m22);\n                this._z = 0;\n            }\n        } else if (order === EulerOrder.YXZ) {\n            this._x = Math.asin(-clamp(m23, -1, 1));\n            if (Math.abs(m23) < 0.99999) {\n                this._y = Math.atan2(m13, m33);\n                this._z = Math.atan2(m21, m22);\n            } else {\n                this._y = Math.atan2(-m31, m11);\n                this._z = 0;\n            }\n        } else if (order === EulerOrder.ZXY) {\n            this._x = Math.asin(clamp(m32, -1, 1));\n            if (Math.abs(m32) < 0.99999) {\n                this._y = Math.atan2(-m31, m33);\n                this._z = Math.atan2(-m12, m22);\n            } else {\n                this._y = 0;\n                this._z = Math.atan2(m21, m11);\n            }\n        } else if (order === EulerOrder.ZYX) {\n            this._y = Math.asin(-clamp(m31, -1, 1));\n            if (Math.abs(m31) < 0.99999) {\n                this._x = Math.atan2(m32, m33);\n                this._z = Math.atan2(m21, m11);\n            } else {\n                this._x = 0;\n                this._z = Math.atan2(-m12, m22);\n            }\n        } else if (order === EulerOrder.YZX) {\n            this._z = Math.asin(clamp(m21, -1, 1));\n            if (Math.abs(m21) < 0.99999) {\n                this._x = Math.atan2(-m23, m22);\n                this._y = Math.atan2(-m31, m11);\n            } else {\n                this._x = 0;\n                this._y = Math.atan2(m13, m33);\n            }\n        } else if (order === EulerOrder.XZY) {\n            this._z = Math.asin(-clamp(m12, -1, 1));\n            if (Math.abs(m12) < 0.99999) {\n                this._x = Math.atan2(m32, m22);\n                this._y = Math.atan2(m13, m11);\n            } else {\n                this._x = Math.atan2(-m23, m33);\n                this._y = 0;\n            }\n        }\n        this.order = order;\n        if (update !== false) this.onChangeCallback();\n        return this;\n    }\n\n    public setFromQuaternion(q: Quaternion, order: EulerOrder, update?: boolean): this {\n        const matrix: Matrix4 = new Matrix4();\n        matrix.makeRotationFromQuaternion(q);\n        return this.setFromRotationMatrix(matrix, order, update);\n    }\n\n    /**\n     * this discards revolution information -bhouston\n     * @param newOrder\n     * @returns {Euler}\n     */\n    public reorder(newOrder: EulerOrder): this {\n        const q: Quaternion = new Quaternion();\n        q.setFromEuler(this);\n        return this.setFromQuaternion(q, newOrder);\n    }\n\n    public equals(euler: Euler): boolean {\n        return euler.x === this.x && euler.y === this.y && euler.z === this.z && euler.order === this.order;\n    }\n\n    public fromArray(array: [number, number, number] | [number, number, number, EulerOrder]): this {\n        this._x = array[0];\n        this._y = array[1];\n        this._z = array[2];\n        this._order = array[3] || this.order;\n        this.onChangeCallback();\n        return this;\n    }\n\n    public toArray(array: any[] = [], offset: number = 0): any[] {\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        array[offset + 2] = this.z;\n        array[offset + 3] = this.order;\n        return array;\n    }\n\n    public clone(): Euler {\n        return new (this.constructor as new () => Euler)().copy(this);\n    }\n}\n","import { Plane } from \"./Plane\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Sphere } from \"./Sphere\";\nimport { ObjectWithGeometry, Box3 } from \"./Box3\";\nimport { Geometry } from \"../core/Geometry\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Vector3 } from \"./Vector3\";\nimport { Sprite } from \"../objects/Sprite\";\n\nexport class Frustum {\n    public planes: [Plane, Plane, Plane, Plane, Plane, Plane];\n\n    constructor(\n        p0: Plane = new Plane(),\n        p1: Plane = new Plane(),\n        p2: Plane = new Plane(),\n        p3: Plane = new Plane(),\n        p4: Plane = new Plane(),\n        p5: Plane = new Plane(),\n    ) {\n        this.planes = [p0, p1, p2, p3, p4, p5];\n    }\n\n    public set(p0: Plane, p1: Plane, p2: Plane, p3: Plane, p4: Plane, p5: Plane): this {\n        const planes: Plane[] = this.planes;\n        planes[0].copy(p0);\n        planes[1].copy(p1);\n        planes[2].copy(p2);\n        planes[3].copy(p3);\n        planes[4].copy(p4);\n        planes[5].copy(p5);\n        return this;\n    }\n\n    public copy(frustum: Frustum): this {\n        const planes: Plane[] = this.planes;\n        for (let i: number = 0; i < 6; i++) {\n            planes[i].copy(frustum.planes[i]);\n        }\n        return this;\n    }\n\n    public clone(): Frustum {\n        return new (this.constructor as new () => Frustum)().copy(this);\n    }\n\n    public setFromMatrix(m: Matrix4): this {\n        const planes: Plane[] = this.planes;\n        const me: number[] = m.elements;\n        const me0: number = me[0],\n            me1: number = me[1],\n            me2: number = me[2],\n            me3: number = me[3];\n        const me4: number = me[4],\n            me5: number = me[5],\n            me6: number = me[6],\n            me7: number = me[7];\n        const me8: number = me[8],\n            me9: number = me[9],\n            me10: number = me[10],\n            me11: number = me[11];\n        const me12: number = me[12],\n            me13: number = me[13],\n            me14: number = me[14],\n            me15: number = me[15];\n        const setPlane = (plane: Plane, x: number, y: number, z: number, w: number) => {\n            plane.normal.set(x, y, z);\n            plane.constant = w;\n            plane.normalize();\n        };\n        setPlane(planes[0], me3 - me0, me7 - me4, me11 - me8, me15 - me12);\n        setPlane(planes[1], me3 + me0, me7 + me4, me11 + me8, me15 + me12);\n        setPlane(planes[2], me3 + me1, me7 + me5, me11 + me9, me15 + me13);\n        setPlane(planes[3], me3 - me1, me7 - me5, me11 - me9, me15 - me13);\n        setPlane(planes[4], me3 - me2, me7 - me6, me11 - me10, me15 - me14);\n        setPlane(planes[5], me3 + me2, me7 + me6, me11 + me10, me15 + me14);\n        return this;\n    }\n\n    public intersectsObject(object: ObjectWithGeometry): boolean {\n        const geometry: Geometry | BufferGeometry = object.geometry;\n        if (geometry.boundingSphere === null) {\n            geometry.computeBoundingSphere();\n        }\n        const sphere = new Sphere().copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n        return this.intersectsSphere(sphere);\n    }\n\n    public intersectsSprite(sprite: Sprite) {\n        const sphere: Sphere = new Sphere();\n        sphere.center.set(0, 0, 0);\n        sphere.radius = 0.7071067811865476;\n        sphere.applyMatrix4(sprite.matrixWorld);\n        return this.intersectsSphere(sphere);\n    }\n\n    public intersectsSphere(sphere: Sphere): boolean {\n        const planes: Plane[] = this.planes;\n        const center: Vector3 = sphere.center;\n        const negRadius: number = -sphere.radius;\n        for (let i: number = 0; i < 6; i++) {\n            const distance: number = planes[i].distanceToPoint(center);\n            if (distance < negRadius) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public intersectsBox(box: Box3): boolean {\n        const p1: Vector3 = new Vector3(),\n            p2: Vector3 = new Vector3();\n        const planes: Plane[] = this.planes;\n\n        for (let i: number = 0; i < 6; i++) {\n            const plane: Plane = planes[i];\n            p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n            p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n            p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n            p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n            p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n            p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n            const d1: number = plane.distanceToPoint(p1);\n            const d2: number = plane.distanceToPoint(p2);\n            // if both outside plane, no intersection\n            if (d1 < 0 && d2 < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public containsPoint(point: Vector3): boolean {\n        const planes: Plane[] = this.planes;\n        for (let i: number = 0; i < 6; i++) {\n            if (planes[i].distanceToPoint(point) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","import { MathUtil } from \"./Math\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Vector3 } from \"./Vector3\";\n\nexport class Line3 {\n    public start: Vector3 = new Vector3();\n    public end: Vector3 = new Vector3();\n\n    constructor(start: Vector3 = new Vector3(), end: Vector3 = new Vector3()) {\n        this.start = start;\n        this.end = end;\n    }\n\n    public set(start: Vector3, end: Vector3): this {\n        this.start.copy(start);\n        this.end.copy(end);\n        return this;\n    }\n\n    public clone(): Line3 {\n        return new (this.constructor as new () => Line3)().copy(this);\n    }\n\n    public copy(line: Line3): this {\n        this.start.copy(line.start);\n        this.end.copy(line.end);\n        return this;\n    }\n\n    public getCenter(): Vector3 {\n        return new Vector3()\n            .copy(this.start)\n            .add(this.end)\n            .multiplyScalar(0.5);\n    }\n\n    public delta(): Vector3 {\n        return new Vector3().copy(this.end).sub(this.start);\n    }\n\n    public distanceSquared(): number {\n        return this.start.distanceToSquared(this.end);\n    }\n\n    public distance(): number {\n        return this.start.distanceTo(this.end);\n    }\n\n    public at(t: number): Vector3 {\n        return this.delta()\n            .multiplyScalar(t)\n            .add(this.start);\n    }\n\n    public closestPointToPointParameter(point: Vector3, clampToLine: boolean = false): number {\n        const startP = new Vector3();\n        const startEnd = new Vector3();\n        startP.copy(point).sub(this.start);\n        startEnd.copy(this.end).sub(this.start);\n        const startEnd2 = startEnd.dot(startEnd);\n        const startEndStartP = startEnd.dot(startP);\n        let t: number = startEndStartP / startEnd2;\n        if (clampToLine) {\n            t = MathUtil.clamp(t, 0, 1);\n        }\n        return t;\n    }\n\n    public closestPointToPoint(point: Vector3, clampToLine: boolean = false): Vector3 {\n        const t = this.closestPointToPointParameter(point, clampToLine);\n        return this.delta()\n            .multiplyScalar(t)\n            .add(this.start);\n    }\n\n    public applyMatrix4(matrix: Matrix4): this {\n        this.start.applyMatrix4(matrix);\n        this.end.applyMatrix4(matrix);\n        return this;\n    }\n\n    public equals(line: Line3): boolean {\n        return line.start.equals(this.start) && line.end.equals(this.end);\n    }\n}\n","const lut: string[] = [];\nfor (let i: number = 0; i < 256; i++) {\n    lut[i] = (i < 16 ? \"0\" : \"\") + i.toString(16).toUpperCase();\n}\n\n/**\n * Finished\n */\nexport class MathUtil {\n    /**\n     * 弧度/角度\n     * @type {number}\n     */\n    public static DEG2RAD: number = Math.PI / 180;\n\n    /**\n     * 角度/弧度\n     * @type {number}\n     */\n    public static RAD2DEG: number = 180 / Math.PI;\n\n    /**\n     * 产生一个UUID的算法，主要是遵循UUID的规范来产生字符串\n     * http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n     * @returns {string}\n     */\n    public static generateUUID(): string {\n        const d0 = (Math.random() * 0xffffffff) | 0;\n        const d1 = (Math.random() * 0xffffffff) | 0;\n        const d2 = (Math.random() * 0xffffffff) | 0;\n        const d3 = (Math.random() * 0xffffffff) | 0;\n        return (\n            lut[d0 & 0xff] +\n            lut[(d0 >> 8) & 0xff] +\n            lut[(d0 >> 16) & 0xff] +\n            lut[(d0 >> 24) & 0xff] +\n            \"-\" +\n            lut[d1 & 0xff] +\n            lut[(d1 >> 8) & 0xff] +\n            \"-\" +\n            lut[((d1 >> 16) & 0x0f) | 0x40] +\n            lut[(d1 >> 24) & 0xff] +\n            \"-\" +\n            lut[(d2 & 0x3f) | 0x80] +\n            lut[(d2 >> 8) & 0xff] +\n            \"-\" +\n            lut[(d2 >> 16) & 0xff] +\n            lut[(d2 >> 24) & 0xff] +\n            lut[d3 & 0xff] +\n            lut[(d3 >> 8) & 0xff] +\n            lut[(d3 >> 16) & 0xff] +\n            lut[(d3 >> 24) & 0xff]\n        );\n    }\n\n    /**\n     * 在一定范围内截断value的数值\n     * @param value\n     * @param min\n     * @param max\n     * @returns {number}\n     */\n    public static clamp(value: number, min: number, max: number): number {\n        return Math.max(min, Math.min(max, value));\n    }\n\n    /**\n     * 计算欧几里得取模算法\n     * 详见 https://en.wikipedia.org/wiki/Modulo_operation\n     * 这里还需要+m的原因是考虑负数取模的原因\n     * @param n\n     * @param m\n     * @returns {number}\n     */\n    public static euclideanModulo(n: number, m: number): number {\n        return (n % m + m) % m;\n    }\n\n    /**\n     * 将x在a范围内的值映射到b范围中\n     * @param x\n     * @param a1\n     * @param a2\n     * @param b1\n     * @param b2\n     * @returns {number}\n     */\n    public static mapLinear(x: number, a1: number, a2: number, b1: number, b2: number): number {\n        return b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n    }\n\n    /**\n     * 线性插值\n     * https://en.wikipedia.org/wiki/Linear_interpolation\n     * @param x\n     * @param y\n     * @param t\n     * @returns {number}\n     */\n    public static lerp(x: number, y: number, t: number): number {\n        return (1 - t) * x + t * y;\n    }\n\n    /**\n     * 这个插值过程是将点原本的线性插值的点映射到f(x) = 3 * x^2 - 2 * x^3上，\n     * f\"(x) = 6 * x - 6 * x^2 x \\in [0, 1] \\geq 0\n     * 所以f(x)在[0, 1]上单调递增，\n     * 观察其二阶导可知f(x)在[0, 0.5]和[0.5 , 1]上分别为下凸和上凸函数，\n     * 所以其形状类似于电梯\n     * http://en.wikipedia.org/wiki/Smoothstep\n     * @param x\n     * @param min\n     * @param max\n     * @returns {number}\n     */\n    public static smoothstep(x: number, min: number, max: number): number {\n        if (x <= min) return 0;\n        if (x >= max) return 1;\n        x = (x - min) / (max - min);\n        return x * x * (3 - 2 * x);\n    }\n\n    /**\n     * 类似与上面的函数，计算量更大\n     * @param x\n     * @param min\n     * @param max\n     * @returns {number}\n     */\n    public static smootherstep(x: number, min: number, max: number): number {\n        if (x <= min) return 0;\n        if (x >= max) return 1;\n        x = (x - min) / (max - min);\n        return x * x * x * (x * (x * 6 - 15) + 10);\n    }\n\n    /**\n     * 随机整数\n     * @param low\n     * @param high\n     * @returns {number}\n     */\n    public static randInt(low: number, high: number): number {\n        return low + Math.floor(Math.random() * (high - low + 1));\n    }\n\n    /**\n     * 随机浮点数\n     * @param low\n     * @param high\n     * @returns {number}\n     */\n    public static randFloat(low: number, high: number): number {\n        return low + Math.random() * (high - low);\n    }\n\n    /**\n     * [-range/2, range/2]的随机浮点数\n     * @param range\n     * @returns {number}\n     */\n    public static randFloatSpread(range: number): number {\n        return range * (0.5 - Math.random());\n    }\n\n    /***************************** 下面的太简单了不说明了 *******************************/\n\n    public static degToRad(degrees: number): number {\n        return degrees * MathUtil.DEG2RAD;\n    }\n\n    public static radToDeg(radians: number): number {\n        return radians * MathUtil.RAD2DEG;\n    }\n\n    /**\n     * 这里用到了二进制的技巧\n     * @param value\n     * @returns {boolean}\n     */\n    public static isPowerOfTwo(value: number): boolean {\n        return (value & (value - 1)) === 0 && value !== 0;\n    }\n\n    public static ceilPowerOfTwo(value: number): number {\n        return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n    }\n\n    public static floorPowerOfTwo(value: number): number {\n        return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n    }\n}\n","import { TypedArray } from \"../core/BufferAttribute\";\n\nexport class Matrix2 {\n    public elements: number[] = [1, 0, 0, 1];\n\n    public set(n11: number, n12: number, n21: number, n22: number): this {\n        const te: number[] = this.elements;\n        te[0] = n11;\n        te[1] = n21;\n        te[3] = n12;\n        te[4] = n22;\n        return this;\n    }\n\n    public identity(): this {\n        return this.set(1, 0, 0, 1);\n    }\n\n    public copy(mat2: Matrix2): this {\n        const te: number[] = this.elements;\n        const me: number[] = mat2.elements;\n\n        te[0] = me[0];\n        te[1] = me[1];\n        te[2] = me[2];\n        te[3] = me[3];\n        return this;\n    }\n\n    public setFromMatrix4(mat2: Matrix2): this {\n        const me: number[] = mat2.elements;\n        return this.set(me[0], me[2], me[1], me[3]);\n    }\n\n    public multiply(mat2: Matrix2): this {\n        return this.multiplyMatrices(this, mat2);\n    }\n\n    public premultiply(m: Matrix2): this {\n        return this.multiplyMatrices(m, this);\n    }\n\n    public multiplyMatrices(a: Matrix2, b: Matrix2): this {\n        const ae: number[] = a.elements;\n        const be: number[] = b.elements;\n        const te: number[] = this.elements;\n\n        const a11: number = ae[0],\n            a12: number = ae[2];\n        const a21: number = ae[1],\n            a22: number = ae[3];\n\n        const b11: number = be[0],\n            b12: number = be[2];\n        const b21: number = be[1],\n            b22: number = be[3];\n\n        te[0] = a11 * b11 + a12 * b21;\n        te[2] = a11 * b12 + a12 * b22;\n\n        te[1] = a21 * b11 + a22 * b21;\n        te[3] = a21 * b12 + a22 * b22;\n\n        return this;\n    }\n\n    public multiplyScalar(s: number): this {\n        const te: number[] = this.elements;\n        te[0] *= s;\n        te[2] *= s;\n        te[1] *= s;\n        te[3] *= s;\n        return this;\n    }\n\n    public determinant(): number {\n        const te: number[] = this.elements;\n        const a: number = te[0],\n            b: number = te[1],\n            c: number = te[2],\n            d: number = te[3];\n        return a * d - b * c;\n    }\n\n    // getInverse\n\n    public transpose(): this {\n        let tmp;\n        const m: number[] = this.elements;\n        tmp = m[1];\n        m[1] = m[2];\n        m[2] = tmp;\n        return this;\n    }\n\n    public equals(matrix: Matrix2): boolean {\n        const te: number[] = this.elements;\n        const me: number[] = matrix.elements;\n        for (let i: number = 0; i < 4; i++) {\n            if (te[i] !== me[i]) return false;\n        }\n        return true;\n    }\n\n    public fromArray(array: number[] | TypedArray, offset: number = 0): this {\n        for (let i: number = 0; i < 4; i++) {\n            this.elements[i] = array[i + offset];\n        }\n        return this;\n    }\n\n    public toArray(array: number[] | TypedArray = [], offset: number = 0): number[] | TypedArray {\n        const te: number[] = this.elements;\n\n        array[offset] = te[0];\n        array[offset + 1] = te[1];\n        array[offset + 2] = te[2];\n\n        array[offset + 3] = te[3];\n\n        return array;\n    }\n\n    public clone(): Matrix2 {\n        return new (this.constructor as new () => Matrix2)().copy(this);\n    }\n}\n","import { TypedArray } from \"../core/BufferAttribute\";\nimport { Matrix4 } from \"./Matrix4\";\n\nexport class Matrix3 {\n    public elements: number[] = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n    public set(\n        n11: number,\n        n12: number,\n        n13: number,\n        n21: number,\n        n22: number,\n        n23: number,\n        n31: number,\n        n32: number,\n        n33: number,\n    ): this {\n        const te: number[] = this.elements;\n        te[0] = n11;\n        te[1] = n21;\n        te[2] = n31;\n        te[3] = n12;\n        te[4] = n22;\n        te[5] = n32;\n        te[6] = n13;\n        te[7] = n23;\n        te[8] = n33;\n        return this;\n    }\n\n    public identity(): this {\n        return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n    }\n\n    public copy(mat3: Matrix3): this {\n        const te: number[] = this.elements;\n        const me: number[] = mat3.elements;\n\n        te[0] = me[0];\n        te[1] = me[1];\n        te[2] = me[2];\n        te[3] = me[3];\n        te[4] = me[4];\n        te[5] = me[5];\n        te[6] = me[6];\n        te[7] = me[7];\n        te[8] = me[8];\n\n        return this;\n    }\n\n    public setFromMatrix4(mat4: Matrix4): this {\n        const me: number[] = mat4.elements;\n        return this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n    }\n\n    public multiply(mat3: Matrix3): this {\n        return this.multiplyMatrices(this, mat3);\n    }\n\n    public premultiply(m: Matrix3): this {\n        return this.multiplyMatrices(m, this);\n    }\n\n    public multiplyMatrices(a: Matrix3, b: Matrix3): this {\n        const ae: number[] = a.elements;\n        const be: number[] = b.elements;\n        const te: number[] = this.elements;\n\n        const a11: number = ae[0],\n            a12: number = ae[3],\n            a13: number = ae[6];\n        const a21: number = ae[1],\n            a22: number = ae[4],\n            a23: number = ae[7];\n        const a31: number = ae[2],\n            a32: number = ae[5],\n            a33: number = ae[8];\n\n        const b11: number = be[0],\n            b12: number = be[3],\n            b13: number = be[6];\n        const b21: number = be[1],\n            b22: number = be[4],\n            b23: number = be[7];\n        const b31: number = be[2],\n            b32: number = be[5],\n            b33: number = be[8];\n\n        te[0] = a11 * b11 + a12 * b21 + a13 * b31;\n        te[3] = a11 * b12 + a12 * b22 + a13 * b32;\n        te[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\n        te[1] = a21 * b11 + a22 * b21 + a23 * b31;\n        te[4] = a21 * b12 + a22 * b22 + a23 * b32;\n        te[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\n        te[2] = a31 * b11 + a32 * b21 + a33 * b31;\n        te[5] = a31 * b12 + a32 * b22 + a33 * b32;\n        te[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\n        return this;\n    }\n\n    public multiplyScalar(s: number): this {\n        const te: number[] = this.elements;\n        te[0] *= s;\n        te[3] *= s;\n        te[6] *= s;\n        te[1] *= s;\n        te[4] *= s;\n        te[7] *= s;\n        te[2] *= s;\n        te[5] *= s;\n        te[8] *= s;\n        return this;\n    }\n\n    public determinant(): number {\n        const te: number[] = this.elements;\n        const a: number = te[0],\n            b: number = te[1],\n            c: number = te[2],\n            d: number = te[3],\n            e: number = te[4],\n            f: number = te[5],\n            g: number = te[6],\n            h: number = te[7],\n            i: number = te[8];\n        return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n    }\n\n    public getInverse(matrix: Matrix3, throwOnDegenerate: boolean = false): this {\n        const me: number[] = matrix.elements,\n            te: number[] = this.elements,\n            n11: number = me[0],\n            n21: number = me[1],\n            n31: number = me[2],\n            n12: number = me[3],\n            n22: number = me[4],\n            n32: number = me[5],\n            n13: number = me[6],\n            n23: number = me[7],\n            n33: number = me[8],\n            t11: number = n33 * n22 - n32 * n23,\n            t12: number = n32 * n13 - n33 * n12,\n            t13: number = n23 * n12 - n22 * n13,\n            det: number = n11 * t11 + n21 * t12 + n31 * t13;\n\n        if (det === 0) {\n            const msg = `THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0`;\n            if (throwOnDegenerate === true) {\n                throw new Error(msg);\n            } else {\n                console.warn(msg);\n            }\n            return this.identity();\n        }\n\n        const detInv: number = 1 / det;\n\n        te[0] = t11 * detInv;\n        te[1] = (n31 * n23 - n33 * n21) * detInv;\n        te[2] = (n32 * n21 - n31 * n22) * detInv;\n\n        te[3] = t12 * detInv;\n        te[4] = (n33 * n11 - n31 * n13) * detInv;\n        te[5] = (n31 * n12 - n32 * n11) * detInv;\n\n        te[6] = t13 * detInv;\n        te[7] = (n21 * n13 - n23 * n11) * detInv;\n        te[8] = (n22 * n11 - n21 * n12) * detInv;\n\n        return this;\n    }\n\n    public transpose(): this {\n        let tmp;\n        const m: number[] = this.elements;\n\n        tmp = m[1];\n        m[1] = m[3];\n        m[3] = tmp;\n        tmp = m[2];\n        m[2] = m[6];\n        m[6] = tmp;\n        tmp = m[5];\n        m[5] = m[7];\n        m[7] = tmp;\n        return this;\n    }\n\n    public getNormalMatrix(matrix4: Matrix4): this {\n        return this.setFromMatrix4(matrix4)\n            .getInverse(this)\n            .transpose();\n    }\n\n    public setUvTransform(\n        tx: number,\n        ty: number,\n        sx: number,\n        sy: number,\n        rotation: number,\n        cx: number,\n        cy: number,\n    ): this {\n        const c = Math.cos(rotation);\n        const s = Math.sin(rotation);\n        return this.set(\n            sx * c,\n            sx * s,\n            -sx * (c * cx + s * cy) + cx + tx,\n            -sy * s,\n            sy * c,\n            -sy * (-s * cx + c * cy) + cy + ty,\n            0,\n            0,\n            1,\n        );\n    }\n\n    public scale(sx: number, sy: number): this {\n        const te: number[] = this.elements;\n        te[0] *= sx;\n        te[3] *= sx;\n        te[6] *= sx;\n        te[1] *= sy;\n        te[4] *= sy;\n        te[7] *= sy;\n        return this;\n    }\n\n    public rotate(theta: number): this {\n        const c: number = Math.cos(theta);\n        const s: number = Math.sin(theta);\n\n        const te: number[] = this.elements;\n\n        const a11: number = te[0],\n            a12: number = te[3],\n            a13: number = te[6];\n        const a21: number = te[1],\n            a22: number = te[4],\n            a23: number = te[7];\n\n        te[0] = c * a11 + s * a21;\n        te[3] = c * a12 + s * a22;\n        te[6] = c * a13 + s * a23;\n\n        te[1] = -s * a11 + c * a21;\n        te[4] = -s * a12 + c * a22;\n        te[7] = -s * a13 + c * a23;\n\n        return this;\n    }\n\n    public translate(tx: number, ty: number): this {\n        const te: number[] = this.elements;\n        te[0] += tx * te[2];\n        te[3] += tx * te[5];\n        te[6] += tx * te[8];\n        te[1] += ty * te[2];\n        te[4] += ty * te[5];\n        te[7] += ty * te[8];\n        return this;\n    }\n\n    public equals(matrix: Matrix3): boolean {\n        const te: number[] = this.elements;\n        const me: number[] = matrix.elements;\n        for (let i: number = 0; i < 9; i++) {\n            if (te[i] !== me[i]) return false;\n        }\n        return true;\n    }\n\n    public fromArray(array: number[] | TypedArray, offset: number = 0): this {\n        for (let i: number = 0; i < 9; i++) {\n            this.elements[i] = array[i + offset];\n        }\n        return this;\n    }\n\n    public toArray(array: number[] | TypedArray = [], offset: number = 0): number[] | TypedArray {\n        const te: number[] = this.elements;\n\n        array[offset] = te[0];\n        array[offset + 1] = te[1];\n        array[offset + 2] = te[2];\n\n        array[offset + 3] = te[3];\n        array[offset + 4] = te[4];\n        array[offset + 5] = te[5];\n\n        array[offset + 6] = te[6];\n        array[offset + 7] = te[7];\n        array[offset + 8] = te[8];\n\n        return array;\n    }\n\n    public clone(): Matrix3 {\n        return new (this.constructor as new () => Matrix3)().copy(this);\n    }\n}\n","import { TypedArray } from \"../core/BufferAttribute\";\nimport { Euler, EulerOrder } from \"./Euler\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * TODO: applyToBufferAttribute\n */\nexport class Matrix4 {\n    public elements: number[] = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n    public copy(mat4: Matrix4): this {\n        const te: number[] = this.elements;\n        const me: number[] = mat4.elements;\n\n        te[0] = me[0];\n        te[1] = me[1];\n        te[2] = me[2];\n        te[3] = me[3];\n        te[4] = me[4];\n        te[5] = me[5];\n        te[6] = me[6];\n        te[7] = me[7];\n        te[8] = me[8];\n        te[9] = me[9];\n        te[10] = me[10];\n        te[11] = me[11];\n        te[12] = me[12];\n        te[13] = me[13];\n        te[14] = me[14];\n        te[15] = me[15];\n\n        return this;\n    }\n\n    public set(\n        n11: number,\n        n12: number,\n        n13: number,\n        n14: number,\n        n21: number,\n        n22: number,\n        n23: number,\n        n24: number,\n        n31: number,\n        n32: number,\n        n33: number,\n        n34: number,\n        n41: number,\n        n42: number,\n        n43: number,\n        n44: number,\n    ): this {\n        const te = this.elements;\n        te[0] = n11;\n        te[4] = n12;\n        te[8] = n13;\n        te[12] = n14;\n        te[1] = n21;\n        te[5] = n22;\n        te[9] = n23;\n        te[13] = n24;\n        te[2] = n31;\n        te[6] = n32;\n        te[10] = n33;\n        te[14] = n34;\n        te[3] = n41;\n        te[7] = n42;\n        te[11] = n43;\n        te[15] = n44;\n        return this;\n    }\n\n    public identity(): this {\n        return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n    }\n\n    public copyPosition(m: Matrix4): this {\n        const te: number[] = this.elements,\n            me: number[] = m.elements;\n        te[12] = me[12];\n        te[13] = me[13];\n        te[14] = me[14];\n        return this;\n    }\n\n    public extractBasis(xAxis: Vector3, yAxis: Vector3, zAxis: Vector3): this {\n        xAxis.fromArray(this.elements, 0);\n        yAxis.fromArray(this.elements, 4);\n        zAxis.fromArray(this.elements, 8);\n        return this;\n    }\n\n    public makeBasis(xAxis: Vector3, yAxis: Vector3, zAxis: Vector3): this {\n        return this.set(\n            xAxis.x,\n            yAxis.x,\n            zAxis.x,\n            0,\n            xAxis.y,\n            yAxis.y,\n            zAxis.y,\n            0,\n            xAxis.z,\n            yAxis.z,\n            zAxis.z,\n            0,\n            0,\n            0,\n            0,\n            1,\n        );\n    }\n\n    public extractRotation(mat4: Matrix4): this {\n        const vec: Vector3 = new Vector3();\n        const te: number[] = this.elements;\n        const me: number[] = mat4.elements;\n        const scaleX: number = 1 / vec.fromArray(mat4.elements, 0).length();\n        const scaleY: number = 1 / vec.fromArray(mat4.elements, 4).length();\n        const scaleZ: number = 1 / vec.fromArray(mat4.elements, 8).length();\n        te[0] = me[0] * scaleX;\n        te[1] = me[1] * scaleX;\n        te[2] = me[2] * scaleX;\n        te[4] = me[4] * scaleY;\n        te[5] = me[5] * scaleY;\n        te[6] = me[6] * scaleY;\n        te[8] = me[8] * scaleZ;\n        te[9] = me[9] * scaleZ;\n        te[10] = me[10] * scaleZ;\n        return this;\n    }\n\n    public makeRotationFromEuler(euler: Euler): this {\n        const te: number[] = this.elements;\n        const x: number = euler.x,\n            y: number = euler.y,\n            z: number = euler.z;\n        const a: number = Math.cos(x),\n            b: number = Math.sin(x);\n        const c: number = Math.cos(y),\n            d: number = Math.sin(y);\n        const e: number = Math.cos(z),\n            f: number = Math.sin(z);\n\n        if (euler.order === EulerOrder.XYZ) {\n            const ae = a * e,\n                af = a * f,\n                be = b * e,\n                bf = b * f;\n            te[0] = c * e;\n            te[4] = -c * f;\n            te[8] = d;\n            te[1] = af + be * d;\n            te[5] = ae - bf * d;\n            te[9] = -b * c;\n            te[2] = bf - ae * d;\n            te[6] = be + af * d;\n            te[10] = a * c;\n        } else if (euler.order === EulerOrder.YXZ) {\n            const ce = c * e,\n                cf = c * f,\n                de = d * e,\n                df = d * f;\n            te[0] = ce + df * b;\n            te[4] = de * b - cf;\n            te[8] = a * d;\n            te[1] = a * f;\n            te[5] = a * e;\n            te[9] = -b;\n            te[2] = cf * b - de;\n            te[6] = df + ce * b;\n            te[10] = a * c;\n        } else if (euler.order === EulerOrder.ZXY) {\n            const ce = c * e,\n                cf = c * f,\n                de = d * e,\n                df = d * f;\n            te[0] = ce - df * b;\n            te[4] = -a * f;\n            te[8] = de + cf * b;\n            te[1] = cf + de * b;\n            te[5] = a * e;\n            te[9] = df - ce * b;\n            te[2] = -a * d;\n            te[6] = b;\n            te[10] = a * c;\n        } else if (euler.order === EulerOrder.ZYX) {\n            const ae = a * e,\n                af = a * f,\n                be = b * e,\n                bf = b * f;\n            te[0] = c * e;\n            te[4] = be * d - af;\n            te[8] = ae * d + bf;\n            te[1] = c * f;\n            te[5] = bf * d + ae;\n            te[9] = af * d - be;\n            te[2] = -d;\n            te[6] = b * c;\n            te[10] = a * c;\n        } else if (euler.order === EulerOrder.YZX) {\n            const ac = a * c,\n                ad = a * d,\n                bc = b * c,\n                bd = b * d;\n            te[0] = c * e;\n            te[4] = bd - ac * f;\n            te[8] = bc * f + ad;\n            te[1] = f;\n            te[5] = a * e;\n            te[9] = -b * e;\n            te[2] = -d * e;\n            te[6] = ad * f + bc;\n            te[10] = ac - bd * f;\n        } else if (euler.order === EulerOrder.XZY) {\n            const ac = a * c,\n                ad = a * d,\n                bc = b * c,\n                bd = b * d;\n            te[0] = c * e;\n            te[4] = -f;\n            te[8] = d * e;\n            te[1] = ac * f + bd;\n            te[5] = a * e;\n            te[9] = ad * f - bc;\n            te[2] = bc * f - ad;\n            te[6] = b * e;\n            te[10] = bd * f + ac;\n        }\n\n        // last column\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = 0;\n\n        // bottom row\n        te[12] = 0;\n        te[13] = 0;\n        te[14] = 0;\n        te[15] = 1;\n        return this;\n    }\n\n    public makeRotationFromQuaternion(quaternion: Quaternion): this {\n        const te: number[] = this.elements;\n        const x: number = quaternion.x,\n            y: number = quaternion.y,\n            z: number = quaternion.z,\n            w: number = quaternion.w;\n        const x2: number = x + x,\n            y2: number = y + y,\n            z2: number = z + z;\n        const xx: number = x * x2,\n            xy: number = x * y2,\n            xz: number = x * z2;\n        const yy: number = y * y2,\n            yz: number = y * z2,\n            zz: number = z * z2;\n        const wx: number = w * x2,\n            wy: number = w * y2,\n            wz: number = w * z2;\n\n        te[0] = 1 - (yy + zz);\n        te[4] = xy - wz;\n        te[8] = xz + wy;\n\n        te[1] = xy + wz;\n        te[5] = 1 - (xx + zz);\n        te[9] = yz - wx;\n\n        te[2] = xz - wy;\n        te[6] = yz + wx;\n        te[10] = 1 - (xx + yy);\n\n        // last column\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = 0;\n\n        // bottom row\n        te[12] = 0;\n        te[13] = 0;\n        te[14] = 0;\n        te[15] = 1;\n\n        return this;\n    }\n\n    public lookAt(eye: Vector3, target: Vector3, up: Vector3): this {\n        const x: Vector3 = new Vector3();\n        const y: Vector3 = new Vector3();\n        const z: Vector3 = new Vector3();\n        const te: number[] = this.elements;\n        z.copy(eye).sub(target);\n        if (z.lengthSquared() === 0) {\n            // eye and target are in the same position\n            z.z = 1;\n        }\n        z.normalize();\n        x.copy(up).cross(z);\n\n        if (x.lengthSquared() === 0) {\n            // up and z are parallel\n            if (Math.abs(up.z) === 1) {\n                z.x += 0.0001;\n            } else {\n                z.z += 0.0001;\n            }\n            z.normalize();\n            x.copy(up).cross(z);\n        }\n\n        x.normalize();\n        y.copy(z).cross(x);\n\n        te[0] = x.x;\n        te[4] = y.x;\n        te[8] = z.x;\n        te[1] = x.y;\n        te[5] = y.y;\n        te[9] = z.y;\n        te[2] = x.z;\n        te[6] = y.z;\n        te[10] = z.z;\n\n        return this;\n    }\n\n    public multiply(mat: Matrix4): this {\n        return this.multiplyMatrices(this, mat);\n    }\n\n    public premultiply(mat: Matrix4): this {\n        return this.multiplyMatrices(mat, this);\n    }\n\n    public multiplyMatrices(matA: Matrix4, matB: Matrix4): this {\n        const ae: number[] = matA.elements;\n        const be: number[] = matB.elements;\n        const te: number[] = this.elements;\n\n        const a11: number = ae[0],\n            a12: number = ae[4],\n            a13: number = ae[8],\n            a14: number = ae[12];\n        const a21: number = ae[1],\n            a22: number = ae[5],\n            a23: number = ae[9],\n            a24: number = ae[13];\n        const a31: number = ae[2],\n            a32: number = ae[6],\n            a33: number = ae[10],\n            a34: number = ae[14];\n        const a41: number = ae[3],\n            a42: number = ae[7],\n            a43: number = ae[11],\n            a44: number = ae[15];\n\n        const b11: number = be[0],\n            b12: number = be[4],\n            b13: number = be[8],\n            b14: number = be[12];\n        const b21: number = be[1],\n            b22: number = be[5],\n            b23: number = be[9],\n            b24: number = be[13];\n        const b31: number = be[2],\n            b32: number = be[6],\n            b33: number = be[10],\n            b34: number = be[14];\n        const b41: number = be[3],\n            b42: number = be[7],\n            b43: number = be[11],\n            b44: number = be[15];\n\n        te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n        te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n        te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n        te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n        te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n        te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n        te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n        te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n        te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n        te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n        te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n        te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n        te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n        te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n        te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n        te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n        return this;\n    }\n\n    public multiplyScalar(s: number): this {\n        const te: number[] = this.elements;\n        te[0] *= s;\n        te[4] *= s;\n        te[8] *= s;\n        te[12] *= s;\n        te[1] *= s;\n        te[5] *= s;\n        te[9] *= s;\n        te[13] *= s;\n        te[2] *= s;\n        te[6] *= s;\n        te[10] *= s;\n        te[14] *= s;\n        te[3] *= s;\n        te[7] *= s;\n        te[11] *= s;\n        te[15] *= s;\n        return this;\n    }\n\n    /**\n     * http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n     * @returns {number}\n     */\n    public determinant(): number {\n        const te: number[] = this.elements;\n\n        const n11: number = te[0],\n            n12: number = te[4],\n            n13: number = te[8],\n            n14: number = te[12];\n        const n21: number = te[1],\n            n22: number = te[5],\n            n23: number = te[9],\n            n24: number = te[13];\n        const n31: number = te[2],\n            n32: number = te[6],\n            n33: number = te[10],\n            n34: number = te[14];\n        const n41: number = te[3],\n            n42: number = te[7],\n            n43: number = te[11],\n            n44: number = te[15];\n\n        return (\n            n41 *\n                (+n14 * n23 * n32 -\n                    n13 * n24 * n32 -\n                    n14 * n22 * n33 +\n                    n12 * n24 * n33 +\n                    n13 * n22 * n34 -\n                    n12 * n23 * n34) +\n            n42 *\n                (+n11 * n23 * n34 -\n                    n11 * n24 * n33 +\n                    n14 * n21 * n33 -\n                    n13 * n21 * n34 +\n                    n13 * n24 * n31 -\n                    n14 * n23 * n31) +\n            n43 *\n                (+n11 * n24 * n32 -\n                    n11 * n22 * n34 -\n                    n14 * n21 * n32 +\n                    n12 * n21 * n34 +\n                    n14 * n22 * n31 -\n                    n12 * n24 * n31) +\n            n44 *\n                (-n13 * n22 * n31 -\n                    n11 * n23 * n32 +\n                    n11 * n22 * n33 +\n                    n13 * n21 * n32 -\n                    n12 * n21 * n33 +\n                    n12 * n23 * n31)\n        );\n    }\n\n    public transpose(): this {\n        const te: number[] = this.elements;\n        let tmp: number;\n        tmp = te[1];\n        te[1] = te[4];\n        te[4] = tmp;\n        tmp = te[2];\n        te[2] = te[8];\n        te[8] = tmp;\n        tmp = te[6];\n        te[6] = te[9];\n        te[9] = tmp;\n        tmp = te[3];\n        te[3] = te[12];\n        te[12] = tmp;\n        tmp = te[7];\n        te[7] = te[13];\n        te[13] = tmp;\n        tmp = te[11];\n        te[11] = te[14];\n        te[14] = tmp;\n        return this;\n    }\n\n    public setPosition(v: Vector3): this {\n        const te: number[] = this.elements;\n        te[12] = v.x;\n        te[13] = v.y;\n        te[14] = v.z;\n        return this;\n    }\n\n    /**\n     * http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n     * @param m\n     * @param throwOnDegenerate\n     * @returns {Matrix4}\n     */\n    public getInverse(m: Matrix4, throwOnDegenerate: boolean = false): this {\n        const te: number[] = this.elements,\n            me: number[] = m.elements;\n        const n11: number = me[0],\n            n21: number = me[1],\n            n31: number = me[2],\n            n41: number = me[3],\n            n12: number = me[4],\n            n22: number = me[5],\n            n32: number = me[6],\n            n42: number = me[7],\n            n13: number = me[8],\n            n23: number = me[9],\n            n33: number = me[10],\n            n43: number = me[11],\n            n14: number = me[12],\n            n24: number = me[13],\n            n34: number = me[14],\n            n44: number = me[15],\n            t11: number =\n                n23 * n34 * n42 -\n                n24 * n33 * n42 +\n                n24 * n32 * n43 -\n                n22 * n34 * n43 -\n                n23 * n32 * n44 +\n                n22 * n33 * n44,\n            t12: number =\n                n14 * n33 * n42 -\n                n13 * n34 * n42 -\n                n14 * n32 * n43 +\n                n12 * n34 * n43 +\n                n13 * n32 * n44 -\n                n12 * n33 * n44,\n            t13: number =\n                n13 * n24 * n42 -\n                n14 * n23 * n42 +\n                n14 * n22 * n43 -\n                n12 * n24 * n43 -\n                n13 * n22 * n44 +\n                n12 * n23 * n44,\n            t14: number =\n                n14 * n23 * n32 -\n                n13 * n24 * n32 -\n                n14 * n22 * n33 +\n                n12 * n24 * n33 +\n                n13 * n22 * n34 -\n                n12 * n23 * n34;\n\n        const det: number = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n        if (det === 0) {\n            const msg = `THREE.Matrix4: .getInverse() can\"t invert matrix, determinant is 0`;\n            if (throwOnDegenerate === true) {\n                throw new Error(msg);\n            } else {\n                console.warn(msg);\n            }\n            return this.identity();\n        }\n\n        const detInv: number = 1 / det;\n\n        te[0] = t11 * detInv;\n        te[1] =\n            (n24 * n33 * n41 -\n                n23 * n34 * n41 -\n                n24 * n31 * n43 +\n                n21 * n34 * n43 +\n                n23 * n31 * n44 -\n                n21 * n33 * n44) *\n            detInv;\n        te[2] =\n            (n22 * n34 * n41 -\n                n24 * n32 * n41 +\n                n24 * n31 * n42 -\n                n21 * n34 * n42 -\n                n22 * n31 * n44 +\n                n21 * n32 * n44) *\n            detInv;\n        te[3] =\n            (n23 * n32 * n41 -\n                n22 * n33 * n41 -\n                n23 * n31 * n42 +\n                n21 * n33 * n42 +\n                n22 * n31 * n43 -\n                n21 * n32 * n43) *\n            detInv;\n\n        te[4] = t12 * detInv;\n        te[5] =\n            (n13 * n34 * n41 -\n                n14 * n33 * n41 +\n                n14 * n31 * n43 -\n                n11 * n34 * n43 -\n                n13 * n31 * n44 +\n                n11 * n33 * n44) *\n            detInv;\n        te[6] =\n            (n14 * n32 * n41 -\n                n12 * n34 * n41 -\n                n14 * n31 * n42 +\n                n11 * n34 * n42 +\n                n12 * n31 * n44 -\n                n11 * n32 * n44) *\n            detInv;\n        te[7] =\n            (n12 * n33 * n41 -\n                n13 * n32 * n41 +\n                n13 * n31 * n42 -\n                n11 * n33 * n42 -\n                n12 * n31 * n43 +\n                n11 * n32 * n43) *\n            detInv;\n\n        te[8] = t13 * detInv;\n        te[9] =\n            (n14 * n23 * n41 -\n                n13 * n24 * n41 -\n                n14 * n21 * n43 +\n                n11 * n24 * n43 +\n                n13 * n21 * n44 -\n                n11 * n23 * n44) *\n            detInv;\n        te[10] =\n            (n12 * n24 * n41 -\n                n14 * n22 * n41 +\n                n14 * n21 * n42 -\n                n11 * n24 * n42 -\n                n12 * n21 * n44 +\n                n11 * n22 * n44) *\n            detInv;\n        te[11] =\n            (n13 * n22 * n41 -\n                n12 * n23 * n41 -\n                n13 * n21 * n42 +\n                n11 * n23 * n42 +\n                n12 * n21 * n43 -\n                n11 * n22 * n43) *\n            detInv;\n\n        te[12] = t14 * detInv;\n        te[13] =\n            (n13 * n24 * n31 -\n                n14 * n23 * n31 +\n                n14 * n21 * n33 -\n                n11 * n24 * n33 -\n                n13 * n21 * n34 +\n                n11 * n23 * n34) *\n            detInv;\n        te[14] =\n            (n14 * n22 * n31 -\n                n12 * n24 * n31 -\n                n14 * n21 * n32 +\n                n11 * n24 * n32 +\n                n12 * n21 * n34 -\n                n11 * n22 * n34) *\n            detInv;\n        te[15] =\n            (n12 * n23 * n31 -\n                n13 * n22 * n31 +\n                n13 * n21 * n32 -\n                n11 * n23 * n32 -\n                n12 * n21 * n33 +\n                n11 * n22 * n33) *\n            detInv;\n\n        return this;\n    }\n\n    public scale(v: Vector3): this {\n        const te: number[] = this.elements;\n        const x: number = v.x,\n            y: number = v.y,\n            z: number = v.z;\n        te[0] *= x;\n        te[4] *= y;\n        te[8] *= z;\n        te[1] *= x;\n        te[5] *= y;\n        te[9] *= z;\n        te[2] *= x;\n        te[6] *= y;\n        te[10] *= z;\n        te[3] *= x;\n        te[7] *= y;\n        te[11] *= z;\n        return this;\n    }\n\n    public getMaxScaleOnAxis(): number {\n        const te: number[] = this.elements;\n        const scaleXSq: number = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n        const scaleYSq: number = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n        const scaleZSq: number = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n        return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n    }\n\n    public makeTranslation(x: number, y: number, z: number): this {\n        return this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n    }\n\n    public makeRotationX(theta: number): this {\n        const c: number = Math.cos(theta),\n            s: number = Math.sin(theta);\n        return this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n    }\n\n    public makeRotationY(theta: number): this {\n        const c: number = Math.cos(theta),\n            s: number = Math.sin(theta);\n        return this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n    }\n\n    public makeRotationZ(theta: number): this {\n        const c: number = Math.cos(theta),\n            s: number = Math.sin(theta);\n        return this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n    }\n\n    /**\n     * http://www.gamedev.net/reference/articles/article1199.asp\n     * @param axis\n     * @param angle\n     * @returns {Matrix4}\n     */\n    public makeRotationAxis(axis: Vector3, angle: number): this {\n        const c: number = Math.cos(angle);\n        const s: number = Math.sin(angle);\n        const t: number = 1 - c;\n        const x: number = axis.x,\n            y: number = axis.y,\n            z: number = axis.z;\n        const tx: number = t * x,\n            ty = t * y;\n        return this.set(\n            tx * x + c,\n            tx * y - s * z,\n            tx * z + s * y,\n            0,\n            tx * y + s * z,\n            ty * y + c,\n            ty * z - s * x,\n            0,\n            tx * z - s * y,\n            ty * z + s * x,\n            t * z * z + c,\n            0,\n            0,\n            0,\n            0,\n            1,\n        );\n    }\n\n    public makeScale(x: number, y: number, z: number): this {\n        return this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n    }\n\n    public makeShear(x: number, y: number, z: number): this {\n        return this.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);\n    }\n\n    public compose(position: Vector3, quaternion: Quaternion, scale: Vector3): this {\n        this.makeRotationFromQuaternion(quaternion);\n        this.scale(scale);\n        this.setPosition(position);\n        return this;\n    }\n\n    public decompose(position: Vector3, quaternion: Quaternion, scale: Vector3): this {\n        const vector: Vector3 = new Vector3();\n        const matrix: Matrix4 = new Matrix4();\n        const te: number[] = this.elements;\n\n        let sx: number = vector.set(te[0], te[1], te[2]).length();\n        const sy: number = vector.set(te[4], te[5], te[6]).length();\n        const sz: number = vector.set(te[8], te[9], te[10]).length();\n\n        // if determine is negative, we need to invert one scale\n        const det: number = this.determinant();\n        if (det < 0) sx = -sx;\n\n        position.x = te[12];\n        position.y = te[13];\n        position.z = te[14];\n\n        // scale the rotation part\n        matrix.copy(this);\n\n        const invSX: number = 1 / sx;\n        const invSY: number = 1 / sy;\n        const invSZ: number = 1 / sz;\n\n        matrix.elements[0] *= invSX;\n        matrix.elements[1] *= invSX;\n        matrix.elements[2] *= invSX;\n\n        matrix.elements[4] *= invSY;\n        matrix.elements[5] *= invSY;\n        matrix.elements[6] *= invSY;\n\n        matrix.elements[8] *= invSZ;\n        matrix.elements[9] *= invSZ;\n        matrix.elements[10] *= invSZ;\n\n        quaternion.setFromRotationMatrix(matrix);\n        scale.set(sx, sy, sz);\n        return this;\n    }\n\n    public makePerspective(left: number, right: number, top: number, bottom: number, near: number, far: number): this {\n        return this.set(\n            2 * near / (right - left),\n            0,\n            (right + left) / (right - left),\n            0,\n            0,\n            2 * near / (top - bottom),\n            (top + bottom) / (top - bottom),\n            0,\n            0,\n            0,\n            -(far + near) / (far - near),\n            -2 * far * near / (far - near),\n            0,\n            0,\n            -1,\n            0,\n        );\n    }\n\n    public makeOrthographic(left: number, right: number, top: number, bottom: number, near: number, far: number): this {\n        const w: number = 1.0 / (right - left);\n        const h: number = 1.0 / (top - bottom);\n        const p: number = 1.0 / (far - near);\n\n        const x: number = (right + left) * w;\n        const y: number = (top + bottom) * h;\n        const z: number = (far + near) * p;\n\n        return this.set(2 * w, 0, 0, -x, 0, 2 * h, 0, -y, 0, 0, -2 * p, -z, 0, 0, 0, 1);\n    }\n\n    public equals(matrix: Matrix4): boolean {\n        const me: number[] = matrix.elements;\n        for (let i: number = 0; i < 16; i++) {\n            if (this.elements[i] !== me[i]) return false;\n        }\n        return true;\n    }\n\n    public fromArray(array: number[] | TypedArray, offset: number = 0): this {\n        for (let i: number = 0; i < 16; i++) {\n            this.elements[i] = array[i + offset];\n        }\n        return this;\n    }\n\n    public toArray(array: number[] | TypedArray = [], offset: number = 0): number[] | TypedArray {\n        const te: number[] = this.elements;\n\n        array[offset] = te[0];\n        array[offset + 1] = te[1];\n        array[offset + 2] = te[2];\n        array[offset + 3] = te[3];\n\n        array[offset + 4] = te[4];\n        array[offset + 5] = te[5];\n        array[offset + 6] = te[6];\n        array[offset + 7] = te[7];\n\n        array[offset + 8] = te[8];\n        array[offset + 9] = te[9];\n        array[offset + 10] = te[10];\n        array[offset + 11] = te[11];\n\n        array[offset + 12] = te[12];\n        array[offset + 13] = te[13];\n        array[offset + 14] = te[14];\n        array[offset + 15] = te[15];\n        return array;\n    }\n\n    public clone(): Matrix4 {\n        return new (this.constructor as new () => Matrix4)().copy(this);\n    }\n}\n","import { Box3 } from \"./Box3\";\nimport { Line3 } from \"./Line3\";\nimport { Matrix3 } from \"./Matrix3\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Sphere } from \"./Sphere\";\nimport { Vector3 } from \"./Vector3\";\n\nexport class Plane {\n    public normal: Vector3 = new Vector3(1, 0, 0);\n    public constant: number = 0;\n\n    constructor(normal: Vector3 = new Vector3(1, 0, 0), constant: number = 0) {\n        this.normal = normal;\n        this.constant = constant;\n    }\n\n    public set(normal: Vector3, constant: number): this {\n        this.normal.copy(normal);\n        this.constant = constant;\n        return this;\n    }\n\n    public setFromNormalAndCoplanarPoint(normal: Vector3, point: Vector3): this {\n        this.normal.copy(normal);\n        this.constant = -point.dot(this.normal);\n        return this;\n    }\n\n    public setFromCoplanarPoints(a: Vector3, b: Vector3, c: Vector3): this {\n        const v1: Vector3 = new Vector3();\n        const v2: Vector3 = new Vector3();\n        const normal: Vector3 = v1\n            .copy(c)\n            .sub(b)\n            .cross(v2.copy(a).sub(b))\n            .normalize();\n        // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n        this.setFromNormalAndCoplanarPoint(normal, a);\n        return this;\n    }\n\n    public clone(): Plane {\n        return new (this.constructor as new () => Plane)().copy(this);\n    }\n\n    public copy(plane: Plane): this {\n        this.normal.copy(plane.normal);\n        this.constant = plane.constant;\n        return this;\n    }\n\n    /**\n     * Note: will lead to a divide by zero if the plane is invalid\n     * @returns {Plane}\n     */\n    public normalize(): this {\n        const inverseNormalLength: number = 1.0 / this.normal.length();\n        this.normal.multiplyScalar(inverseNormalLength);\n        this.constant *= inverseNormalLength;\n        return this;\n    }\n\n    public negate(): this {\n        this.constant *= -1;\n        this.normal.negate();\n        return this;\n    }\n\n    public distanceToPoint(point: Vector3): number {\n        return this.normal.dot(point) + this.constant;\n    }\n\n    public distanceToSphere(sphere: Sphere): number {\n        return this.distanceToPoint(sphere.center) - sphere.radius;\n    }\n\n    public projectPoint(point: Vector3): Vector3 {\n        return new Vector3()\n            .copy(this.normal)\n            .multiplyScalar(-this.distanceToPoint(point))\n            .add(point);\n    }\n\n    public intersectLine(line: Line3): Vector3 | undefined {\n        const direction: Vector3 = line.delta();\n        const denominator: number = this.normal.dot(direction);\n        if (denominator === 0) {\n            // line is coplanar, return origin\n            if (this.distanceToPoint(line.start) === 0) {\n                return new Vector3().copy(line.start);\n            }\n            // Unsure if this is the correct method to handle this case.\n            return undefined;\n        }\n        const t: number = -(line.start.dot(this.normal) + this.constant) / denominator;\n        if (t < 0 || t > 1) {\n            return undefined;\n        }\n        return new Vector3()\n            .copy(direction)\n            .multiplyScalar(t)\n            .add(line.start);\n    }\n\n    public intersectsLine(line: Line3): boolean {\n        // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n        const startSign: number = this.distanceToPoint(line.start);\n        const endSign: number = this.distanceToPoint(line.end);\n        return (startSign < 0 && endSign > 0) || (endSign < 0 && startSign > 0);\n    }\n\n    public intersectsBox(box: Box3): boolean {\n        return box.intersectsPlane(this);\n    }\n\n    public intersectsSphere(sphere: Sphere): boolean {\n        return sphere.intersectsPlane(this);\n    }\n\n    public coplanarPoint(): Vector3 {\n        return new Vector3().copy(this.normal).multiplyScalar(-this.constant);\n    }\n\n    public applyMatrix4(matrix: Matrix4, optionalNormalMatrix?: Matrix3): this {\n        const normalMatrix: Matrix3 = optionalNormalMatrix || new Matrix3().getNormalMatrix(matrix);\n        const referencePoint: Vector3 = this.coplanarPoint().applyMatrix4(matrix);\n        const normal: Vector3 = this.normal.applyMatrix3(normalMatrix).normalize();\n        this.constant = -referencePoint.dot(normal);\n        return this;\n    }\n\n    public translate(offset: Vector3): this {\n        this.constant -= offset.dot(this.normal);\n        return this;\n    }\n\n    public equals(plane: Plane): boolean {\n        return plane.normal.equals(this.normal) && plane.constant === this.constant;\n    }\n}\n","import { Euler, EulerOrder } from \"./Euler\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Vector3 } from \"./Vector3\";\nimport { Vector4 } from \"./Vector4\";\nimport { TypedArray } from \"../core/BufferAttribute\";\n\nexport class Quaternion {\n    protected _x: number;\n    protected _y: number;\n    protected _z: number;\n    protected _w: number;\n\n    protected onChangeCallback: (arg1?: any, ...arg2: any[]) => any = function() {};\n    public onChange(callback: (arg1?: any, ...arg2: any[]) => any): this {\n        this.onChangeCallback = callback;\n        return this;\n    }\n\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._w = w;\n    }\n\n    get x(): number {\n        return this._x;\n    }\n\n    set x(_x: number) {\n        this._x = _x;\n        this.onChangeCallback();\n    }\n\n    get y(): number {\n        return this._y;\n    }\n\n    set y(_y: number) {\n        this._y = _y;\n        this.onChangeCallback();\n    }\n\n    get z(): number {\n        return this._z;\n    }\n\n    set z(_z: number) {\n        this._z = _z;\n        this.onChangeCallback();\n    }\n\n    get w(): number {\n        return this._w;\n    }\n\n    set w(_w: number) {\n        this._w = _w;\n        this.onChangeCallback();\n    }\n\n    public set(x: number, y: number, z: number, w: number): this {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._w = w;\n        this.onChangeCallback();\n        return this;\n    }\n\n    public _set(x: number, y: number, z: number, w: number): this {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._w = w;\n        return this;\n    }\n\n    public copy(quaternion: Quaternion): this {\n        this._set(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n        this.onChangeCallback();\n        return this;\n    }\n\n    public setFromEuler(euler: Euler, update?: boolean): this {\n        const { x, y, z, order } = euler;\n\n        const cos: (arg: number) => number = Math.cos;\n        const sin: (arg: number) => number = Math.sin;\n\n        const c1: number = cos(x / 2);\n        const c2: number = cos(y / 2);\n        const c3: number = cos(z / 2);\n\n        const s1: number = sin(x / 2);\n        const s2: number = sin(y / 2);\n        const s3: number = sin(z / 2);\n\n        if (order === EulerOrder.XYZ) {\n            return this._set(\n                s1 * c2 * c3 + c1 * s2 * s3,\n                c1 * s2 * c3 - s1 * c2 * s3,\n                c1 * c2 * s3 + s1 * s2 * c3,\n                c1 * c2 * c3 - s1 * s2 * s3,\n            );\n        } else if (order === EulerOrder.YXZ) {\n            return this._set(\n                s1 * c2 * c3 + c1 * s2 * s3,\n                c1 * s2 * c3 - s1 * c2 * s3,\n                c1 * c2 * s3 - s1 * s2 * c3,\n                c1 * c2 * c3 + s1 * s2 * s3,\n            );\n        } else if (order === EulerOrder.ZXY) {\n            return this._set(\n                s1 * c2 * c3 - c1 * s2 * s3,\n                c1 * s2 * c3 + s1 * c2 * s3,\n                c1 * c2 * s3 + s1 * s2 * c3,\n                c1 * c2 * c3 - s1 * s2 * s3,\n            );\n        } else if (order === EulerOrder.ZYX) {\n            return this._set(\n                s1 * c2 * c3 - c1 * s2 * s3,\n                c1 * s2 * c3 + s1 * c2 * s3,\n                c1 * c2 * s3 - s1 * s2 * c3,\n                c1 * c2 * c3 + s1 * s2 * s3,\n            );\n        } else if (order === EulerOrder.YZX) {\n            return this._set(\n                s1 * c2 * c3 + c1 * s2 * s3,\n                c1 * s2 * c3 + s1 * c2 * s3,\n                c1 * c2 * s3 - s1 * s2 * c3,\n                c1 * c2 * c3 - s1 * s2 * s3,\n            );\n        } else if (order === EulerOrder.XZY) {\n            return this._set(\n                s1 * c2 * c3 - c1 * s2 * s3,\n                c1 * s2 * c3 - s1 * c2 * s3,\n                c1 * c2 * s3 + s1 * s2 * c3,\n                c1 * c2 * c3 + s1 * s2 * s3,\n            );\n        }\n        if (update !== false) this.onChangeCallback();\n        return this;\n    }\n\n    /**\n     * !!! assumes axis is normalized\n     * http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n     * @param axis\n     * @param angle\n     * @returns {Quaternion}\n     */\n    public setFromAxisAngle(axis: Vector3, angle: number): this {\n        const halfAngle: number = angle / 2,\n            s: number = Math.sin(halfAngle);\n        this._set(axis.x * s, axis.y * s, axis.z * s, Math.cos(halfAngle));\n        this.onChangeCallback();\n        return this;\n    }\n\n    /**\n     * !!! assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n     * http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n     * @param m\n     * @returns {Quaternion}\n     */\n    public setFromRotationMatrix(m: Matrix4): this {\n        const te: number[] = m.elements,\n            m11: number = te[0],\n            m12: number = te[4],\n            m13: number = te[8],\n            m21: number = te[1],\n            m22: number = te[5],\n            m23: number = te[9],\n            m31: number = te[2],\n            m32: number = te[6],\n            m33: number = te[10],\n            trace: number = m11 + m22 + m33;\n        let s: number;\n\n        if (trace > 0) {\n            s = 0.5 / Math.sqrt(trace + 1.0);\n            this._set((m32 - m23) * s, (m13 - m31) * s, (m21 - m12) * s, 0.25 / s);\n        } else if (m11 > m22 && m11 > m33) {\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n            this._set(0.25 * s, (m12 + m21) / s, (m13 + m31) / s, (m32 - m23) / s);\n        } else if (m22 > m33) {\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n            this._set((m12 + m21) / s, 0.25 * s, (m23 + m32) / s, (m13 - m31) / s);\n        } else {\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n            this._set((m13 + m31) / s, (m23 + m32) / s, 0.25 * s, (m21 - m12) / s);\n        }\n        this.onChangeCallback();\n        return this;\n    }\n\n    /**\n     * !! assumes direction vectors vFrom and vTo are normalized\n     * @param vFrom\n     * @param vTo\n     * @returns {Quaternion}\n     */\n    public setFromUnitVectors(vFrom: Vector3, vTo: Vector3): this {\n        const vec: Vector3 = new Vector3();\n        const EPS: number = 0.000001;\n        let r: number = vFrom.dot(vTo) + 1;\n        if (r < EPS) {\n            r = 0;\n            if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n                vec.set(-vFrom.y, vFrom.x, 0);\n            } else {\n                vec.set(0, -vFrom.z, vFrom.y);\n            }\n        } else {\n            vec.copy(vFrom).cross(vTo);\n        }\n        this._x = vec.x;\n        this._y = vec.y;\n        this._z = vec.z;\n        this._w = r;\n        return this.normalize();\n    }\n\n    public inverse(): this {\n        return this.conjugate().normalize();\n    }\n\n    public conjugate(): this {\n        this._set(this.x * -1, this.y * -1, this.z * -1, this.w);\n        this.onChangeCallback();\n        return this;\n    }\n\n    public dot(vec: Vector4): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z + this.w * vec.w;\n    }\n\n    public lengthSquared(): number {\n        const { x, y, z, w } = this;\n        return x * x + y * y + z * z + w * w;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.lengthSquared());\n    }\n\n    public normalize(): this {\n        let l: number = this.length();\n        if (l === 0) {\n            this._set(0, 0, 0, 1);\n        } else {\n            l = 1 / l;\n            this._set(this.x * l, this.y * l, this.z * l, this.w * l);\n        }\n        this.onChangeCallback();\n        return this;\n    }\n\n    public multiply(quaternion: Quaternion): this {\n        return this.multiplyQuaternions(this, quaternion);\n    }\n\n    public premultiply(quaternion: Quaternion): this {\n        return this.multiplyQuaternions(quaternion, this);\n    }\n\n    /**\n     * http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n     * @param a\n     * @param b\n     * @returns {Quaternion}\n     */\n    public multiplyQuaternions(a: Quaternion, b: Quaternion): this {\n        const qax: number = a.x,\n            qay: number = a.y,\n            qaz: number = a.z,\n            qaw: number = a.w;\n        const qbx: number = b.x,\n            qby: number = b.y,\n            qbz: number = b.z,\n            qbw: number = b.w;\n        this._set(\n            qax * qbw + qaw * qbx + qay * qbz - qaz * qby,\n            qay * qbw + qaw * qby + qaz * qbx - qax * qbz,\n            qaz * qbw + qaw * qbz + qax * qby - qay * qbx,\n            qaw * qbw - qax * qbx - qay * qby - qaz * qbz,\n        );\n        this.onChangeCallback();\n        return this;\n    }\n\n    /**\n     * http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n     * @param qb\n     * @param t\n     * @returns {Quaternion}\n     */\n    public slerp(qb: Quaternion, t: number): this {\n        if (t === 0) return this;\n        if (t === 1) return this.copy(qb);\n\n        const { x, y, z, w } = this;\n\n        let cosHalfTheta: number = w * qb.w + x * qb.x + y * qb.y + z * qb.z;\n\n        if (cosHalfTheta < 0) {\n            this._set(-qb.x, -qb.y, -qb.z, -qb.w);\n            cosHalfTheta = -cosHalfTheta;\n        } else {\n            this.copy(qb);\n        }\n\n        if (cosHalfTheta >= 1.0) {\n            return this._set(x, y, z, w);\n        }\n\n        const sinHalfTheta: number = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\n\n        if (Math.abs(sinHalfTheta) < 0.001) {\n            return this._set(0.5 * (x + this.x), 0.5 * (y + this.y), 0.5 * (z + this.z), 0.5 * (w + this.w));\n        }\n\n        const halfTheta: number = Math.atan2(sinHalfTheta, cosHalfTheta);\n        const ratioA: number = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n            ratioB: number = Math.sin(t * halfTheta) / sinHalfTheta;\n\n        this._set(\n            x * ratioA + this.x * ratioB,\n            y * ratioA + this.y * ratioB,\n            z * ratioA + this.z * ratioB,\n            w * ratioA + this.w * ratioB,\n        );\n        this.onChangeCallback();\n        return this;\n    }\n\n    public equals(quaternion: Quaternion): boolean {\n        const { x, y, z, w } = this;\n        return quaternion.x === x && quaternion.y === y && quaternion.z === z && quaternion.w === w;\n    }\n\n    public fromArray(array: number[] | TypedArray, offset: number = 0): this {\n        this._set(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n        this.onChangeCallback();\n        return this;\n    }\n\n    public toArray(array: number[] | TypedArray = [], offset: number = 0): number[] | TypedArray {\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        array[offset + 2] = this.z;\n        array[offset + 3] = this.w;\n        return array;\n    }\n\n    public clone(): Quaternion {\n        return new (this.constructor as new () => Quaternion)().copy(this);\n    }\n}\n","import { Box3 } from \"./Box3\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Plane } from \"./Plane\";\nimport { Sphere } from \"./Sphere\";\nimport { Triangle } from \"./Triangle\";\nimport { Vector3 } from \"./Vector3\";\n\nexport class Ray {\n    public origin: Vector3 = new Vector3();\n    public direction: Vector3 = new Vector3();\n\n    constructor(origin: Vector3 = new Vector3(), direction: Vector3 = new Vector3()) {\n        this.origin = origin;\n        this.direction = direction;\n    }\n\n    public set(origin: Vector3, direction: Vector3): this {\n        this.origin.copy(origin);\n        this.direction.copy(direction);\n        return this;\n    }\n\n    public clone(): Ray {\n        return new (this.constructor as new () => Ray)().copy(this);\n    }\n\n    public copy(ray: Ray): this {\n        this.origin.copy(ray.origin);\n        this.direction.copy(ray.direction);\n        return this;\n    }\n\n    public at(t: number): Vector3 {\n        return new Vector3()\n            .copy(this.direction)\n            .multiplyScalar(t)\n            .add(this.origin);\n    }\n\n    public lookAt(v: Vector3): this {\n        this.direction\n            .copy(v)\n            .sub(this.origin)\n            .normalize();\n        return this;\n    }\n\n    public recast(t: number): this {\n        this.origin.copy(this.at(t));\n        return this;\n    }\n\n    public closestPointToPoint(point: Vector3): Vector3 {\n        const result = new Vector3().copy(point).sub(this.origin);\n        const directionDistance: number = result.dot(this.direction);\n        if (directionDistance < 0) {\n            return result.copy(this.origin);\n        }\n        return result\n            .copy(this.direction)\n            .multiplyScalar(directionDistance)\n            .add(this.origin);\n    }\n\n    public distanceToPoint(point: Vector3): number {\n        return Math.sqrt(this.distanceSquaredToPoint(point));\n    }\n\n    public distanceSquaredToPoint(point: Vector3): number {\n        const directionDistance: number = new Vector3()\n            .copy(point)\n            .sub(this.origin)\n            .dot(this.direction);\n        // point behind the ray\n        if (directionDistance < 0) {\n            return this.origin.distanceToSquared(point);\n        }\n        return new Vector3()\n            .copy(this.direction)\n            .multiplyScalar(directionDistance)\n            .add(this.origin)\n            .distanceToSquared(point);\n    }\n\n    public distanceSquareToSegment(\n        v0: Vector3,\n        v1: Vector3,\n        optionalPointOnRay?: Vector3,\n        optionalPointOnSegment?: Vector3,\n    ): number {\n        const segCenter: Vector3 = new Vector3();\n        const segDir: Vector3 = new Vector3();\n        const diff: Vector3 = new Vector3();\n        // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n        // It returns the min distance between the ray and the segment\n        // defined by v0 and v1\n        // It can also set two optional targets :\n        // - The closest point on the ray\n        // - The closest point on the segment\n\n        segCenter\n            .copy(v0)\n            .add(v1)\n            .multiplyScalar(0.5);\n        segDir\n            .copy(v1)\n            .sub(v0)\n            .normalize();\n        diff.copy(this.origin).sub(segCenter);\n\n        const segExtent: number = v0.distanceTo(v1) * 0.5;\n        const a01: number = -this.direction.dot(segDir);\n        const b0: number = diff.dot(this.direction);\n        const b1: number = -diff.dot(segDir);\n        const c: number = diff.lengthSquared();\n        const det: number = Math.abs(1 - a01 * a01);\n\n        let s0: number, s1: number, sqrDist: number, extDet: number;\n        if (det > 0) {\n            // The ray and segment are not parallel.\n            s0 = a01 * b1 - b0;\n            s1 = a01 * b0 - b1;\n            extDet = segExtent * det;\n            if (s0 >= 0) {\n                if (s1 >= -extDet) {\n                    if (s1 <= extDet) {\n                        // region 0\n                        // Minimum at interior points of ray and segment.\n                        const invDet: number = 1 / det;\n                        s0 *= invDet;\n                        s1 *= invDet;\n                        sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n                    } else {\n                        // region 1\n                        s1 = segExtent;\n                        s0 = Math.max(0, -(a01 * s1 + b0));\n                        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n                    }\n                } else {\n                    // region 5\n                    s1 = -segExtent;\n                    s0 = Math.max(0, -(a01 * s1 + b0));\n                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n                }\n            } else {\n                if (s1 <= -extDet) {\n                    // region 4\n                    s0 = Math.max(0, -(-a01 * segExtent + b0));\n                    s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n                } else if (s1 <= extDet) {\n                    // region 3\n                    s0 = 0;\n                    s1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n                    sqrDist = s1 * (s1 + 2 * b1) + c;\n                } else {\n                    // region 2\n                    s0 = Math.max(0, -(a01 * segExtent + b0));\n                    s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n                }\n            }\n        } else {\n            // Ray and segment are parallel.\n            s1 = a01 > 0 ? -segExtent : segExtent;\n            s0 = Math.max(0, -(a01 * s1 + b0));\n            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        }\n        if (optionalPointOnRay) {\n            optionalPointOnRay\n                .copy(this.direction)\n                .multiplyScalar(s0)\n                .add(this.origin);\n        }\n        if (optionalPointOnSegment) {\n            optionalPointOnSegment\n                .copy(segDir)\n                .multiplyScalar(s1)\n                .add(segCenter);\n        }\n        return sqrDist;\n    }\n\n    public intersectSphere(sphere: Sphere): Vector3 | null {\n        const vec: Vector3 = new Vector3().copy(sphere.center).sub(this.origin);\n        const tca: number = vec.dot(this.direction);\n        const d2: number = vec.dot(vec) - tca * tca;\n        const radius2: number = sphere.radius * sphere.radius;\n\n        if (d2 > radius2) return null;\n\n        const thc: number = Math.sqrt(radius2 - d2);\n\n        // t0 = first intersect point - entrance on front of sphere\n        const t0: number = tca - thc;\n\n        // t1 = second intersect point - exit point on back of sphere\n        const t1: number = tca + thc;\n\n        // test to see if both t0 and t1 are behind the ray - if so, return null\n        if (t0 < 0 && t1 < 0) return null;\n\n        // test to see if t0 is behind the ray:\n        // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n        // in order to always return an intersect point that is in front of the ray.\n        if (t0 < 0) return this.at(t1);\n\n        // else t0 is in front of the ray, so return the first collision point scaled by t0\n        return this.at(t0);\n    }\n\n    public intersectsSphere(sphere: Sphere): boolean {\n        return this.distanceToPoint(sphere.center) <= sphere.radius;\n    }\n\n    public distanceToPlane(plane: Plane): number {\n        const denominator: number = plane.normal.dot(this.direction);\n        if (denominator === 0) {\n            // line is coplanar, return origin\n            if (plane.distanceToPoint(this.origin) === 0) {\n                return 0;\n            }\n            // Null is preferable to undefined since undefined means.... it is undefined\n            return Infinity;\n        }\n        const t: number = -(this.origin.dot(plane.normal) + plane.constant) / denominator;\n        // Return if the ray never intersects the plane\n        return t >= 0 ? t : Infinity;\n    }\n\n    public intersectPlane(plane: Plane): Vector3 {\n        const t: number = this.distanceToPlane(plane);\n        if (!isFinite(t)) {\n            return null;\n        }\n        return this.at(t);\n    }\n\n    public intersectsPlane(plane: Plane): boolean {\n        // check if the ray lies on the plane first\n        const distToPoint: number = plane.distanceToPoint(this.origin);\n        if (distToPoint === 0) {\n            return true;\n        }\n        const denominator: number = plane.normal.dot(this.direction);\n        if (denominator * distToPoint < 0) {\n            return true;\n        }\n        // ray origin is behind the plane (and is pointing behind it)\n        return false;\n    }\n\n    public intersectBox(box: Box3): Vector3 {\n        let tmin: number, tmax: number, tymin: number, tymax: number, tzmin: number, tzmax: number;\n        const invdirx: number = 1 / this.direction.x,\n            invdiry: number = 1 / this.direction.y,\n            invdirz: number = 1 / this.direction.z;\n        const origin: Vector3 = this.origin;\n        if (invdirx >= 0) {\n            tmin = (box.min.x - origin.x) * invdirx;\n            tmax = (box.max.x - origin.x) * invdirx;\n        } else {\n            tmin = (box.max.x - origin.x) * invdirx;\n            tmax = (box.min.x - origin.x) * invdirx;\n        }\n        if (invdiry >= 0) {\n            tymin = (box.min.y - origin.y) * invdiry;\n            tymax = (box.max.y - origin.y) * invdiry;\n        } else {\n            tymin = (box.max.y - origin.y) * invdiry;\n            tymax = (box.min.y - origin.y) * invdiry;\n        }\n        if (tmin > tymax || tymin > tmax) return null;\n        // These lines also handle the case where tmin or tmax is NaN\n        // (result of 0 * Infinity). x !== x returns true if x is NaN\n        if (tymin > tmin || tmin !== tmin) tmin = tymin;\n        if (tymax < tmax || tmax !== tmax) tmax = tymax;\n        if (invdirz >= 0) {\n            tzmin = (box.min.z - origin.z) * invdirz;\n            tzmax = (box.max.z - origin.z) * invdirz;\n        } else {\n            tzmin = (box.max.z - origin.z) * invdirz;\n            tzmax = (box.min.z - origin.z) * invdirz;\n        }\n        if (tmin > tzmax || tzmin > tmax) return null;\n        if (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n        if (tzmax < tmax || tmax !== tmax) tmax = tzmax;\n        // return point closest to the ray (positive side)\n        if (tmax < 0) return null;\n        return this.at(tmin >= 0 ? tmin : tmax);\n    }\n\n    public intersectsBox(box: Box3): boolean {\n        return this.intersectBox(box) !== null;\n    }\n\n    public intersectTriangle(triangle: Triangle, backFaceCulling: boolean = false): Vector3 | null {\n        // Compute the offset origin, edges, and normal.\n        const a: Vector3 = triangle.a,\n            b: Vector3 = triangle.b,\n            c: Vector3 = triangle.c;\n        const edge1: Vector3 = new Vector3().copy(b).sub(a);\n        const edge2: Vector3 = new Vector3().copy(c).sub(a);\n        const normal: Vector3 = new Vector3().copy(edge1).cross(edge2);\n        // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n        // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n        //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n        //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n        //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n        let DdN: number = this.direction.dot(normal);\n        let sign: number;\n        if (DdN > 0) {\n            if (backFaceCulling) return null;\n            sign = 1;\n        } else if (DdN < 0) {\n            sign = -1;\n            DdN = -DdN;\n        } else {\n            return null;\n        }\n        const diff: Vector3 = new Vector3().copy(this.origin).sub(a);\n        const DdQxE2: number = sign * this.direction.dot(edge2.copy(diff).cross(edge2));\n        // b1 < 0, no intersection\n        if (DdQxE2 < 0) {\n            return null;\n        }\n        const DdE1xQ: number = sign * this.direction.dot(edge1.cross(diff));\n        // b2 < 0, no intersection\n        if (DdE1xQ < 0) {\n            return null;\n        }\n        // b1+b2 > 1, no intersection\n        if (DdQxE2 + DdE1xQ > DdN) {\n            return null;\n        }\n        // Line intersects triangle, check if ray does.\n        const QdN: number = -sign * diff.dot(normal);\n        // t < 0, no intersection\n        if (QdN < 0) {\n            return null;\n        }\n        // Ray intersects triangle.\n        return this.at(QdN / DdN);\n    }\n\n    public intersectsTriangle(triangle: Triangle): boolean {\n        return this.intersectTriangle(triangle) !== null;\n    }\n\n    public applyMatrix4(matrix4: Matrix4): this {\n        this.origin.applyMatrix4(matrix4);\n        this.direction.transformDirection(matrix4);\n        return this;\n    }\n\n    public equals(ray: Ray): boolean {\n        return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n    }\n}\n","import { Box3 } from \"./Box3\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Plane } from \"./Plane\";\nimport { Vector3 } from \"./Vector3\";\n\nexport class Sphere {\n    public center: Vector3 = new Vector3();\n    public radius: number = 0;\n\n    constructor(center: Vector3 = new Vector3(), radius: number = 0) {\n        this.center = center;\n        this.radius = radius;\n    }\n\n    public set(center: Vector3, radius: number): this {\n        this.center.copy(center);\n        this.radius = radius;\n        return this;\n    }\n\n    public setFromPoints(points: Vector3[], optionalCenter?: Vector3): this {\n        if (optionalCenter !== undefined) {\n            this.center.copy(optionalCenter);\n        } else {\n            this.center = new Box3().setFromPoints(points).getCenter();\n        }\n        let maxRadiusSq: number = 0;\n        for (let i: number = 0, il: number = points.length; i < il; i++) {\n            maxRadiusSq = Math.max(maxRadiusSq, this.center.distanceToSquared(points[i]));\n        }\n        this.radius = Math.sqrt(maxRadiusSq);\n        return this;\n    }\n\n    public clone(): Sphere {\n        return new (this.constructor as new () => Sphere)().copy(this);\n    }\n\n    public copy(sphere: Sphere): this {\n        this.center.copy(sphere.center);\n        this.radius = sphere.radius;\n        return this;\n    }\n\n    public empty(): boolean {\n        return this.radius <= 0;\n    }\n\n    public containsPoint(point: Vector3): boolean {\n        return point.distanceToSquared(this.center) <= this.radius * this.radius;\n    }\n\n    public distanceToPoint(point: Vector3): number {\n        return point.distanceTo(this.center) - this.radius;\n    }\n\n    public intersectsSphere(sphere: Sphere): boolean {\n        const radiusSum: number = this.radius + sphere.radius;\n        return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n    }\n\n    public intersectsBox(box: Box3): boolean {\n        return box.intersectsSphere(this);\n    }\n\n    public intersectsPlane(plane: Plane): boolean {\n        return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n    }\n\n    public clampPoint(point: Vector3): Vector3 {\n        const deltaLengthSquared: number = this.center.distanceToSquared(point);\n        const result: Vector3 = new Vector3().copy(point);\n        if (deltaLengthSquared > this.radius * this.radius) {\n            result.sub(this.center).normalize();\n            result.multiplyScalar(this.radius).add(this.center);\n        }\n        return result;\n    }\n\n    public getBoundingBox(): Box3 {\n        return new Box3().set(this.center, this.center).expandByScalar(this.radius);\n    }\n\n    public applyMatrix4(matrix: Matrix4) {\n        this.center.applyMatrix4(matrix);\n        this.radius = this.radius * matrix.getMaxScaleOnAxis();\n        return this;\n    }\n\n    public translate(offset: Vector3): this {\n        this.center.add(offset);\n        return this;\n    }\n\n    public equals(sphere: Sphere): boolean {\n        return sphere.center.equals(this.center) && sphere.radius === this.radius;\n    }\n}\n","import { Vector3 } from \"./Vector3\";\nimport { MathUtil } from \"./Math\";\n\nexport class Spherical {\n    public radius: number;\n    public phi: number;\n    public theta: number;\n\n    constructor(radius: number = 1.0, phi: number = 0, theta: number = 0) {\n        this.radius = radius;\n        this.phi = phi;\n        this.theta = theta;\n    }\n\n    public set(radius: number, phi: number, theta: number): this {\n        this.radius = radius;\n        this.phi = phi;\n        this.theta = theta;\n        return this;\n    }\n\n    public copy(other: Spherical): this {\n        this.radius = other.radius;\n        this.phi = other.phi;\n        this.theta = other.theta;\n        return this;\n    }\n\n    public clone(): Spherical {\n        return new (this.constructor as new () => Spherical)().copy(this);\n    }\n\n    // restrict phi to be betwee EPS and PI-EPS\n    public makeSafe(): this {\n        const EPS: number = 0.000001;\n        this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n        return this;\n    }\n\n    public setFromVector3(vec3: Vector3): this {\n        this.radius = vec3.length();\n        if (this.radius === 0) {\n            this.theta = 0;\n            this.phi = 0;\n        } else {\n            this.theta = Math.atan2(vec3.x, vec3.z); // equator angle around y-up axis\n            this.phi = Math.acos(MathUtil.clamp(vec3.y / this.radius, -1, 1)); // polar angle\n        }\n        return this;\n    }\n}\n","import { Line3 } from \"./Line3\";\nimport { Plane } from \"./Plane\";\nimport { Vector3 } from \"./Vector3\";\n\nexport class Triangle {\n    public a: Vector3 = new Vector3();\n    public b: Vector3 = new Vector3();\n    public c: Vector3 = new Vector3();\n\n    constructor(a: Vector3 = new Vector3(), b: Vector3 = new Vector3(), c: Vector3 = new Vector3()) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n    }\n\n    public set(a: Vector3, b: Vector3, c: Vector3): this {\n        this.a.copy(a);\n        this.b.copy(b);\n        this.c.copy(c);\n        return this;\n    }\n\n    public clone(): Triangle {\n        return new (this.constructor as new () => Triangle)().copy(this);\n    }\n\n    public copy(triangle: Triangle): this {\n        this.a.copy(triangle.a);\n        this.b.copy(triangle.b);\n        this.c.copy(triangle.c);\n        return this;\n    }\n\n    public area(): number {\n        const v0: Vector3 = new Vector3().copy(this.c).sub(this.b);\n        const v1: Vector3 = new Vector3().copy(this.a).sub(this.b);\n        return v0.cross(v1).length() * 0.5;\n    }\n\n    public midpoint(): Vector3 {\n        return new Vector3()\n            .copy(this.a)\n            .add(this.b)\n            .add(this.c)\n            .multiplyScalar(1 / 3);\n    }\n\n    public normal(): Vector3 {\n        const vec = new Vector3().copy(this.a).sub(this.b);\n        const result = new Vector3()\n            .copy(this.c)\n            .sub(this.b)\n            .cross(vec);\n        const resultLengthSquared = result.lengthSquared();\n        if (resultLengthSquared > 0) {\n            return result.multiplyScalar(1 / Math.sqrt(resultLengthSquared));\n        }\n        return result.set(0, 0, 0);\n    }\n\n    public plane(): Plane {\n        return new Plane().setFromCoplanarPoints(this.a, this.b, this.c);\n    }\n\n    /**\n     * based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n     * @param point\n     */\n    public barycoordFromPoint(point: Vector3): Vector3 {\n        const v0: Vector3 = new Vector3().copy(this.c).sub(this.a);\n        const v1: Vector3 = new Vector3().copy(this.b).sub(this.a);\n        const v2: Vector3 = new Vector3().copy(point).sub(this.a);\n\n        const dot00: number = v0.dot(v0);\n        const dot01: number = v0.dot(v1);\n        const dot02: number = v0.dot(v2);\n        const dot11: number = v1.dot(v1);\n        const dot12: number = v1.dot(v2);\n\n        const denom: number = dot00 * dot11 - dot01 * dot01;\n\n        // collinear or singular triangle\n        if (denom === 0) {\n            // arbitrary location outside of triangle?\n            // not sure if this is the best idea, maybe should be returning undefined\n            return new Vector3().set(-2, -1, -1);\n        }\n\n        const invDenom: number = 1 / denom;\n        const u: number = (dot11 * dot02 - dot01 * dot12) * invDenom;\n        const v: number = (dot00 * dot12 - dot01 * dot02) * invDenom;\n\n        // barycentric coordinates must always sum to 1\n        return new Vector3().set(1 - u - v, v, u);\n    }\n\n    public containsPoint(point: Vector3): boolean {\n        const result: Vector3 = this.barycoordFromPoint(point);\n        return result.x >= 0 && result.y >= 0 && result.x + result.y <= 1;\n    }\n\n    public closestPointToPoint(point: Vector3): Vector3 {\n        // project the point onto the plane of the triangle\n        const plane: Plane = new Plane().setFromCoplanarPoints(this.a, this.b, this.c);\n        const projectedPoint: Vector3 = plane.projectPoint(point);\n\n        // check if the projection lies within the triangle\n        if (this.containsPoint(projectedPoint) === true) {\n            // if so, this is the closest point\n            return new Vector3().copy(projectedPoint);\n        } else {\n            const result: Vector3 = new Vector3();\n            let minDistance: number = Infinity;\n\n            // if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n            const edgeList: Line3[] = [new Line3(this.a, this.b), new Line3(this.b, this.c), new Line3(this.c, this.a)];\n\n            for (let i: number = 0; i < edgeList.length; i++) {\n                const closestPoint: Vector3 = edgeList[i].closestPointToPoint(projectedPoint, true);\n                const distance: number = projectedPoint.distanceToSquared(closestPoint);\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    result.copy(closestPoint);\n                }\n            }\n            return result;\n        }\n    }\n\n    public equals(triangle: Triangle): boolean {\n        return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n    }\n}\n","import { TypedArray } from \"../core/BufferAttribute\";\nimport { Matrix3 } from \"./Matrix3\";\n\nexport class Vector2 {\n    public _x: number;\n    public _y: number;\n\n    get x() {\n        return this._x;\n    }\n\n    set x(x: number) {\n        this._x = x;\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set y(y: number) {\n        this._y = y;\n    }\n\n    get width(): number {\n        return this.x;\n    }\n\n    set width(width: number) {\n        this._x = width;\n    }\n\n    get height(): number {\n        return this.y;\n    }\n\n    set height(height: number) {\n        this._y = height;\n    }\n\n    constructor(x: number = 0, y: number = 0) {\n        this._x = x;\n        this._y = y;\n    }\n\n    public set(x: number, y: number): this {\n        this._x = x;\n        this._y = y;\n        return this;\n    }\n\n    public setScalar(scalar: number): this {\n        return this.set(scalar, scalar);\n    }\n\n    public copy(v: Vector2): this {\n        return this.set(v.x, v.y);\n    }\n\n    public add(v: Vector2): this {\n        return this.set(this.x + v.x, this.y + v.y);\n    }\n\n    public addScalar(s: number): this {\n        return this.set(this.x + s, this.y + s);\n    }\n\n    public sub(v: Vector2): this {\n        return this.set(this.x - v.x, this.y - v.y);\n    }\n\n    public subScalar(s: number): this {\n        return this.set(this.x - s, this.y - s);\n    }\n\n    public multiply(v: Vector2): this {\n        return this.set(this.x * v.x, this.y * v.y);\n    }\n\n    public multiplyScalar(s: number): this {\n        return this.set(this.x * s, this.y * s);\n    }\n\n    public divide(v: Vector2): this {\n        return this.set(this.x / v.x, this.y / v.y);\n    }\n\n    public divideScalar(s: number): this {\n        return this.set(this.x / s, this.y / s);\n    }\n\n    public applyMatrix3(m: Matrix3): this {\n        const x: number = this.x,\n            y: number = this.y;\n        const e: number[] = m.elements;\n        return this.set(e[0] * x + e[3] * y + e[6], e[1] * x + e[4] * y + e[7]);\n    }\n\n    public min(v: Vector2): this {\n        this.x = Math.min(this.x, v.x);\n        this.y = Math.min(this.y, v.y);\n        return this;\n    }\n\n    public max(v: Vector2): this {\n        this.x = Math.max(this.x, v.x);\n        this.y = Math.max(this.y, v.y);\n        return this;\n    }\n\n    public clamp(min: Vector2, max: Vector2): this {\n        return this.set(Math.max(min.x, Math.min(max.x, this.x)), Math.max(min.y, Math.min(max.y, this.y)));\n    }\n\n    public negate(): this {\n        return this.set(-this.x, -this.y);\n    }\n\n    public dot(v: Vector2): number {\n        return this.x * v.x + this.y * v.y;\n    }\n\n    public lengthSquared(): number {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.lengthSquared());\n    }\n\n    public manhattanLength(): number {\n        return Math.abs(this.x) + Math.abs(this.y);\n    }\n\n    public normalize(): this {\n        return this.divideScalar(this.length() || 1);\n    }\n\n    public setLength(length: number): this {\n        return this.normalize().multiplyScalar(length);\n    }\n\n    public lerp(v: Vector2, alpha: number): this {\n        return this.set(this.x + (v.x - this.x) * alpha, this.y + (v.y - this.y) * alpha);\n    }\n\n    public lerpVectors(v1: Vector2, v2: Vector2, alpha: number): this {\n        return this.copy(v2)\n            .sub(v1)\n            .multiplyScalar(alpha)\n            .add(v1);\n    }\n\n    public equals(v: Vector2): boolean {\n        return v.x === this.x && v.y === this.y;\n    }\n\n    public fromArray(array: number[] | TypedArray, offset: number = 0): this {\n        return this.set(array[offset], array[offset + 1]);\n    }\n\n    public toArray(array: number[] | TypedArray = [], offset: number = 0): number[] | TypedArray {\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        return array;\n    }\n\n    public rotateAround(center: Vector2, angle: number): this {\n        const c: number = Math.cos(angle),\n            s: number = Math.sin(angle);\n        const x: number = this.x - center.x;\n        const y: number = this.y - center.y;\n        return this.set(x * c - y * s + center.x, x * s + y * c + center.y);\n    }\n\n    public clone(): Vector2 {\n        return new (this.constructor as new () => Vector2)().copy(this);\n    }\n}\n","import { TypedArray } from \"../core/BufferAttribute\";\nimport { Euler } from \"./Euler\";\nimport { MathUtil } from \"./Math\";\nimport { Matrix3 } from \"./Matrix3\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Spherical } from \"./Spherical\";\nimport { Vector4 } from \"./Vector4\";\n\nexport class Vector3 {\n    private _x: number;\n    private _y: number;\n    private _z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n    }\n\n    get x(): number {\n        return this._x;\n    }\n\n    set x(x: number) {\n        this._x = x;\n    }\n\n    get y(): number {\n        return this._y;\n    }\n\n    set y(y: number) {\n        this._y = y;\n    }\n\n    get z(): number {\n        return this._z;\n    }\n\n    set z(z: number) {\n        this._z = z;\n    }\n\n    public set(x: number, y: number, z: number): this {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        return this;\n    }\n\n    public setScalar(scalar: number): this {\n        return this.set(scalar, scalar, scalar);\n    }\n\n    public copy(vec: Vector3): this {\n        return this.set(vec.x, vec.y, vec.z);\n    }\n\n    public add(vec: Vector3): this {\n        return this.set(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public addScalar(scalar: number): this {\n        return this.set(this.x + scalar, this.y + scalar, this.z + scalar);\n    }\n\n    public sub(vec: Vector3): this {\n        return this.set(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public subScalar(scalar: number): this {\n        return this.set(this.x - scalar, this.y - scalar, this.z - scalar);\n    }\n\n    public multiply(vec: Vector3): this {\n        return this.set(this.x * vec.x, this.y * vec.y, this.z * vec.z);\n    }\n\n    public multiplyScalar(scalar: number): this {\n        return this.set(this.x * scalar, this.y * scalar, this.z * scalar);\n    }\n\n    public divide(vec: Vector3): this {\n        return this.set(this.x / vec.x, this.y / vec.y, this.z / vec.z);\n    }\n\n    public divideScalar(scalar: number): this {\n        return this.set(this.x / scalar, this.y / scalar, this.z / scalar);\n    }\n\n    public applyEuler(euler: Euler): this {\n        const quaternion: Quaternion = new Quaternion();\n        return this.applyQuaternion(quaternion.setFromEuler(euler));\n    }\n\n    public applyAxisAngle(axis: Vector3, angle: number): this {\n        const quaternion: Quaternion = new Quaternion();\n        return this.applyQuaternion(quaternion.setFromAxisAngle(axis, angle));\n    }\n\n    public applyMatrix3(m: Matrix3): this {\n        const x: number = this.x,\n            y: number = this.y,\n            z: number = this.z;\n        const e: number[] = m.elements;\n        return this.set(e[0] * x + e[3] * y + e[6] * z, e[1] * x + e[4] * y + e[7] * z, e[2] * x + e[5] * y + e[8] * z);\n    }\n\n    public applyMatrix4(matrix: Matrix4): this {\n        const x: number = this.x,\n            y: number = this.y,\n            z: number = this.z;\n        const e: number[] = matrix.elements;\n        const w: number = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n        return this.set(\n            (e[0] * x + e[4] * y + e[8] * z + e[12]) * w,\n            (e[1] * x + e[5] * y + e[9] * z + e[13]) * w,\n            (e[2] * x + e[6] * y + e[10] * z + e[14]) * w,\n        );\n    }\n\n    public applyQuaternion(quaternion: Quaternion): this {\n        const x: number = this.x,\n            y: number = this.y,\n            z: number = this.z;\n        const qx: number = quaternion.x,\n            qy: number = quaternion.y,\n            qz: number = quaternion.z,\n            qw: number = quaternion.w;\n\n        // calculate quat * vector\n        const ix: number = qw * x + qy * z - qz * y;\n        const iy: number = qw * y + qz * x - qx * z;\n        const iz: number = qw * z + qx * y - qy * x;\n        const iw: number = -qx * x - qy * y - qz * z;\n\n        // calculate result * inverse quat\n        return this.set(\n            ix * qw + iw * -qx + iy * -qz - iz * -qy,\n            iy * qw + iw * -qy + iz * -qx - ix * -qz,\n            iz * qw + iw * -qz + ix * -qy - iy * -qx,\n        );\n    }\n\n    public transformDirection(mat4: Matrix4): this {\n        const x: number = this.x,\n            y: number = this.y,\n            z: number = this.z;\n        const e: number[] = mat4.elements;\n        return this.set(\n            e[0] * x + e[4] * y + e[8] * z,\n            e[1] * x + e[5] * y + e[9] * z,\n            e[2] * x + e[6] * y + e[10] * z,\n        ).normalize();\n    }\n\n    public min(vec: Vector3): this {\n        return this.set(Math.min(this.x, vec.x), Math.min(this.y, vec.y), Math.min(this.z, vec.z));\n    }\n\n    public max(vec: Vector3): this {\n        return this.set(Math.max(this.x, vec.x), Math.max(this.y, vec.y), Math.max(this.z, vec.z));\n    }\n\n    public clamp(min: Vector3, max: Vector3): this {\n        return this.set(\n            Math.max(min.x, Math.min(max.x, this.x)),\n            Math.max(min.y, Math.min(max.y, this.y)),\n            Math.max(min.z, Math.min(max.z, this.z)),\n        );\n    }\n\n    public negate(): this {\n        return this.set(-this.x, -this.y, -this.z);\n    }\n\n    public dot(v: Vector3 | Vector4): number {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n\n    public lengthSquared(): number {\n        const x: number = this.x,\n            y: number = this.y,\n            z: number = this.z;\n        return x * x + y * y + z * z;\n    }\n\n    public length(): number {\n        const x: number = this.x,\n            y: number = this.y,\n            z: number = this.z;\n        return Math.sqrt(x * x + y * y + z * z);\n    }\n\n    public setLength(length: number): this {\n        return this.normalize().multiplyScalar(length);\n    }\n\n    public manhattanLength(): number {\n        const x: number = this.x,\n            y: number = this.y,\n            z: number = this.z;\n        return Math.abs(x) + Math.abs(y) + Math.abs(z);\n    }\n\n    public normalize(): this {\n        return this.divideScalar(this.length() || 1);\n    }\n\n    public lerp(vec: Vector3, alpha: number): this {\n        return this.set((vec.x - this.x) * alpha, (vec.y - this.y) * alpha, (vec.z - this.z) * alpha);\n    }\n\n    public lerpVectors(v1: Vector3, v2: Vector3, alpha: number): this {\n        return this.set(v2.x - v1.x, v2.y - v1.y, v2.z - v1.z)\n            .multiplyScalar(alpha)\n            .add(v1);\n    }\n\n    public cross(vec: Vector3): this {\n        const ax: number = this.x,\n            ay: number = this.y,\n            az: number = this.z;\n        const bx: number = vec.x,\n            by: number = vec.y,\n            bz: number = vec.z;\n        return this.set(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx);\n    }\n\n    public projectOnVector(vector: Vector3): this {\n        const scalar: number = vector.dot(this) / vector.lengthSquared();\n        return this.copy(vector).multiplyScalar(scalar);\n    }\n\n    public projectOnPlane(planeNormal: Vector3): this {\n        const vec: Vector3 = new Vector3();\n        vec.copy(this).projectOnVector(planeNormal);\n        return this.sub(vec);\n    }\n\n    /**\n     * reflect incident vector off plane orthogonal to normal\n     * normal is assumed to have unit length\n     * @param normal\n     * @returns {Vector3}\n     */\n    public reflect(normal: Vector3): this {\n        const vec: Vector3 = new Vector3();\n        return this.sub(vec.copy(normal).multiplyScalar(2 * this.dot(normal)));\n    }\n\n    public angleTo(v: Vector3): number {\n        const theta: number = this.dot(v) / Math.sqrt(this.lengthSquared() * v.lengthSquared());\n        return Math.acos(MathUtil.clamp(theta, -1, 1));\n    }\n\n    public distanceTo(vec: Vector3): number {\n        return Math.sqrt(this.distanceToSquared(vec));\n    }\n\n    public distanceToSquared(vec: Vector3): number {\n        const dx: number = this.x - vec.x,\n            dy: number = this.y - vec.y,\n            dz: number = this.z - vec.z;\n        return dx * dx + dy * dy + dz * dz;\n    }\n\n    public equals(vec: Vector3): boolean {\n        return vec.x === this.x && vec.y === this.y && vec.z === this.z;\n    }\n    public setFromSpherical(s: Spherical): this {\n        const sinPhiRadius: number = Math.sin(s.phi) * s.radius;\n        this.x = sinPhiRadius * Math.sin(s.theta);\n        this.y = Math.cos(s.phi) * s.radius;\n        this.z = sinPhiRadius * Math.cos(s.theta);\n        return this;\n    }\n\n    public setFromMatrixPosition(m: Matrix4): this {\n        const e: number[] = m.elements;\n        return this.set(e[12], e[13], e[14]);\n    }\n\n    public setFromMatrixScale(m: Matrix4): this {\n        const sx: number = this.setFromMatrixColumn(m, 0).length();\n        const sy: number = this.setFromMatrixColumn(m, 1).length();\n        const sz: number = this.setFromMatrixColumn(m, 2).length();\n        this.x = sx;\n        this.y = sy;\n        this.z = sz;\n        return this;\n    }\n\n    public setFromMatrixColumn(m: Matrix4, index: number): this {\n        return this.fromArray(m.elements, index * 4);\n    }\n\n    public fromArray(array: number[] | TypedArray, offset: number = 0): this {\n        return this.set(array[offset], array[offset + 1], array[offset + 2]);\n    }\n\n    public toArray(array: number[] | TypedArray = [], offset: number = 0): number[] | TypedArray {\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        array[offset + 2] = this.z;\n        return array;\n    }\n\n    public clone(): Vector3 {\n        return new (this.constructor as new () => Vector3)().copy(this);\n    }\n}\n","import { TypedArray } from \"../core/BufferAttribute\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector3 } from \"./Vector3\";\n\nexport class Vector4 {\n    protected _x: number;\n    protected _y: number;\n    protected _z: number;\n    protected _w: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._w = w;\n    }\n\n    get x(): number {\n        return this._x;\n    }\n\n    set x(x: number) {\n        this._x = x;\n    }\n\n    get y(): number {\n        return this._y;\n    }\n\n    set y(y: number) {\n        this._y = y;\n    }\n\n    get z(): number {\n        return this._z;\n    }\n\n    set z(z: number) {\n        this._z = z;\n    }\n\n    get w(): number {\n        return this._w;\n    }\n\n    set w(w: number) {\n        this._w = w;\n    }\n\n    public set(x: number, y: number, z: number, w: number): this {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._w = w;\n        return this;\n    }\n\n    public setScalar(scalar: number): this {\n        return this.set(scalar, scalar, scalar, scalar);\n    }\n\n    public copy(v: Vector4 | Vector3): this {\n        return this.set(v.x, v.y, v.z, (v instanceof Vector4 ? v.w : undefined) || 1);\n    }\n\n    public add(v: Vector4): this {\n        return this.set(this.x + v.x, this.y + v.y, this.z + v.z, this.w + v.w);\n    }\n\n    public addScalar(s: number): this {\n        return this.set(this.x + s, this.y + s, this.z + s, this.w + s);\n    }\n\n    public sub(v: Vector4): this {\n        return this.set(this.x - v.x, this.y - v.y, this.z - v.z, this.w - v.w);\n    }\n\n    public subScalar(s: number): this {\n        return this.set(this.x - s, this.y - s, this.z - s, this.w - s);\n    }\n\n    public multiplyScalar(s: number): this {\n        return this.set(this.x * s, this.y * s, this.z * s, this.w * s);\n    }\n\n    public divideScalar(s: number): this {\n        return this.set(this.x / s, this.y / s, this.z / s, this.w / s);\n    }\n\n    public applyMatrix4(m: Matrix4): this {\n        const x: number = this.x,\n            y: number = this.y,\n            z: number = this.z,\n            w: number = this.w;\n        const e: number[] = m.elements;\n        return this.set(\n            e[0] * x + e[4] * y + e[8] * z + e[12] * w,\n            e[1] * x + e[5] * y + e[9] * z + e[13] * w,\n            e[2] * x + e[6] * y + e[10] * z + e[14] * w,\n            e[3] * x + e[7] * y + e[11] * z + e[15] * w,\n        );\n    }\n\n    /**\n     * http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n     * q is assumed to be normalized\n     * @param q\n     * @returns {Vector4}\n     */\n    public setAxisAngleFromQuaternion(q: Quaternion): this {\n        const s = Math.sqrt(1 - q.w * q.w);\n        if (s < 0.0001) {\n            return this.set(1, 0, 0, 2 * Math.acos(q.w));\n        } else {\n            return this.set(q.x / s, q.y / s, q.z / s, 2 * Math.acos(q.w));\n        }\n    }\n\n    /**\n     * http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n     * @param m\n     * @returns {Vector4}\n     */\n    public setAxisAngleFromRotationMatrix(m: Matrix4): this {\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n        let angle: number, x: number, y: number, z: number; // variables for result\n        const epsilon: number = 0.01, // margin to allow for rounding errors\n            epsilon2: number = 0.1, // margin to distinguish between 0 and 180 degrees\n            te: number[] = m.elements,\n            m11: number = te[0],\n            m12: number = te[4],\n            m13: number = te[8],\n            m21: number = te[1],\n            m22: number = te[5],\n            m23: number = te[9],\n            m31: number = te[2],\n            m32: number = te[6],\n            m33: number = te[10];\n        if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n            // singularity found\n            // first check for identity matrix which must have +1 for all terms\n            // in leading diagonal and zero in other terms\n            if (\n                Math.abs(m12 + m21) < epsilon2 &&\n                Math.abs(m13 + m31) < epsilon2 &&\n                Math.abs(m23 + m32) < epsilon2 &&\n                Math.abs(m11 + m22 + m33 - 3) < epsilon2\n            ) {\n                // this singularity is identity matrix so angle = 0\n                // zero angle, arbitrary axis\n                return this.set(1, 0, 0, 0);\n            }\n            // otherwise this singularity is angle = 180\n            angle = Math.PI;\n            const xx: number = (m11 + 1) / 2;\n            const yy: number = (m22 + 1) / 2;\n            const zz: number = (m33 + 1) / 2;\n            const xy: number = (m12 + m21) / 4;\n            const xz: number = (m13 + m31) / 4;\n            const yz: number = (m23 + m32) / 4;\n            if (xx > yy && xx > zz) {\n                // m11 is the largest diagonal term\n                if (xx < epsilon) {\n                    x = 0;\n                    y = 0.707106781;\n                    z = 0.707106781;\n                } else {\n                    x = Math.sqrt(xx);\n                    y = xy / x;\n                    z = xz / x;\n                }\n            } else if (yy > zz) {\n                // m22 is the largest diagonal term\n                if (yy < epsilon) {\n                    x = 0.707106781;\n                    y = 0;\n                    z = 0.707106781;\n                } else {\n                    y = Math.sqrt(yy);\n                    x = xy / y;\n                    z = yz / y;\n                }\n            } else {\n                // m33 is the largest diagonal term so base result on this\n                if (zz < epsilon) {\n                    x = 0.707106781;\n                    y = 0.707106781;\n                    z = 0;\n                } else {\n                    z = Math.sqrt(zz);\n                    x = xz / z;\n                    y = yz / z;\n                }\n            }\n            // return 180 deg rotation\n            return this.set(x, y, z, angle);\n        }\n        // as we have reached here there are no singularities so we can handle normally\n        let s: number = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n        if (Math.abs(s) < 0.001) s = 1;\n        // prevent divide by zero, should not happen if matrix is orthogonal and should be\n        // caught by singularity test above, but I\"ve left it in just in case\n        return this.set((m32 - m23) / s, (m13 - m31) / s, (m21 - m12) / s, Math.acos((m11 + m22 + m33 - 1) / 2));\n    }\n\n    public min(v: Vector4): this {\n        return this.set(Math.min(this.x, v.x), Math.min(this.y, v.y), Math.min(this.z, v.z), Math.min(this.w, v.w));\n    }\n\n    public max(v: Vector4): this {\n        return this.set(Math.max(this.x, v.x), Math.max(this.y, v.y), Math.max(this.z, v.z), Math.max(this.w, v.w));\n    }\n\n    public clamp(min: Vector4, max: Vector4): this {\n        return this.set(\n            Math.max(min.x, Math.min(max.x, this.x)),\n            Math.max(min.y, Math.min(max.y, this.y)),\n            Math.max(min.z, Math.min(max.z, this.z)),\n            Math.max(min.w, Math.min(max.w, this.w)),\n        );\n    }\n\n    public negate(): this {\n        return this.set(-this.x, -this.y, -this.z, -this.w);\n    }\n\n    public dot(v: Vector4): number {\n        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n    }\n\n    public lengthSquared(): number {\n        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.lengthSquared());\n    }\n\n    public manhattanLength(): number {\n        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n    }\n\n    public normalize(): this {\n        return this.divideScalar(this.length() || 1);\n    }\n\n    public setLength(length: number): this {\n        return this.normalize().multiplyScalar(length);\n    }\n\n    public lerp(v: Vector4, alpha: number): this {\n        return this.set(\n            this.x + (v.x - this.x) * alpha,\n            this.y + (v.y - this.y) * alpha,\n            this.z + (v.z - this.z) * alpha,\n            this.w + (v.w - this.w) * alpha,\n        );\n    }\n\n    public lerpVectors(v1: Vector4, v2: Vector4, alpha: number): this {\n        return this.copy(v2)\n            .sub(v1)\n            .multiplyScalar(alpha)\n            .add(v1);\n    }\n\n    public equals(v: Vector4): boolean {\n        return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n    }\n\n    public fromArray(array: number[] | TypedArray, offset: number = 0): this {\n        return this.set(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n    }\n\n    public toArray(array: number[] | TypedArray = [], offset: number = 0): number[] | TypedArray {\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        array[offset + 2] = this.z;\n        array[offset + 3] = this.w;\n        return array;\n    }\n\n    public clone(): Vector4 {\n        return new (this.constructor as new () => Vector4)().copy(this);\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\n\nexport class Bone extends Object3D {\n    public readonly type: string = \"Bone\";\n}\n","import { Object3D } from \"../core/Object3D\";\n\nexport class Group extends Object3D {\n    public readonly type: string = \"IGroup\";\n}\n","import { Camera } from \"../cameras/Camera\";\nimport { Object3D } from \"../core/Object3D\";\nimport { IIntersection, Raycaster } from \"../core/Raycaster\";\nimport { Vector3 } from \"../math/Vector3\";\n\nexport interface ILODLevel {\n    object: Object3D;\n    distance: number;\n}\n\nexport class LOD extends Object3D {\n    public readonly type: string = \"LOD\";\n    public levels: ILODLevel[] = [];\n\n    public addLevel(object: Object3D, distance: number = 0): LOD {\n        const levels: ILODLevel[] = this.levels;\n        distance = Math.abs(distance);\n        let l: number = 0;\n        for (; l < levels.length; l++) {\n            if (distance < levels[l].distance) {\n                break;\n            }\n        }\n        levels.splice(l, 0, { distance: distance, object: object });\n        this.add(object);\n        return this;\n    }\n\n    public getObjectForDistance(distance: number) {\n        const levels: ILODLevel[] = this.levels;\n        let i: number = 1;\n        for (const l: number = levels.length; i < l; i++) {\n            if (distance < levels[i].distance) {\n                break;\n            }\n        }\n        return levels[i - 1].object;\n    }\n\n    public raycast(raycaster: Raycaster, intersects: IIntersection[] = []): IIntersection[] {\n        const matrixPosition: Vector3 = new Vector3().setFromMatrixPosition(this.matrixWorld);\n        const distance: number = raycaster.ray.origin.distanceTo(matrixPosition);\n        this.getObjectForDistance(distance).raycast(raycaster, intersects);\n        return intersects;\n    }\n\n    public update(camera: Camera): this {\n        const levels: ILODLevel[] = this.levels;\n        if (levels.length > 1) {\n            const v1: Vector3 = new Vector3().setFromMatrixPosition(camera.matrixWorld);\n            const v2: Vector3 = new Vector3().setFromMatrixPosition(this.matrixWorld);\n            const distance: number = v1.distanceTo(v2);\n            levels[0].object.visible = true;\n            let i: number = 1;\n            const l: number = levels.length;\n            for (; i < l; i++) {\n                if (distance >= levels[i].distance) {\n                    levels[i - 1].object.visible = false;\n                    levels[i].object.visible = true;\n                } else {\n                    break;\n                }\n            }\n            for (; i < l; i++) {\n                levels[i].object.visible = false;\n            }\n        }\n        return this;\n    }\n\n    public copy(source: LOD): this {\n        super.copy(source);\n        const levels: ILODLevel[] = source.levels;\n        for (let i: number = 0, l: number = levels.length; i < l; i++) {\n            const level: ILODLevel = levels[i];\n            this.addLevel(level.object.clone(), level.distance);\n        }\n        return this;\n    }\n\n    public clone(): LOD {\n        return new (this.constructor as new () => LOD)().copy(this);\n    }\n}\n","import { BufferAttribute, TypedArray } from \"../core/BufferAttribute\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Object3D } from \"../core/Object3D\";\nimport { IIntersection, Raycaster } from \"../core/Raycaster\";\nimport { LineBasicMaterial } from \"../materials/LineBasicMaterial\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Ray } from \"../math/Ray\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Vector3 } from \"../math/Vector3\";\n// import { LineSegments } from \"./LineSegments\";\n\nexport class Line extends Object3D {\n    public readonly type: string = \"Line\";\n    public geometry: BufferGeometry | Geometry;\n    public material: LineBasicMaterial;\n\n    constructor(\n        geometry: BufferGeometry | Geometry = new BufferGeometry(),\n        material: LineBasicMaterial = new LineBasicMaterial({\n            color: Math.random() * 0xffffff,\n        }),\n    ) {\n        super();\n        this.geometry = geometry;\n        this.material = material;\n    }\n\n    public raycast(raycaster: Raycaster, intersects: IIntersection[]): void {\n        const precision: number = raycaster.linePrecision;\n        const precisionSquared: number = precision * precision;\n\n        const geometry: BufferGeometry | Geometry = this.geometry;\n        const matrixWorld: Matrix4 = this.matrixWorld;\n\n        // Checking boundingSphere distance to ray\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n        const sphere: Sphere = new Sphere().copy(geometry.boundingSphere);\n        sphere.applyMatrix4(matrixWorld);\n        if (raycaster.ray.intersectsSphere(sphere) === false) return;\n        const inverseMatrix: Matrix4 = new Matrix4().getInverse(matrixWorld);\n        const ray: Ray = new Ray();\n        ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n\n        const vStart: Vector3 = new Vector3();\n        const vEnd: Vector3 = new Vector3();\n        const interSegment: Vector3 = new Vector3();\n        const interRay: Vector3 = new Vector3();\n        //const step: number = this instanceof LineSegments ? 2 : 1;\n        const step: number = 1;\n\n        if (geometry instanceof BufferGeometry) {\n            const index: BufferAttribute = geometry.index;\n            const attributes: { [key: string]: BufferAttribute } = geometry.attributes;\n            const positions: TypedArray = attributes.position.array;\n            if (index !== null) {\n                const indices: TypedArray = index.array;\n                for (let i: number = 0, l: number = indices.length - 1; i < l; i += step) {\n                    const a: number = indices[i];\n                    const b: number = indices[i + 1];\n                    vStart.fromArray(positions, a * 3);\n                    vEnd.fromArray(positions, b * 3);\n                    const distSquared: number = ray.distanceSquareToSegment(vStart, vEnd, interRay, interSegment);\n                    if (distSquared > precisionSquared) continue;\n                    interRay.applyMatrix4(this.matrixWorld); // Move back to world space for distance calculation\n                    const distance: number = raycaster.ray.origin.distanceTo(interRay);\n                    if (distance < raycaster.near || distance > raycaster.far) {\n                        continue;\n                    }\n                    intersects.push({\n                        distance: distance,\n                        index: i,\n                        object: this,\n                        // What do we want? intersection point on the ray or on the segment??\n                        // point: raycaster.ray.at( distance ),\n                        point: interSegment.clone().applyMatrix4(this.matrixWorld),\n                    });\n                }\n            } else {\n                for (let i: number = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                    vStart.fromArray(positions, 3 * i);\n                    vEnd.fromArray(positions, 3 * i + 3);\n                    const distSquared: number = ray.distanceSquareToSegment(vStart, vEnd, interRay, interSegment);\n                    if (distSquared > precisionSquared) continue;\n                    interRay.applyMatrix4(this.matrixWorld); // Move back to world space for distance calculation\n                    const distance: number = raycaster.ray.origin.distanceTo(interRay);\n                    if (distance < raycaster.near || distance > raycaster.far) {\n                        continue;\n                    }\n                    intersects.push({\n                        distance: distance,\n                        face: null,\n                        faceIndex: null,\n                        index: i,\n                        object: this,\n                        // What do we want? intersection point on the ray or on the segment??\n                        // point: raycaster.ray.at( distance ),\n                        point: interSegment.clone().applyMatrix4(this.matrixWorld),\n                    });\n                }\n            }\n        } else if (geometry instanceof Geometry) {\n            const vertices: Vector3[] = geometry.vertices;\n            const nbVertices: number = vertices.length;\n            for (let i: number = 0; i < nbVertices - 1; i += step) {\n                const distSquared: number = ray.distanceSquareToSegment(\n                    vertices[i],\n                    vertices[i + 1],\n                    interRay,\n                    interSegment,\n                );\n                if (distSquared > precisionSquared) continue;\n                interRay.applyMatrix4(this.matrixWorld); // Move back to world space for distance calculation\n                const distance: number = raycaster.ray.origin.distanceTo(interRay);\n                if (distance < raycaster.near || distance > raycaster.far) {\n                    continue;\n                }\n                intersects.push({\n                    distance: distance,\n                    face: null,\n                    faceIndex: null,\n                    index: i,\n                    object: this,\n                    // What do we want? intersection point on the ray or on the segment??\n                    // point: raycaster.ray.at( distance ),\n                    point: interSegment.clone().applyMatrix4(this.matrixWorld),\n                });\n            }\n        }\n    }\n\n    public clone(): Line {\n        return new (this.constructor as new (geometry: BufferGeometry | Geometry, material: LineBasicMaterial) => Line)(\n            this.geometry,\n            this.material,\n        ).copy(this);\n    }\n}\n","import { Line } from \"./Line\";\nexport class LineLoop extends Line {\n    public readonly type: string = \"LineLoop\";\n}\n","import { Line } from \"./Line\";\n\nexport class LineSegments extends Line {\n    public readonly type: string = \"LineSegments\";\n}\n","import { BackSide, DoubleSide, TrianglesDrawMode } from \"../constants\";\nimport { BufferAttribute } from \"../core/BufferAttribute\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Face3 } from \"../core/Face3\";\nimport { Geometry, IMorphTarget } from \"../core/Geometry\";\nimport { Object3D } from \"../core/Object3D\";\nimport { IIntersection, Raycaster } from \"../core/Raycaster\";\nimport { Material } from \"../materials/Material\";\nimport { MeshBasicMaterial } from \"../materials/MeshBasicMaterial\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Ray } from \"../math/Ray\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Triangle } from \"../math/Triangle\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { vectorFromBufferAttribute } from \"../utils\";\n\nexport class Mesh extends Object3D {\n    public static uvIntersection(\n        point: Vector3,\n        triangle: Triangle,\n        uv1: Vector2,\n        uv2: Vector2,\n        uv3: Vector2,\n    ): Vector2 {\n        const baryCoord: Vector3 = triangle.barycoordFromPoint(point);\n        uv1.multiplyScalar(baryCoord.x);\n        uv2.multiplyScalar(baryCoord.y);\n        uv3.multiplyScalar(baryCoord.z);\n        uv1.add(uv2).add(uv3);\n        return uv1.clone();\n    }\n\n    public static checkIntersection(\n        object: Mesh,\n        material: Material,\n        raycaster: Raycaster,\n        ray: Ray,\n        pA: Vector3,\n        pB: Vector3,\n        pC: Vector3,\n        point: Vector3,\n    ): IIntersection | null {\n        let intersect: Vector3;\n        const intersectionPointWorld: Vector3 = new Vector3();\n        if (material.side === BackSide) {\n            intersect = ray.intersectTriangle(new Triangle(pC, pB, pA), true);\n        } else {\n            intersect = ray.intersectTriangle(new Triangle(pC, pB, pA), material.side !== DoubleSide);\n        }\n        if (intersect === null) return null;\n        point.copy(intersect);\n        intersectionPointWorld.copy(point);\n        intersectionPointWorld.applyMatrix4(object.matrixWorld);\n        const distance: number = raycaster.ray.origin.distanceTo(intersectionPointWorld);\n        if (distance < raycaster.near || distance > raycaster.far) return null;\n        return {\n            distance: distance,\n            object: object,\n            point: intersectionPointWorld.clone(),\n        };\n    }\n\n    public static checkBufferGeometryIntersection(\n        object: Mesh,\n        raycaster: Raycaster,\n        ray: Ray,\n        position: BufferAttribute,\n        uv: BufferAttribute,\n        a: number,\n        b: number,\n        c: number,\n    ): IIntersection {\n        const intersectionPoint: Vector3 = new Vector3();\n        const vA = vectorFromBufferAttribute(new Vector3(), position, a);\n        const vB = vectorFromBufferAttribute(new Vector3(), position, b);\n        const vC = vectorFromBufferAttribute(new Vector3(), position, c);\n        const triangle = new Triangle(\n            vectorFromBufferAttribute(new Vector3(), position, a),\n            vectorFromBufferAttribute(new Vector3(), position, b),\n            vectorFromBufferAttribute(new Vector3(), position, c),\n        );\n        const intersection: IIntersection = Mesh.checkIntersection(\n            object,\n            object.material as Material,\n            raycaster,\n            ray,\n            vA,\n            vB,\n            vC,\n            intersectionPoint,\n        );\n        if (intersection) {\n            if (uv) {\n                const uvA = vectorFromBufferAttribute(new Vector2(), uv, a);\n                const uvB = vectorFromBufferAttribute(new Vector2(), uv, b);\n                const uvC = vectorFromBufferAttribute(new Vector2(), uv, c);\n                intersection.uv = Mesh.uvIntersection(intersectionPoint, triangle, uvA, uvB, uvC);\n            }\n            intersection.face = new Face3(a, b, c, triangle.normal());\n            intersection.faceIndex = a;\n        }\n        return intersection;\n    }\n\n    public readonly type: string = \"Mesh\";\n\n    public geometry: BufferGeometry | Geometry;\n    public material: Material | Material[];\n    public drawMode: number = TrianglesDrawMode;\n\n    public morphTargetInfluences: number[] = [];\n    public morphTargetDictionary: { [key: string]: number } = {};\n\n    constructor(\n        geometry: BufferGeometry | Geometry = new BufferGeometry(),\n        material: Material | Material[] = new MeshBasicMaterial({\n            color: Math.random() * 0xffffff,\n        }),\n    ) {\n        super();\n        this.geometry = geometry;\n        this.material = material;\n        this.updateMorphTargets();\n    }\n\n    public setDrawMode(value: number): this {\n        this.drawMode = value;\n        return this;\n    }\n\n    public updateMorphTargets(): this {\n        const geometry: BufferGeometry | Geometry = this.geometry;\n        if (geometry instanceof BufferGeometry) {\n            const morphAttributes: { [key: string]: BufferAttribute[] } = geometry.morphAttributes;\n            const keys: string[] = Object.keys(morphAttributes);\n            if (keys.length > 0) {\n                const morphAttribute: BufferAttribute[] = morphAttributes[keys[0]];\n                if (morphAttribute !== undefined) {\n                    for (let m: number = 0, ml: number = morphAttribute.length; m < ml; m++) {\n                        const name: string = morphAttribute[m].name || String(m);\n                        this.morphTargetInfluences.push(0);\n                        this.morphTargetDictionary[name] = m;\n                    }\n                }\n            }\n        } else if (geometry instanceof Geometry) {\n            const morphTargets: IMorphTarget[] = geometry.morphTargets;\n            if (morphTargets !== undefined && morphTargets.length > 0) {\n                for (let m: number = 0, ml: number = morphTargets.length; m < ml; m++) {\n                    const name: string = morphTargets[m].name || String(m);\n                    this.morphTargetInfluences.push(0);\n                    this.morphTargetDictionary[name] = m;\n                }\n            }\n        }\n        return this;\n    }\n\n    public raycast(raycaster: Raycaster, intersects: IIntersection[]): void {\n        const geometry: BufferGeometry | Geometry = this.geometry;\n        const material: Material | Material[] = this.material;\n        const matrixWorld: Matrix4 = this.matrixWorld;\n        if (material === undefined) return;\n        // Checking boundingSphere distance to ray\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n        const sphere: Sphere = new Sphere().copy(geometry.boundingSphere).applyMatrix4(matrixWorld);\n        if (raycaster.ray.intersectsSphere(sphere) === false) return;\n        const inverseMatrix: Matrix4 = new Matrix4().getInverse(matrixWorld);\n        const ray = new Ray().copy(raycaster.ray).applyMatrix4(inverseMatrix);\n        // Check boundingBox before continuing\n        if (geometry.boundingBox !== null) {\n            if (ray.intersectsBox(geometry.boundingBox) === false) return;\n        }\n        if (geometry instanceof BufferGeometry) {\n            const index: BufferAttribute = geometry.index;\n            const position: BufferAttribute = geometry.attributes.position;\n            const uv: BufferAttribute = geometry.attributes.uv;\n            if (index !== null) {\n                // indexed buffer geometry\n                for (let i: number = 0, l: number = index.count; i < l; i += 3) {\n                    const a: number = index.getProperty(i, \"x\") as number;\n                    const b: number = index.getProperty(i + 1, \"x\") as number;\n                    const c: number = index.getProperty(i + 2, \"x\") as number;\n                    const intersection: IIntersection = Mesh.checkBufferGeometryIntersection(\n                        this,\n                        raycaster,\n                        ray,\n                        position,\n                        uv,\n                        a,\n                        b,\n                        c,\n                    );\n                    if (intersection) {\n                        intersection.faceIndex = Math.floor(i / 3); // triangle number in indices buffer semantics\n                        intersects.push(intersection);\n                    }\n                }\n            } else if (position !== undefined) {\n                // non-indexed buffer geometry\n                for (let i: number = 0, l: number = position.count; i < l; i += 3) {\n                    const a: number = i;\n                    const b: number = i + 1;\n                    const c: number = i + 2;\n                    const intersection: IIntersection = Mesh.checkBufferGeometryIntersection(\n                        this,\n                        raycaster,\n                        ray,\n                        position,\n                        uv,\n                        a,\n                        b,\n                        c,\n                    );\n                    if (intersection) {\n                        intersection.index = a; // triangle number in positions buffer semantics\n                        intersects.push(intersection);\n                    }\n                }\n            }\n        } else if (geometry instanceof Geometry) {\n            const vertices: Vector3[] = geometry.vertices;\n            const faces: Face3[] = geometry.faces;\n            let uvs: Vector2[][] | undefined;\n            const faceVertexUvs: Vector2[][] = geometry.faceVertexUvs[0];\n            if (faceVertexUvs.length > 0) uvs = faceVertexUvs;\n            for (let f: number = 0, fl: number = faces.length; f < fl; f++) {\n                const face: Face3 = faces[f];\n                const faceMaterial: Material = Array.isArray(material) ? material[face.materialIndex] : material;\n                if (faceMaterial === undefined) continue;\n                let fvA: Vector3 = vertices[face.a];\n                let fvB: Vector3 = vertices[face.b];\n                let fvC: Vector3 = vertices[face.c];\n                if (faceMaterial.morphTargets === true) {\n                    const morphTargets: IMorphTarget[] = geometry.morphTargets;\n                    const vA = new Vector3(),\n                        vB = new Vector3(),\n                        vC = new Vector3();\n                    for (let t: number = 0, tl: number = morphTargets.length; t < tl; t++) {\n                        const influence: number = this.morphTargetInfluences[t];\n                        if (influence === 0) continue;\n                        const targets: Vector3[] = morphTargets[t].vertices;\n                        vA.add(\n                            new Vector3()\n                                .copy(targets[face.a])\n                                .sub(fvA)\n                                .multiplyScalar(influence),\n                        );\n                        vB.add(\n                            new Vector3()\n                                .copy(targets[face.b])\n                                .sub(fvB)\n                                .multiplyScalar(influence),\n                        );\n                        vC.add(\n                            new Vector3()\n                                .copy(targets[face.c])\n                                .sub(fvC)\n                                .multiplyScalar(influence),\n                        );\n                    }\n                    vA.add(fvA);\n                    vB.add(fvB);\n                    vC.add(fvC);\n                    fvA = vA;\n                    fvB = vB;\n                    fvC = vC;\n                }\n\n                const intersectionPoint: Vector3 = new Vector3();\n                const intersection: IIntersection = Mesh.checkIntersection(\n                    this,\n                    faceMaterial,\n                    raycaster,\n                    ray,\n                    fvA,\n                    fvB,\n                    fvC,\n                    intersectionPoint,\n                );\n\n                if (intersection) {\n                    if (uvs && uvs[f]) {\n                        const uvsF: Vector2[] = uvs[f];\n                        const uvA = new Vector2().copy(uvsF[0]);\n                        const uvB = new Vector2().copy(uvsF[1]);\n                        const uvC = new Vector2().copy(uvsF[2]);\n                        intersection.uv = Mesh.uvIntersection(\n                            intersectionPoint,\n                            new Triangle(fvA, fvB, fvC),\n                            uvA,\n                            uvB,\n                            uvC,\n                        );\n                    }\n                    intersection.face = face;\n                    intersection.faceIndex = f;\n                    intersects.push(intersection);\n                }\n            }\n        }\n    }\n\n    public clone(): Mesh {\n        return new (this.constructor as new (\n            geometry: BufferGeometry | Geometry,\n            material: Material | Material[],\n        ) => Mesh)(this.geometry, this.material).copy(this);\n    }\n}\n","import { BufferAttribute, TypedArray } from \"../core/BufferAttribute\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Object3D } from \"../core/Object3D\";\nimport { IIntersection, Raycaster } from \"../core/Raycaster\";\nimport { Material } from \"../materials/Material\";\nimport { PointsMaterial } from \"../materials/PointsMaterial\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Ray } from \"../math/Ray\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Vector3 } from \"../math/Vector3\";\n\nexport class Points extends Object3D {\n    public readonly type: string = \"Points\";\n\n    public geometry: Geometry | BufferGeometry;\n    public material: Material;\n\n    constructor(\n        geometry: Geometry | BufferGeometry = new BufferGeometry(),\n        material: Material = new PointsMaterial({\n            color: Math.random() * 0xffffff,\n        }),\n    ) {\n        super();\n        this.geometry = geometry;\n        this.material = material;\n    }\n\n    public raycast(raycaster: Raycaster, intersects: IIntersection[]): void {\n        const geometry: Geometry | BufferGeometry = this.geometry;\n        const matrixWorld: Matrix4 = this.matrixWorld;\n        const threshold: number = raycaster.params.Points.threshold;\n\n        // Checking boundingSphere distance to ray\n\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n        const sphere: Sphere = new Sphere().copy(geometry.boundingSphere);\n        sphere.applyMatrix4(matrixWorld);\n        sphere.radius += threshold;\n\n        if (raycaster.ray.intersectsSphere(sphere) === false) return;\n        const inverseMatrix: Matrix4 = new Matrix4().getInverse(matrixWorld);\n        const ray: Ray = new Ray().copy(raycaster.ray).applyMatrix4(inverseMatrix);\n\n        const testPoint = (point: Vector3, index2: number): void => {\n            const localThreshold: number = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n            const localThresholdSquare: number = localThreshold * localThreshold;\n            const rayPointDistanceSquare: number = ray.distanceSquaredToPoint(point);\n            if (rayPointDistanceSquare < localThresholdSquare) {\n                const intersectPoint = ray.closestPointToPoint(point);\n                intersectPoint.applyMatrix4(matrixWorld);\n                const distance = raycaster.ray.origin.distanceTo(intersectPoint);\n                if (distance < raycaster.near || distance > raycaster.far) {\n                    return;\n                }\n                intersects.push({\n                    distance: distance,\n                    distanceToRay: Math.sqrt(rayPointDistanceSquare),\n                    face: null,\n                    index: index2,\n                    object: this,\n                    point: intersectPoint.clone(),\n                });\n            }\n        };\n\n        if (geometry instanceof BufferGeometry) {\n            const position: Vector3 = new Vector3();\n            const index: BufferAttribute = geometry.index;\n            const positions: TypedArray = geometry.attributes.position.array;\n            if (index !== null) {\n                const indices: TypedArray = index.array;\n                for (let i: number = 0, il: number = indices.length; i < il; i++) {\n                    const a: number = indices[i];\n                    position.fromArray(positions, a * 3);\n                    testPoint(position, a);\n                }\n            } else {\n                for (let i: number = 0, l: number = positions.length / 3; i < l; i++) {\n                    position.fromArray(positions, i * 3);\n                    testPoint(position, i);\n                }\n            }\n        } else if (geometry instanceof Geometry) {\n            const vertices: Vector3[] = geometry.vertices;\n            for (let i: number = 0, l: number = vertices.length; i < l; i++) {\n                testPoint(vertices[i], i);\n            }\n        }\n    }\n\n    public clone(): Points {\n        return new (this.constructor as new (\n            geometry: BufferGeometry | Geometry,\n            material: Material | Material[],\n        ) => Points)(this.geometry, this.material).copy(this);\n    }\n}\n","import { Matrix4 } from \"../math/Matrix4\";\nimport { DataTexture } from \"../textures/DataTexture\";\nimport { Bone } from \"./Bone\";\n\nconst offsetMatrix: Matrix4 = new Matrix4();\nconst identityMatrix: Matrix4 = new Matrix4();\n\nexport class Skeleton {\n    public bones: Bone[] = [];\n    public boneMatrices: Float32Array;\n    public boneInverses: Matrix4[] = [];\n    public boneTexture?: DataTexture;\n    public boneTextureSize?: number;\n\n    constructor(bones: Bone[] = [], boneInverses?: Matrix4[]) {\n        this.bones = bones.slice(0);\n        this.boneMatrices = new Float32Array(this.bones.length * 16);\n        if (boneInverses === undefined) {\n            this.calculateInverses();\n        } else {\n            if (this.bones.length === boneInverses.length) {\n                this.boneInverses = boneInverses.slice(0);\n            } else {\n                console.warn(\"THREE.Skeleton boneInverses is the wrong length.\");\n                for (let i = 0, il = this.bones.length; i < il; i++) {\n                    this.boneInverses.push(new Matrix4());\n                }\n            }\n        }\n    }\n\n    public calculateInverses(): void {\n        this.boneInverses = [];\n        for (let i: number = 0, il: number = this.bones.length; i < il; i++) {\n            const inverse: Matrix4 = new Matrix4();\n            if (this.bones[i]) {\n                inverse.getInverse(this.bones[i].matrixWorld);\n            }\n            this.boneInverses.push(inverse);\n        }\n    }\n\n    public pose(): void {\n        // recover the bind-time world matrices\n        for (let i: number = 0, il: number = this.bones.length; i < il; i++) {\n            const bone: Bone = this.bones[i];\n            if (bone) {\n                bone.matrixWorld.getInverse(this.boneInverses[i]);\n            }\n        }\n\n        // compute the local matrices, positions, rotations and scales\n        for (let i: number = 0, il: number = this.bones.length; i < il; i++) {\n            const bone: Bone = this.bones[i];\n            if (bone) {\n                if (bone.parent && bone.parent instanceof Bone) {\n                    bone.matrix.getInverse(bone.parent.matrixWorld);\n                    bone.matrix.multiply(bone.matrixWorld);\n                } else {\n                    bone.matrix.copy(bone.matrixWorld);\n                }\n                bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n            }\n        }\n    }\n\n    public update(): void {\n        const bones: Bone[] = this.bones;\n        const boneInverses: Matrix4[] = this.boneInverses;\n        const boneMatrices: Float32Array = this.boneMatrices;\n        const boneTexture: DataTexture = this.boneTexture;\n        // flatten bone matrices to array\n        for (let i: number = 0, il: number = bones.length; i < il; i++) {\n            // compute the offset between the current and the original transform\n            const matrix: Matrix4 = bones[i] ? bones[i].matrixWorld : identityMatrix;\n            offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n            offsetMatrix.toArray(boneMatrices, i * 16);\n        }\n        if (boneTexture !== undefined) {\n            boneTexture.needsUpdate = true;\n        }\n    }\n\n    public getBoneByName(name: string): Bone | undefined {\n        for (let i: number = 0, il: number = this.bones.length; i < il; i++) {\n            const bone: Bone = this.bones[i];\n            if (bone.name === name) {\n                return bone;\n            }\n        }\n        return undefined;\n    }\n\n    public clone(): Skeleton {\n        return new (this.constructor as new (bones: Bone[], boneInverses: Matrix4[]) => Skeleton)(\n            this.bones,\n            this.boneInverses,\n        );\n    }\n}\n","import { Mesh } from \"./Mesh\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Material } from \"../materials/Material\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Bone } from \"./Bone\";\nimport { TypedArray, BufferAttribute } from \"../core/BufferAttribute\";\nimport { Skeleton } from \"./Skeleton\";\nimport { Vector4 } from \"../math/Vector4\";\n\nexport interface IGeometeryBone {\n    name: string;\n    parent: number;\n    pos: number[] | TypedArray;\n    rotq: number[] | TypedArray;\n    scl?: number[] | TypedArray;\n}\n\nexport class SkinnedMesh extends Mesh {\n    public readonly type: string = \"SkinnedMesh\";\n    public bindMode: string = \"attached\";\n    public bindMatrix: Matrix4 = new Matrix4();\n    public bindMatrixInverse: Matrix4 = new Matrix4();\n    public skeleton: Skeleton;\n\n    /**\n     * skinIndices and skinWeights should be set to true on the Geometry\n     * skinIndex and skinWeights attribute on BufferGeometry\n     * @param geometry\n     * @param material\n     */\n    constructor(geometry: Geometry | BufferGeometry, material?: Material | Material[]) {\n        super(geometry, material);\n        const bones: Bone[] = this.initBones();\n        const skeleton: Skeleton = new Skeleton(bones);\n        this.bind(skeleton, this.matrixWorld);\n        this.normalizeSkinWeights();\n    }\n\n    public initBones(): Bone[] {\n        const bones: Bone[] = [];\n        if (this.geometry && this.geometry instanceof Geometry && this.geometry.bones !== undefined) {\n            // first, create array of 'Bone' objects from geometry data\n            for (let i: number = 0, il: number = this.geometry.bones.length; i < il; i++) {\n                const gbone = this.geometry.bones[i];\n                // create new 'Bone' object\n                const bone: Bone = new Bone();\n                bones.push(bone);\n                // apply values\n                bone.name = gbone.name;\n                bone.position.fromArray(gbone.pos);\n                bone.quaternion.fromArray(gbone.rotq);\n                if (gbone.scl !== undefined) {\n                    bone.scale.fromArray(gbone.scl);\n                }\n            }\n            // second, create bone hierarchy\n            for (let i: number = 0, il: number = this.geometry.bones.length; i < il; i++) {\n                const gbone = this.geometry.bones[i];\n                if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {\n                    // subsequent bones in the hierarchy\n                    bones[gbone.parent].add(bones[i]);\n                } else {\n                    // topmost bone, immediate child of the skinned mesh\n                    this.add(bones[i]);\n                }\n            }\n        }\n        // now the bones are part of the scene graph and children of the skinned mesh.\n        // let's update the corresponding matrices\n        this.updateMatrixWorld(true);\n        return bones;\n    }\n\n    public bind(skeleton: Skeleton, bindMatrix: Matrix4): void {\n        this.skeleton = skeleton;\n        if (bindMatrix === undefined) {\n            this.updateMatrixWorld(true);\n            this.skeleton.calculateInverses();\n            bindMatrix = this.matrixWorld;\n        }\n        this.bindMatrix.copy(bindMatrix);\n        this.bindMatrixInverse.getInverse(bindMatrix);\n    }\n\n    public pose(): void {\n        this.skeleton.pose();\n    }\n\n    public normalizeSkinWeights(): void {\n        if (this.geometry && this.geometry instanceof Geometry) {\n            for (let i: number = 0; i < this.geometry.skinWeights.length; i++) {\n                const sw: Vector4 = this.geometry.skinWeights[i];\n                const scale: number = 1.0 / sw.manhattanLength();\n                if (scale !== Infinity) {\n                    sw.multiplyScalar(scale);\n                } else {\n                    sw.set(1, 0, 0, 0); // do something reasonable\n                }\n            }\n        } else if (this.geometry && this.geometry instanceof BufferGeometry) {\n            const vec: Vector4 = new Vector4();\n            const skinWeight: BufferAttribute = this.geometry.attributes.skinWeight;\n            for (let i: number = 0; i < skinWeight.count; i++) {\n                vec.x = skinWeight.getProperty(i, \"x\") as number;\n                vec.y = skinWeight.getProperty(i, \"y\") as number;\n                vec.z = skinWeight.getProperty(i, \"z\") as number;\n                vec.w = skinWeight.getProperty(i, \"w\") as number;\n                const scale: number = 1.0 / vec.manhattanLength();\n                if (scale !== Infinity) {\n                    vec.multiplyScalar(scale);\n                } else {\n                    vec.set(1, 0, 0, 0); // do something reasonable\n                }\n                skinWeight.setProperty(i, \"xyzw\", vec);\n            }\n        }\n    }\n\n    public updateMatrixWorld(force: boolean = false): this {\n        super.updateMatrixWorld(force);\n        if (this.bindMode === \"attached\") {\n            this.bindMatrixInverse.getInverse(this.matrixWorld);\n        } else if (this.bindMode === \"detached\") {\n            this.bindMatrixInverse.getInverse(this.bindMatrix);\n        } else {\n            console.warn(\"THREE.SkinnedMesh: Unrecognized bindMode: \" + this.bindMode);\n        }\n        return this;\n    }\n\n    public clone(): SkinnedMesh {\n        return new (this.constructor as new (\n            geometry: Geometry | BufferGeometry,\n            material: Material | Material[],\n        ) => SkinnedMesh)(this.geometry, this.material).copy(this);\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Material } from \"../materials/Material\";\nimport { SpriteMaterial } from \"../materials/Materials\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Raycaster, IIntersection } from \"../core/Raycaster\";\n\nexport class Sprite extends Object3D {\n    public readonly type: string = \"Sprite\";\n\n    public material: SpriteMaterial;\n    public z?: number;\n\n    constructor(material: SpriteMaterial = new SpriteMaterial()) {\n        super();\n        this.material = material;\n    }\n\n    public raycast(raycaster: Raycaster, intersects: IIntersection[]): void {\n        const worldPosition: Vector3 = new Vector3().setFromMatrixPosition(this.matrixWorld);\n        const intersectPoint: Vector3 = raycaster.ray.closestPointToPoint(worldPosition);\n        const worldScale: Vector3 = new Vector3().setFromMatrixScale(this.matrixWorld);\n        const guessSizeSq: number = worldScale.x * worldScale.y / 4;\n        if (worldPosition.distanceToSquared(intersectPoint) > guessSizeSq) {\n            return;\n        }\n        const distance: number = raycaster.ray.origin.distanceTo(intersectPoint);\n        if (distance < raycaster.near || distance > raycaster.far) {\n            return;\n        }\n        intersects.push({\n            distance: distance,\n            face: null,\n            point: intersectPoint.clone(),\n            object: this,\n        });\n    }\n\n    public clone(): Sprite {\n        return new (this.constructor as new (material: Material) => Sprite)(this.material).copy(this);\n    }\n}\n","import { MathUtil } from \"../math/Math\";\nimport { Vector4 } from \"../math/Vector4\";\nimport { LinearFilter } from \"../constants\";\nimport { Texture } from \"../textures/Texture\";\nimport { EventDispatcher } from \"../core/EventDispatcher\";\nimport { DepthTexture } from \"../textures/DepthTexture\";\n\nexport interface IWebGLRenderTargetOptions {\n    minFilter?: number;\n    wrapS?: number;\n    wrapT?: number;\n    magFilter?: number;\n    format?: number;\n    type?: number;\n    anisotropy?: number;\n    encoding?: number;\n    depthBuffer?: boolean;\n    stencilBuffer?: boolean;\n    depthTexture?: DepthTexture;\n}\n\nexport class WebGLRenderTarget extends EventDispatcher {\n    public readonly uuid: string = MathUtil.generateUUID();\n    public width: number;\n    public height: number;\n    public scissor: Vector4;\n    public scissorTest: boolean = false;\n    public viewport: Vector4;\n    public texture: Texture;\n    public depthBuffer?: boolean;\n    public stencilBuffer?: boolean;\n    public depthTexture?: DepthTexture | null;\n\n    constructor(width: number, height: number, options: IWebGLRenderTargetOptions = {}) {\n        super();\n        this.width = width;\n        this.height = height;\n        this.scissor = new Vector4(0, 0, width, height);\n        this.viewport = new Vector4(0, 0, width, height);\n        if (options.minFilter === undefined) {\n            options.minFilter = LinearFilter;\n        }\n        this.texture = new Texture(\n            undefined,\n            undefined,\n            options.wrapS,\n            options.wrapT,\n            options.magFilter,\n            options.minFilter,\n            options.format,\n            options.type,\n            options.anisotropy,\n            options.encoding,\n        );\n        this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n        this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n        this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n    }\n\n    public setSize(width: number, height: number): void {\n        if (this.width !== width || this.height !== height) {\n            this.width = width;\n            this.height = height;\n            this.dispose();\n        }\n        this.viewport.set(0, 0, width, height);\n        this.scissor.set(0, 0, width, height);\n    }\n\n    public copy(source: WebGLRenderTarget): this {\n        this.width = source.width;\n        this.height = source.height;\n        this.viewport.copy(source.viewport);\n        this.texture = source.texture.clone();\n        this.depthBuffer = source.depthBuffer;\n        this.stencilBuffer = source.stencilBuffer;\n        this.depthTexture = source.depthTexture;\n        return this;\n    }\n\n    public clone(): WebGLRenderTarget {\n        return new (this.constructor as new () => WebGLRenderTarget)().copy(this);\n    }\n\n    public dispose(): void {\n        this.dispatchEvent({ type: \"dispose\" });\n    }\n}\n","import { WebGLRenderTarget, IWebGLRenderTargetOptions } from \"./WebGLRenderTarget\";\n\nexport class WebGLRenderTargetCube extends WebGLRenderTarget {\n    // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n    public activeCubeFace: number = 0;\n    public activeMipMapLevel: number = 0;\n\n    constructor(width: number, height: number, options: IWebGLRenderTargetOptions = {}) {\n        super(width, height, options);\n    }\n}\n","import {\n    REVISION,\n    RGBAFormat,\n    HalfFloatType,\n    FloatType,\n    UnsignedByteType,\n    FrontFaceDirectionCW,\n    TriangleFanDrawMode,\n    TriangleStripDrawMode,\n    TrianglesDrawMode,\n    NoColors,\n    LinearToneMapping,\n} from \"../constants\";\nimport { Camera } from \"../cameras/Camera\";\nimport { Material } from \"../materials/Material\";\nimport { ArrayCamera, ArrayCameraCamera } from \"../cameras/ArrayCamera\";\nimport { Object3D } from \"../core/Object3D\";\nimport { InstancedBufferGeometry } from \"../core/InstancedBufferGeometry\";\nimport { BufferAttribute, TypedArray } from \"../core/BufferAttribute\";\nimport { InterleavedBufferAttribute } from \"../core/InterleavedBufferAttribute\";\nimport { InstancedInterleavedBufferAttribute } from \"../core/InstancedInterleavedBufferAttribute\";\nimport { InstancedBufferAttribute } from \"../core/InstancedBufferAttribute\";\nimport { Geometry } from \"../core/Geometry\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { IGroup } from \"../core/DirectGeometry\";\nimport { Light } from \"../lights/Light\";\nimport { Color } from \"../math/Color\";\nimport { MathUtil } from \"../math/Math\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Vector4 } from \"../math/Vector4\";\nimport { Frustum } from \"../math/Frustum\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { WebGLUniformsWrapper, UniformSetterType, AllUniformType, NestUniformType } from \"./webgl/WebGLUniforms\";\nimport {\n    ShaderMaterial,\n    MeshPhongMaterial,\n    MeshStandardMaterial,\n    MeshLambertMaterial,\n    MeshBasicMaterial,\n    MeshToonMaterial,\n    MeshPhysicalMaterial,\n    RawShaderMaterial,\n    MeshDepthMaterial,\n    MeshDistanceMaterial,\n    MeshNormalMaterial,\n    LineBasicMaterial,\n    LineDashedMaterial,\n    PointsMaterial,\n    ShadowMaterial,\n} from \"../materials/Materials\";\nimport { Mesh } from \"../objects/Mesh\";\nimport { Line } from \"../objects/Line\";\nimport { Sprite } from \"../objects/Sprite\";\nimport { LineSegments } from \"../objects/LineSegments\";\nimport { LineLoop } from \"../objects/LineLoop\";\nimport { Points } from \"../objects/Points\";\nimport { Bone } from \"../objects/Bone\";\nimport { Skeleton } from \"../objects/Skeleton\";\nimport { SkinnedMesh } from \"../objects/SkinnedMesh\";\nimport { Fog } from \"../scenes/Fog\";\nimport { FogExp2 } from \"../scenes/FogExp2\";\nimport { Scene } from \"../scenes/Scene\";\nimport { DataTexture } from \"../textures/DataTexture\";\nimport { Texture } from \"../textures/Texture\";\nimport { CubeTexture } from \"../textures/CubeTexture\";\nimport { IUniform } from \"./shaders/UniformsUtils\";\nimport { ShaderLib } from \"./shaders/ShaderLib\";\nimport { UniformsLib } from \"./shaders/UniformsLib\";\nimport { UniformsUtils } from \"./shaders/UniformsUtils\";\nimport { WebGLShadowMap } from \"./webgl/WebGLShadowMap\";\nimport { WebGLState } from \"./webgl/WebGLState\";\nimport { WebGLUtils } from \"./webgl/WebGLUtils\";\nimport { WebGLClipping } from \"./webgl/WebGLClipping\";\nimport { WebGLProgramWrapper } from \"./webgl/WebGLProgram\";\nimport { WebGLExtensions } from \"./webgl/WebGLExtensions\";\nimport { WebGLCapabilities } from \"./webgl/WebGLCapabilities\";\nimport {\n    WebGLProperties,\n    IMaterialProperties,\n    ITextureProperties,\n    IImmediateRenderObjectProperties,\n} from \"./webgl/WebGLProperties\";\nimport { WebGLTextures } from \"./webgl/WebGLTextures\";\nimport { WebGLAttributes, IWebGLBufferWrapper } from \"./webgl/WebGLAttributes\";\nimport { WebGLGeometries } from \"./webgl/WebGLGeometries\";\nimport { WebGLObjects } from \"./webgl/WebGLObjects\";\nimport { WebGLMorphtargets } from \"./webgl/WebGLMorphtargets\";\nimport { WebGLPrograms, IProgramParameters } from \"./webgl/WebGLPrograms\";\nimport { WebGLLights } from \"./webgl/WebGLLights\";\nimport { WebGLRenderLists, WebGLRenderList, IRenderItem } from \"./webgl/WebGLRenderLists\";\nimport { WebGLBufferRenderer } from \"./webgl/WebGLBufferRenderer\";\nimport { WebGLIndexedBufferRenderer } from \"./webgl/WebGLIndexedBufferRenderer\";\nimport { WebGLSpriteRenderer } from \"./webgl/WebGLSpriteRenderer\";\nimport { WebGLBackground } from \"./webgl/WebGLBackground\";\nimport { WebGLRenderTarget } from \"./WebGLRenderTarget\";\nimport { WebGLRenderTargetCube } from \"./WebGLRenderTargetCube\";\nimport { ImmediateRenderObject } from \"../extras/objects/ImmediateRenderObject\";\nimport { PerspectiveCamera, OrthographicCamera } from \"../Three\";\n\nexport interface IInfoMemory {\n    geometries: number;\n    textures: number;\n}\n\nexport interface IInfoRender {\n    frame: number;\n    calls: number;\n    vertices: number;\n    faces: number;\n    points: number;\n}\n\nexport interface IShader {\n    name: string;\n    uniforms: { [key: string]: IUniform };\n    vertexShader: string;\n    fragmentShader: string;\n}\n\nexport interface IWebGLRendererParameters {\n    canvas?: HTMLCanvasElement;\n    context?: WebGLRenderingContext;\n    alpha?: boolean;\n    depth?: boolean;\n    stencil?: boolean;\n    antialias?: boolean;\n    logarithmicDepthBuffer?: boolean;\n    precision?: string;\n    premultipliedAlpha?: boolean;\n    preserveDrawingBuffer?: boolean;\n    powerPreference?: string;\n}\n\nexport class WebGLRenderer {\n    protected alpha: boolean;\n    protected depth: boolean;\n    protected stencil: boolean;\n    protected antialias: boolean;\n    protected premultipliedAlpha: boolean;\n    protected preserveDrawingBuffer: boolean;\n    protected powerPreference: string;\n    protected lightsArray: Light[] = [];\n    protected shadowsArray: any[] = [];\n    protected spritesArray: Sprite[] = [];\n    protected parameters: IWebGLRendererParameters;\n\n    // public properties\n    public domElement: HTMLCanvasElement;\n    public context: WebGLRenderingContext | null;\n\n    // clearing\n    public autoClear: boolean = true;\n    public autoClearColor: boolean = true;\n    public autoClearDepth: boolean = true;\n    public autoClearStencil: boolean = true;\n\n    // scene graph\n    public sortObjects: boolean = true;\n\n    // user-defined clipping\n    public clippingPlanes: any[] = [];\n\n    // physically based shading\n    public gammaInput: boolean = false; // for backwards compatibility\n    public gammaFactor: number = 2.0;\n    public gammaOutput: boolean = false;\n\n    // physical lights\n    public physicallyCorrectLights: boolean = false;\n\n    // tone mapping\n    public toneMapping: number = LinearToneMapping;\n    public toneMappingExposure: number = 1.0;\n    public toneMappingWhitePoint: number = 1.0;\n\n    // morphs\n    public maxMorphNormals: number = 4;\n    public maxMorphTargets: number = 8;\n\n    // internal properties\n    protected isContextLost: boolean = false;\n\n    // internal state cache\n    protected currentRenderTarget: WebGLRenderTarget | WebGLRenderTargetCube | null = null;\n    protected currentFramebuffer: WebGLFramebuffer | null = null;\n    protected currentMaterialId: number = -1;\n    protected currentGeometryProgram: string = \"\";\n\n    protected currentCamera: Camera | null = null;\n    protected currentArrayCamera: ArrayCamera | null = null;\n\n    protected currentViewport: Vector4 = new Vector4();\n    protected currentScissor: Vector4 = new Vector4();\n    protected currentScissorTest: boolean | null = null;\n\n    //\n    protected usedTextureUnits: number = 0;\n\n    //\n    protected width: number;\n    protected height: number;\n\n    protected pixelRatio: number = 1;\n    protected viewport: Vector4;\n    protected scissor: Vector4;\n    protected scissorTest: boolean = false;\n\n    // frustum\n    protected frustum: Frustum = new Frustum();\n\n    // clipping\n    protected clipping: WebGLClipping = new WebGLClipping();\n    protected clippingEnabled: boolean = false;\n    public localClippingEnabled: boolean = false;\n\n    // camera matrices cache\n    protected projScreenMatrix: Matrix4 = new Matrix4();\n    protected tempVector3: Vector3 = new Vector3();\n\n    // info\n    protected infoMemory: IInfoMemory = {\n        geometries: 0,\n        textures: 0,\n    };\n\n    protected infoRender: IInfoRender = {\n        frame: 0,\n        calls: 0,\n        vertices: 0,\n        faces: 0,\n        points: 0,\n    };\n\n    public info: {\n        render: IInfoRender;\n        memory: IInfoMemory;\n        programs: WebGLProgramWrapper[] | null;\n        autoReset: boolean;\n        reset: () => void;\n    } = {\n        render: this.infoRender,\n        memory: this.infoMemory,\n        programs: null,\n        autoReset: true,\n        reset: (): void => {\n            this.infoRender.frame++;\n            this.infoRender.calls = 0;\n            this.infoRender.vertices = 0;\n            this.infoRender.faces = 0;\n            this.infoRender.points = 0;\n        },\n    };\n\n    // GLs\n    public shadowMap: WebGLShadowMap;\n    public extensions: WebGLExtensions;\n    public utils: WebGLUtils;\n    public capabilities: WebGLCapabilities;\n    public state: WebGLState;\n    public properties: WebGLProperties;\n    public textures: WebGLTextures;\n    public attributes: WebGLAttributes;\n    public geometries: WebGLGeometries;\n    public objects: WebGLObjects;\n    public morphtargets: WebGLMorphtargets;\n    public programCache: WebGLPrograms;\n    public lights: WebGLLights;\n    public renderLists: WebGLRenderLists;\n    public background: WebGLBackground;\n    public bufferRenderer: WebGLBufferRenderer;\n    public indexedBufferRenderer: WebGLIndexedBufferRenderer;\n    public spriteRenderer: WebGLSpriteRenderer;\n    public currentRenderList: WebGLRenderList;\n\n    constructor(parameters: IWebGLRendererParameters = {}) {\n        this.parameters = parameters;\n        console.log(\"THREE.WebGLRenderer\", REVISION);\n        (this.domElement =\n            parameters.canvas !== undefined\n                ? parameters.canvas\n                : (document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"canvas\") as HTMLCanvasElement)),\n            (this.context = parameters.context !== undefined ? parameters.context : null),\n            (this.alpha = parameters.alpha !== undefined ? parameters.alpha : false),\n            (this.depth = parameters.depth !== undefined ? parameters.depth : true),\n            (this.stencil = parameters.stencil !== undefined ? parameters.stencil : true),\n            (this.antialias = parameters.antialias !== undefined ? parameters.antialias : false),\n            (this.premultipliedAlpha =\n                parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true),\n            (this.preserveDrawingBuffer =\n                parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false),\n            (this.powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : \"default\");\n\n        this.width = this.domElement.width;\n        this.height = this.domElement.height;\n        this.viewport = new Vector4(0, 0, this.width, this.height);\n        this.scissor = new Vector4(0, 0, this.width, this.height);\n        try {\n            const contextAttributes = {\n                alpha: this.alpha,\n                depth: this.depth,\n                stencil: this.stencil,\n                antialias: this.antialias,\n                premultipliedAlpha: this.premultipliedAlpha,\n                preserveDrawingBuffer: this.preserveDrawingBuffer,\n                powerPreference: this.powerPreference,\n            };\n\n            // event listeners must be registered before WebGL context is created, see #12753\n\n            this.domElement.addEventListener(\"webglcontextlost\", this.onContextLost, false);\n            this.domElement.addEventListener(\"webglcontextrestored\", this.onContextRestore, false);\n\n            this.context =\n                this.context ||\n                (this.domElement.getContext(\"webgl\", contextAttributes) as WebGLRenderingContext) ||\n                (this.domElement.getContext(\"experimental-webgl\", contextAttributes) as WebGLRenderingContext);\n\n            if (this.context === null) {\n                if (this.domElement.getContext(\"webgl\") !== null) {\n                    throw new Error(\"Error creating WebGL context with your selected attributes.\");\n                } else {\n                    throw new Error(\"Error creating WebGL context.\");\n                }\n            }\n\n            // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n            if ((this.domElement as any).getShaderPrecisionFormat === undefined) {\n                (this.domElement as any).getShaderPrecisionFormat = function() {\n                    return { rangeMin: 1, rangeMax: 1, precision: 1 };\n                };\n            }\n        } catch (error) {\n            console.error(\"THREE.WebGLRenderer: \" + error.message);\n        }\n        this.initGLContext();\n        this.shadowMap = new WebGLShadowMap(this, this.objects, this.capabilities.maxTextureSize);\n    }\n\n    public getTargetPixelRatio(): number {\n        return this.currentRenderTarget === null ? this.pixelRatio : 1;\n    }\n\n    public getContext(): WebGLRenderingContext {\n        return this.context;\n    }\n\n    public getContextAttributes(): WebGLContextAttributes {\n        return this.context.getContextAttributes();\n    }\n\n    public forceContextLoss(): void {\n        const extension = this.extensions.get(\"WEBGL_lose_context\");\n        if (extension) extension.loseContext();\n    }\n\n    public forceContextRestore(): void {\n        const extension = this.extensions.get(\"WEBGL_lose_context\");\n        if (extension) extension.restoreContext();\n    }\n\n    public getPixelRatio(): number {\n        return this.pixelRatio;\n    }\n\n    public setPixelRatio(value: number): void {\n        if (value === undefined) return;\n        this.pixelRatio = value;\n        this.setSize(this.width, this.height, false);\n    }\n\n    public getSize(): { width: number; height: number } {\n        return {\n            width: this.width,\n            height: this.height,\n        };\n    }\n\n    public setSize(width: number, height: number, updateStyle: boolean): void {\n        this.width = width;\n        this.height = height;\n        this.domElement.width = width * this.pixelRatio;\n        this.domElement.height = height * this.pixelRatio;\n        if (updateStyle !== false) {\n            this.domElement.style.width = width + \"px\";\n            this.domElement.style.height = height + \"px\";\n        }\n        this.setViewport(0, 0, width, height);\n    }\n\n    public getDrawingBufferSize(): { width: number; height: number } {\n        return {\n            width: this.width * this.pixelRatio,\n            height: this.height * this.pixelRatio,\n        };\n    }\n\n    public setDrawingBufferSize(width: number, height: number, pixelRatio: number): void {\n        this.width = width;\n        this.height = height;\n        this.pixelRatio = pixelRatio;\n        this.domElement.width = width * pixelRatio;\n        this.domElement.height = height * pixelRatio;\n        this.setViewport(0, 0, width, height);\n    }\n\n    public getCurrentViewport(): Vector4 {\n        return this.currentViewport;\n    }\n\n    public setViewport(x: number, y: number, width: number, height: number): void {\n        this.viewport.set(x, this.height - y - height, width, height);\n        this.state.viewport(this.currentViewport.copy(this.viewport).multiplyScalar(this.pixelRatio));\n    }\n\n    public setScissor(x: number, y: number, width: number, height: number): void {\n        this.scissor.set(x, this.height - y - height, width, height);\n        this.state.scissor(this.currentScissor.copy(this.scissor).multiplyScalar(this.pixelRatio));\n    }\n\n    public setScissorTest(value: boolean): void {\n        this.state.setScissorTest((this.scissorTest = value));\n    }\n\n    public getClearColor(): Color {\n        return this.background.getClearColor();\n    }\n\n    public setClearColor(color: Color, alpha: number): void {\n        this.background.setClearColor(color, alpha);\n    }\n\n    public getClearAlpha(): number {\n        return this.background.getClearAlpha();\n    }\n\n    public setClearAlpha(alpha: number): void {\n        this.background.setClearAlpha(alpha);\n    }\n\n    public clear(color?: boolean, depth?: boolean, stencil?: boolean): void {\n        const gl: WebGLRenderingContext = this.context;\n        let bits: number = 0;\n        if (color === undefined || color) bits |= gl.COLOR_BUFFER_BIT;\n        if (depth === undefined || depth) bits |= gl.DEPTH_BUFFER_BIT;\n        if (stencil === undefined || stencil) bits |= gl.STENCIL_BUFFER_BIT;\n        gl.clear(bits);\n    }\n\n    public clearColor(): void {\n        this.clear(true, false, false);\n    }\n\n    public clearDepth(): void {\n        this.clear(false, true, false);\n    }\n\n    public clearStencil(): void {\n        this.clear(false, false, true);\n    }\n\n    public clearTarget(renderTarget: WebGLRenderTarget, color: boolean, depth: boolean, stencil: boolean): void {\n        this.setRenderTarget(renderTarget);\n        this.clear(color, depth, stencil);\n    }\n\n    public dispose(): void {\n        this.domElement.removeEventListener(\"webglcontextlost\", this.onContextLost, false);\n        this.domElement.removeEventListener(\"webglcontextrestored\", this.onContextRestore, false);\n        this.renderLists.dispose();\n        this.properties.dispose();\n        this.objects.dispose();\n    }\n\n    protected onContextLost = (event: Event): void => {\n        event.preventDefault();\n        console.log(\"THREE.WebGLRenderer: Context Lost.\");\n        this.isContextLost = true;\n    };\n\n    protected onContextRestore = (): void => {\n        console.log(\"THREE.WebGLRenderer: Context Restored.\");\n        this.isContextLost = false;\n        this.initGLContext();\n    };\n\n    protected initGLContext() {\n        const gl = this.context;\n        const extensions: WebGLExtensions = new WebGLExtensions(gl);\n        extensions.get(\"WEBGL_depth_texture\");\n        extensions.get(\"OES_texture_float\");\n        extensions.get(\"OES_texture_float_linear\");\n        extensions.get(\"OES_texture_half_float\");\n        extensions.get(\"OES_texture_half_float_linear\");\n        extensions.get(\"OES_standard_derivatives\");\n        extensions.get(\"OES_element_index_uint\");\n        extensions.get(\"ANGLE_instanced_arrays\");\n        const utils: WebGLUtils = new WebGLUtils(gl, extensions);\n        const capabilities: WebGLCapabilities = new WebGLCapabilities(gl, extensions, this.parameters);\n        const state: WebGLState = new WebGLState(gl, extensions, utils);\n        state.scissor(this.currentScissor.copy(this.scissor).multiplyScalar(this.pixelRatio));\n        state.viewport(this.currentViewport.copy(this.viewport).multiplyScalar(this.pixelRatio));\n        const properties: WebGLProperties = new WebGLProperties();\n        const textures = new WebGLTextures(\n            gl,\n            extensions,\n            state,\n            properties,\n            capabilities,\n            utils,\n            this.infoMemory,\n            this.infoRender,\n        );\n        const attributes: WebGLAttributes = new WebGLAttributes(gl);\n        const geometries: WebGLGeometries = new WebGLGeometries(gl, attributes, this.infoMemory);\n        const objects: WebGLObjects = new WebGLObjects(geometries, this.infoRender);\n        const morphtargets: WebGLMorphtargets = new WebGLMorphtargets(gl);\n        const programCache: WebGLPrograms = new WebGLPrograms(this, extensions, capabilities);\n        const lights: WebGLLights = new WebGLLights();\n        const renderLists: WebGLRenderLists = new WebGLRenderLists();\n        const background: WebGLBackground = new WebGLBackground(this, state, geometries, this.premultipliedAlpha);\n        const bufferRenderer: WebGLBufferRenderer = new WebGLBufferRenderer(gl, extensions, this.infoRender);\n        const indexedBufferRenderer: WebGLIndexedBufferRenderer = new WebGLIndexedBufferRenderer(\n            gl,\n            extensions,\n            this.infoRender,\n        );\n        const spriteRenderer: WebGLSpriteRenderer = new WebGLSpriteRenderer(this, state, textures, capabilities);\n\n        this.info.programs = programCache.programs;\n        this.extensions = extensions;\n        this.utils = utils;\n        this.capabilities = capabilities;\n        this.state = state;\n        this.properties = properties;\n        this.textures = textures;\n        this.attributes = attributes;\n        this.geometries = geometries;\n        this.objects = objects;\n        this.morphtargets = morphtargets;\n        this.programCache = programCache;\n        this.lights = lights;\n        this.renderLists = renderLists;\n        this.background = background;\n        this.bufferRenderer = bufferRenderer;\n        this.indexedBufferRenderer = indexedBufferRenderer;\n        this.spriteRenderer = spriteRenderer;\n    }\n\n    public compile(scene: Scene, camera: Camera): void {\n        this.lightsArray.length = 0;\n        this.shadowsArray.length = 0;\n        scene.traverse((object: Object3D): void => {\n            if (object instanceof Light) {\n                this.lightsArray.push(object);\n                if (object.castShadow) {\n                    this.shadowsArray.push(object);\n                }\n            }\n        });\n        this.lights.setup(this.lightsArray, this.shadowsArray, camera);\n        scene.traverse((obj: Object3D): void => {\n            const object: Line | Mesh | Points = obj as Line | Mesh | Points;\n            if (object.material) {\n                if (Array.isArray(object.material)) {\n                    for (let i: number = 0; i < object.material.length; i++) {\n                        this.initMaterial(object.material[i], scene.fog, object);\n                    }\n                } else {\n                    this.initMaterial(object.material, scene.fog, object);\n                }\n            }\n        });\n    }\n\n    protected isAnimating: boolean = false;\n    protected onAnimationFrame: (time: number) => any | null = null;\n    protected start(): void {\n        if (this.isAnimating) return;\n        window.requestAnimationFrame(this.loop);\n        this.isAnimating = true;\n    }\n\n    protected loop = (time: number): void => {\n        if (this.onAnimationFrame !== null) this.onAnimationFrame(time);\n        window.requestAnimationFrame(this.loop);\n    };\n\n    public animate(callback: (time: number) => any): void {\n        this.onAnimationFrame = callback;\n        this.start();\n    }\n\n    public render(\n        scene: Scene,\n        camera: PerspectiveCamera | OrthographicCamera,\n        renderTarget: WebGLRenderTarget,\n        forceClear: boolean,\n    ): void {\n        if (!(camera && camera instanceof Camera)) {\n            console.error(\"THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.\");\n            return;\n        }\n        if (this.isContextLost) return;\n        // reset caching for this frame\n        this.currentGeometryProgram = \"\";\n        this.currentMaterialId = -1;\n        this.currentCamera = null;\n        // update scene graph\n        if (scene.autoUpdate === true) scene.updateMatrixWorld();\n        // update camera matrices and frustum\n        if (camera.parent === null) camera.updateMatrixWorld();\n        scene.onBeforeRender(this, scene, camera, renderTarget);\n        this.projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n        this.frustum.setFromMatrix(this.projScreenMatrix);\n        this.lightsArray.length = 0;\n        this.shadowsArray.length = 0;\n        this.spritesArray.length = 0;\n        this.clippingEnabled = this.clipping.init(this.clippingPlanes, this.localClippingEnabled, camera);\n        this.currentRenderList = this.renderLists.get(scene, camera);\n        this.currentRenderList.init();\n        this.projectObject(scene, camera, this.sortObjects);\n        if (this.sortObjects === true) {\n            this.currentRenderList.sort();\n        }\n        //\n        if (this.clippingEnabled) this.clipping.beginShadows();\n        this.shadowMap.render(this.shadowsArray, scene, camera);\n        this.lights.setup(this.lightsArray, this.shadowsArray, camera);\n        if (this.clippingEnabled) this.clipping.endShadows();\n        //\n        if (this.info.autoReset) this.info.reset();\n        if (renderTarget === undefined) {\n            renderTarget = null;\n        }\n        this.setRenderTarget(renderTarget);\n        //\n        this.background.render(this.currentRenderList, scene, camera, forceClear);\n        // render scene\n        const opaqueObjects: IRenderItem[] = this.currentRenderList.opaque;\n        const transparentObjects: IRenderItem[] = this.currentRenderList.transparent;\n        if (scene.overrideMaterial) {\n            const overrideMaterial: Material = scene.overrideMaterial;\n            if (opaqueObjects.length) this.renderObjects(opaqueObjects, scene, camera, overrideMaterial);\n            if (transparentObjects.length) this.renderObjects(transparentObjects, scene, camera, overrideMaterial);\n        } else {\n            // opaque pass (front-to-back order)\n            if (opaqueObjects.length) this.renderObjects(opaqueObjects, scene, camera);\n            // transparent pass (back-to-front order)\n            if (transparentObjects.length) this.renderObjects(transparentObjects, scene, camera);\n        }\n        // custom renderers\n        this.spriteRenderer.render(this.spritesArray, scene, camera);\n        // Generate mipmap if we're using any kind of mipmap filtering\n        if (renderTarget) {\n            this.textures.updateRenderTargetMipmap(renderTarget);\n        }\n        // Ensure depth buffer writing is enabled so it can be cleared on next render\n        const state: WebGLState = this.state;\n        state.buffers.depth.setTest(true);\n        state.buffers.depth.setMask(true);\n        state.buffers.color.setMask(true);\n        state.setPolygonOffset(false);\n        //scene.onAfterRender(this, scene, camera, renderTarget );\n        // _gl.finish();\n    }\n\n    protected projectObject(object: Object3D, camera: Camera, sortObjects: boolean = false): void {\n        if (object.visible === false) return;\n        const visible: boolean = object.layers.test(camera.layers);\n        if (visible) {\n            if (object instanceof Light) {\n                this.lightsArray.push(object);\n                if (object.castShadow) {\n                    this.shadowsArray.push(object);\n                }\n            } else if (object instanceof Sprite) {\n                if (!object.frustumCulled || this.frustum.intersectsSprite(object)) {\n                    this.spritesArray.push(object);\n                }\n            } else if (object instanceof ImmediateRenderObject) {\n                if (sortObjects) {\n                    this.tempVector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(this.projScreenMatrix);\n                }\n                this.currentRenderList.push(object, null, object.material, this.tempVector3.z, null);\n            } else if (object instanceof Mesh || object instanceof Line || object instanceof Points) {\n                if (object instanceof SkinnedMesh) {\n                    object.skeleton.update();\n                }\n                if (!object.frustumCulled || this.frustum.intersectsObject(object)) {\n                    if (sortObjects) {\n                        this.tempVector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(this.projScreenMatrix);\n                    }\n                    const geometry: BufferGeometry = this.objects.update(object);\n                    const material = object.material;\n                    if (Array.isArray(material)) {\n                        const groups: IGroup[] = geometry.groups;\n                        for (let i: number = 0, l: number = groups.length; i < l; i++) {\n                            const group: IGroup = groups[i];\n                            const groupMaterial: Material = material[group.materialIndex];\n                            if (groupMaterial && groupMaterial.visible) {\n                                this.currentRenderList.push(object, geometry, groupMaterial, this.tempVector3.z, group);\n                            }\n                        }\n                    } else if (material.visible) {\n                        this.currentRenderList.push(object, geometry, material, this.tempVector3.z, null);\n                    }\n                }\n            }\n        }\n        const children: Object3D[] = object.children;\n        for (let i: number = 0, l: number = children.length; i < l; i++) {\n            this.projectObject(children[i], camera, sortObjects);\n        }\n    }\n\n    protected renderObjects(\n        renderList: IRenderItem[],\n        scene: Scene,\n        camera: PerspectiveCamera | OrthographicCamera,\n        overrideMaterial?: Material,\n    ): void {\n        for (let i: number = 0, l: number = renderList.length; i < l; i++) {\n            const renderItem: IRenderItem = renderList[i];\n            const object: Object3D = renderItem.object;\n            const geometry: BufferGeometry = renderItem.geometry;\n            const material: Material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n            const group: IGroup = renderItem.group;\n            if (camera instanceof ArrayCamera) {\n                this.currentArrayCamera = camera;\n                const cameras: ArrayCameraCamera[] = camera.cameras;\n                for (var j = 0, jl = cameras.length; j < jl; j++) {\n                    var camera2 = cameras[j];\n                    if (object.layers.test(camera2.layers)) {\n                        var bounds = camera2.bounds;\n                        var x = bounds.x * this.width;\n                        var y = bounds.y * this.height;\n                        var width = bounds.z * this.width;\n                        var height = bounds.w * this.height;\n                        this.state.viewport(\n                            this.currentViewport.set(x, y, width, height).multiplyScalar(this.pixelRatio),\n                        );\n                        this.renderObject(object, scene, camera2, geometry, material, group);\n                    }\n                }\n            } else {\n                this.currentArrayCamera = null;\n                this.renderObject(object, scene, camera, geometry, material, group);\n            }\n        }\n    }\n\n    protected renderObject(\n        object: Object3D,\n        scene: Scene,\n        camera: PerspectiveCamera | OrthographicCamera,\n        geometry: BufferGeometry,\n        material: Material,\n        group: IGroup,\n    ): void {\n        object.onBeforeRender(this, scene, camera, geometry, material, group);\n        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n        object.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n        if (object instanceof ImmediateRenderObject) {\n            //What???\n            var frontFaceCW = object instanceof Mesh && object.matrixWorld.determinant() < 0;\n            this.state.setMaterial(material, frontFaceCW);\n            var program = this.setProgram(camera, scene.fog, material, object);\n            this.currentGeometryProgram = \"\";\n            this.renderObjectImmediate(object, program, material);\n        } else {\n            this.renderBufferDirect(camera, scene.fog, geometry, material, object, group);\n        }\n        //object.onAfterRender(this, scene, camera, geometry, material, group );\n    }\n\n    // Buffer rendering\n    // renderObjectImmediate 目前看来很有问题\n    protected renderObjectImmediate(\n        object: ImmediateRenderObject,\n        program: WebGLProgramWrapper,\n        material: Material,\n    ): void {\n        object.render((object: ImmediateRenderObject) => {\n            this.renderBufferImmediate(object, program, material);\n        });\n    }\n\n    protected renderBufferImmediate(\n        object: ImmediateRenderObject,\n        program: WebGLProgramWrapper,\n        material: Material,\n    ): void {\n        const state: WebGLState = this.state;\n        const gl: WebGLRenderingContext = this.context;\n        state.initAttributes();\n        const buffers: IImmediateRenderObjectProperties = this.properties.get(object);\n        if (object.hasPositions && !buffers.position) buffers.position = gl.createBuffer();\n        if (object.hasNormals && !buffers.normal) buffers.normal = gl.createBuffer();\n        if (object.hasUvs && !buffers.uv) buffers.uv = gl.createBuffer();\n        if (object.hasColors && !buffers.color) buffers.color = gl.createBuffer();\n        const programAttributes: { [key: string]: number } = program.getAttributes();\n        if (object.hasPositions) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\n            gl.bufferData(gl.ARRAY_BUFFER, object.positionArray, gl.DYNAMIC_DRAW);\n            state.enableAttribute(programAttributes.position);\n            gl.vertexAttribPointer(programAttributes.position, 3, gl.FLOAT, false, 0, 0);\n        }\n        if (object.hasNormals) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffers.normal);\n            if (\n                !(material instanceof MeshPhongMaterial) &&\n                !(material instanceof MeshStandardMaterial) &&\n                !(material instanceof MeshNormalMaterial) &&\n                material.flatShading === true\n            ) {\n                for (let i: number = 0, l: number = object.count * 3; i < l; i += 9) {\n                    const array = object.normalArray;\n                    const nx: number = (array[i + 0] + array[i + 3] + array[i + 6]) / 3;\n                    const ny: number = (array[i + 1] + array[i + 4] + array[i + 7]) / 3;\n                    const nz: number = (array[i + 2] + array[i + 5] + array[i + 8]) / 3;\n                    array[i + 0] = nx;\n                    array[i + 1] = ny;\n                    array[i + 2] = nz;\n                    array[i + 3] = nx;\n                    array[i + 4] = ny;\n                    array[i + 5] = nz;\n                    array[i + 6] = nx;\n                    array[i + 7] = ny;\n                    array[i + 8] = nz;\n                }\n            }\n            gl.bufferData(gl.ARRAY_BUFFER, object.normalArray, gl.DYNAMIC_DRAW);\n            state.enableAttribute(programAttributes.normal);\n            gl.vertexAttribPointer(programAttributes.normal, 3, gl.FLOAT, false, 0, 0);\n        }\n        if (object.hasUvs && material.map) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffers.uv);\n            gl.bufferData(gl.ARRAY_BUFFER, object.uvArray, gl.DYNAMIC_DRAW);\n            state.enableAttribute(programAttributes.uv);\n            gl.vertexAttribPointer(programAttributes.uv, 2, gl.FLOAT, false, 0, 0);\n        }\n        if (object.hasColors && material.vertexColors !== NoColors) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\n            gl.bufferData(gl.ARRAY_BUFFER, object.colorArray, gl.DYNAMIC_DRAW);\n            state.enableAttribute(programAttributes.color);\n            gl.vertexAttribPointer(programAttributes.color, 3, gl.FLOAT, false, 0, 0);\n        }\n        state.disableUnusedAttributes();\n        gl.drawArrays(gl.TRIANGLES, 0, object.count);\n        object.count = 0;\n    }\n\n    public renderBufferDirect(\n        camera: PerspectiveCamera | OrthographicCamera,\n        fog: Fog | FogExp2 | null,\n        geometry: BufferGeometry,\n        material: Material,\n        object: Object3D,\n        group: IGroup | null,\n    ): void {\n        const gl: WebGLRenderingContext = this.context;\n        const frontFaceCW: boolean = object instanceof Mesh && object.matrixWorld.determinant() < 0;\n        this.state.setMaterial(material, frontFaceCW);\n        const program = this.setProgram(camera, fog, material, object);\n        const geometryProgram = geometry.id + \"_\" + program.id + \"_\" + (material.wireframe === true);\n        let updateBuffers: Boolean = false;\n        if (geometryProgram !== this.currentGeometryProgram) {\n            this.currentGeometryProgram = geometryProgram;\n            updateBuffers = true;\n        }\n        if ((object as Mesh).morphTargetInfluences) {\n            this.morphtargets.update(object, geometry, material, program);\n            updateBuffers = true;\n        }\n        //\n        let index: BufferAttribute = geometry.index;\n        const position: BufferAttribute = geometry.attributes.position;\n        let rangeFactor: number = 1;\n        if (material.wireframe === true) {\n            index = this.geometries.getWireframeAttribute(geometry);\n            rangeFactor = 2;\n        }\n        let attribute: IWebGLBufferWrapper;\n        let renderer: WebGLBufferRenderer | WebGLIndexedBufferRenderer = this.bufferRenderer;\n        if (index !== null) {\n            attribute = this.attributes.get(index);\n            renderer = this.indexedBufferRenderer;\n            renderer.setIndex(attribute);\n        }\n        if (updateBuffers) {\n            this.setupVertexAttributes(material, program, geometry);\n            if (index !== null) {\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attribute.buffer);\n            }\n        }\n        //\n        let dataCount: number = 0;\n        if (index !== null) {\n            dataCount = index.count;\n        } else if (position !== undefined) {\n            dataCount = position.count;\n        }\n        const rangeStart: number = geometry.drawRange.start * rangeFactor;\n        const rangeCount: number = geometry.drawRange.count * rangeFactor;\n        const groupStart: number = group !== null ? group.start * rangeFactor : 0;\n        const groupCount: number = group !== null ? group.count * rangeFactor : Infinity;\n        const drawStart: number = Math.max(rangeStart, groupStart);\n        const drawEnd: number = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n        const drawCount: number = Math.max(0, drawEnd - drawStart + 1);\n        if (drawCount === 0) return;\n        //\n        if (object instanceof Mesh) {\n            if (material.wireframe === true) {\n                this.state.setLineWidth(material.wireframeLinewidth * this.getTargetPixelRatio());\n                renderer.setMode(gl.LINES);\n            } else {\n                switch (object.drawMode) {\n                    case TrianglesDrawMode:\n                        renderer.setMode(gl.TRIANGLES);\n                        break;\n                    case TriangleStripDrawMode:\n                        renderer.setMode(gl.TRIANGLE_STRIP);\n                        break;\n                    case TriangleFanDrawMode:\n                        renderer.setMode(gl.TRIANGLE_FAN);\n                        break;\n                }\n            }\n        } else if (object instanceof Line) {\n            let lineWidth: number = material.linewidth;\n            if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n            this.state.setLineWidth(lineWidth * this.getTargetPixelRatio());\n            if (object instanceof LineSegments) {\n                renderer.setMode(gl.LINES);\n            } else if (object instanceof LineLoop) {\n                renderer.setMode(gl.LINE_LOOP);\n            } else {\n                renderer.setMode(gl.LINE_STRIP);\n            }\n        } else if (object instanceof Points) {\n            renderer.setMode(gl.POINTS);\n        }\n        if (geometry && geometry instanceof InstancedBufferGeometry) {\n            if (geometry.maxInstancedCount > 0) {\n                renderer.renderInstances(geometry, drawStart, drawCount);\n            }\n        } else {\n            renderer.render(drawStart, drawCount);\n        }\n    }\n\n    protected setProgram(\n        camera: PerspectiveCamera | OrthographicCamera,\n        fog: Fog | FogExp2 | null,\n        material: Material,\n        object: Object3D,\n    ): WebGLProgramWrapper {\n        const gl: WebGLRenderingContext = this.context;\n        this.usedTextureUnits = 0;\n        const materialProperties: IMaterialProperties = this.properties.get(material);\n        if (this.clippingEnabled) {\n            if (this.localClippingEnabled || camera !== this.currentCamera) {\n                const useCache: boolean = camera === this.currentCamera && material.id === this.currentMaterialId;\n                // we might want to call this function with some ClippingGroup\n                // object instead of the material, once it becomes feasible\n                // (#8465, #8379)\n                this.clipping.setState(\n                    material.clippingPlanes,\n                    material.clipIntersection,\n                    material.clipShadows,\n                    camera,\n                    materialProperties,\n                    useCache,\n                );\n            }\n        }\n        if (material.needsUpdate === false) {\n            if (materialProperties.program === undefined) {\n                material.needsUpdate = true;\n            } else if (material.fog && materialProperties.fog !== fog) {\n                material.needsUpdate = true;\n            } else if (material.lights && materialProperties.lightsHash !== this.lights.state.hash) {\n                material.needsUpdate = true;\n            } else if (\n                materialProperties.numClippingPlanes !== undefined &&\n                (materialProperties.numClippingPlanes !== this.clipping.numPlanes ||\n                    materialProperties.numIntersection !== this.clipping.numIntersection)\n            ) {\n                material.needsUpdate = true;\n            }\n        }\n        if (material.needsUpdate) {\n            this.initMaterial(material, fog, object);\n            material.needsUpdate = false;\n        }\n        let refreshProgram: boolean = false;\n        let refreshMaterial: boolean = false;\n        let refreshLights: boolean = false;\n        const program: WebGLProgramWrapper = materialProperties.program,\n            p_uniforms: WebGLUniformsWrapper = program.getUniforms(),\n            m_uniforms: { [key: string]: IUniform } = materialProperties.shader.uniforms;\n        if (this.state.useProgram(program.program)) {\n            refreshProgram = true;\n            refreshMaterial = true;\n            refreshLights = true;\n        }\n        if (material.id !== this.currentMaterialId) {\n            this.currentMaterialId = material.id;\n            refreshMaterial = true;\n        }\n        if (refreshProgram || camera !== this.currentCamera) {\n            p_uniforms.setValue(\"projectionMatrix\", camera.projectionMatrix);\n            if (this.capabilities.logarithmicDepthBuffer) {\n                p_uniforms.setValue(\"logDepthBufFC\", 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n            }\n            // Avoid unneeded uniform updates per ArrayCamera's sub-camera\n            if (this.currentCamera !== (this.currentArrayCamera || camera)) {\n                this.currentCamera = this.currentArrayCamera || camera;\n                // lighting uniforms depend on the camera so enforce an update\n                // now, in case this material supports lights - or later, when\n                // the next material that does gets activated:\n                refreshMaterial = true; // set to true on material change\n                refreshLights = true; // remains set until update done\n            }\n            // load material specific uniforms\n            // (shader material also gets them for the sake of genericity)\n            if (\n                material instanceof ShaderMaterial ||\n                material instanceof MeshPhongMaterial ||\n                material instanceof MeshStandardMaterial ||\n                material.envMap\n            ) {\n                const uCamPos: UniformSetterType = p_uniforms.map.cameraPosition;\n                if (uCamPos !== undefined) {\n                    (uCamPos.setValue as (arg: AllUniformType) => void)(\n                        new Vector3().setFromMatrixPosition(camera.matrixWorld),\n                    );\n                }\n            }\n            if (\n                material instanceof MeshPhongMaterial ||\n                material instanceof MeshLambertMaterial ||\n                material instanceof MeshBasicMaterial ||\n                material instanceof MeshStandardMaterial ||\n                material instanceof ShaderMaterial ||\n                material.skinning\n            ) {\n                p_uniforms.setValue(\"viewMatrix\", camera.matrixWorldInverse);\n            }\n        }\n        // skinning uniforms must be set even if material didn't change\n        // auto-setting of texture unit for bone texture must go before other textures\n        // not sure why, but otherwise weird things happen\n        if (material.skinning) {\n            p_uniforms.setOptional(object, \"bindMatrix\");\n            p_uniforms.setOptional(object, \"bindMatrixInverse\");\n            const skeleton: Skeleton = (object as SkinnedMesh).skeleton;\n            if (skeleton) {\n                const bones: Bone[] = skeleton.bones;\n                if (this.capabilities.floatVertexTextures) {\n                    if (skeleton.boneTexture === undefined) {\n                        // layout (1 matrix = 4 pixels)\n                        //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n                        //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n                        //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n                        //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n                        //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n                        let size: number = Math.sqrt(bones.length * 4); // 4 pixels needed for 1 matrix\n                        size = MathUtil.ceilPowerOfTwo(size);\n                        size = Math.max(size, 4);\n                        const boneMatrices: Float32Array = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n                        boneMatrices.set(skeleton.boneMatrices); // copy current values\n                        const boneTexture: DataTexture = new DataTexture(\n                            boneMatrices,\n                            size,\n                            size,\n                            RGBAFormat,\n                            FloatType,\n                        );\n                        skeleton.boneMatrices = boneMatrices;\n                        skeleton.boneTexture = boneTexture;\n                        skeleton.boneTextureSize = size;\n                    }\n                    p_uniforms.setValue(\"boneTexture\", skeleton.boneTexture);\n                    p_uniforms.setValue(\"boneTextureSize\", skeleton.boneTextureSize);\n                } else {\n                    p_uniforms.setOptional(skeleton, \"boneMatrices\");\n                }\n            }\n        }\n        if (refreshMaterial) {\n            p_uniforms.setValue(\"toneMappingExposure\", this.toneMappingExposure);\n            p_uniforms.setValue(\"toneMappingWhitePoint\", this.toneMappingWhitePoint);\n            if (material.lights) {\n                // the current material requires lighting info\n                // note: all lighting uniforms are always set correctly\n                // they simply reference the renderer's state for their\n                // values\n                //\n                // use the current material's .needsUpdate flags to set\n                // the GL state when required\n                this.markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n            }\n            // refresh uniforms common to several materials\n            if (fog && material.fog) {\n                this.refreshUniformsFog(m_uniforms, fog);\n            }\n            if (material instanceof MeshBasicMaterial) {\n                this.refreshUniformsCommon(m_uniforms, material);\n            } else if (material instanceof MeshLambertMaterial) {\n                this.refreshUniformsCommon(m_uniforms, material);\n                this.refreshUniformsLambert(m_uniforms, material);\n            } else if (material instanceof MeshPhongMaterial) {\n                this.refreshUniformsCommon(m_uniforms, material);\n                if (material instanceof MeshToonMaterial) {\n                    this.refreshUniformsToon(m_uniforms, material);\n                } else {\n                    this.refreshUniformsPhong(m_uniforms, material);\n                }\n            } else if (material instanceof MeshStandardMaterial) {\n                this.refreshUniformsCommon(m_uniforms, material);\n                if (material instanceof MeshPhysicalMaterial) {\n                    this.refreshUniformsPhysical(m_uniforms, material);\n                } else {\n                    this.refreshUniformsStandard(m_uniforms, material);\n                }\n            } else if (material instanceof MeshDepthMaterial) {\n                this.refreshUniformsCommon(m_uniforms, material);\n                this.refreshUniformsDepth(m_uniforms, material);\n            } else if (material instanceof MeshDistanceMaterial) {\n                this.refreshUniformsCommon(m_uniforms, material);\n                this.refreshUniformsDistance(m_uniforms, material);\n            } else if (material instanceof MeshNormalMaterial) {\n                this.refreshUniformsCommon(m_uniforms, material);\n                this.refreshUniformsNormal(m_uniforms, material);\n            } else if (material instanceof LineBasicMaterial) {\n                this.refreshUniformsLine(m_uniforms, material);\n                if (material instanceof LineDashedMaterial) {\n                    this.refreshUniformsDash(m_uniforms, material);\n                }\n            } else if (material instanceof PointsMaterial) {\n                this.refreshUniformsPoints(m_uniforms, material);\n            } else if (material instanceof ShadowMaterial) {\n                m_uniforms.color.value = material.color;\n                m_uniforms.opacity.value = material.opacity;\n            }\n            // RectAreaLight Texture\n            // TODO (mrdoob): Find a nicer implementation\n            /**\n             * LTC_1? LTC_2?\n             */\n            // if (m_uniforms.ltc_1 !== undefined) m_uniforms.ltc_1.value = UniformsLib.LTC_1;\n            // if (m_uniforms.ltc_2 !== undefined) m_uniforms.ltc_2.value = UniformsLib.LTC_2;\n            WebGLUniformsWrapper.upload(materialProperties.uniformsList, m_uniforms);\n        }\n        // common matrices\n        p_uniforms.setValue(\"modelViewMatrix\", object.modelViewMatrix);\n        p_uniforms.setValue(\"normalMatrix\", object.normalMatrix);\n        p_uniforms.setValue(\"modelMatrix\", object.matrixWorld);\n        return program;\n    }\n\n    protected setupVertexAttributes(\n        material: Material,\n        program: WebGLProgramWrapper,\n        geometry: BufferGeometry,\n        startIndex: number = 0,\n    ): void {\n        const state = this.state;\n        const gl = this.context;\n        if (geometry && geometry instanceof InstancedBufferGeometry) {\n            if (this.extensions.get(\"ANGLE_instanced_arrays\") === null) {\n                console.error(\n                    \"THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\",\n                );\n                return;\n            }\n        }\n        state.initAttributes();\n        const geometryAttributes: { [key: string]: BufferAttribute } = geometry.attributes;\n        const programAttributes: { [key: string]: number } = program.getAttributes();\n        // ShaderMaterial\n        const materialDefaultAttributeValues: { [key: string]: number[] } = material.defaultAttributeValues;\n        for (const name in programAttributes) {\n            const programAttribute: number = programAttributes[name];\n            if (programAttribute >= 0) {\n                const geometryAttribute: BufferAttribute = geometryAttributes[name];\n                if (geometryAttribute !== undefined) {\n                    const normalized: boolean = geometryAttribute.normalized;\n                    const size: number = geometryAttribute.itemSize;\n                    const attribute: IWebGLBufferWrapper = this.attributes.get(geometryAttribute);\n                    // TODO Attribute may not be available on context restore\n                    if (attribute === undefined) continue;\n                    const buffer: WebGLBuffer = attribute.buffer;\n                    const type: number = attribute.type;\n                    const bytesPerElement: number = attribute.bytesPerElement;\n                    if (geometryAttribute instanceof InstancedInterleavedBufferAttribute) {\n                        const stride: number = geometryAttribute.stride;\n                        const offset: number = geometryAttribute.offset;\n                        if (geometryAttribute) {\n                            state.enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n                            if ((geometry as InstancedBufferGeometry).maxInstancedCount === undefined) {\n                                (geometry as InstancedBufferGeometry).maxInstancedCount =\n                                    geometryAttribute.meshPerAttribute * geometryAttribute.count;\n                            }\n                        } else {\n                            state.enableAttribute(programAttribute);\n                        }\n                        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n                        gl.vertexAttribPointer(\n                            programAttribute,\n                            size,\n                            type,\n                            normalized,\n                            stride * bytesPerElement,\n                            (startIndex * stride + offset) * bytesPerElement,\n                        );\n                    } else {\n                        if (geometryAttribute instanceof InstancedBufferAttribute) {\n                            state.enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n                            if ((geometry as InstancedBufferGeometry).maxInstancedCount === undefined) {\n                                (geometry as InstancedBufferGeometry).maxInstancedCount =\n                                    geometryAttribute.meshPerAttribute * geometryAttribute.count;\n                            }\n                        } else {\n                            state.enableAttribute(programAttribute);\n                        }\n                        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n                        gl.vertexAttribPointer(\n                            programAttribute,\n                            size,\n                            type,\n                            normalized,\n                            0,\n                            startIndex * size * bytesPerElement,\n                        );\n                    }\n                } else if (materialDefaultAttributeValues !== undefined) {\n                    const value: number[] = materialDefaultAttributeValues[name];\n                    if (value !== undefined) {\n                        switch (value.length) {\n                            case 2:\n                                gl.vertexAttrib2fv(programAttribute, value);\n                                break;\n                            case 3:\n                                gl.vertexAttrib3fv(programAttribute, value);\n                                break;\n                            case 4:\n                                gl.vertexAttrib4fv(programAttribute, value);\n                                break;\n                            default:\n                                gl.vertexAttrib1fv(programAttribute, value);\n                        }\n                    }\n                }\n            }\n        }\n        state.disableUnusedAttributes();\n    }\n\n    protected initMaterial(material: Material, fog: Fog | FogExp2 | null, object: Object3D) {\n        const lights: WebGLLights = this.lights;\n        const clipping: WebGLClipping = this.clipping;\n        const materialProperties: IMaterialProperties = this.properties.get(material);\n        const parameters: IProgramParameters = this.programCache.getParameters(\n            material,\n            this.lights.state,\n            this.shadowsArray,\n            fog,\n            this.clipping.numPlanes,\n            this.clipping.numIntersection,\n            object,\n        );\n        const code: string = this.programCache.getProgramCode(material, parameters);\n        let program: WebGLProgramWrapper = materialProperties.program;\n        let programChange: boolean = true;\n        if (program === undefined) {\n            // new material\n            material.addEventListener(\"dispose\", this.onMaterialDispose);\n        } else if (program.code !== code) {\n            // changed glsl or parameters\n            this.releaseMaterialProgramReference(material);\n        } else if (parameters.shaderID !== undefined) {\n            // same glsl and uniform list\n            return;\n        } else {\n            // only rebuild uniform list\n            programChange = false;\n        }\n        if (programChange) {\n            if (parameters.shaderID) {\n                const shader: {\n                    uniforms: { [key: string]: IUniform };\n                    vertexShader: string;\n                    fragmentShader: string;\n                } =\n                    ShaderLib[parameters.shaderID];\n                materialProperties.shader = {\n                    name: material.type,\n                    uniforms: UniformsUtils.clone(shader.uniforms),\n                    vertexShader: shader.vertexShader,\n                    fragmentShader: shader.fragmentShader,\n                };\n            } else {\n                materialProperties.shader = {\n                    name: material.type,\n                    uniforms: (material as ShaderMaterial).uniforms,\n                    vertexShader: material.vertexShader,\n                    fragmentShader: material.fragmentShader,\n                };\n            }\n            material.onBeforeCompile(materialProperties.shader);\n            program = this.programCache.acquireProgram(material, materialProperties.shader, parameters, code);\n            materialProperties.program = program;\n            material.program = program;\n        }\n        const programAttributes: { [key: string]: number } = program.getAttributes();\n        if (material.morphTargets) {\n            material.numSupportedMorphTargets = 0;\n            for (let i: number = 0; i < this.maxMorphTargets; i++) {\n                if (programAttributes[\"morphTarget\" + i] >= 0) {\n                    material.numSupportedMorphTargets++;\n                }\n            }\n        }\n        if (material.morphNormals) {\n            material.numSupportedMorphNormals = 0;\n            for (let i: number = 0; i < this.maxMorphNormals; i++) {\n                if (programAttributes[\"morphNormal\" + i] >= 0) {\n                    material.numSupportedMorphNormals++;\n                }\n            }\n        }\n        const uniforms: { [key: string]: IUniform } = materialProperties.shader.uniforms;\n        if (\n            (!(material instanceof ShaderMaterial) && !(material instanceof RawShaderMaterial)) ||\n            material.clipping === true\n        ) {\n            materialProperties.numClippingPlanes = clipping.numPlanes;\n            materialProperties.numIntersection = clipping.numIntersection;\n            uniforms.clippingPlanes = clipping.uniform;\n        }\n        materialProperties.fog = fog;\n        // store the light setup it was created for\n        materialProperties.lightsHash = lights.state.hash;\n        if (material.lights) {\n            // wire up the material to this renderer's lighting state\n            uniforms.ambientLightColor.value = lights.state.ambient;\n            uniforms.directionalLights.value = lights.state.directional;\n            uniforms.spotLights.value = lights.state.spot;\n            uniforms.rectAreaLights.value = lights.state.rectArea;\n            uniforms.pointLights.value = lights.state.point;\n            uniforms.hemisphereLights.value = lights.state.hemi;\n            uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n            uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n            uniforms.spotShadowMap.value = lights.state.spotShadowMap;\n            uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n            uniforms.pointShadowMap.value = lights.state.pointShadowMap;\n            uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n            // TODO (abelnation): add area lights shadow info to uniforms\n        }\n        const progUniforms: WebGLUniformsWrapper = materialProperties.program.getUniforms();\n        const uniformsList: UniformSetterType[] = WebGLUniformsWrapper.seqWithValue(progUniforms.seq, uniforms);\n        materialProperties.uniformsList = uniformsList;\n    }\n\n    protected onMaterialDispose = (event: Event): void => {\n        const material: Material = (event.target as any) as Material;\n        material.removeEventListener(\"dispose\", this.onMaterialDispose);\n        this.deallocateMaterial(material);\n    };\n\n    protected deallocateMaterial(material: Material): void {\n        this.releaseMaterialProgramReference(material);\n        this.properties.remove(material);\n    }\n\n    protected releaseMaterialProgramReference(material: Material): void {\n        const programInfo: WebGLProgramWrapper = this.properties.get(material).program;\n        material.program = undefined;\n        if (programInfo !== undefined) {\n            this.programCache.releaseProgram(programInfo);\n        }\n    }\n\n    public setFaceCulling(cullFace: number, frontFaceDirection: number): void {\n        this.state.setCullFace(cullFace);\n        this.state.setFlipSided(frontFaceDirection === FrontFaceDirectionCW);\n    }\n\n    public allocTextureUnit(): number {\n        const textureUnit = this.usedTextureUnits;\n        if (textureUnit >= this.capabilities.maxTextures) {\n            console.warn(\n                \"THREE.WebGLRenderer: Trying to use \" +\n                    textureUnit +\n                    \" texture units while this GPU supports only \" +\n                    this.capabilities.maxTextures,\n            );\n        }\n        this.usedTextureUnits += 1;\n        return textureUnit;\n    }\n\n    protected setTexture2DWarned: boolean = false;\n\n    public setTexture2D(texture: Texture | WebGLRenderTarget, unit: number): void {\n        if (texture && texture instanceof WebGLRenderTarget) {\n            if (!this.setTexture2DWarned) {\n                console.warn(\n                    \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\",\n                );\n                this.setTexture2DWarned = true;\n            }\n            texture = texture.texture;\n        }\n        this.textures.setTexture2D(texture as Texture, unit);\n    }\n\n    protected setTextureCubeWarned: boolean = false;\n\n    public setTextureCube(cubeTexture: CubeTexture | WebGLRenderTargetCube, slot: number): void {\n        let texture: CubeTexture | WebGLRenderTargetCube | Texture = cubeTexture;\n        // backwards compatibility: peel texture.texture\n        if (cubeTexture && cubeTexture instanceof WebGLRenderTargetCube) {\n            if (!this.setTextureCubeWarned) {\n                console.warn(\n                    \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\",\n                );\n                this.setTextureCubeWarned = true;\n            }\n            texture = cubeTexture.texture;\n        }\n        // currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n        // TODO: unify these code paths\n        if (\n            (texture && texture instanceof CubeTexture) ||\n            (Array.isArray((texture as CubeTexture).image) && (texture as CubeTexture).image.length === 6)\n        ) {\n            // CompressedTexture can have Array in image :/\n            // this function alone should take care of cube textures\n            this.textures.setTextureCube(texture as CubeTexture, slot);\n        } else {\n            // assumed: texture property of THREE.WebGLRenderTargetCube\n            this.textures.setTextureCubeDynamic(texture as Texture, slot);\n        }\n    }\n\n    public getRenderTarget(): WebGLRenderTarget | null {\n        return this.currentRenderTarget;\n    }\n\n    public setRenderTarget(renderTarget: WebGLRenderTarget | WebGLRenderTargetCube): void {\n        const properties: WebGLProperties = this.properties;\n        this.currentRenderTarget = renderTarget;\n        if (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n            this.textures.setupRenderTarget(renderTarget);\n        }\n        let framebuffer: WebGLFramebuffer = null;\n        let isCube: boolean = false;\n        if (renderTarget) {\n            const __webglFramebuffer: WebGLFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n            if (renderTarget instanceof WebGLRenderTargetCube) {\n                framebuffer = __webglFramebuffer[renderTarget.activeCubeFace];\n                isCube = true;\n            } else {\n                framebuffer = __webglFramebuffer;\n            }\n            this.currentViewport.copy(renderTarget.viewport);\n            this.currentScissor.copy(renderTarget.scissor);\n            this.currentScissorTest = renderTarget.scissorTest;\n        } else {\n            this.currentViewport.copy(this.viewport).multiplyScalar(this.pixelRatio);\n            this.currentScissor.copy(this.scissor).multiplyScalar(this.pixelRatio);\n            this.currentScissorTest = this.scissorTest;\n        }\n        const gl: WebGLRenderingContext = this.context;\n        const state: WebGLState = this.state;\n        if (this.currentFramebuffer !== framebuffer) {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n            this.currentFramebuffer = framebuffer;\n        }\n        state.viewport(this.currentViewport);\n        state.scissor(this.currentScissor);\n        state.setScissorTest(this.currentScissorTest);\n        if (isCube) {\n            const textureProperties: ITextureProperties = properties.get(renderTarget.texture);\n            gl.framebufferTexture2D(\n                gl.FRAMEBUFFER,\n                gl.COLOR_ATTACHMENT0,\n                gl.TEXTURE_CUBE_MAP_POSITIVE_X + (renderTarget as WebGLRenderTargetCube).activeCubeFace,\n                textureProperties.__webglTexture,\n                (renderTarget as WebGLRenderTargetCube).activeMipMapLevel,\n            );\n        }\n    }\n\n    public readRenderTargetPixels(\n        renderTarget: WebGLRenderTarget,\n        x: number,\n        y: number,\n        width: number,\n        height: number,\n        buffer: TypedArray,\n    ): void {\n        if (!(renderTarget && renderTarget instanceof WebGLRenderTarget)) {\n            console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.\");\n            return;\n        }\n        const gl: WebGLRenderingContext = this.context;\n        const utils: WebGLUtils = this.utils;\n        const extensions: WebGLExtensions = this.extensions;\n        const framebuffer: WebGLFramebuffer = this.properties.get(renderTarget).__webglFramebuffer;\n        if (framebuffer) {\n            let restore: boolean = false;\n            if (framebuffer !== this.currentFramebuffer) {\n                gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n                restore = true;\n            }\n            try {\n                var texture = renderTarget.texture;\n                var textureFormat = texture.format;\n                var textureType = texture.type;\n                if (\n                    textureFormat !== RGBAFormat &&\n                    utils.convert(textureFormat) !== gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT)\n                ) {\n                    console.error(\n                        \"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.\",\n                    );\n                    return;\n                }\n                if (\n                    textureType !== UnsignedByteType &&\n                    utils.convert(textureType) !== gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE) && // IE11, Edge and Chrome Mac < 52 (#9513)\n                    !(\n                        textureType === FloatType &&\n                        (extensions.get(\"OES_texture_float\") || extensions.get(\"WEBGL_color_buffer_float\"))\n                    ) && // Chrome Mac >= 52 and Firefox\n                    !(textureType === HalfFloatType && extensions.get(\"EXT_color_buffer_half_float\"))\n                ) {\n                    console.error(\n                        \"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.\",\n                    );\n                    return;\n                }\n                if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE) {\n                    // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n                    if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {\n                        gl.readPixels(\n                            x,\n                            y,\n                            width,\n                            height,\n                            utils.convert(textureFormat),\n                            utils.convert(textureType),\n                            buffer,\n                        );\n                    }\n                } else {\n                    console.error(\n                        \"THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.\",\n                    );\n                }\n            } finally {\n                if (restore) {\n                    gl.bindFramebuffer(gl.FRAMEBUFFER, this.currentFramebuffer);\n                }\n            }\n        }\n    }\n\n    public copyFramebufferToTexture(position: Vector2, texture: Texture, level: number): void {\n        const gl: WebGLRenderingContext = this.context;\n        const width: number = texture.image.width;\n        const height: number = texture.image.height;\n        const internalFormat: number = this.utils.convert(texture.format);\n        this.setTexture2D(texture, 0);\n        gl.copyTexImage2D(gl.TEXTURE_2D, level || 0, internalFormat, position.x, position.y, width, height, 0);\n    }\n\n    // Uniforms (refresh uniforms objects)\n    protected refreshUniformsCommon(uniforms: { [key: string]: IUniform }, material: Material): void {\n        uniforms.opacity.value = material.opacity;\n        if (material.color) {\n            uniforms.diffuse.value = material.color;\n        }\n        if (material.emissive) {\n            (uniforms.emissive.value as Color).copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n        }\n        if (material.map) {\n            uniforms.map.value = material.map;\n        }\n        if (material.alphaMap) {\n            uniforms.alphaMap.value = material.alphaMap;\n        }\n        if (material.specularMap) {\n            uniforms.specularMap.value = material.specularMap;\n        }\n        if (material.envMap) {\n            uniforms.envMap.value = material.envMap;\n            // don't flip CubeTexture envMaps, flip everything else:\n            //  WebGLRenderTargetCube will be flipped for backwards compatibility\n            //  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n            // this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n            uniforms.flipEnvMap.value = !(material.envMap && material.envMap instanceof CubeTexture) ? 1 : -1;\n            uniforms.reflectivity.value = material.reflectivity;\n            uniforms.refractionRatio.value = material.refractionRatio;\n        }\n        if (material.lightMap) {\n            uniforms.lightMap.value = material.lightMap;\n            uniforms.lightMapIntensity.value = material.lightMapIntensity;\n        }\n        if (material.aoMap) {\n            uniforms.aoMap.value = material.aoMap;\n            uniforms.aoMapIntensity.value = material.aoMapIntensity;\n        }\n        // uv repeat and offset setting priorities\n        // 1. color map\n        // 2. specular map\n        // 3. normal map\n        // 4. bump map\n        // 5. alpha map\n        // 6. emissive map\n        let uvScaleMap: WebGLRenderTarget | Texture;\n        if (material.map) {\n            uvScaleMap = material.map;\n        } else if (material.specularMap) {\n            uvScaleMap = material.specularMap;\n        } else if (material.displacementMap) {\n            uvScaleMap = material.displacementMap;\n        } else if (material.normalMap) {\n            uvScaleMap = material.normalMap;\n        } else if (material.bumpMap) {\n            uvScaleMap = material.bumpMap;\n        } else if (material.roughnessMap) {\n            uvScaleMap = material.roughnessMap;\n        } else if (material.metalnessMap) {\n            uvScaleMap = material.metalnessMap;\n        } else if (material.alphaMap) {\n            uvScaleMap = material.alphaMap;\n        } else if (material.emissiveMap) {\n            uvScaleMap = material.emissiveMap;\n        }\n        if (uvScaleMap !== undefined) {\n            // backwards compatibility\n            if (uvScaleMap instanceof WebGLRenderTarget) {\n                uvScaleMap = uvScaleMap.texture;\n            }\n            if (uvScaleMap.matrixAutoUpdate === true) {\n                const offset: Vector2 = uvScaleMap.offset;\n                const repeat: Vector2 = uvScaleMap.repeat;\n                const rotation: number = uvScaleMap.rotation;\n                const center: Vector2 = uvScaleMap.center;\n                uvScaleMap.matrix.setUvTransform(offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y);\n            }\n            (uniforms.uvTransform.value as Matrix3).copy(uvScaleMap.matrix);\n        }\n    }\n\n    protected refreshUniformsLine(uniforms: { [key: string]: IUniform }, material: Material): void {\n        uniforms.diffuse.value = material.color;\n        uniforms.opacity.value = material.opacity;\n    }\n\n    protected refreshUniformsDash(uniforms: { [key: string]: IUniform }, material: Material): void {\n        uniforms.dashSize.value = material.dashSize;\n        uniforms.totalSize.value = material.dashSize + material.gapSize;\n        uniforms.scale.value = material.scale;\n    }\n\n    protected refreshUniformsPoints(uniforms: { [key: string]: IUniform }, material: Material): void {\n        uniforms.diffuse.value = material.color;\n        uniforms.opacity.value = material.opacity;\n        uniforms.size.value = material.size * this.pixelRatio;\n        uniforms.scale.value = this.height * 0.5;\n        uniforms.map.value = material.map;\n        if (material.map !== null) {\n            if (material.map.matrixAutoUpdate === true) {\n                const offset: Vector2 = material.map.offset;\n                const repeat: Vector2 = material.map.repeat;\n                const rotation: number = material.map.rotation;\n                const center: Vector2 = material.map.center;\n                material.map.matrix.setUvTransform(\n                    offset.x,\n                    offset.y,\n                    repeat.x,\n                    repeat.y,\n                    rotation,\n                    center.x,\n                    center.y,\n                );\n            }\n            (uniforms.uvTransform.value as Matrix3).copy(material.map.matrix);\n        }\n    }\n\n    protected refreshUniformsFog(uniforms: { [key: string]: IUniform }, fog: Fog | FogExp2): void {\n        uniforms.fogColor.value = fog.color;\n        if (fog instanceof Fog) {\n            uniforms.fogNear.value = fog.near;\n            uniforms.fogFar.value = fog.far;\n        } else if (fog instanceof FogExp2) {\n            uniforms.fogDensity.value = fog.density;\n        }\n    }\n\n    protected refreshUniformsLambert(uniforms: { [key: string]: IUniform }, material: Material): void {\n        if (material.emissiveMap) {\n            uniforms.emissiveMap.value = material.emissiveMap;\n        }\n    }\n\n    protected refreshUniformsPhong(uniforms: { [key: string]: IUniform }, material: Material): void {\n        uniforms.specular.value = material.specular;\n        uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n        if (material.emissiveMap) {\n            uniforms.emissiveMap.value = material.emissiveMap;\n        }\n        if (material.bumpMap) {\n            uniforms.bumpMap.value = material.bumpMap;\n            uniforms.bumpScale.value = material.bumpScale;\n        }\n        if (material.normalMap) {\n            uniforms.normalMap.value = material.normalMap;\n            (uniforms.normalScale.value as Vector2).copy(material.normalScale);\n        }\n        if (material.displacementMap) {\n            uniforms.displacementMap.value = material.displacementMap;\n            uniforms.displacementScale.value = material.displacementScale;\n            uniforms.displacementBias.value = material.displacementBias;\n        }\n    }\n\n    protected refreshUniformsToon(uniforms: { [key: string]: IUniform }, material: Material): void {\n        this.refreshUniformsPhong(uniforms, material);\n        if (material.gradientMap) {\n            uniforms.gradientMap.value = material.gradientMap;\n        }\n    }\n\n    protected refreshUniformsStandard(uniforms: { [key: string]: IUniform }, material: Material): void {\n        uniforms.roughness.value = material.roughness;\n        uniforms.metalness.value = material.metalness;\n        if (material.roughnessMap) {\n            uniforms.roughnessMap.value = material.roughnessMap;\n        }\n        if (material.metalnessMap) {\n            uniforms.metalnessMap.value = material.metalnessMap;\n        }\n        if (material.emissiveMap) {\n            uniforms.emissiveMap.value = material.emissiveMap;\n        }\n        if (material.bumpMap) {\n            uniforms.bumpMap.value = material.bumpMap;\n            uniforms.bumpScale.value = material.bumpScale;\n        }\n        if (material.normalMap) {\n            uniforms.normalMap.value = material.normalMap;\n            (uniforms.normalScale.value as Vector2).copy(material.normalScale);\n        }\n        if (material.displacementMap) {\n            uniforms.displacementMap.value = material.displacementMap;\n            uniforms.displacementScale.value = material.displacementScale;\n            uniforms.displacementBias.value = material.displacementBias;\n        }\n        if (material.envMap) {\n            //uniforms.envMap.value = material.envMap; // part of uniforms common\n            uniforms.envMapIntensity.value = material.envMapIntensity;\n        }\n    }\n\n    protected refreshUniformsPhysical(uniforms: { [key: string]: IUniform }, material: Material): void {\n        uniforms.clearCoat.value = material.clearCoat;\n        uniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n        this.refreshUniformsStandard(uniforms, material);\n    }\n\n    protected refreshUniformsDepth(uniforms: { [key: string]: IUniform }, material: Material): void {\n        if (material.displacementMap) {\n            uniforms.displacementMap.value = material.displacementMap;\n            uniforms.displacementScale.value = material.displacementScale;\n            uniforms.displacementBias.value = material.displacementBias;\n        }\n    }\n\n    protected refreshUniformsDistance(uniforms: { [key: string]: IUniform }, material: Material): void {\n        if (material.displacementMap) {\n            uniforms.displacementMap.value = material.displacementMap;\n            uniforms.displacementScale.value = material.displacementScale;\n            uniforms.displacementBias.value = material.displacementBias;\n        }\n        (uniforms.referencePosition.value as Vector3).copy(material.referencePosition);\n        uniforms.nearDistance.value = material.nearDistance;\n        uniforms.farDistance.value = material.farDistance;\n    }\n\n    protected refreshUniformsNormal(uniforms: { [key: string]: IUniform }, material: Material): void {\n        if (material.bumpMap) {\n            uniforms.bumpMap.value = material.bumpMap;\n            uniforms.bumpScale.value = material.bumpScale;\n        }\n        if (material.normalMap) {\n            uniforms.normalMap.value = material.normalMap;\n            (uniforms.normalScale.value as Vector2).copy(material.normalScale);\n        }\n        if (material.displacementMap) {\n            uniforms.displacementMap.value = material.displacementMap;\n            uniforms.displacementScale.value = material.displacementScale;\n            uniforms.displacementBias.value = material.displacementBias;\n        }\n    }\n\n    // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n    protected markUniformsLightsNeedsUpdate(uniforms: { [key: string]: IUniform }, value: boolean): void {\n        uniforms.ambientLightColor.needsUpdate = value;\n        uniforms.directionalLights.needsUpdate = value;\n        uniforms.pointLights.needsUpdate = value;\n        uniforms.spotLights.needsUpdate = value;\n        uniforms.rectAreaLights.needsUpdate = value;\n        uniforms.hemisphereLights.needsUpdate = value;\n    }\n}\n","import alphamap_fragment from \"./ShaderChunk/alphamap_fragment.glsl\";\nimport alphamap_pars_fragment from \"./ShaderChunk/alphamap_pars_fragment.glsl\";\nimport alphatest_fragment from \"./ShaderChunk/alphatest_fragment.glsl\";\nimport aomap_fragment from \"./ShaderChunk/aomap_fragment.glsl\";\nimport aomap_pars_fragment from \"./ShaderChunk/aomap_pars_fragment.glsl\";\nimport begin_vertex from \"./ShaderChunk/begin_vertex.glsl\";\nimport beginnormal_vertex from \"./ShaderChunk/beginnormal_vertex.glsl\";\nimport bsdfs from \"./ShaderChunk/bsdfs.glsl\";\nimport bumpmap_pars_fragment from \"./ShaderChunk/bumpmap_pars_fragment.glsl\";\nimport clipping_planes_fragment from \"./ShaderChunk/clipping_planes_fragment.glsl\";\nimport clipping_planes_pars_fragment from \"./ShaderChunk/clipping_planes_pars_fragment.glsl\";\nimport clipping_planes_pars_vertex from \"./ShaderChunk/clipping_planes_pars_vertex.glsl\";\nimport clipping_planes_vertex from \"./ShaderChunk/clipping_planes_vertex.glsl\";\nimport color_fragment from \"./ShaderChunk/color_fragment.glsl\";\nimport color_pars_fragment from \"./ShaderChunk/color_pars_fragment.glsl\";\nimport color_pars_vertex from \"./ShaderChunk/color_pars_vertex.glsl\";\nimport color_vertex from \"./ShaderChunk/color_vertex.glsl\";\nimport common from \"./ShaderChunk/common.glsl\";\nimport cube_uv_reflection_fragment from \"./ShaderChunk/cube_uv_reflection_fragment.glsl\";\nimport defaultnormal_vertex from \"./ShaderChunk/defaultnormal_vertex.glsl\";\nimport displacementmap_pars_vertex from \"./ShaderChunk/displacementmap_pars_vertex.glsl\";\nimport displacementmap_vertex from \"./ShaderChunk/displacementmap_vertex.glsl\";\nimport emissivemap_fragment from \"./ShaderChunk/emissivemap_fragment.glsl\";\nimport emissivemap_pars_fragment from \"./ShaderChunk/emissivemap_pars_fragment.glsl\";\nimport encodings_fragment from \"./ShaderChunk/encodings_fragment.glsl\";\nimport encodings_pars_fragment from \"./ShaderChunk/encodings_pars_fragment.glsl\";\nimport envmap_fragment from \"./ShaderChunk/envmap_fragment.glsl\";\nimport envmap_pars_fragment from \"./ShaderChunk/envmap_pars_fragment.glsl\";\nimport envmap_pars_vertex from \"./ShaderChunk/envmap_pars_vertex.glsl\";\nimport envmap_vertex from \"./ShaderChunk/envmap_vertex.glsl\";\nimport fog_vertex from \"./ShaderChunk/fog_vertex.glsl\";\nimport fog_pars_vertex from \"./ShaderChunk/fog_pars_vertex.glsl\";\nimport fog_fragment from \"./ShaderChunk/fog_fragment.glsl\";\nimport fog_pars_fragment from \"./ShaderChunk/fog_pars_fragment.glsl\";\nimport gradientmap_pars_fragment from \"./ShaderChunk/gradientmap_pars_fragment.glsl\";\nimport lightmap_fragment from \"./ShaderChunk/lightmap_fragment.glsl\";\nimport lightmap_pars_fragment from \"./ShaderChunk/lightmap_pars_fragment.glsl\";\nimport lights_lambert_vertex from \"./ShaderChunk/lights_lambert_vertex.glsl\";\nimport lights_pars from \"./ShaderChunk/lights_pars.glsl\";\nimport lights_phong_fragment from \"./ShaderChunk/lights_phong_fragment.glsl\";\nimport lights_phong_pars_fragment from \"./ShaderChunk/lights_phong_pars_fragment.glsl\";\nimport lights_physical_fragment from \"./ShaderChunk/lights_physical_fragment.glsl\";\nimport lights_physical_pars_fragment from \"./ShaderChunk/lights_physical_pars_fragment.glsl\";\nimport lights_template from \"./ShaderChunk/lights_template.glsl\";\nimport logdepthbuf_fragment from \"./ShaderChunk/logdepthbuf_fragment.glsl\";\nimport logdepthbuf_pars_fragment from \"./ShaderChunk/logdepthbuf_pars_fragment.glsl\";\nimport logdepthbuf_pars_vertex from \"./ShaderChunk/logdepthbuf_pars_vertex.glsl\";\nimport logdepthbuf_vertex from \"./ShaderChunk/logdepthbuf_vertex.glsl\";\nimport map_fragment from \"./ShaderChunk/map_fragment.glsl\";\nimport map_pars_fragment from \"./ShaderChunk/map_pars_fragment.glsl\";\nimport map_particle_fragment from \"./ShaderChunk/map_particle_fragment.glsl\";\nimport map_particle_pars_fragment from \"./ShaderChunk/map_particle_pars_fragment.glsl\";\nimport metalnessmap_fragment from \"./ShaderChunk/metalnessmap_fragment.glsl\";\nimport metalnessmap_pars_fragment from \"./ShaderChunk/metalnessmap_pars_fragment.glsl\";\nimport morphnormal_vertex from \"./ShaderChunk/morphnormal_vertex.glsl\";\nimport morphtarget_pars_vertex from \"./ShaderChunk/morphtarget_pars_vertex.glsl\";\nimport morphtarget_vertex from \"./ShaderChunk/morphtarget_vertex.glsl\";\nimport normal_fragment from \"./ShaderChunk/normal_fragment.glsl\";\nimport normalmap_pars_fragment from \"./ShaderChunk/normalmap_pars_fragment.glsl\";\nimport packing from \"./ShaderChunk/packing.glsl\";\nimport premultiplied_alpha_fragment from \"./ShaderChunk/premultiplied_alpha_fragment.glsl\";\nimport project_vertex from \"./ShaderChunk/project_vertex.glsl\";\nimport dithering_fragment from \"./ShaderChunk/dithering_fragment.glsl\";\nimport dithering_pars_fragment from \"./ShaderChunk/dithering_pars_fragment.glsl\";\nimport roughnessmap_fragment from \"./ShaderChunk/roughnessmap_fragment.glsl\";\nimport roughnessmap_pars_fragment from \"./ShaderChunk/roughnessmap_pars_fragment.glsl\";\nimport shadowmap_pars_fragment from \"./ShaderChunk/shadowmap_pars_fragment.glsl\";\nimport shadowmap_pars_vertex from \"./ShaderChunk/shadowmap_pars_vertex.glsl\";\nimport shadowmap_vertex from \"./ShaderChunk/shadowmap_vertex.glsl\";\nimport shadowmask_pars_fragment from \"./ShaderChunk/shadowmask_pars_fragment.glsl\";\nimport skinbase_vertex from \"./ShaderChunk/skinbase_vertex.glsl\";\nimport skinning_pars_vertex from \"./ShaderChunk/skinning_pars_vertex.glsl\";\nimport skinning_vertex from \"./ShaderChunk/skinning_vertex.glsl\";\nimport skinnormal_vertex from \"./ShaderChunk/skinnormal_vertex.glsl\";\nimport specularmap_fragment from \"./ShaderChunk/specularmap_fragment.glsl\";\nimport specularmap_pars_fragment from \"./ShaderChunk/specularmap_pars_fragment.glsl\";\nimport tonemapping_fragment from \"./ShaderChunk/tonemapping_fragment.glsl\";\nimport tonemapping_pars_fragment from \"./ShaderChunk/tonemapping_pars_fragment.glsl\";\nimport uv_pars_fragment from \"./ShaderChunk/uv_pars_fragment.glsl\";\nimport uv_pars_vertex from \"./ShaderChunk/uv_pars_vertex.glsl\";\nimport uv_vertex from \"./ShaderChunk/uv_vertex.glsl\";\nimport uv2_pars_fragment from \"./ShaderChunk/uv2_pars_fragment.glsl\";\nimport uv2_pars_vertex from \"./ShaderChunk/uv2_pars_vertex.glsl\";\nimport uv2_vertex from \"./ShaderChunk/uv2_vertex.glsl\";\nimport worldpos_vertex from \"./ShaderChunk/worldpos_vertex.glsl\";\n\nimport cube_frag from \"./ShaderLib/cube_frag.glsl\";\nimport cube_vert from \"./ShaderLib/cube_vert.glsl\";\nimport depth_frag from \"./ShaderLib/depth_frag.glsl\";\nimport depth_vert from \"./ShaderLib/depth_vert.glsl\";\nimport distanceRGBA_frag from \"./ShaderLib/distanceRGBA_frag.glsl\";\nimport distanceRGBA_vert from \"./ShaderLib/distanceRGBA_vert.glsl\";\nimport equirect_frag from \"./ShaderLib/equirect_frag.glsl\";\nimport equirect_vert from \"./ShaderLib/equirect_vert.glsl\";\nimport linedashed_frag from \"./ShaderLib/linedashed_frag.glsl\";\nimport linedashed_vert from \"./ShaderLib/linedashed_vert.glsl\";\nimport meshbasic_frag from \"./ShaderLib/meshbasic_frag.glsl\";\nimport meshbasic_vert from \"./ShaderLib/meshbasic_vert.glsl\";\nimport meshlambert_frag from \"./ShaderLib/meshlambert_frag.glsl\";\nimport meshlambert_vert from \"./ShaderLib/meshlambert_vert.glsl\";\nimport meshphong_frag from \"./ShaderLib/meshphong_frag.glsl\";\nimport meshphong_vert from \"./ShaderLib/meshphong_vert.glsl\";\nimport meshphysical_frag from \"./ShaderLib/meshphysical_frag.glsl\";\nimport meshphysical_vert from \"./ShaderLib/meshphysical_vert.glsl\";\nimport normal_frag from \"./ShaderLib/normal_frag.glsl\";\nimport normal_vert from \"./ShaderLib/normal_vert.glsl\";\nimport points_frag from \"./ShaderLib/points_frag.glsl\";\nimport points_vert from \"./ShaderLib/points_vert.glsl\";\nimport shadow_frag from \"./ShaderLib/shadow_frag.glsl\";\nimport shadow_vert from \"./ShaderLib/shadow_vert.glsl\";\n\nconst ShaderChunk = {\n\talphamap_fragment: alphamap_fragment,\n\talphamap_pars_fragment: alphamap_pars_fragment,\n\talphatest_fragment: alphatest_fragment,\n\taomap_fragment: aomap_fragment,\n\taomap_pars_fragment: aomap_pars_fragment,\n\tbegin_vertex: begin_vertex,\n\tbeginnormal_vertex: beginnormal_vertex,\n\tbsdfs: bsdfs,\n\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\tclipping_planes_fragment: clipping_planes_fragment,\n\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\tclipping_planes_vertex: clipping_planes_vertex,\n\tcolor_fragment: color_fragment,\n\tcolor_pars_fragment: color_pars_fragment,\n\tcolor_pars_vertex: color_pars_vertex,\n\tcolor_vertex: color_vertex,\n\tcommon: common,\n\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\tdefaultnormal_vertex: defaultnormal_vertex,\n\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\tdisplacementmap_vertex: displacementmap_vertex,\n\temissivemap_fragment: emissivemap_fragment,\n\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\tencodings_fragment: encodings_fragment,\n\tencodings_pars_fragment: encodings_pars_fragment,\n\tenvmap_fragment: envmap_fragment,\n\tenvmap_pars_fragment: envmap_pars_fragment,\n\tenvmap_pars_vertex: envmap_pars_vertex,\n\tenvmap_vertex: envmap_vertex,\n\tfog_vertex: fog_vertex,\n\tfog_pars_vertex: fog_pars_vertex,\n\tfog_fragment: fog_fragment,\n\tfog_pars_fragment: fog_pars_fragment,\n\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\tlightmap_fragment: lightmap_fragment,\n\tlightmap_pars_fragment: lightmap_pars_fragment,\n\tlights_lambert_vertex: lights_lambert_vertex,\n\tlights_pars: lights_pars,\n\tlights_phong_fragment: lights_phong_fragment,\n\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\tlights_physical_fragment: lights_physical_fragment,\n\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\tlights_template: lights_template,\n\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\tmap_fragment: map_fragment,\n\tmap_pars_fragment: map_pars_fragment,\n\tmap_particle_fragment: map_particle_fragment,\n\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\tmetalnessmap_fragment: metalnessmap_fragment,\n\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\tmorphnormal_vertex: morphnormal_vertex,\n\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\tmorphtarget_vertex: morphtarget_vertex,\n\tnormal_fragment: normal_fragment,\n\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\tpacking: packing,\n\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\tproject_vertex: project_vertex,\n\tdithering_fragment: dithering_fragment,\n\tdithering_pars_fragment: dithering_pars_fragment,\n\troughnessmap_fragment: roughnessmap_fragment,\n\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\tshadowmap_vertex: shadowmap_vertex,\n\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\tskinbase_vertex: skinbase_vertex,\n\tskinning_pars_vertex: skinning_pars_vertex,\n\tskinning_vertex: skinning_vertex,\n\tskinnormal_vertex: skinnormal_vertex,\n\tspecularmap_fragment: specularmap_fragment,\n\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\ttonemapping_fragment: tonemapping_fragment,\n\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\tuv_pars_fragment: uv_pars_fragment,\n\tuv_pars_vertex: uv_pars_vertex,\n\tuv_vertex: uv_vertex,\n\tuv2_pars_fragment: uv2_pars_fragment,\n\tuv2_pars_vertex: uv2_pars_vertex,\n\tuv2_vertex: uv2_vertex,\n\tworldpos_vertex: worldpos_vertex,\n\n\tcube_frag: cube_frag,\n\tcube_vert: cube_vert,\n\tdepth_frag: depth_frag,\n\tdepth_vert: depth_vert,\n\tdistanceRGBA_frag: distanceRGBA_frag,\n\tdistanceRGBA_vert: distanceRGBA_vert,\n\tequirect_frag: equirect_frag,\n\tequirect_vert: equirect_vert,\n\tlinedashed_frag: linedashed_frag,\n\tlinedashed_vert: linedashed_vert,\n\tmeshbasic_frag: meshbasic_frag,\n\tmeshbasic_vert: meshbasic_vert,\n\tmeshlambert_frag: meshlambert_frag,\n\tmeshlambert_vert: meshlambert_vert,\n\tmeshphong_frag: meshphong_frag,\n\tmeshphong_vert: meshphong_vert,\n\tmeshphysical_frag: meshphysical_frag,\n\tmeshphysical_vert: meshphysical_vert,\n\tnormal_frag: normal_frag,\n\tnormal_vert: normal_vert,\n\tpoints_frag: points_frag,\n\tpoints_vert: points_vert,\n\tshadow_frag: shadow_frag,\n\tshadow_vert: shadow_vert\n};\n\nexport { ShaderChunk };\n","export default \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";","export default \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";","export default \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";","export default \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";","export default \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";","export default \"\\nvec3 transformed = vec3( position );\\n\";","export default \"\\nvec3 objectNormal = vec3( normal );\\n\";","export default \"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t}\\n\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";","export default \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";","export default \"#if NUM_CLIPPING_PLANES > 0\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t\\t\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t\\n\\t#endif\\n#endif\\n\";","export default \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";","export default \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";","export default \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";","export default \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";","export default \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";","export default \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";","export default \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";","export default \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\n\";","export default \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";","export default \"vec3 transformedNormal = normalMatrix * objectNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n\";","export default \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";","export default \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";","export default \"#if defined( DITHERING )\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\\n\";","export default \"#if defined( DITHERING )\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\\n\";","export default \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";","export default \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";","export default \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";","export default \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract(Le);\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";","export default \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";","export default \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";","export default \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";","export default \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";","export default \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";","export default \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\\n\";","export default \"#ifdef USE_FOG\\n  varying float fogDepth;\\n#endif\\n\";","export default \"\\n#ifdef USE_FOG\\nfogDepth = -mvPosition.z;\\n#endif\";","export default \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";","export default \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";","export default \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";","export default \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";","export default \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";","export default \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";","export default \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";","export default \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";","export default \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";","export default \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";","export default \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";","export default \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";","export default \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";","export default \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\tgl_Position.z *= gl_Position.w;\\n\\t#endif\\n#endif\\n\";","export default \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";","export default \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";","export default \"#ifdef USE_MAP\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";","export default \"#ifdef USE_MAP\\n\\tuniform mat3 uvTransform;\\n\\tuniform sampler2D map;\\n#endif\\n\";","export default \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\\n\";","export default \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";","export default \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";","export default \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";","export default \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";","export default \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";","export default \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";","export default \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";","export default \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";","export default \"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\ngl_Position = projectionMatrix * mvPosition;\\n\";","export default \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\\n\";","export default \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";","export default \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";","export default \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";","export default \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";","export default \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";","export default \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";","export default \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";","export default \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\\n\";","export default \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";","export default \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";","export default \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";","export default \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";","export default \"#ifndef saturate\\n\\t#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";","export default \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";","export default \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";","export default \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";","export default \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";","export default \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n#endif\\n\";","export default \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";","export default \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n#endif\\n\";","import { Color } from \"../../math/Color\";\nimport { Vector3 } from \"../../math/Vector3\";\nimport { ShaderChunk } from \"./ShaderChunk\";\nimport { UniformsLib } from \"./UniformsLib\";\nimport { IUniform, UniformsUtils } from \"./UniformsUtils\";\n\nconst ShaderLib: {\n    [key: string]: {\n        uniforms: { [key: string]: IUniform };\n        vertexShader: string;\n        fragmentShader: string;\n    };\n} = {\n    basic: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.specularmap,\n            UniformsLib.envmap,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.fog,\n        ]),\n\n        vertexShader: ShaderChunk.meshbasic_vert,\n        fragmentShader: ShaderChunk.meshbasic_frag,\n    },\n\n    lambert: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.specularmap,\n            UniformsLib.envmap,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.emissivemap,\n            UniformsLib.fog,\n            UniformsLib.lights,\n            {\n                emissive: { value: new Color().setHex(0x000000) },\n            },\n        ]),\n\n        vertexShader: ShaderChunk.meshlambert_vert,\n        fragmentShader: ShaderChunk.meshlambert_frag,\n    },\n\n    phong: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.specularmap,\n            UniformsLib.envmap,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.emissivemap,\n            UniformsLib.bumpmap,\n            UniformsLib.normalmap,\n            UniformsLib.displacementmap,\n            UniformsLib.gradientmap,\n            UniformsLib.fog,\n            UniformsLib.lights,\n            {\n                emissive: { value: new Color().setHex(0x000000) },\n                specular: { value: new Color().setHex(0x111111) },\n                shininess: { value: 30 },\n            },\n        ]),\n\n        vertexShader: ShaderChunk.meshphong_vert,\n        fragmentShader: ShaderChunk.meshphong_frag,\n    },\n\n    standard: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.envmap,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.emissivemap,\n            UniformsLib.bumpmap,\n            UniformsLib.normalmap,\n            UniformsLib.displacementmap,\n            UniformsLib.roughnessmap,\n            UniformsLib.metalnessmap,\n            UniformsLib.fog,\n            UniformsLib.lights,\n            {\n                emissive: { value: new Color().setHex(0x000000) },\n                roughness: { value: 0.5 },\n                metalness: { value: 0.5 },\n                envMapIntensity: { value: 1 }, // temporary\n            },\n        ]),\n\n        vertexShader: ShaderChunk.meshphysical_vert,\n        fragmentShader: ShaderChunk.meshphysical_frag,\n    },\n\n    points: {\n        uniforms: UniformsUtils.merge([UniformsLib.points, UniformsLib.fog]),\n\n        vertexShader: ShaderChunk.points_vert,\n        fragmentShader: ShaderChunk.points_frag,\n    },\n\n    dashed: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.fog,\n            {\n                scale: { value: 1 },\n                dashSize: { value: 1 },\n                totalSize: { value: 2 },\n            },\n        ]),\n\n        vertexShader: ShaderChunk.linedashed_vert,\n        fragmentShader: ShaderChunk.linedashed_frag,\n    },\n\n    depth: {\n        uniforms: UniformsUtils.merge([UniformsLib.common, UniformsLib.displacementmap]),\n\n        vertexShader: ShaderChunk.depth_vert,\n        fragmentShader: ShaderChunk.depth_frag,\n    },\n\n    normal: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.bumpmap,\n            UniformsLib.normalmap,\n            UniformsLib.displacementmap,\n            {\n                opacity: { value: 1.0 },\n            },\n        ]),\n\n        vertexShader: ShaderChunk.normal_vert,\n        fragmentShader: ShaderChunk.normal_frag,\n    },\n\n    /* -------------------------------------------------------------------------\n     //\tCube map shader\n     ------------------------------------------------------------------------- */\n\n    cube: {\n        uniforms: {\n            tCube: { value: null },\n            tFlip: { value: -1 },\n            opacity: { value: 1.0 },\n        },\n\n        vertexShader: ShaderChunk.cube_vert,\n        fragmentShader: ShaderChunk.cube_frag,\n    },\n\n    equirect: {\n        uniforms: {\n            tEquirect: { value: null },\n        },\n\n        vertexShader: ShaderChunk.equirect_vert,\n        fragmentShader: ShaderChunk.equirect_frag,\n    },\n\n    distanceRGBA: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.displacementmap,\n            {\n                referencePosition: { value: new Vector3() },\n                nearDistance: { value: 1 },\n                farDistance: { value: 1000 },\n            },\n        ]),\n\n        vertexShader: ShaderChunk.distanceRGBA_vert,\n        fragmentShader: ShaderChunk.distanceRGBA_frag,\n    },\n\n    shadow: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.lights,\n            UniformsLib.fog,\n            {\n                color: { value: new Color().setHex(0x00000) },\n                opacity: { value: 1.0 },\n            },\n        ]),\n\n        vertexShader: ShaderChunk.shadow_vert,\n        fragmentShader: ShaderChunk.shadow_frag,\n    },\n};\n\nShaderLib.physical = {\n    uniforms: UniformsUtils.merge([\n        ShaderLib.standard.uniforms,\n        {\n            clearCoat: { value: 0 },\n            clearCoatRoughness: { value: 0 },\n        },\n    ]),\n\n    vertexShader: ShaderChunk.meshphysical_vert,\n    fragmentShader: ShaderChunk.meshphysical_frag,\n};\n\nexport { ShaderLib };\n","export default \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";","export default \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\\n\";","export default \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";","export default \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";","export default \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\\n\";","export default \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\\n\";","export default \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";","export default \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";","export default \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";","export default \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";","export default \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";","export default \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";","export default \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";","export default \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";","export default \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";","export default \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";","export default \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";","export default \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";","export default \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\\n\";","export default \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\\n\";","export default \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";","export default \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";","export default \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\\n\";","export default \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";","import { Color } from \"../../math/Color\";\nimport { Vector2 } from \"../../math/Vector2\";\nimport { Matrix3 } from \"../../math/Matrix3\";\nimport { IUniform } from \"./UniformsUtils\";\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nconst UniformsLib: {\n    [key: string]: {\n        [name: string]: IUniform;\n    };\n} = {\n    common: {\n        diffuse: { value: new Color().setHex(0xeeeeee) },\n        opacity: { value: 1.0 },\n\n        map: { value: null },\n        uvTransform: { value: new Matrix3() },\n\n        alphaMap: { value: null },\n    },\n\n    specularmap: {\n        specularMap: { value: null },\n    },\n\n    envmap: {\n        envMap: { value: null },\n        flipEnvMap: { value: -1 },\n        reflectivity: { value: 1.0 },\n        refractionRatio: { value: 0.98 },\n    },\n\n    aomap: {\n        aoMap: { value: null },\n        aoMapIntensity: { value: 1 },\n    },\n\n    lightmap: {\n        lightMap: { value: null },\n        lightMapIntensity: { value: 1 },\n    },\n\n    emissivemap: {\n        emissiveMap: { value: null },\n    },\n\n    bumpmap: {\n        bumpMap: { value: null },\n        bumpScale: { value: 1 },\n    },\n\n    normalmap: {\n        normalMap: { value: null },\n        normalScale: { value: new Vector2(1, 1) },\n    },\n\n    displacementmap: {\n        displacementMap: { value: null },\n        displacementScale: { value: 1 },\n        displacementBias: { value: 0 },\n    },\n\n    roughnessmap: {\n        roughnessMap: { value: null },\n    },\n\n    metalnessmap: {\n        metalnessMap: { value: null },\n    },\n\n    gradientmap: {\n        gradientMap: { value: null },\n    },\n\n    fog: {\n        fogDensity: { value: 0.00025 },\n        fogNear: { value: 1 },\n        fogFar: { value: 2000 },\n        fogColor: { value: new Color().setHex(0xffffff) },\n    },\n\n    lights: {\n        ambientLightColor: { value: [] },\n\n        directionalLights: {\n            value: [],\n            properties: {\n                direction: {},\n                color: {},\n\n                shadow: {},\n                shadowBias: {},\n                shadowRadius: {},\n                shadowMapSize: {},\n            },\n        },\n\n        directionalShadowMap: { value: [] },\n        directionalShadowMatrix: { value: [] },\n\n        spotLights: {\n            value: [],\n            properties: {\n                color: {},\n                position: {},\n                direction: {},\n                distance: {},\n                coneCos: {},\n                penumbraCos: {},\n                decay: {},\n\n                shadow: {},\n                shadowBias: {},\n                shadowRadius: {},\n                shadowMapSize: {},\n            },\n        },\n\n        spotShadowMap: { value: [] },\n        spotShadowMatrix: { value: [] },\n\n        pointLights: {\n            value: [],\n            properties: {\n                color: {},\n                position: {},\n                decay: {},\n                distance: {},\n\n                shadow: {},\n                shadowBias: {},\n                shadowRadius: {},\n                shadowMapSize: {},\n                shadowCameraNear: {},\n                shadowCameraFar: {},\n            },\n        },\n\n        pointShadowMap: { value: [] },\n        pointShadowMatrix: { value: [] },\n\n        hemisphereLights: {\n            value: [],\n            properties: {\n                direction: {},\n                skyColor: {},\n                groundColor: {},\n            },\n        },\n\n        // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n        rectAreaLights: {\n            value: [],\n            properties: {\n                color: {},\n                position: {},\n                width: {},\n                height: {},\n            },\n        },\n    },\n\n    points: {\n        diffuse: { value: new Color().setHex(0xeeeeee) },\n        opacity: { value: 1.0 },\n        size: { value: 1.0 },\n        scale: { value: 1.0 },\n        map: { value: null },\n        uvTransform: { value: new Matrix3() },\n    },\n};\n\nexport { UniformsLib };\n","import { Color } from \"../../math/Color\";\nimport { Matrix3 } from \"../../math/Matrix3\";\nimport { Matrix4 } from \"../../math/Matrix4\";\nimport { Vector2 } from \"../../math/Vector2\";\nimport { Vector3 } from \"../../math/Vector3\";\nimport { Vector4 } from \"../../math/Vector4\";\nimport { Texture } from \"../../textures/Texture\";\nimport { NestUniformType } from \"../webgl/WebGLUniforms\";\n\nexport interface IUniform {\n    value?: NestUniformType | null;\n    properties?: object;\n    type?: string;\n    needsUpdate?: boolean;\n}\n\nexport class UniformsUtils {\n    public static merge(uniforms: Array<{ [key: string]: IUniform }>): { [key: string]: IUniform } {\n        const merged: { [key: string]: IUniform } = {};\n        for (let u: number = 0; u < uniforms.length; u++) {\n            const tmp = this.clone(uniforms[u]);\n            for (const p in tmp) {\n                if (tmp.hasOwnProperty(p)) {\n                    merged[p] = tmp[p];\n                }\n            }\n        }\n        return merged;\n    }\n\n    public static clone(uniformsSrc: { [key: string]: IUniform }): { [key: string]: IUniform } {\n        const uniformsDst: { [key: string]: IUniform } = {};\n        for (const u in uniformsSrc) {\n            if (!uniformsSrc.hasOwnProperty(u)) continue;\n            uniformsDst[u] = {};\n            for (const p in uniformsSrc[u]) {\n                if (!uniformsSrc[u].hasOwnProperty(p)) continue;\n                const parameterSrc = uniformsSrc[u][p];\n                if (\n                    parameterSrc &&\n                    (parameterSrc instanceof Color ||\n                        parameterSrc instanceof Matrix3 ||\n                        parameterSrc instanceof Matrix4 ||\n                        parameterSrc instanceof Vector2 ||\n                        parameterSrc instanceof Vector3 ||\n                        parameterSrc instanceof Vector4 ||\n                        parameterSrc instanceof Texture)\n                ) {\n                    uniformsDst[u][p] = parameterSrc.clone();\n                } else if (Array.isArray(parameterSrc)) {\n                    uniformsDst[u][p] = parameterSrc.slice();\n                } else {\n                    uniformsDst[u][p] = parameterSrc;\n                }\n            }\n        }\n        return uniformsDst;\n    }\n}\n","import { BufferAttribute, IBufferRange, TypedArray } from \"../../core/BufferAttribute\";\nimport { InstancedBufferAttribute } from \"../../core/InstancedBufferAttribute\";\nimport { InterleavedBufferAttribute } from \"../../core/InterleavedBufferAttribute\";\nimport { InstancedInterleavedBufferAttribute } from \"../../core/InstancedInterleavedBufferAttribute\";\n\nexport interface IWebGLBufferWrapper {\n    buffer: WebGLBuffer;\n    type: number;\n    bytesPerElement: number;\n    version: number;\n}\n\nexport type TypedBufferAttribute =\n    | BufferAttribute\n    | InstancedBufferAttribute\n    | InterleavedBufferAttribute\n    | InstancedInterleavedBufferAttribute;\n\nexport class WebGLAttributes {\n    protected context: WebGLRenderingContext;\n\n    protected buffers: { [key: string]: IWebGLBufferWrapper } = {};\n\n    constructor(context: WebGLRenderingContext) {\n        this.context = context;\n    }\n\n    protected createBuffer(attribute: TypedBufferAttribute, bufferType: number): IWebGLBufferWrapper {\n        const gl: WebGLRenderingContext = this.context;\n        const array: TypedArray = attribute.array;\n        const usage: number = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n        const buffer = gl.createBuffer();\n        gl.bindBuffer(bufferType, buffer);\n        gl.bufferData(bufferType, array, usage);\n\n        // attribute.onUploadCallback();\n\n        let type = gl.FLOAT;\n\n        if (array instanceof Float32Array) {\n            type = gl.FLOAT;\n        } else if (array instanceof Float64Array) {\n            console.warn(`THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.`);\n        } else if (array instanceof Uint16Array) {\n            type = gl.UNSIGNED_SHORT;\n        } else if (array instanceof Int16Array) {\n            type = gl.SHORT;\n        } else if (array instanceof Uint32Array) {\n            type = gl.UNSIGNED_INT;\n        } else if (array instanceof Int32Array) {\n            type = gl.INT;\n        } else if (array instanceof Int8Array) {\n            type = gl.BYTE;\n        } else if (array instanceof Uint8Array) {\n            type = gl.UNSIGNED_BYTE;\n        }\n        return {\n            buffer: buffer,\n            type: type,\n            bytesPerElement: array.BYTES_PER_ELEMENT,\n            version: attribute.version,\n        };\n    }\n\n    protected updateBuffer(buffer: WebGLBuffer, attribute: TypedBufferAttribute, bufferType: number): this {\n        const gl: WebGLRenderingContext = this.context;\n        const array: TypedArray = attribute.array;\n        const updateRange: IBufferRange = attribute.updateRange;\n        gl.bindBuffer(bufferType, buffer);\n        if (attribute.dynamic === false) {\n            gl.bufferData(bufferType, array, gl.STATIC_DRAW);\n        } else if (updateRange.count === -1) {\n            // Not using update ranges\n            gl.bufferSubData(bufferType, 0, array);\n        } else if (updateRange.count === 0) {\n            console.error(\n                `THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.`,\n            );\n        } else {\n            gl.bufferSubData(\n                bufferType,\n                updateRange.offset * array.BYTES_PER_ELEMENT,\n                array.subarray(updateRange.offset, updateRange.offset + updateRange.count),\n            );\n            updateRange.count = -1; // reset range\n        }\n        return this;\n    }\n\n    public get(attribute: TypedBufferAttribute): IWebGLBufferWrapper {\n        return this.buffers[attribute.uuid];\n    }\n\n    public remove(attribute: TypedBufferAttribute): this {\n        const data = this.buffers[attribute.uuid];\n        if (data) {\n            const gl: WebGLRenderingContext = this.context;\n            gl.deleteBuffer(data.buffer);\n            delete this.buffers[attribute.uuid];\n        }\n        return this;\n    }\n\n    public update(attribute: TypedBufferAttribute, bufferType: number): this {\n        const data = this.buffers[attribute.uuid];\n        if (data === undefined) {\n            this.buffers[attribute.uuid] = this.createBuffer(attribute, bufferType);\n        } else if (data.version < attribute.version) {\n            this.updateBuffer(data.buffer, attribute, bufferType);\n            data.version = attribute.version;\n        }\n        return this;\n    }\n}\n","import { BackSide } from \"../../constants\";\nimport { WebGLRenderer } from \"../WebGLRenderer\";\nimport { Camera } from \"../../cameras/Camera\";\nimport { Color } from \"../../math/Color\";\nimport { Scene } from \"../../scenes/Scene\";\nimport { WebGLState } from \"./WebGLState\";\nimport { WebGLGeometries } from \"./WebGLGeometries\";\nimport { WebGLRenderList } from \"./WebGLRenderLists\";\nimport { Texture } from \"../../textures/Texture\";\nimport { CubeTexture } from \"../../textures/CubeTexture\";\nimport { Mesh } from \"../../objects/Mesh\";\nimport { BoxBufferGeometry } from \"../../geometries/Geometries\";\nimport { ShaderMaterial, Material, MeshBasicMaterial } from \"../../materials/Materials\";\nimport { ShaderLib } from \"../shaders/ShaderLib\";\nimport { BufferGeometry } from \"../../core/BufferGeometry\";\nimport { OrthographicCamera } from \"../../cameras/OrthographicCamera\";\nimport { PlaneBufferGeometry } from \"../../geometries/PlaneGeometry\";\n\nexport class WebGLBackground {\n    protected clearColor: Color = new Color().setHex(0x000000);\n    protected clearAlpha: number = 0;\n    protected renderer: WebGLRenderer;\n    protected state: WebGLState;\n    protected geometries: WebGLGeometries;\n    protected premultipliedAlpha: boolean;\n    protected boxMesh: Mesh;\n    protected planeCamera: OrthographicCamera;\n    protected planeMesh: Mesh;\n\n    constructor(renderer: WebGLRenderer, state: WebGLState, geometries: WebGLGeometries, premultipliedAlpha: boolean) {\n        this.renderer = renderer;\n        this.state = state;\n        this.geometries = geometries;\n        this.premultipliedAlpha = premultipliedAlpha;\n    }\n\n    public getClearColor(): Color {\n        return this.clearColor;\n    }\n\n    public setClearColor(color: Color, alpha: number): void {\n        this.clearColor.copy(color);\n        this.clearAlpha = alpha !== undefined ? alpha : 1;\n        this.setClear(this.clearColor, this.clearAlpha);\n    }\n\n    public getClearAlpha(): number {\n        return this.clearAlpha;\n    }\n\n    public setClearAlpha(alpha: number): void {\n        this.clearAlpha = alpha;\n        this.setClear(this.clearColor, this.clearAlpha);\n    }\n\n    protected setClear(color: Color, alpha: number): void {\n        this.state.buffers.color.setClear(color.r, color.g, color.b, alpha, this.premultipliedAlpha);\n    }\n\n    public render(renderList: WebGLRenderList, scene: Scene, camera: Camera, forceClear: boolean): void {\n        const background: Color | Texture | CubeTexture | null = scene.background;\n        const renderer: WebGLRenderer = this.renderer;\n        if (background === null) {\n            this.setClear(this.clearColor, this.clearAlpha);\n        } else if (background && background instanceof Color) {\n            this.setClear(background, 1);\n            forceClear = true;\n        }\n        if (this.renderer.autoClear || forceClear) {\n            renderer.clear(this.renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n        }\n        if (background && background instanceof CubeTexture) {\n            if (this.boxMesh === undefined) {\n                this.boxMesh = new Mesh(\n                    new BoxBufferGeometry(1, 1, 1),\n                    new ShaderMaterial({\n                        uniforms: ShaderLib.cube.uniforms,\n                        vertexShader: ShaderLib.cube.vertexShader,\n                        fragmentShader: ShaderLib.cube.fragmentShader,\n                        side: BackSide,\n                        depthTest: true,\n                        depthWrite: false,\n                        fog: false,\n                    }),\n                );\n                (this.boxMesh.geometry as BufferGeometry).removeAttribute(\"normal\");\n                (this.boxMesh.geometry as BufferGeometry).removeAttribute(\"uv\");\n                this.boxMesh.onBeforeRender = function(renderer, scene, camera) {\n                    this.matrixWorld.copyPosition(camera.matrixWorld);\n                };\n                this.geometries.update(this.boxMesh.geometry as BufferGeometry);\n            }\n            (this.boxMesh.material as ShaderMaterial).uniforms.tCube.value = background;\n            renderList.push(\n                this.boxMesh,\n                this.boxMesh.geometry as BoxBufferGeometry,\n                this.boxMesh.material as ShaderMaterial,\n                0,\n                null,\n            );\n        } else if (background && background instanceof Texture) {\n            if (this.planeCamera === undefined) {\n                this.planeCamera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n                this.planeMesh = new Mesh(\n                    new PlaneBufferGeometry(2, 2),\n                    new MeshBasicMaterial({ depthTest: false, depthWrite: false, fog: false }),\n                );\n                this.geometries.update(this.planeMesh.geometry as BufferGeometry);\n            }\n            this.planeMesh.material.map = background;\n            // TODO Push this to renderList\n            renderer.renderBufferDirect(\n                this.planeCamera,\n                null,\n                this.planeMesh.geometry as BufferGeometry,\n                this.planeMesh.material as MeshBasicMaterial,\n                this.planeMesh,\n                null,\n            );\n        }\n    }\n}\n","import { BufferAttribute } from \"../../core/BufferAttribute\";\nimport { InstancedBufferGeometry } from \"../../core/InstancedBufferGeometry\";\nimport { InterleavedBufferAttribute } from \"../../core/InterleavedBufferAttribute\";\nimport { IInfoRender } from \"../WebGLRenderer\";\nimport { IWebGLBufferWrapper } from \"./WebGLAttributes\";\nimport { WebGLExtensions } from \"./WebGLExtensions\";\n\nexport class WebGLBufferRenderer {\n    protected context: WebGLRenderingContext;\n    protected extensions: WebGLExtensions;\n    protected infoRender: IInfoRender;\n\n    protected mode: number = 0;\n\n    constructor(context: WebGLRenderingContext, extensions: WebGLExtensions, infoRender: IInfoRender) {\n        this.context = context;\n        this.extensions = extensions;\n        this.infoRender = infoRender;\n    }\n\n    public setMode(value: number): this {\n        this.mode = value;\n        return this;\n    }\n\n    public render(start: number, count: number): this {\n        const gl: WebGLRenderingContext = this.context;\n        gl.drawArrays(this.mode, start, count);\n\n        this.infoRender.calls++;\n        this.infoRender.vertices += count;\n\n        if (this.mode === gl.TRIANGLES) {\n            this.infoRender.faces += count / 3;\n        } else if (this.mode === gl.POINTS) {\n            this.infoRender.points += count;\n        }\n        return this;\n    }\n\n    public renderInstances(geometry: InstancedBufferGeometry, start: number, count: number): this {\n        const gl: WebGLRenderingContext = this.context;\n        const extension: ANGLE_instanced_arrays = this.extensions.get(\"ANGLE_instanced_arrays\");\n        if (extension === null) {\n            console.error(\n                `THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.`,\n            );\n            return this;\n        }\n        const position: BufferAttribute = geometry.attributes.position;\n        if (position instanceof InterleavedBufferAttribute) {\n            count = position.count;\n            extension.drawArraysInstancedANGLE(this.mode, 0, count, geometry.maxInstancedCount);\n        } else {\n            extension.drawArraysInstancedANGLE(this.mode, start, count, geometry.maxInstancedCount);\n        }\n\n        this.infoRender.calls++;\n        this.infoRender.vertices += count * geometry.maxInstancedCount;\n\n        if (this.mode === gl.TRIANGLES) {\n            this.infoRender.faces += geometry.maxInstancedCount * count / 3;\n        } else if (this.mode === gl.POINTS) {\n            this.infoRender.points += geometry.maxInstancedCount * count;\n        }\n        return this;\n    }\n}\n","import { WebGLExtensions } from \"./WebGLExtensions\";\nimport { IWebGLRendererParameters } from \"../WebGLRenderer\";\n\nexport interface IWebGLCapabilitiesParameters {\n    precision?: string;\n    logarithmicDepthBuffer?: boolean;\n}\n\nexport class WebGLCapabilities {\n    public extensions: WebGLExtensions;\n    public context: WebGLRenderingContext;\n\n    public precision: string;\n    public logarithmicDepthBuffer: boolean = false;\n    public maxTextures: number = 0;\n    public maxVertexTextures: number = 0;\n    public maxTextureSize: number = 0;\n    public maxCubemapSize: number = 0;\n\n    public maxAttributes: number = 0;\n    public maxVertexUniforms: number = 0;\n    public maxVaryings: number = 0;\n    public maxFragmentUniforms: number = 0;\n\n    public vertexTextures: boolean = false;\n    public floatFragmentTextures: boolean = false;\n    public floatVertexTextures: boolean = false;\n\n    public maxAnisotropy: number = 0;\n    public maxPrecision: string;\n\n    constructor(context: WebGLRenderingContext, extensions: WebGLExtensions, parameters: IWebGLRendererParameters) {\n        this.context = context;\n        this.extensions = extensions;\n        this.precision = parameters.precision !== undefined ? parameters.precision : \"highp\";\n        this.maxPrecision = this.getMaxPrecision(this.precision);\n        if (this.maxPrecision !== this.precision) {\n            console.warn(`THREE.WebGLRenderer: ${this.precision} not supported, using ${this.maxPrecision} instead.`);\n            this.precision = this.maxPrecision;\n        }\n        this.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n        this.maxTextures = context.getParameter(context.MAX_TEXTURE_IMAGE_UNITS);\n        this.maxVertexTextures = context.getParameter(context.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n        this.maxTextureSize = context.getParameter(context.MAX_TEXTURE_SIZE);\n        this.maxCubemapSize = context.getParameter(context.MAX_CUBE_MAP_TEXTURE_SIZE);\n\n        this.maxAttributes = context.getParameter(context.MAX_VERTEX_ATTRIBS);\n        this.maxVertexUniforms = context.getParameter(context.MAX_VERTEX_UNIFORM_VECTORS);\n        this.maxVaryings = context.getParameter(context.MAX_VARYING_VECTORS);\n        this.maxFragmentUniforms = context.getParameter(context.MAX_FRAGMENT_UNIFORM_VECTORS);\n\n        this.vertexTextures = this.maxVertexTextures > 0;\n        this.floatFragmentTextures = !!this.extensions.get(\"OES_texture_float\");\n        this.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\n\n        this.maxAnisotropy = this.getMaxAnisotropy();\n    }\n\n    public getMaxPrecision(precision: string): string {\n        const context: WebGLRenderingContext = this.context;\n        if (precision === \"highp\") {\n            if (\n                context.getShaderPrecisionFormat(context.VERTEX_SHADER, context.HIGH_FLOAT).precision > 0 &&\n                context.getShaderPrecisionFormat(context.FRAGMENT_SHADER, context.HIGH_FLOAT).precision > 0\n            ) {\n                return \"highp\";\n            }\n            precision = \"mediump\";\n        }\n        if (precision === \"mediump\") {\n            if (\n                context.getShaderPrecisionFormat(context.VERTEX_SHADER, context.MEDIUM_FLOAT).precision > 0 &&\n                context.getShaderPrecisionFormat(context.FRAGMENT_SHADER, context.MEDIUM_FLOAT).precision > 0\n            ) {\n                return \"mediump\";\n            }\n        }\n        return \"lowp\";\n    }\n\n    public getMaxAnisotropy(): number {\n        const extension: EXT_texture_filter_anisotropic | null = this.extensions.get(\"EXT_texture_filter_anisotropic\");\n        if (extension !== null) {\n            return this.context.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n        } else {\n            return 0;\n        }\n    }\n}\n","import { Plane } from \"../../math/Plane\";\nimport { Matrix3 } from \"../../math/Matrix3\";\nimport { Matrix4 } from \"../../math/Matrix4\";\nimport { IUniform } from \"../shaders/UniformsUtils\";\nimport { Camera } from \"../../cameras/Camera\";\nimport { IMaterialProperties } from \"./WebGLProperties\";\n\nexport class WebGLClipping {\n    protected globalState: Float32Array | null = null;\n    protected numGlobalPlanes: number = 0;\n    protected localClippingEnabled: boolean = false;\n    protected renderingShadows: boolean = false;\n\n    public uniform: IUniform = {\n        value: null,\n        needsUpdate: false,\n    };\n\n    public numPlanes: number = 0;\n    public numIntersection: number = 0;\n\n    public projectPlanes(\n        planes: Plane[] | null,\n        camera?: Camera,\n        dstOffset?: number,\n        skipTransform: boolean = false,\n    ): Float32Array | null {\n        const nPlanes: number = planes !== null ? planes.length : 0;\n        let dstArray: Float32Array | null = null;\n        if (nPlanes !== 0) {\n            dstArray = this.uniform.value as Float32Array | null;\n            if (skipTransform !== true || dstArray === null) {\n                const flatSize: number = dstOffset + nPlanes * 4;\n                const viewMatrix: Matrix4 = camera.matrixWorldInverse;\n                const viewNormalMatrix: Matrix3 = new Matrix3().getNormalMatrix(viewMatrix);\n                if (dstArray === null || dstArray.length < flatSize) {\n                    dstArray = new Float32Array(flatSize);\n                }\n                for (let i: number = 0, i4: number = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n                    const plane: Plane = new Plane().copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n                    plane.normal.toArray(dstArray, i4);\n                    dstArray[i4 + 3] = plane.constant;\n                }\n            }\n            this.uniform.value = dstArray;\n            this.uniform.needsUpdate = true;\n        }\n        this.numPlanes = nPlanes;\n        return dstArray;\n    }\n\n    public init(planes: Plane[], enableLocalClipping: boolean, camera: Camera): boolean {\n        const enabled: boolean =\n            planes.length !== 0 ||\n            enableLocalClipping ||\n            // enable state of previous frame - the clipping code has to\n            // run another frame in order to reset the state:\n            this.numGlobalPlanes !== 0 ||\n            this.localClippingEnabled;\n\n        this.localClippingEnabled = enableLocalClipping;\n\n        this.globalState = this.projectPlanes(planes, camera, 0);\n        this.numGlobalPlanes = planes.length;\n\n        return enabled;\n    }\n\n    public beginShadows(): void {\n        this.renderingShadows = true;\n        this.projectPlanes(null);\n    }\n\n    public endShadows(): void {\n        this.renderingShadows = false;\n        this.resetGlobalState();\n    }\n\n    public resetGlobalState(): void {\n        if (this.uniform.value !== this.globalState) {\n            this.uniform.value = this.globalState;\n            this.uniform.needsUpdate = this.numGlobalPlanes > 0;\n        }\n        this.numPlanes = this.numGlobalPlanes;\n        this.numIntersection = 0;\n    }\n\n    public setState(\n        planes: Plane[] | null,\n        clipIntersection: boolean,\n        clipShadows: boolean,\n        camera: Camera,\n        cache: IMaterialProperties,\n        fromCache: boolean,\n    ) {\n        if (\n            !this.localClippingEnabled ||\n            planes === null ||\n            planes.length === 0 ||\n            (this.renderingShadows && !clipShadows)\n        ) {\n            // there's no local clipping\n            if (this.renderingShadows) {\n                // there's no global clipping\n                this.projectPlanes(null);\n            } else {\n                this.resetGlobalState();\n            }\n        } else {\n            const nGlobal: number = this.renderingShadows ? 0 : this.numGlobalPlanes,\n                lGlobal = nGlobal * 4;\n            let dstArray: Float32Array | null = cache.clippingState || null;\n            this.uniform.value = dstArray; // ensure unique state\n            dstArray = this.projectPlanes(planes, camera, lGlobal, fromCache);\n            for (let i: number = 0; i !== lGlobal; ++i) {\n                dstArray[i] = this.globalState[i];\n            }\n            cache.clippingState = dstArray;\n            this.numIntersection = clipIntersection ? this.numPlanes : 0;\n            this.numPlanes += nGlobal;\n        }\n    }\n}\n","export class WebGLExtensions {\n    public context: WebGLRenderingContext;\n\n    protected extensions: { [key: string]: any } = {};\n\n    constructor(context: WebGLRenderingContext) {\n        this.context = context;\n    }\n\n    public get(name: string): any {\n        const gl: WebGLRenderingContext = this.context;\n\n        if (this.extensions.hasOwnProperty(name)) {\n            return this.extensions[name];\n        }\n\n        let extension: any;\n\n        switch (name) {\n            case \"WEBGL_depth_texture\":\n                extension =\n                    gl.getExtension(\"WEBGL_depth_texture\") ||\n                    gl.getExtension(\"MOZ_WEBGL_depth_texture\") ||\n                    gl.getExtension(\"WEBKIT_WEBGL_depth_texture\");\n                break;\n            case \"EXT_texture_filter_anisotropic\":\n                extension =\n                    gl.getExtension(\"EXT_texture_filter_anisotropic\") ||\n                    gl.getExtension(\"MOZ_EXT_texture_filter_anisotropic\") ||\n                    gl.getExtension(\"WEBKIT_EXT_texture_filter_anisotropic\");\n                break;\n            case \"WEBGL_compressed_texture_s3tc\":\n                extension =\n                    gl.getExtension(\"WEBGL_compressed_texture_s3tc\") ||\n                    gl.getExtension(\"MOZ_WEBGL_compressed_texture_s3tc\") ||\n                    gl.getExtension(\"WEBKIT_WEBGL_compressed_texture_s3tc\");\n                break;\n            case \"WEBGL_compressed_texture_pvrtc\":\n                extension =\n                    gl.getExtension(\"WEBGL_compressed_texture_pvrtc\") ||\n                    gl.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\");\n                break;\n            case \"WEBGL_compressed_texture_etc1\":\n                extension = gl.getExtension(\"WEBGL_compressed_texture_etc1\");\n                break;\n            default:\n                extension = gl.getExtension(name);\n        }\n        if (extension === null) {\n            console.warn(`THREE.WebGLRenderer: ${name} extension not supported.`);\n        }\n        this.extensions[name] = extension;\n        return extension;\n    }\n}\n","import { BufferAttribute, TypedArray, Uint16BufferAttribute, Uint32BufferAttribute } from \"../../core/BufferAttribute\";\nimport { BufferGeometry } from \"../../core/BufferGeometry\";\nimport { IEventObject } from \"../../core/EventDispatcher\";\nimport { Geometry } from \"../../core/Geometry\";\nimport { ObjectWithGeometry } from \"../../math/Box3\";\nimport { arrayMax } from \"../../utils\";\nimport { IInfoMemory } from \"../WebGLRenderer\";\nimport { WebGLAttributes } from \"./WebGLAttributes\";\n\nexport class WebGLGeometries {\n    protected geometries: { [key: number]: BufferGeometry } = {};\n    protected wireframeAttributes: { [key: number]: BufferAttribute } = {};\n    protected context: WebGLRenderingContext;\n    protected attributes: WebGLAttributes;\n    protected infoMemory: IInfoMemory;\n\n    constructor(context: WebGLRenderingContext, attributes: WebGLAttributes, infoMemory: IInfoMemory) {\n        this.context = context;\n        this.attributes = attributes;\n        this.infoMemory = infoMemory;\n    }\n\n    protected onGeometryDispose(event: IEventObject): void {\n        const geometry: Geometry = event.target as Geometry;\n        const bufferGeometry: BufferGeometry = this.geometries[geometry.id];\n        if (bufferGeometry.index !== null) {\n            this.attributes.remove(bufferGeometry.index);\n        }\n        for (const name in bufferGeometry.attributes) {\n            if (!bufferGeometry.attributes.hasOwnProperty(name)) {\n                continue;\n            }\n            this.attributes.remove(bufferGeometry.attributes[name]);\n        }\n        geometry.removeEventListener(\"dispose\", this.onGeometryDispose);\n        delete this.geometries[geometry.id];\n        // TODO Remove duplicate code\n        let attribute: BufferAttribute = this.wireframeAttributes[geometry.id];\n        if (attribute) {\n            this.attributes.remove(attribute);\n            delete this.wireframeAttributes[geometry.id];\n        }\n        attribute = this.wireframeAttributes[bufferGeometry.id];\n        if (attribute) {\n            this.attributes.remove(attribute);\n            delete this.wireframeAttributes[bufferGeometry.id];\n        }\n        this.infoMemory.geometries--;\n    }\n\n    public get(object: ObjectWithGeometry, geometry: BufferGeometry | Geometry): BufferGeometry {\n        let bufferGeometry: BufferGeometry = this.geometries[geometry.id];\n        if (bufferGeometry) return bufferGeometry;\n        geometry.addEventListener(\"dispose\", this.onGeometryDispose);\n        if (geometry instanceof BufferGeometry) {\n            bufferGeometry = geometry;\n        } else if (geometry instanceof Geometry) {\n            if (geometry.bufferGeometry === undefined) {\n                geometry.bufferGeometry = new BufferGeometry().setFromObject(object);\n            }\n            bufferGeometry = geometry.bufferGeometry;\n        }\n        this.geometries[geometry.id] = bufferGeometry;\n        this.infoMemory.geometries++;\n        return bufferGeometry;\n    }\n\n    public update(geometry: BufferGeometry): this {\n        const index: BufferAttribute = geometry.index;\n        const geometryAttributes: { [key: string]: BufferAttribute } = geometry.attributes;\n        if (index !== null) {\n            this.attributes.update(index, this.context.ELEMENT_ARRAY_BUFFER);\n        }\n        for (const name in geometryAttributes) {\n            if (!geometryAttributes.hasOwnProperty(name)) {\n                continue;\n            }\n            this.attributes.update(geometryAttributes[name], this.context.ARRAY_BUFFER);\n        }\n        // morph targets\n        const morphAttributes: { [key: string]: BufferAttribute[] } = geometry.morphAttributes;\n        for (const name in morphAttributes) {\n            if (!morphAttributes.hasOwnProperty(name)) {\n                continue;\n            }\n            const array: BufferAttribute[] = morphAttributes[name];\n            for (let i: number = 0, l: number = array.length; i < l; i++) {\n                this.attributes.update(array[i], this.context.ARRAY_BUFFER);\n            }\n        }\n        return this;\n    }\n\n    public getWireframeAttribute(geometry: BufferGeometry): BufferAttribute {\n        let attribute: BufferAttribute = this.wireframeAttributes[geometry.id];\n        if (attribute) return attribute;\n        const indices: number[] = [];\n        if (geometry.index !== null) {\n            const array: TypedArray = geometry.index.array;\n            for (let i: number = 0, l: number = array.length; i < l; i += 3) {\n                const a: number = array[i];\n                const b: number = array[i + 1];\n                const c: number = array[i + 2];\n                indices.push(a, b, b, c, c, a);\n            }\n        } else {\n            const array: TypedArray = geometry.attributes.position.array;\n            for (let i: number = 0, l: number = array.length / 3 - 1; i < l; i += 3) {\n                const a: number = i;\n                const b: number = i + 1;\n                const c: number = i + 2;\n                indices.push(a, b, b, c, c, a);\n            }\n        }\n        attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n        this.attributes.update(attribute, this.context.ELEMENT_ARRAY_BUFFER);\n        this.wireframeAttributes[geometry.id] = attribute;\n        return attribute;\n    }\n}\n","import { InstancedBufferGeometry } from \"../../core/InstancedBufferGeometry\";\nimport { IInfoRender } from \"../WebGLRenderer\";\nimport { IWebGLBufferWrapper } from \"./WebGLAttributes\";\nimport { WebGLExtensions } from \"./WebGLExtensions\";\n\nexport class WebGLIndexedBufferRenderer {\n    protected context: WebGLRenderingContext;\n    protected extensions: WebGLExtensions;\n    protected infoRender: IInfoRender;\n\n    protected mode: number = 0;\n    protected type: number = 0;\n    protected bytesPerElement: number = 0;\n\n    constructor(context: WebGLRenderingContext, extensions: WebGLExtensions, infoRender: IInfoRender) {\n        this.context = context;\n        this.extensions = extensions;\n        this.infoRender = infoRender;\n    }\n\n    public setMode(value: number): this {\n        this.mode = value;\n        return this;\n    }\n\n    public setIndex(value: IWebGLBufferWrapper): this {\n        this.type = value.type;\n        this.bytesPerElement = value.bytesPerElement;\n        return this;\n    }\n\n    public render(start: number, count: number): this {\n        const gl: WebGLRenderingContext = this.context;\n        gl.drawElements(this.mode, count, this.type, start * this.bytesPerElement);\n\n        this.infoRender.calls++;\n        this.infoRender.vertices += count;\n\n        if (this.mode === gl.TRIANGLES) {\n            this.infoRender.faces += count / 3;\n        } else if (this.mode === gl.POINTS) {\n            this.infoRender.points += count;\n        }\n        return this;\n    }\n\n    public renderInstances(geometry: InstancedBufferGeometry, start: number, count: number): this {\n        const gl: WebGLRenderingContext = this.context;\n        const extension: ANGLE_instanced_arrays | null = this.extensions.get(\"ANGLE_instanced_arrays\");\n        if (extension === null) {\n            console.error(\n                `THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.`,\n            );\n            return this;\n        }\n        extension.drawElementsInstancedANGLE(\n            this.mode,\n            count,\n            this.type,\n            start * this.bytesPerElement,\n            geometry.maxInstancedCount,\n        );\n\n        this.infoRender.calls++;\n        this.infoRender.vertices += count * geometry.maxInstancedCount;\n\n        if (this.mode === gl.TRIANGLES) {\n            this.infoRender.faces += geometry.maxInstancedCount * count / 3;\n        } else if (this.mode === gl.POINTS) {\n            this.infoRender.points += geometry.maxInstancedCount * count;\n        }\n        return this;\n    }\n}\n","import { Camera } from \"../../cameras/Camera\";\nimport { PerspectiveCamera } from \"../../cameras/PerspectiveCamera\";\nimport { AmbientLight } from \"../../lights/AmbientLight\";\nimport { DirectionalLight } from \"../../lights/DirectionalLight\";\nimport { DirectionalLightShadow } from \"../../lights/DirectionalLightShadow\";\nimport { HemisphereLight } from \"../../lights/HemisphereLight\";\nimport { Light } from \"../../lights/Light\";\nimport { LightShadow } from \"../../lights/LightShadow\";\nimport { PointLight } from \"../../lights/PointLight\";\nimport { RectAreaLight } from \"../../lights/RectAreaLight\";\nimport { SpotLight } from \"../../lights/SpotLight\";\nimport { SpotLightShadow } from \"../../lights/SpotLightShadow\";\nimport { Color } from \"../../math/Color\";\nimport { Matrix4 } from \"../../math/Matrix4\";\nimport { Vector2 } from \"../../math/Vector2\";\nimport { Vector3 } from \"../../math/Vector3\";\nimport { Texture } from \"../../textures/Texture\";\n\ninterface ILightShadowUniforms {\n    shadow: boolean;\n    shadowBias: number;\n    shadowRadius: number;\n    shadowMapSize: Vector2;\n}\n\nexport interface IDirectionalLightUniforms extends ILightShadowUniforms {\n    direction: Vector3;\n    color: Color;\n}\n\nexport interface ISpotLightUniforms extends ILightShadowUniforms {\n    position: Vector3;\n    direction: Vector3;\n    color: Color;\n    distance: number;\n    coneCos: number;\n    penumbraCos: number;\n    decay: number;\n}\n\nexport interface IPointLightUniforms extends ILightShadowUniforms {\n    position: Vector3;\n    color: Color;\n    distance: number;\n    decay: number;\n    shadowCameraNear: number;\n    shadowCameraFar: number;\n}\n\nexport interface IHemisphereLightUniforms {\n    direction: Vector3;\n    skyColor: Color;\n    groundColor: Color;\n}\n\nexport interface IRectAreaLightUniforms {\n    position: Vector3;\n    color: Color;\n    halfWidth: Vector3;\n    halfHeight: Vector3;\n}\n\nexport type ILightUniforms =\n    | ILightShadowUniforms\n    | ISpotLightUniforms\n    | IPointLightUniforms\n    | IHemisphereLightUniforms\n    | IRectAreaLightUniforms;\n\nclass LightUniformsCache {\n    protected lights: { [key: string]: any } = {};\n\n    public get(light: Light): ILightUniforms {\n        if (this.lights[light.id] !== undefined) {\n            return this.lights[light.id];\n        }\n        let uniforms: ILightUniforms;\n        switch (light.type) {\n            case \"DirectionalLight\":\n                uniforms = {\n                    direction: new Vector3(),\n                    color: new Color(),\n                    shadow: false,\n                    shadowBias: 0,\n                    shadowRadius: 1,\n                    shadowMapSize: new Vector2(),\n                };\n                break;\n            case \"SpotLight\":\n                uniforms = {\n                    position: new Vector3(),\n                    direction: new Vector3(),\n                    color: new Color(),\n                    distance: 0,\n                    coneCos: 0,\n                    penumbraCos: 0,\n                    decay: 0,\n                    shadow: false,\n                    shadowBias: 0,\n                    shadowRadius: 1,\n                    shadowMapSize: new Vector2(),\n                };\n                break;\n            case \"PointLight\":\n                uniforms = {\n                    position: new Vector3(),\n                    color: new Color(),\n                    distance: 0,\n                    decay: 0,\n                    shadow: false,\n                    shadowBias: 0,\n                    shadowRadius: 1,\n                    shadowMapSize: new Vector2(),\n                    shadowCameraNear: 1,\n                    shadowCameraFar: 1000,\n                };\n                break;\n            case \"HemisphereLight\":\n                uniforms = {\n                    direction: new Vector3(),\n                    skyColor: new Color(),\n                    groundColor: new Color(),\n                };\n                break;\n            case \"RectAreaLight\":\n                uniforms = {\n                    color: new Color(),\n                    position: new Vector3(),\n                    halfWidth: new Vector3(),\n                    halfHeight: new Vector3(),\n                    // TODO (abelnation): set RectAreaLight shadow uniforms\n                };\n                break;\n        }\n        this.lights[light.id] = uniforms;\n        return uniforms;\n    }\n}\n\nexport interface IWebGLLightsState {\n    hash: string;\n    ambient: [number, number, number];\n    directional: IDirectionalLightUniforms[];\n    directionalShadowMap: DirectionalLightShadow[];\n    directionalShadowMatrix: Matrix4[];\n    spot: ISpotLightUniforms[];\n    spotShadowMap: SpotLightShadow[];\n    spotShadowMatrix: Matrix4[];\n    rectArea: IRectAreaLightUniforms[];\n    point: IPointLightUniforms[];\n    pointShadowMap: LightShadow[];\n    pointShadowMatrix: Matrix4[];\n    hemi: IHemisphereLightUniforms[];\n}\n\nexport interface ILightState {\n    hash: string;\n    ambient: number[];\n    directional: ILightUniforms[];\n    directionalShadowMap: Texture[];\n    directionalShadowMatrix: Matrix4[];\n    spot: ILightUniforms[];\n    spotShadowMap: Texture[];\n    spotShadowMatrix: Matrix4[];\n    rectArea: ILightUniforms[];\n    point: ILightUniforms[];\n    pointShadowMap: Texture[];\n    pointShadowMatrix: Matrix4[];\n    hemi: ILightUniforms[];\n}\n\nexport class WebGLLights {\n    protected cache: LightUniformsCache = new LightUniformsCache();\n\n    public state: any = {\n        hash: \"\",\n        ambient: [0, 0, 0],\n        directional: [],\n        directionalShadowMap: [],\n        directionalShadowMatrix: [],\n        spot: [],\n        spotShadowMap: [],\n        spotShadowMatrix: [],\n        rectArea: [],\n        point: [],\n        pointShadowMap: [],\n        pointShadowMatrix: [],\n        hemi: [],\n    };\n\n    public setup(lights: Light[], shadows: LightShadow[], camera: Camera): this {\n        const vector3: Vector3 = new Vector3();\n        const matrix4: Matrix4 = new Matrix4();\n        const matrix42: Matrix4 = new Matrix4();\n\n        let r = 0,\n            g = 0,\n            b = 0;\n\n        const state = this.state;\n        const cache: LightUniformsCache = this.cache;\n\n        let directionalLength: number = 0;\n        let pointLength: number = 0;\n        let spotLength: number = 0;\n        let rectAreaLength: number = 0;\n        let hemisphereLength: number = 0;\n\n        const viewMatrix: Matrix4 = camera.matrixWorldInverse;\n\n        for (let i: number = 0, l: number = lights.length; i < l; i++) {\n            const light = lights[i];\n            const color = light.color;\n            const intensity = light.intensity;\n            const distance = light.distance;\n            const shadowMap: Texture | null = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n            if (light instanceof AmbientLight) {\n                r += color.r * intensity;\n                g += color.g * intensity;\n                b += color.b * intensity;\n            } else if (light instanceof DirectionalLight) {\n                const uniforms: IDirectionalLightUniforms = cache.get(light) as IDirectionalLightUniforms;\n                uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n                uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n                vector3.setFromMatrixPosition(light.target.matrixWorld);\n                uniforms.direction.sub(vector3);\n                uniforms.direction.transformDirection(viewMatrix);\n                uniforms.shadow = light.castShadow;\n                if (light.castShadow) {\n                    const shadow: DirectionalLightShadow = light.shadow;\n                    uniforms.shadowBias = shadow.bias;\n                    uniforms.shadowRadius = shadow.radius;\n                    uniforms.shadowMapSize = shadow.mapSize;\n                }\n                state.directionalShadowMap[directionalLength] = shadowMap;\n                state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n                state.directional[directionalLength] = uniforms;\n                directionalLength++;\n            } else if (light instanceof SpotLight) {\n                const uniforms: ISpotLightUniforms = cache.get(light) as ISpotLightUniforms;\n                uniforms.position.setFromMatrixPosition(light.matrixWorld);\n                uniforms.position.applyMatrix4(viewMatrix);\n                uniforms.color.copy(color).multiplyScalar(intensity);\n                uniforms.distance = distance;\n                uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n                vector3.setFromMatrixPosition(light.target.matrixWorld);\n                uniforms.direction.sub(vector3);\n                uniforms.direction.transformDirection(viewMatrix);\n                uniforms.coneCos = Math.cos(light.angle);\n                uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n                uniforms.decay = light.distance === 0 ? 0.0 : light.decay;\n                uniforms.shadow = light.castShadow;\n                if (light.castShadow) {\n                    const shadow: SpotLightShadow = light.shadow;\n                    uniforms.shadowBias = shadow.bias;\n                    uniforms.shadowRadius = shadow.radius;\n                    uniforms.shadowMapSize = shadow.mapSize;\n                }\n                state.spotShadowMap[spotLength] = shadowMap;\n                state.spotShadowMatrix[spotLength] = light.shadow.matrix;\n                state.spot[spotLength] = uniforms;\n                spotLength++;\n            } else if (light instanceof RectAreaLight) {\n                const uniforms: IRectAreaLightUniforms = cache.get(light) as IRectAreaLightUniforms;\n\n                // (a) intensity is the total visible light emitted\n                // uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n                // (b) intensity is the brightness of the light\n                uniforms.color.copy(color).multiplyScalar(intensity);\n                uniforms.position.setFromMatrixPosition(light.matrixWorld);\n                uniforms.position.applyMatrix4(viewMatrix);\n\n                // extract local rotation of light to derive width/height half vectors\n                matrix42.identity();\n                matrix4.copy(light.matrixWorld);\n                matrix4.premultiply(viewMatrix);\n                matrix42.extractRotation(matrix4);\n\n                uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n                uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\n                uniforms.halfWidth.applyMatrix4(matrix42);\n                uniforms.halfHeight.applyMatrix4(matrix42);\n\n                // TODO (abelnation): RectAreaLight distance?\n                // uniforms.distance = distance;\n\n                state.rectArea[rectAreaLength] = uniforms;\n                rectAreaLength++;\n            } else if (light instanceof PointLight) {\n                const uniforms: IPointLightUniforms = cache.get(light) as IPointLightUniforms;\n                uniforms.position.setFromMatrixPosition(light.matrixWorld);\n                uniforms.position.applyMatrix4(viewMatrix);\n                uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n                uniforms.distance = light.distance;\n                uniforms.decay = light.distance === 0 ? 0.0 : light.decay;\n                uniforms.shadow = light.castShadow;\n                if (light.castShadow) {\n                    const shadow: LightShadow = light.shadow;\n                    uniforms.shadowBias = shadow.bias;\n                    uniforms.shadowRadius = shadow.radius;\n                    uniforms.shadowMapSize = shadow.mapSize;\n                    uniforms.shadowCameraNear = (shadow.camera as PerspectiveCamera).near;\n                    uniforms.shadowCameraFar = (shadow.camera as PerspectiveCamera).far;\n                }\n                state.pointShadowMap[pointLength] = shadowMap;\n                state.pointShadowMatrix[pointLength] = light.shadow.matrix;\n                state.point[pointLength] = uniforms;\n                pointLength++;\n            } else if (light instanceof HemisphereLight) {\n                const uniforms: IHemisphereLightUniforms = cache.get(light) as IHemisphereLightUniforms;\n                uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n                uniforms.direction.transformDirection(viewMatrix);\n                uniforms.direction.normalize();\n                uniforms.skyColor.copy(light.color).multiplyScalar(intensity);\n                uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n                state.hemi[hemisphereLength] = uniforms;\n                hemisphereLength++;\n            }\n        }\n\n        state.ambient[0] = r;\n        state.ambient[1] = g;\n        state.ambient[2] = b;\n\n        state.directional.length = directionalLength;\n        state.spot.length = spotLength;\n        state.rectArea.length = rectAreaLength;\n        state.point.length = pointLength;\n        state.hemi.length = hemisphereLength;\n\n        state.hash = [\n            directionalLength,\n            pointLength,\n            spotLength,\n            rectAreaLength,\n            hemisphereLength,\n            shadows.length,\n        ].join(\",\");\n\n        return this;\n    }\n}\n","import { WebGLProgramWrapper } from \"./WebGLProgram\";\nimport { Object3D } from \"../../core/Object3D\";\nimport { Material } from \"../../materials/Material\";\nimport { Geometry } from \"../../core/Geometry\";\nimport { BufferGeometry } from \"../../core/BufferGeometry\";\nimport { BufferAttribute } from \"../../core/BufferAttribute\";\n\nexport class WebGLMorphtargets {\n    protected context: WebGLRenderingContext;\n    protected influencesList: { [key: number]: Array<[number, number]> } = {};\n    protected morphInfluences: Float32Array = new Float32Array(8);\n\n    constructor(context: WebGLRenderingContext) {\n        this.context = context;\n    }\n\n    public update(object: Object3D, geometry: BufferGeometry, material: Material, program: WebGLProgramWrapper) {\n        /**\n         * Another not well designed\n         */\n        const objectInfluences = (object as any).morphTargetInfluences;\n        const length: number = objectInfluences.length;\n        let influences: Array<[number, number]> = this.influencesList[geometry.id];\n        if (influences === undefined) {\n            // initialise list\n            influences = [];\n            for (let i: number = 0; i < length; i++) {\n                influences[i] = [i, 0];\n            }\n            this.influencesList[geometry.id] = influences;\n        }\n        const morphTargets: BufferAttribute[] = material.morphTargets && geometry.morphAttributes.position;\n        const morphNormals: BufferAttribute[] = material.morphNormals && geometry.morphAttributes.normal;\n        // Remove current morphAttributes\n        for (let i: number = 0; i < length; i++) {\n            const influence: [number, number] = influences[i];\n            if (influence[1] !== 0) {\n                if (morphTargets) geometry.removeAttribute(\"morphTarget\" + i);\n                if (morphNormals) geometry.removeAttribute(\"morphNormal\" + i);\n            }\n        }\n        // Collect influences\n        for (let i: number = 0; i < length; i++) {\n            const influence: [number, number] = influences[i];\n            influence[0] = i;\n            influence[1] = objectInfluences[i];\n        }\n        influences.sort((a: [number, number], b: [number, number]): number => {\n            return Math.abs(b[1]) - Math.abs(a[1]);\n        });\n        // Add morphAttributes\n        for (let i: number = 0; i < 8; i++) {\n            const influence: [number, number] = influences[i];\n            if (influence) {\n                const index: number = influence[0];\n                const value: number = influence[1];\n                if (value) {\n                    if (morphTargets) geometry.addAttribute(\"morphTarget\" + i, morphTargets[index]);\n                    if (morphNormals) geometry.addAttribute(\"morphNormal\" + i, morphNormals[index]);\n                    this.morphInfluences[i] = value;\n                    continue;\n                }\n            }\n            this.morphInfluences[i] = 0;\n        }\n        program.getUniforms().setValue(\"morphTargetInfluences\", this.morphInfluences);\n    }\n}\n","import { BufferGeometry } from \"../../core/BufferGeometry\";\nimport { Geometry } from \"../../core/Geometry\";\nimport { ObjectWithGeometry } from \"../../math/Box3\";\nimport { WebGLGeometries } from \"./WebGLGeometries\";\nimport { IInfoRender } from \"../WebGLRenderer\";\n\nexport class WebGLObjects {\n    protected geometries: WebGLGeometries;\n    protected infoRender: IInfoRender;\n    protected updateList: { [key: number]: number } = {};\n\n    constructor(geometries: WebGLGeometries, infoRender: IInfoRender) {\n        this.geometries = geometries;\n        this.infoRender = infoRender;\n    }\n\n    public update(object: ObjectWithGeometry): BufferGeometry {\n        const frame: number = this.infoRender.frame;\n\n        const geometry: BufferGeometry | Geometry = object.geometry;\n        const bufferGeometry: BufferGeometry = this.geometries.get(object, geometry);\n\n        // Update once per frame\n        if (this.updateList[bufferGeometry.id] !== frame) {\n            if (geometry instanceof Geometry) {\n                bufferGeometry.updateFromObject(object);\n            }\n            this.geometries.update(bufferGeometry);\n            this.updateList[bufferGeometry.id] = frame;\n        }\n\n        return bufferGeometry;\n    }\n\n    public dispose() {\n        this.updateList = {};\n    }\n}\n","import { IShader, WebGLRenderer } from \"../WebGLRenderer\";\nimport { ShaderChunk } from \"../shaders/ShaderChunk\";\nimport { Material } from \"../../materials/Material\";\nimport {\n    NoToneMapping,\n    AddOperation,\n    MixOperation,\n    MultiplyOperation,\n    EquirectangularRefractionMapping,\n    CubeRefractionMapping,\n    SphericalReflectionMapping,\n    EquirectangularReflectionMapping,\n    CubeUVRefractionMapping,\n    CubeUVReflectionMapping,\n    CubeReflectionMapping,\n    PCFSoftShadowMap,\n    PCFShadowMap,\n    CineonToneMapping,\n    Uncharted2ToneMapping,\n    ReinhardToneMapping,\n    LinearToneMapping,\n    GammaEncoding,\n    RGBDEncoding,\n    RGBM16Encoding,\n    RGBM7Encoding,\n    RGBEEncoding,\n    sRGBEncoding,\n    LinearEncoding,\n} from \"../../constants\";\nimport { RawShaderMaterial } from \"../../materials/RawShaderMaterial\";\nimport { WebGLExtensions } from \"./WebGLExtensions\";\nimport { WebGLShaderWrapper } from \"./WebGLShader\";\nimport { WebGLUniformsWrapper } from \"./WebGLUniforms\";\nimport { ShaderMaterial } from \"../../materials/Materials\";\nimport { IProgramParameters } from \"./WebGLPrograms\";\n\nfunction generateDefines(defines: { [key: string]: any }): string {\n    const chunks: string[] = [];\n    for (const name in defines) {\n        if (!defines.hasOwnProperty(name) || defines[name]) {\n            chunks.push(\"#define \" + name + \" \" + defines[name]);\n        }\n    }\n    return chunks.join(\"\\n\");\n}\n\nfunction generateExtensions(\n    extensions: { [key: string]: boolean },\n    parameters: IProgramParameters,\n    rendererExtensions: WebGLExtensions,\n): string {\n    extensions = extensions || {};\n    const chunks: string[] = [\n        extensions.derivatives ||\n        parameters.envMapCubeUV ||\n        parameters.bumpMap ||\n        parameters.normalMap ||\n        parameters.flatShading\n            ? \"#extension GL_OES_standard_derivatives : enable\"\n            : \"\",\n        (extensions.fragDepth || parameters.logarithmicDepthBuffer) && rendererExtensions.get(\"EXT_frag_depth\")\n            ? \"#extension GL_EXT_frag_depth : enable\"\n            : \"\",\n        extensions.drawBuffers && rendererExtensions.get(\"WEBGL_draw_buffers\")\n            ? \"#extension GL_EXT_draw_buffers : require\"\n            : \"\",\n        (extensions.shaderTextureLOD || parameters.envMap) && rendererExtensions.get(\"EXT_shader_texture_lod\")\n            ? \"#extension GL_EXT_shader_texture_lod : enable\"\n            : \"\",\n    ];\n    return chunks.filter(filterEmptyLine).join(\"\\n\");\n}\n\nfunction getToneMappingFunction(functionName: string, toneMapping: number): string {\n    let toneMappingName: string;\n    switch (toneMapping) {\n        case LinearToneMapping:\n            toneMappingName = \"Linear\";\n            break;\n        case ReinhardToneMapping:\n            toneMappingName = \"Reinhard\";\n            break;\n        case Uncharted2ToneMapping:\n            toneMappingName = \"Uncharted2\";\n            break;\n        case CineonToneMapping:\n            toneMappingName = \"OptimizedCineon\";\n            break;\n        default:\n            throw new Error(\"unsupported toneMapping: \" + toneMapping);\n    }\n    return \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n}\n\nfunction filterEmptyLine(str: string): boolean {\n    return str !== \"\";\n}\n\nfunction getEncodingComponents(encoding: number): string[] {\n    switch (encoding) {\n        case LinearEncoding:\n            return [\"Linear\", \"( value )\"];\n        case sRGBEncoding:\n            return [\"sRGB\", \"( value )\"];\n        case RGBEEncoding:\n            return [\"RGBE\", \"( value )\"];\n        case RGBM7Encoding:\n            return [\"RGBM\", \"( value, 7.0 )\"];\n        case RGBM16Encoding:\n            return [\"RGBM\", \"( value, 16.0 )\"];\n        case RGBDEncoding:\n            return [\"RGBD\", \"( value, 256.0 )\"];\n        case GammaEncoding:\n            return [\"Gamma\", \"( value, float( GAMMA_FACTOR ) )\"];\n        default:\n            throw new Error(\"unsupported encoding: \" + encoding);\n    }\n}\n\nfunction getTexelDecodingFunction(functionName: string, encoding: number) {\n    const components: string[] = getEncodingComponents(encoding);\n    return \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[0] + \"ToLinear\" + components[1] + \"; }\";\n}\n\nfunction getTexelEncodingFunction(functionName: string, encoding: number) {\n    const components: string[] = getEncodingComponents(encoding);\n    return \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[0] + components[1] + \"; }\";\n}\n\nfunction replaceLightNums(str: string, parameters: IProgramParameters) {\n    return str\n        .replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights + \"\")\n        .replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights + \"\")\n        .replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights + \"\")\n        .replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights + \"\")\n        .replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights + \"\");\n}\n\nfunction parseIncludes(str: string) {\n    return str.replace(/^[ \\t]*#include +<([\\w\\d.]+)>/gm, (match: string, include: string): string => {\n        const replace: string = ShaderChunk[include];\n        if (replace === undefined) {\n            throw new Error(\"Can not resolve #include <\" + include + \">\");\n        }\n        return parseIncludes(replace);\n    });\n}\n\nfunction unrollLoops(str: string) {\n    const pattern: RegExp = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n    function replace(match: string, start: string, end: string, snippet: string): string {\n        let unroll: string = \"\";\n        for (let i: number = parseInt(start, 10); i < parseInt(end, 10); i++) {\n            unroll += snippet.replace(/\\[ i \\]/g, \"[ \" + i + \" ]\");\n        }\n        return unroll;\n    }\n    return str.replace(pattern, replace);\n}\n\nfunction fetchAttributeLocations(gl: WebGLRenderingContext, program: WebGLProgram): { [key: string]: number } {\n    const attributes: { [key: string]: number } = {};\n    const n: number = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i: number = 0; i < n; i++) {\n        const info: WebGLActiveInfo = gl.getActiveAttrib(program, i);\n        const name: string = info.name;\n        attributes[name] = gl.getAttribLocation(program, name);\n    }\n    return attributes;\n}\n\nlet programIdCount: number = 0;\n\nexport interface IDiagnostics {\n    runnable: boolean;\n    material: Material;\n    programLog: string;\n    vertexShader: {\n        log: string;\n        prefix: string;\n    };\n    fragmentShader: {\n        log: string;\n        prefix: string;\n    };\n}\n\nexport class WebGLProgramWrapper {\n    public renderer: WebGLRenderer;\n    public vertexShader: WebGLShader;\n    public fragmentShader: WebGLShader;\n    public program: WebGLProgram;\n    public usedTimes: number = 1;\n    public id: number = programIdCount++;\n    public code: string;\n    public diagnostics: IDiagnostics;\n    // set up caching for attribute locations\n    public cachedAttributes: { [key: string]: number };\n    // set up caching for uniform locations\n    public cachedUniforms: WebGLUniformsWrapper;\n\n    constructor(\n        renderer: WebGLRenderer,\n        extensions: WebGLExtensions,\n        code: string,\n        material: Material,\n        shader: IShader,\n        parameters: IProgramParameters,\n    ) {\n        this.renderer = renderer;\n        const gl: WebGLRenderingContext = renderer.context;\n        const defines = material.defines;\n        let vertexShader = shader.vertexShader;\n        let fragmentShader = shader.fragmentShader;\n        let shadowMapTypeDefine: string = \"SHADOWMAP_TYPE_BASIC\";\n        if (parameters.shadowMapType === PCFShadowMap) {\n            shadowMapTypeDefine = \"SHADOWMAP_TYPE_PCF\";\n        } else if (parameters.shadowMapType === PCFSoftShadowMap) {\n            shadowMapTypeDefine = \"SHADOWMAP_TYPE_PCF_SOFT\";\n        }\n        let envMapTypeDefine: string = \"ENVMAP_TYPE_CUBE\";\n        let envMapModeDefine: string = \"ENVMAP_MODE_REFLECTION\";\n        let envMapBlendingDefine: string = \"ENVMAP_BLENDING_MULTIPLY\";\n        if (parameters.envMap) {\n            switch (material.envMap.mapping) {\n                case CubeReflectionMapping:\n                case CubeRefractionMapping:\n                    envMapTypeDefine = \"ENVMAP_TYPE_CUBE\";\n                    break;\n\n                case CubeUVReflectionMapping:\n                case CubeUVRefractionMapping:\n                    envMapTypeDefine = \"ENVMAP_TYPE_CUBE_UV\";\n                    break;\n\n                case EquirectangularReflectionMapping:\n                case EquirectangularRefractionMapping:\n                    envMapTypeDefine = \"ENVMAP_TYPE_EQUIREC\";\n                    break;\n\n                case SphericalReflectionMapping:\n                    envMapTypeDefine = \"ENVMAP_TYPE_SPHERE\";\n                    break;\n            }\n\n            switch (material.envMap.mapping) {\n                case CubeRefractionMapping:\n                case EquirectangularRefractionMapping:\n                    envMapModeDefine = \"ENVMAP_MODE_REFRACTION\";\n                    break;\n            }\n\n            switch (material.combine) {\n                case MultiplyOperation:\n                    envMapBlendingDefine = \"ENVMAP_BLENDING_MULTIPLY\";\n                    break;\n\n                case MixOperation:\n                    envMapBlendingDefine = \"ENVMAP_BLENDING_MIX\";\n                    break;\n\n                case AddOperation:\n                    envMapBlendingDefine = \"ENVMAP_BLENDING_ADD\";\n                    break;\n            }\n        }\n\n        const gammaFactorDefine: number = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n        const customExtensions: string = generateExtensions(material.extensions, parameters, extensions);\n\n        const customDefines: string = generateDefines(defines);\n        const program: WebGLProgram = gl.createProgram();\n        let prefixVertex: string, prefixFragment: string;\n        if (material instanceof RawShaderMaterial) {\n            prefixVertex = [customDefines].filter(filterEmptyLine).join(\"\\n\");\n            if (prefixVertex.length > 0) {\n                prefixVertex += \"\\n\";\n            }\n            prefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join(\"\\n\");\n            if (prefixFragment.length > 0) {\n                prefixFragment += \"\\n\";\n            }\n        } else {\n            prefixVertex = [\n                \"precision \" + parameters.precision + \" float;\",\n                \"precision \" + parameters.precision + \" int;\",\n                \"#define SHADER_NAME \" + shader.name,\n                customDefines,\n                parameters.supportsVertexTextures ? \"#define VERTEX_TEXTURES\" : \"\",\n                \"#define GAMMA_FACTOR \" + gammaFactorDefine,\n                \"#define MAX_BONES \" + parameters.maxBones,\n                parameters.useFog && parameters.fog ? \"#define USE_FOG\" : \"\",\n                parameters.useFog && parameters.fogExp ? \"#define FOG_EXP2\" : \"\",\n                parameters.map ? \"#define USE_MAP\" : \"\",\n                parameters.envMap ? \"#define USE_ENVMAP\" : \"\",\n                parameters.envMap ? \"#define \" + envMapModeDefine : \"\",\n                parameters.lightMap ? \"#define USE_LIGHTMAP\" : \"\",\n                parameters.aoMap ? \"#define USE_AOMAP\" : \"\",\n                parameters.emissiveMap ? \"#define USE_EMISSIVEMAP\" : \"\",\n                parameters.bumpMap ? \"#define USE_BUMPMAP\" : \"\",\n                parameters.normalMap ? \"#define USE_NORMALMAP\" : \"\",\n                parameters.displacementMap && parameters.supportsVertexTextures ? \"#define USE_DISPLACEMENTMAP\" : \"\",\n                parameters.specularMap ? \"#define USE_SPECULARMAP\" : \"\",\n                parameters.roughnessMap ? \"#define USE_ROUGHNESSMAP\" : \"\",\n                parameters.metalnessMap ? \"#define USE_METALNESSMAP\" : \"\",\n                parameters.alphaMap ? \"#define USE_ALPHAMAP\" : \"\",\n                parameters.vertexColors ? \"#define USE_COLOR\" : \"\",\n                parameters.flatShading ? \"#define FLAT_SHADED\" : \"\",\n                parameters.skinning ? \"#define USE_SKINNING\" : \"\",\n                parameters.useVertexTexture ? \"#define BONE_TEXTURE\" : \"\",\n                parameters.morphTargets ? \"#define USE_MORPHTARGETS\" : \"\",\n                parameters.morphNormals && parameters.flatShading === false ? \"#define USE_MORPHNORMALS\" : \"\",\n                parameters.doubleSided ? \"#define DOUBLE_SIDED\" : \"\",\n                parameters.flipSided ? \"#define FLIP_SIDED\" : \"\",\n                \"#define NUM_CLIPPING_PLANES \" + parameters.numClippingPlanes,\n                parameters.shadowMapEnabled ? \"#define USE_SHADOWMAP\" : \"\",\n                parameters.shadowMapEnabled ? \"#define \" + shadowMapTypeDefine : \"\",\n                parameters.sizeAttenuation ? \"#define USE_SIZEATTENUATION\" : \"\",\n                parameters.logarithmicDepthBuffer ? \"#define USE_LOGDEPTHBUF\" : \"\",\n                parameters.logarithmicDepthBuffer && extensions.get(\"EXT_frag_depth\")\n                    ? \"#define USE_LOGDEPTHBUF_EXT\"\n                    : \"\",\n                \"uniform mat4 modelMatrix;\",\n                \"uniform mat4 modelViewMatrix;\",\n                \"uniform mat4 projectionMatrix;\",\n                \"uniform mat4 viewMatrix;\",\n                \"uniform mat3 normalMatrix;\",\n                \"uniform vec3 cameraPosition;\",\n                \"attribute vec3 position;\",\n                \"attribute vec3 normal;\",\n                \"attribute vec2 uv;\",\n                \"#ifdef USE_COLOR\",\n                \"\tattribute vec3 color;\",\n                \"#endif\",\n                \"#ifdef USE_MORPHTARGETS\",\n                \"\tattribute vec3 morphTarget0;\",\n                \"\tattribute vec3 morphTarget1;\",\n                \"\tattribute vec3 morphTarget2;\",\n                \"\tattribute vec3 morphTarget3;\",\n                \"\t#ifdef USE_MORPHNORMALS\",\n                \"\t\tattribute vec3 morphNormal0;\",\n                \"\t\tattribute vec3 morphNormal1;\",\n                \"\t\tattribute vec3 morphNormal2;\",\n                \"\t\tattribute vec3 morphNormal3;\",\n                \"\t#else\",\n                \"\t\tattribute vec3 morphTarget4;\",\n                \"\t\tattribute vec3 morphTarget5;\",\n                \"\t\tattribute vec3 morphTarget6;\",\n                \"\t\tattribute vec3 morphTarget7;\",\n                \"\t#endif\",\n                \"#endif\",\n                \"#ifdef USE_SKINNING\",\n                \"\tattribute vec4 skinIndex;\",\n                \"\tattribute vec4 skinWeight;\",\n                \"#endif\",\n                \"\\n\",\n            ]\n                .filter(filterEmptyLine)\n                .join(\"\\n\");\n\n            prefixFragment = [\n                customExtensions,\n                \"precision \" + parameters.precision + \" float;\",\n                \"precision \" + parameters.precision + \" int;\",\n                \"#define SHADER_NAME \" + shader.name,\n                customDefines,\n                parameters.alphaTest ? \"#define ALPHATEST \" + parameters.alphaTest : \"\",\n                \"#define GAMMA_FACTOR \" + gammaFactorDefine,\n                parameters.useFog && parameters.fog ? \"#define USE_FOG\" : \"\",\n                parameters.useFog && parameters.fogExp ? \"#define FOG_EXP2\" : \"\",\n                parameters.map ? \"#define USE_MAP\" : \"\",\n                parameters.envMap ? \"#define USE_ENVMAP\" : \"\",\n                parameters.envMap ? \"#define \" + envMapTypeDefine : \"\",\n                parameters.envMap ? \"#define \" + envMapModeDefine : \"\",\n                parameters.envMap ? \"#define \" + envMapBlendingDefine : \"\",\n                parameters.lightMap ? \"#define USE_LIGHTMAP\" : \"\",\n                parameters.aoMap ? \"#define USE_AOMAP\" : \"\",\n                parameters.emissiveMap ? \"#define USE_EMISSIVEMAP\" : \"\",\n                parameters.bumpMap ? \"#define USE_BUMPMAP\" : \"\",\n                parameters.normalMap ? \"#define USE_NORMALMAP\" : \"\",\n                parameters.specularMap ? \"#define USE_SPECULARMAP\" : \"\",\n                parameters.roughnessMap ? \"#define USE_ROUGHNESSMAP\" : \"\",\n                parameters.metalnessMap ? \"#define USE_METALNESSMAP\" : \"\",\n                parameters.alphaMap ? \"#define USE_ALPHAMAP\" : \"\",\n                parameters.vertexColors ? \"#define USE_COLOR\" : \"\",\n                parameters.gradientMap ? \"#define USE_GRADIENTMAP\" : \"\",\n                parameters.flatShading ? \"#define FLAT_SHADED\" : \"\",\n                parameters.doubleSided ? \"#define DOUBLE_SIDED\" : \"\",\n                parameters.flipSided ? \"#define FLIP_SIDED\" : \"\",\n                \"#define NUM_CLIPPING_PLANES \" + parameters.numClippingPlanes,\n                \"#define UNION_CLIPPING_PLANES \" + (parameters.numClippingPlanes - parameters.numClipIntersection),\n                parameters.shadowMapEnabled ? \"#define USE_SHADOWMAP\" : \"\",\n                parameters.shadowMapEnabled ? \"#define \" + shadowMapTypeDefine : \"\",\n                parameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : \"\",\n                parameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : \"\",\n                parameters.logarithmicDepthBuffer ? \"#define USE_LOGDEPTHBUF\" : \"\",\n                parameters.logarithmicDepthBuffer && extensions.get(\"EXT_frag_depth\")\n                    ? \"#define USE_LOGDEPTHBUF_EXT\"\n                    : \"\",\n                parameters.envMap && extensions.get(\"EXT_shader_texture_lod\") ? \"#define TEXTURE_LOD_EXT\" : \"\",\n                \"uniform mat4 viewMatrix;\",\n                \"uniform vec3 cameraPosition;\",\n                parameters.toneMapping !== NoToneMapping ? \"#define TONE_MAPPING\" : \"\",\n                parameters.toneMapping !== NoToneMapping ? ShaderChunk[\"tonemapping_pars_fragment\"] : \"\", // this code is required here because it is used by the toneMapping() function defined below\n                parameters.toneMapping !== NoToneMapping\n                    ? getToneMappingFunction(\"toneMapping\", parameters.toneMapping)\n                    : \"\",\n                parameters.dithering ? \"#define DITHERING\" : \"\",\n                parameters.outputEncoding ||\n                parameters.mapEncoding ||\n                parameters.envMapEncoding ||\n                parameters.emissiveMapEncoding\n                    ? ShaderChunk[\"encodings_pars_fragment\"]\n                    : \"\",\n                // this code is required here because it is used by the various encoding/decoding function defined below\n                parameters.mapEncoding ? getTexelDecodingFunction(\"mapTexelToLinear\", parameters.mapEncoding) : \"\",\n                parameters.envMapEncoding\n                    ? getTexelDecodingFunction(\"envMapTexelToLinear\", parameters.envMapEncoding)\n                    : \"\",\n                parameters.emissiveMapEncoding\n                    ? getTexelDecodingFunction(\"emissiveMapTexelToLinear\", parameters.emissiveMapEncoding)\n                    : \"\",\n                parameters.outputEncoding\n                    ? getTexelEncodingFunction(\"linearToOutputTexel\", parameters.outputEncoding)\n                    : \"\",\n                parameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : \"\",\n                \"\\n\",\n            ]\n                .filter(filterEmptyLine)\n                .join(\"\\n\");\n        }\n        vertexShader = parseIncludes(vertexShader);\n        vertexShader = replaceLightNums(vertexShader, parameters);\n        fragmentShader = parseIncludes(fragmentShader);\n        fragmentShader = replaceLightNums(fragmentShader, parameters);\n        if (!(material instanceof ShaderMaterial)) {\n            vertexShader = unrollLoops(vertexShader);\n            fragmentShader = unrollLoops(fragmentShader);\n        }\n        const vertexGlsl: string = prefixVertex + vertexShader;\n        const fragmentGlsl: string = prefixFragment + fragmentShader;\n        const glVertexShader: WebGLShader = new WebGLShaderWrapper(gl, gl.VERTEX_SHADER, vertexGlsl).shader;\n        const glFragmentShader: WebGLShader = new WebGLShaderWrapper(gl, gl.FRAGMENT_SHADER, fragmentGlsl).shader;\n        gl.attachShader(program, glVertexShader);\n        gl.attachShader(program, glFragmentShader);\n        // Force a particular attribute to index 0.\n        if (material.index0AttributeName !== undefined) {\n            gl.bindAttribLocation(program, 0, material.index0AttributeName);\n        } else if (parameters.morphTargets === true) {\n            // programs with morphTargets displace position out of attribute 0\n            gl.bindAttribLocation(program, 0, \"position\");\n        }\n        gl.linkProgram(program);\n        const programLog: string = gl.getProgramInfoLog(program).trim();\n        const vertexLog: string = gl.getShaderInfoLog(glVertexShader).trim();\n        const fragmentLog: string = gl.getShaderInfoLog(glFragmentShader).trim();\n        let runnable: boolean = true;\n        let haveDiagnostics: boolean = true;\n        // console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n        // console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n        if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n            runnable = false;\n            console.error(\n                \"THREE.WebGLProgram: shader error: \",\n                gl.getError(),\n                \"gl.VALIDATE_STATUS\",\n                gl.getProgramParameter(program, gl.VALIDATE_STATUS),\n                \"gl.getProgramInfoLog\",\n                programLog,\n                vertexLog,\n                fragmentLog,\n            );\n        } else if (programLog !== \"\") {\n            console.warn(\"THREE.WebGLProgram: gl.getProgramInfoLog()\", programLog);\n        } else if (vertexLog === \"\" || fragmentLog === \"\") {\n            haveDiagnostics = false;\n        }\n        if (haveDiagnostics) {\n            this.diagnostics = {\n                runnable: runnable,\n                material: material,\n                programLog: programLog,\n                vertexShader: {\n                    log: vertexLog,\n                    prefix: prefixVertex,\n                },\n                fragmentShader: {\n                    log: fragmentLog,\n                    prefix: prefixFragment,\n                },\n            };\n        }\n        // clean up\n        gl.deleteShader(glVertexShader);\n        gl.deleteShader(glFragmentShader);\n\n        this.code = code;\n        this.program = program;\n        this.vertexShader = glVertexShader;\n        this.fragmentShader = glFragmentShader;\n    }\n\n    public getAttributes(): { [key: string]: number } {\n        if (this.cachedAttributes === undefined) {\n            this.cachedAttributes = fetchAttributeLocations(this.renderer.context, this.program);\n        }\n        return this.cachedAttributes;\n    }\n\n    public getUniforms(): WebGLUniformsWrapper {\n        if (this.cachedUniforms === undefined) {\n            this.cachedUniforms = new WebGLUniformsWrapper(this.renderer, this.program);\n        }\n        return this.cachedUniforms;\n    }\n\n    // free resource\n    public destroy(): void {\n        this.renderer.context.deleteProgram(this.program);\n        this.program = undefined;\n    }\n}\n","import {\n    BackSide,\n    DoubleSide,\n    CubeUVRefractionMapping,\n    CubeUVReflectionMapping,\n    GammaEncoding,\n    LinearEncoding,\n} from \"../../constants\";\nimport { WebGLRenderer, IShader } from \"../WebGLRenderer\";\nimport { WebGLExtensions } from \"./WebGLExtensions\";\nimport { WebGLCapabilities } from \"./WebGLCapabilities\";\nimport { Bone } from \"../../objects/Bone\";\nimport { SkinnedMesh } from \"../../objects/SkinnedMesh\";\nimport { Skeleton } from \"../../objects/Skeleton\";\nimport { Object3D } from \"../../core/Object3D\";\nimport { Material } from \"../../materials/Material\";\nimport { WebGLRenderTarget } from \"../WebGLRenderTarget\";\nimport { FogExp2 } from \"../../scenes/FogExp2\";\nimport { Fog } from \"../../scenes/Fog\";\nimport { ILightState } from \"./WebGLLights\";\nimport { Texture } from \"../../textures/Texture\";\nimport { WebGLProgramWrapper } from \"./WebGLProgram\";\nimport { Light } from \"../../lights/Light\";\n\nexport interface IProgramParameters {\n    alphaMap: boolean;\n    alphaTest: number;\n    aoMap: boolean;\n    bumpMap: boolean;\n    combine: number;\n    depthPacking: number | boolean; // ?\n    displacementMap: boolean;\n    dithering: boolean;\n    doubleSided: boolean;\n    emissiveMap: boolean;\n    emissiveMapEncoding: number;\n    envMap: boolean;\n    envMapMode: null | number;\n    envMapEncoding: number;\n    envMapCubeUV: boolean;\n    flatShading: boolean;\n    flipSided: boolean;\n    fog: boolean;\n    fogExp: boolean;\n    gradientMap: boolean;\n    lightMap: boolean;\n    logarithmicDepthBuffer: boolean;\n    map: boolean;\n    mapEncoding: number;\n    maxBones: number;\n    maxMorphNormals: number;\n    maxMorphTargets: number;\n    metalnessMap: boolean;\n    normalMap: boolean;\n    morphTargets: boolean;\n    morphNormals: boolean;\n    numClipIntersection: number;\n    numClippingPlanes: number;\n    numDirLights: number;\n    numHemiLights: number;\n    numPointLights: number;\n    numRectAreaLights: number;\n    numSpotLights: number;\n    outputEncoding: number;\n    physicallyCorrectLights: boolean;\n    premultipliedAlpha: boolean;\n    precision: string;\n    roughnessMap: boolean;\n    shaderID: string;\n    shadowMapEnabled: boolean;\n    shadowMapType: number;\n    sizeAttenuation: boolean;\n    skinning: boolean;\n    specularMap: boolean;\n    supportsVertexTextures: boolean;\n    toneMapping: number;\n    useFog: boolean;\n    useVertexTexture: boolean;\n    vertexColors: number;\n}\n\nfunction getTextureEncodingFromMap(map: Texture | WebGLRenderTarget, gammaOverrideLinear: boolean): number {\n    let encoding: number;\n    if (!map) {\n        encoding = LinearEncoding;\n    } else if (map instanceof Texture) {\n        encoding = map.encoding;\n    } else if (map instanceof WebGLRenderTarget) {\n        console.warn(\n            \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\",\n        );\n        encoding = map.texture.encoding;\n    }\n    // add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n    if (encoding === LinearEncoding && gammaOverrideLinear) {\n        encoding = GammaEncoding;\n    }\n    return encoding;\n}\n\nexport class WebGLPrograms {\n    public static shaderIDs: { [key: string]: string } = {\n        MeshDepthMaterial: \"depth\",\n        MeshDistanceMaterial: \"distanceRGBA\",\n        MeshNormalMaterial: \"normal\",\n        MeshBasicMaterial: \"basic\",\n        MeshLambertMaterial: \"lambert\",\n        MeshPhongMaterial: \"phong\",\n        MeshToonMaterial: \"phong\",\n        MeshStandardMaterial: \"physical\",\n        MeshPhysicalMaterial: \"physical\",\n        LineBasicMaterial: \"basic\",\n        LineDashedMaterial: \"dashed\",\n        PointsMaterial: \"points\",\n        ShadowMaterial: \"shadow\",\n    };\n\n    public static parameterNames: string[] = [\n        \"precision\",\n        \"supportsVertexTextures\",\n        \"map\",\n        \"mapEncoding\",\n        \"envMap\",\n        \"envMapMode\",\n        \"envMapEncoding\",\n        \"lightMap\",\n        \"aoMap\",\n        \"emissiveMap\",\n        \"emissiveMapEncoding\",\n        \"bumpMap\",\n        \"normalMap\",\n        \"displacementMap\",\n        \"specularMap\",\n        \"roughnessMap\",\n        \"metalnessMap\",\n        \"gradientMap\",\n        \"alphaMap\",\n        \"combine\",\n        \"vertexColors\",\n        \"fog\",\n        \"useFog\",\n        \"fogExp\",\n        \"flatShading\",\n        \"sizeAttenuation\",\n        \"logarithmicDepthBuffer\",\n        \"skinning\",\n        \"maxBones\",\n        \"useVertexTexture\",\n        \"morphTargets\",\n        \"morphNormals\",\n        \"maxMorphTargets\",\n        \"maxMorphNormals\",\n        \"premultipliedAlpha\",\n        \"numDirLights\",\n        \"numPointLights\",\n        \"numSpotLights\",\n        \"numHemiLights\",\n        \"numRectAreaLights\",\n        \"shadowMapEnabled\",\n        \"shadowMapType\",\n        \"toneMapping\",\n        \"physicallyCorrectLights\",\n        \"alphaTest\",\n        \"doubleSided\",\n        \"flipSided\",\n        \"numClippingPlanes\",\n        \"numClipIntersection\",\n        \"depthPacking\",\n        \"dithering\",\n    ];\n\n    public renderer: WebGLRenderer;\n    public extensions: WebGLExtensions;\n    public capabilities: WebGLCapabilities;\n    public programs: WebGLProgramWrapper[] = [];\n\n    constructor(renderer: WebGLRenderer, extensions: WebGLExtensions, capabilities: WebGLCapabilities) {\n        this.renderer = renderer;\n        this.extensions = extensions;\n        this.capabilities = capabilities;\n    }\n\n    protected allocateBones(object: SkinnedMesh): number {\n        const skeleton: Skeleton = object.skeleton;\n        const bones: Bone[] = skeleton.bones;\n        if (this.capabilities.floatVertexTextures) {\n            return 1024;\n        } else {\n            // default for when object is not specified\n            // ( for example when prebuilding shader to be used with multiple objects )\n            //\n            //  - leave some extra space for other uniforms\n            //  - limit here is ANGLE's 254 max uniform vectors\n            //    (up to 54 should be safe)\n            const nVertexUniforms: number = this.capabilities.maxVertexUniforms;\n            const nVertexMatrices: number = Math.floor((nVertexUniforms - 20) / 4);\n            const maxBones: number = Math.min(nVertexMatrices, bones.length);\n            if (maxBones < bones.length) {\n                console.warn(\n                    \"THREE.WebGLRenderer: Skeleton has \" + bones.length + \" bones. This GPU supports \" + maxBones + \".\",\n                );\n                return 0;\n            }\n            return maxBones;\n        }\n    }\n\n    public getParameters(\n        material: Material,\n        lights: ILightState,\n        shadows: Light[],\n        fog?: Fog | FogExp2,\n        nClipPlanes?: number,\n        nClipIntersection?: number,\n        object?: Object3D,\n    ): IProgramParameters {\n        const renderer: WebGLRenderer = this.renderer;\n        const capabilities: WebGLCapabilities = this.capabilities;\n        const shaderID: string = WebGLPrograms.shaderIDs[material.type];\n        // heuristics to create shader parameters according to lights in the scene\n        // (not to blow over maxLights budget)\n        const maxBones: number = object instanceof SkinnedMesh ? this.allocateBones(object) : 0;\n        let precision: string = capabilities.precision;\n        if (material.precision !== null) {\n            precision = capabilities.getMaxPrecision(material.precision);\n            if (precision !== material.precision) {\n                console.warn(\n                    \"THREE.WebGLProgram.getParameters:\",\n                    material.precision,\n                    \"not supported, using\",\n                    precision,\n                    \"instead.\",\n                );\n            }\n        }\n        const currentRenderTarget: WebGLRenderTarget | null = renderer.getRenderTarget();\n        const parameters: IProgramParameters = {\n            shaderID: shaderID,\n            precision: precision,\n            supportsVertexTextures: capabilities.vertexTextures,\n            outputEncoding: getTextureEncodingFromMap(\n                !currentRenderTarget ? null : currentRenderTarget.texture,\n                renderer.gammaOutput,\n            ),\n            map: !!material.map,\n            mapEncoding: getTextureEncodingFromMap(material.map, renderer.gammaInput),\n            envMap: !!material.envMap,\n            envMapMode: material.envMap && material.envMap.mapping,\n            envMapEncoding: getTextureEncodingFromMap(material.envMap, renderer.gammaInput),\n            envMapCubeUV:\n                !!material.envMap &&\n                (material.envMap.mapping === CubeUVReflectionMapping ||\n                    material.envMap.mapping === CubeUVRefractionMapping),\n            lightMap: !!material.lightMap,\n            aoMap: !!material.aoMap,\n            emissiveMap: !!material.emissiveMap,\n            emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap, renderer.gammaInput),\n            bumpMap: !!material.bumpMap,\n            normalMap: !!material.normalMap,\n            displacementMap: !!material.displacementMap,\n            roughnessMap: !!material.roughnessMap,\n            metalnessMap: !!material.metalnessMap,\n            specularMap: !!material.specularMap,\n            alphaMap: !!material.alphaMap,\n            gradientMap: !!material.gradientMap,\n            combine: material.combine,\n            vertexColors: material.vertexColors,\n            fog: !!fog,\n            useFog: material.fog,\n            fogExp: fog && fog instanceof FogExp2,\n            flatShading: material.flatShading,\n            sizeAttenuation: material.sizeAttenuation,\n            logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n            skinning: material.skinning && maxBones > 0,\n            maxBones: maxBones,\n            useVertexTexture: capabilities.floatVertexTextures,\n            morphTargets: material.morphTargets,\n            morphNormals: material.morphNormals,\n            maxMorphTargets: renderer.maxMorphTargets,\n            maxMorphNormals: renderer.maxMorphNormals,\n            numDirLights: lights.directional.length,\n            numPointLights: lights.point.length,\n            numSpotLights: lights.spot.length,\n            numRectAreaLights: lights.rectArea.length,\n            numHemiLights: lights.hemi.length,\n            numClippingPlanes: nClipPlanes,\n            numClipIntersection: nClipIntersection,\n            dithering: material.dithering,\n            shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,\n            shadowMapType: renderer.shadowMap.type,\n            toneMapping: renderer.toneMapping,\n            physicallyCorrectLights: renderer.physicallyCorrectLights,\n            premultipliedAlpha: material.premultipliedAlpha,\n            alphaTest: material.alphaTest,\n            doubleSided: material.side === DoubleSide,\n            flipSided: material.side === BackSide,\n            depthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n        };\n        return parameters;\n    }\n\n    public getProgramCode(material: Material, parameters: IProgramParameters): string {\n        const array: any[] = [];\n        if (parameters.shaderID) {\n            array.push(parameters.shaderID);\n        } else {\n            array.push(material.fragmentShader);\n            array.push(material.vertexShader);\n        }\n        if (material.defines !== undefined) {\n            for (const name in material.defines) {\n                if (material.defines.hasOwnProperty(name)) {\n                    array.push(name);\n                    array.push(material.defines[name]);\n                }\n            }\n        }\n        for (let i: number = 0; i < WebGLPrograms.parameterNames.length; i++) {\n            array.push(parameters[WebGLPrograms.parameterNames[i]]);\n        }\n        array.push(material.onBeforeCompile.toString());\n        array.push(this.renderer.gammaOutput);\n        return array.join();\n    }\n\n    public acquireProgram(\n        material: Material,\n        shader: IShader,\n        parameters: IProgramParameters,\n        code: string,\n    ): WebGLProgramWrapper {\n        let program: WebGLProgramWrapper;\n        // Check if code has been already compiled\n        for (let p: number = 0, pl: number = this.programs.length; p < pl; p++) {\n            const programInfo = this.programs[p];\n            if (programInfo.code === code) {\n                program = programInfo;\n                ++program.usedTimes;\n                break;\n            }\n        }\n        if (program === undefined) {\n            program = new WebGLProgramWrapper(this.renderer, this.extensions, code, material, shader, parameters);\n            this.programs.push(program);\n        }\n        return program;\n    }\n\n    public releaseProgram(program: WebGLProgramWrapper) {\n        if (--program.usedTimes === 0) {\n            // Remove from unordered set\n            const i: number = this.programs.indexOf(program);\n            this.programs[i] = this.programs[this.programs.length - 1];\n            this.programs.pop();\n            // Free WebGL resources\n            program.destroy();\n        }\n    }\n}\n","import { IShader } from \"../WebGLRenderer\";\nimport { WebGLProgramWrapper } from \"./WebGLProgram\";\nimport { UniformSetterType } from \"./WebGLUniforms\";\nimport { Object3D } from \"../../core/Object3D\";\nimport { Material } from \"../../materials/Material\";\nimport { Texture } from \"../../textures/Texture\";\nimport { WebGLRenderTarget } from \"../WebGLRenderTarget\";\nimport { WebGLRenderTargetCube } from \"../WebGLRenderTargetCube\";\nimport { Fog } from \"../../scenes/Fog\";\nimport { FogExp2 } from \"../../scenes/FogExp2\";\n\nexport interface ITextureProperties {\n    __version?: number;\n    __webglInit?: boolean;\n    __webglTexture?: WebGLTexture;\n    __image__webglTextureCube?: WebGLTexture;\n    __currentAnisotropy?: any;\n}\n\nexport interface IRenderTargetProperties {\n    __webglDepthbuffer?: WebGLRenderbuffer;\n    __webglFramebuffer?: WebGLFramebuffer;\n}\n\nexport interface IRenderTargetCubeProperties {\n    __webglDepthbuffer?: WebGLRenderbuffer[];\n    __webglFramebuffer?: WebGLFramebuffer;\n}\n\nexport interface IMaterialProperties {\n    program?: WebGLProgramWrapper;\n    shader?: IShader;\n    lightsHash?: string;\n    uniformsList?: UniformSetterType[];\n    numClippingPlanes?: number;\n    numIntersection?: number;\n    clippingState?: Float32Array | null;\n    fog?: Fog | FogExp2;\n}\n\nexport interface IImmediateRenderObjectProperties {\n    position?: WebGLBuffer;\n    normal?: WebGLBuffer;\n    uv?: WebGLBuffer;\n    color?: WebGLBuffer;\n}\n\nexport type WebGLPropertiesType =\n    | IImmediateRenderObjectProperties\n    | IMaterialProperties\n    | ITextureProperties\n    | IRenderTargetProperties\n    | IRenderTargetCubeProperties;\n\nexport class WebGLProperties {\n    protected properties: { [key: string]: WebGLPropertiesType } = {};\n\n    public get(object: Object3D): IImmediateRenderObjectProperties;\n    public get(object: Material): IMaterialProperties;\n    public get(object: Texture): ITextureProperties;\n    public get(object: WebGLRenderTarget): IRenderTargetProperties;\n    public get(object: WebGLRenderTargetCube): IRenderTargetCubeProperties;\n    public get(object: any): WebGLPropertiesType {\n        const uuid: string = object.uuid;\n        let map: WebGLPropertiesType = this.properties[uuid];\n        if (map === undefined) {\n            map = {};\n            this.properties[uuid] = map;\n        }\n        return map;\n    }\n\n    public remove(object: Object3D | Material | Texture | WebGLRenderTarget | WebGLRenderTargetCube): void {\n        delete this.properties[object.uuid];\n    }\n\n    public dispose(): void {\n        this.properties = {};\n    }\n}\n","import { BufferGeometry } from \"../../core/BufferGeometry\";\nimport { IGroup } from \"../../core/DirectGeometry\";\nimport { Object3D } from \"../../core/Object3D\";\nimport { Material } from \"../../materials/Material\";\nimport { Scene } from \"../../scenes/Scene\";\nimport { Camera } from \"../../cameras/Camera\";\n\nexport interface IRenderItem {\n    geometry: BufferGeometry;\n    group: IGroup;\n    id: number;\n    material: Material;\n    object: Object3D;\n    program: any;\n    renderOrder: number;\n    z: number;\n}\n\nexport class WebGLRenderList {\n    public opaque: IRenderItem[] = [];\n    public transparent: IRenderItem[] = [];\n\n    protected renderItems: IRenderItem[] = [];\n    protected renderItemsIndex: number = 0;\n\n    public init(): this {\n        this.renderItemsIndex = 0;\n        this.opaque.length = 0;\n        this.transparent.length = 0;\n        return this;\n    }\n\n    public push(object: Object3D, geometry: BufferGeometry, material: Material, z: number, group: IGroup) {\n        let renderItem: IRenderItem = this.renderItems[this.renderItemsIndex];\n        if (renderItem === undefined) {\n            renderItem = {\n                geometry: geometry,\n                group: group,\n                id: object.id,\n                material: material,\n                object: object,\n                program: material.program,\n                renderOrder: object.renderOrder,\n                z: z,\n            };\n            this.renderItems[this.renderItemsIndex] = renderItem;\n        } else {\n            renderItem.id = object.id;\n            renderItem.object = object;\n            renderItem.geometry = geometry;\n            renderItem.material = material;\n            renderItem.program = material.program;\n            renderItem.renderOrder = object.renderOrder;\n            renderItem.z = z;\n            renderItem.group = group;\n        }\n        (material.transparent === true ? this.transparent : this.opaque).push(renderItem);\n        this.renderItemsIndex++;\n    }\n\n    public sort() {\n        if (this.opaque.length > 1) {\n            this.opaque.sort((a: IRenderItem, b: IRenderItem) => {\n                if (a.renderOrder !== b.renderOrder) {\n                    return a.renderOrder - b.renderOrder;\n                } else if (a.program && b.program && a.program !== b.program) {\n                    return a.program.id - b.program.id;\n                } else if (a.material.id !== b.material.id) {\n                    return a.material.id - b.material.id;\n                } else if (a.z !== b.z) {\n                    return a.z - b.z;\n                } else {\n                    return a.id - b.id;\n                }\n            });\n        }\n        if (this.transparent.length > 1) {\n            this.transparent.sort((a: IRenderItem, b: IRenderItem) => {\n                if (a.renderOrder !== b.renderOrder) {\n                    return a.renderOrder - b.renderOrder;\n                }\n                if (a.z !== b.z) {\n                    return b.z - a.z;\n                } else {\n                    return a.id - b.id;\n                }\n            });\n        }\n    }\n}\n\nexport class WebGLRenderLists {\n    protected lists: { [key: string]: WebGLRenderList } = {};\n\n    public get(scene: Scene, camera: Camera): WebGLRenderList {\n        const hash: string = scene.id + \",\" + camera.id;\n        let list: WebGLRenderList = this.lists[hash];\n        if (list === undefined) {\n            list = new WebGLRenderList();\n            this.lists[hash] = list;\n        }\n        return list;\n    }\n\n    public dispose() {\n        this.lists = {};\n    }\n}\n","function addLineNumbers(str: string): string {\n    const lines: string[] = str.split(\"\\n\");\n    for (let i: number = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + \": \" + lines[i];\n    }\n    return lines.join(\"\\n\");\n}\n\nexport class WebGLShaderWrapper {\n    public shader: WebGLShader;\n\n    constructor(gl: WebGLRenderingContext, type: number, str: string) {\n        const shader = gl.createShader(type);\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n        if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n            console.error(`THREE.WebGLShader: Shader couldn't compile.`);\n        }\n        if (gl.getShaderInfoLog(shader) !== \"\") {\n            console.warn(\n                `THREE.WebGLShader: gl.getShaderInfoLog() ${\n                    type === gl.VERTEX_SHADER ? \"vertex\" : \"fragment\"\n                } ${gl.getShaderInfoLog(shader)} ${addLineNumbers(str)}`,\n            );\n        }\n        this.shader = shader;\n    }\n}\n","import {\n    FrontSide,\n    BackSide,\n    DoubleSide,\n    RGBAFormat,\n    NearestFilter,\n    PCFShadowMap,\n    RGBADepthPacking,\n} from \"../../constants\";\nimport { Frustum } from \"../../math/Frustum\";\nimport { Matrix4 } from \"../../math/Matrix4\";\nimport { Vector2 } from \"../../math/Vector2\";\nimport { Vector3 } from \"../../math/Vector3\";\nimport { WebGLRenderer } from \"../WebGLRenderer\";\nimport { Vector4 } from \"../../math/Vector4\";\nimport { MeshDepthMaterial, MeshDistanceMaterial, Material } from \"../../materials/Materials\";\nimport { WebGLObjects } from \"./WebGLObjects\";\nimport { Scene } from \"../../scenes/Scene\";\nimport { Camera } from \"../../cameras/Camera\";\nimport { WebGLState } from \"./WebGLState\";\nimport { PointLight } from \"../../lights/PointLight\";\nimport { LightShadow, LightShadowCamera } from \"../../lights/LightShadow\";\nimport { WebGLRenderTarget, IWebGLRenderTargetOptions } from \"../WebGLRenderTarget\";\nimport { SpotLightShadow } from \"../../lights/SpotLightShadow\";\nimport { SpotLight } from \"../../lights/SpotLight\";\nimport { DirectionalLight } from \"../../lights/DirectionalLight\";\nimport { Mesh } from \"../../objects/Mesh\";\nimport { Line } from \"../../objects/Line\";\nimport { Points } from \"../../objects/Points\";\nimport { Object3D } from \"../../core/Object3D\";\nimport { BufferGeometry } from \"../../core/BufferGeometry\";\nimport { IGroup } from \"../../core/DirectGeometry\";\nimport { SkinnedMesh } from \"../../objects/SkinnedMesh\";\nimport { ObjectWithGeometry } from \"../../math/Box3\";\nimport { Geometry } from \"../../core/Geometry\";\n\nexport type ShadowLightWithoutPointLight = DirectionalLight | SpotLight;\nexport type ShadowLight = ShadowLightWithoutPointLight | PointLight;\n\nexport class WebGLShadowMap {\n    public type: number = PCFShadowMap;\n    public enabled: boolean = false;\n    public autoUpdate: boolean = true;\n    public needsUpdate: boolean = false;\n\n    protected frustum: Frustum = new Frustum();\n    protected projScreenMatrix: Matrix4 = new Matrix4();\n    protected shadowMapSize: Vector2 = new Vector2();\n    protected maxShadowMapSize: Vector2;\n    protected lookTarget: Vector3 = new Vector3();\n    protected lightPositionWorld: Vector3 = new Vector3();\n    protected morphingFlag: number = 1;\n    protected skinningFlag: number = 2;\n    protected numberOfMaterialVariants: number = (this.morphingFlag | this.skinningFlag) + 1;\n    protected depthMaterials: MeshDepthMaterial[] | MeshDistanceMaterial[] = new Array(this.numberOfMaterialVariants);\n    protected distanceMaterials: MeshDistanceMaterial[] = new Array(this.numberOfMaterialVariants);\n    protected materialCache: {\n        [key: string]: {\n            [key: string]: MeshDepthMaterial | MeshDistanceMaterial;\n        };\n    } = {};\n    protected objects: WebGLObjects;\n    protected renderer: WebGLRenderer;\n\n    protected shadowSide: { [key: number]: number };\n    protected cubeDirections: Vector3[];\n    protected cubeUps: Vector3[];\n    protected cube2DViewPorts: Vector4[];\n\n    constructor(renderer: WebGLRenderer, objects: WebGLObjects, maxTextureSize: number) {\n        this.renderer = renderer;\n        this.objects = objects;\n        this.maxShadowMapSize = new Vector2(maxTextureSize, maxTextureSize);\n        this.shadowSide = {\n            0: BackSide,\n            1: FrontSide,\n            2: DoubleSide,\n        };\n        this.cubeDirections = [\n            new Vector3(1, 0, 0),\n            new Vector3(-1, 0, 0),\n            new Vector3(0, 0, 1),\n            new Vector3(0, 0, -1),\n            new Vector3(0, 1, 0),\n            new Vector3(0, -1, 0),\n        ];\n        this.cubeUps = [\n            new Vector3(0, 1, 0),\n            new Vector3(0, 1, 0),\n            new Vector3(0, 1, 0),\n            new Vector3(0, 1, 0),\n            new Vector3(0, 0, 1),\n            new Vector3(0, 0, -1),\n        ];\n        this.cube2DViewPorts = [\n            new Vector4(),\n            new Vector4(),\n            new Vector4(),\n            new Vector4(),\n            new Vector4(),\n            new Vector4(),\n        ];\n        // init\n        for (let i: number = 0; i !== this.numberOfMaterialVariants; i++) {\n            const useMorphing: boolean = (i & this.morphingFlag) !== 0;\n            const useSkinning: boolean = (i & this.skinningFlag) !== 0;\n            const depthMaterial: MeshDepthMaterial = new MeshDepthMaterial({\n                depthPacking: RGBADepthPacking,\n                morphTargets: useMorphing,\n                skinning: useSkinning,\n            });\n            this.depthMaterials[i] = depthMaterial;\n            const distanceMaterial: MeshDistanceMaterial = new MeshDistanceMaterial({\n                morphTargets: useMorphing,\n                skinning: useSkinning,\n            });\n            this.distanceMaterials[i] = distanceMaterial;\n        }\n    }\n\n    public getDepthMaterial(\n        object: Object3D,\n        material: Material,\n        isPointLight: boolean,\n        lightPositionWorld: Vector3,\n        shadowCameraNear: number,\n        shadowCameraFar: number,\n    ): MeshDepthMaterial | MeshDistanceMaterial {\n        let result: MeshDepthMaterial | MeshDistanceMaterial | null = null;\n        let materialVariants: MeshDepthMaterial[] | MeshDistanceMaterial[] = this.depthMaterials;\n        let customMaterial: MeshDepthMaterial | MeshDistanceMaterial = object.customDepthMaterial;\n        if (isPointLight) {\n            materialVariants = this.distanceMaterials;\n            customMaterial = object.customDistanceMaterial;\n        }\n        if (!customMaterial) {\n            let useMorphing: boolean = false;\n            if (material.morphTargets) {\n                const geometry: BufferGeometry | Geometry = (object as ObjectWithGeometry).geometry;\n                if (geometry && geometry instanceof BufferGeometry) {\n                    useMorphing =\n                        geometry.morphAttributes &&\n                        geometry.morphAttributes.position &&\n                        geometry.morphAttributes.position.length > 0;\n                } else if (geometry && geometry instanceof Geometry) {\n                    useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n                }\n            }\n            if (object instanceof SkinnedMesh && material.skinning === false) {\n                console.warn(\"THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:\", object);\n            }\n            const useSkinning: boolean = object instanceof SkinnedMesh && material.skinning;\n            let variantIndex: number = 0;\n            if (useMorphing) variantIndex |= this.morphingFlag;\n            if (useSkinning) variantIndex |= this.skinningFlag;\n            result = materialVariants[variantIndex];\n        } else {\n            result = customMaterial;\n        }\n        if (\n            this.renderer.localClippingEnabled &&\n            material.clipShadows === true &&\n            material.clippingPlanes.length !== 0\n        ) {\n            // in this case we need a unique material instance reflecting the\n            // appropriate state\n            const keyA: string = result.uuid,\n                keyB: string = material.uuid;\n            let materialsForVariant: {\n                [key: string]: MeshDepthMaterial | MeshDistanceMaterial;\n            } = this.materialCache[keyA];\n            if (materialsForVariant === undefined) {\n                materialsForVariant = {};\n                this.materialCache[keyA] = materialsForVariant;\n            }\n            let cachedMaterial: MeshDepthMaterial | MeshDistanceMaterial = materialsForVariant[keyB];\n            if (cachedMaterial === undefined) {\n                cachedMaterial = result.clone() as MeshDepthMaterial | MeshDistanceMaterial;\n                materialsForVariant[keyB] = cachedMaterial;\n            }\n            result = cachedMaterial;\n        }\n        result.visible = material.visible;\n        result.wireframe = material.wireframe;\n        result.side = material.shadowSide !== null ? material.shadowSide : this.shadowSide[material.side];\n        result.clipShadows = material.clipShadows;\n        result.clippingPlanes = material.clippingPlanes;\n        result.clipIntersection = material.clipIntersection;\n        result.wireframeLinewidth = material.wireframeLinewidth;\n        result.linewidth = material.linewidth;\n        if (isPointLight && result instanceof MeshDistanceMaterial) {\n            result.referencePosition.copy(lightPositionWorld);\n            result.nearDistance = shadowCameraNear;\n            result.farDistance = shadowCameraFar;\n        }\n        return result;\n    }\n\n    /**\n     * Ambient lights cannot cast shadows.\n     * Hemisphere lights cannot cast shadows.\n     * RectAreaLight does not support shadows.\n     */\n    public render(lights: ShadowLight[], scene: Scene, camera: Camera): void {\n        if (this.enabled === false) return;\n        if (this.autoUpdate === false && this.needsUpdate === false) return;\n        if (lights.length === 0) return;\n        // TODO Clean up (needed in case of contextlost)\n        const gl: WebGLRenderingContext = this.renderer.context;\n        const state: WebGLState = this.renderer.state;\n        // Set GL state for depth map.\n        state.disable(gl.BLEND);\n        state.buffers.color.setClear(1, 1, 1, 1);\n        state.buffers.depth.setTest(true);\n        state.setScissorTest(false);\n        // render depth map\n        let faceCount: number;\n        for (let i: number = 0, il: number = lights.length; i < il; i++) {\n            const light: ShadowLight = lights[i];\n            const shadow: LightShadow = light.shadow;\n            const isPointLight: boolean = light instanceof PointLight;\n            if (shadow === undefined) {\n                console.warn(\"THREE.WebGLShadowMap:\", light, \"has no shadow.\");\n                continue;\n            }\n            const shadowCamera: LightShadowCamera = shadow.camera;\n            this.shadowMapSize.copy(shadow.mapSize);\n            this.shadowMapSize.min(this.maxShadowMapSize);\n            if (isPointLight) {\n                const vpWidth: number = this.shadowMapSize.x;\n                const vpHeight: number = this.shadowMapSize.y;\n                // These viewports map a cube-map onto a 2D texture with the\n                // following orientation:\n                //\n                //  xzXZ\n                //   y Y\n                //\n                // X - Positive x direction\n                // x - Negative x direction\n                // Y - Positive y direction\n                // y - Negative y direction\n                // Z - Positive z direction\n                // z - Negative z direction\n                // positive X\n                this.cube2DViewPorts[0].set(vpWidth * 2, vpHeight, vpWidth, vpHeight);\n                // negative X\n                this.cube2DViewPorts[1].set(0, vpHeight, vpWidth, vpHeight);\n                // positive Z\n                this.cube2DViewPorts[2].set(vpWidth * 3, vpHeight, vpWidth, vpHeight);\n                // negative Z\n                this.cube2DViewPorts[3].set(vpWidth, vpHeight, vpWidth, vpHeight);\n                // positive Y\n                this.cube2DViewPorts[4].set(vpWidth * 3, 0, vpWidth, vpHeight);\n                // negative Y\n                this.cube2DViewPorts[5].set(vpWidth, 0, vpWidth, vpHeight);\n                this.shadowMapSize.x *= 4.0;\n                this.shadowMapSize.y *= 2.0;\n            }\n\n            if (shadow.map === null) {\n                const pars: IWebGLRenderTargetOptions = {\n                    minFilter: NearestFilter,\n                    magFilter: NearestFilter,\n                    format: RGBAFormat,\n                };\n                shadow.map = new WebGLRenderTarget(this.shadowMapSize.x, this.shadowMapSize.y, pars);\n                shadow.map.texture.name = light.name + \".shadowMap\";\n                shadowCamera.updateProjectionMatrix();\n            }\n            /**\n             * Only SpotLight haa a shadow of SpotLightShadow\n             */\n            if (shadow instanceof SpotLightShadow) {\n                shadow.update(light as SpotLight);\n            }\n\n            const shadowMap: WebGLRenderTarget = shadow.map;\n            const shadowMatrix: Matrix4 = shadow.matrix;\n\n            this.lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n            shadowCamera.position.copy(this.lightPositionWorld);\n\n            if (isPointLight) {\n                faceCount = 6;\n                // for point lights we set the shadow matrix to be a translation-only matrix\n                // equal to inverse of the light's position\n                shadowMatrix.makeTranslation(\n                    -this.lightPositionWorld.x,\n                    -this.lightPositionWorld.y,\n                    -this.lightPositionWorld.z,\n                );\n            } else {\n                faceCount = 1;\n                /**\n                 * Not PointLight\n                 */\n                this.lookTarget.setFromMatrixPosition((light as ShadowLightWithoutPointLight).target.matrixWorld);\n                shadowCamera.lookAt(this.lookTarget);\n                shadowCamera.updateMatrixWorld();\n                // compute shadow matrix\n                shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n                shadowMatrix.multiply(shadowCamera.projectionMatrix);\n                shadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n            }\n\n            this.renderer.setRenderTarget(shadowMap);\n            this.renderer.clear();\n\n            // render shadow map for each cube face (if omni-directional) or\n            // run a single pass if not\n            for (let face: number = 0; face < faceCount; face++) {\n                if (isPointLight) {\n                    this.lookTarget.copy(shadowCamera.position);\n                    this.lookTarget.add(this.cubeDirections[face]);\n                    shadowCamera.up.copy(this.cubeUps[face]);\n                    shadowCamera.lookAt(this.lookTarget);\n                    shadowCamera.updateMatrixWorld();\n                    const vpDimensions: Vector4 = this.cube2DViewPorts[face];\n                    state.viewport(vpDimensions);\n                }\n                // update camera matrices and frustum\n                this.projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n                this.frustum.setFromMatrix(this.projScreenMatrix);\n                // set object matrices & frustum culling\n                this.renderObject(scene, camera, shadowCamera, isPointLight);\n            }\n        }\n        this.needsUpdate = false;\n    }\n\n    public renderObject(\n        object: Object3D,\n        camera: Camera,\n        shadowCamera: LightShadowCamera,\n        isPointLight: boolean,\n    ): void {\n        if (object.visible === false) return;\n        const visible: boolean = object.layers.test(camera.layers);\n        if (visible && (object instanceof Mesh || object instanceof Line || object instanceof Points)) {\n            if (object.castShadow && (!object.frustumCulled || this.frustum.intersectsObject(object))) {\n                object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n                const geometry: BufferGeometry = this.objects.update(object);\n                const material: Material | Material[] = object.material;\n                if (Array.isArray(material)) {\n                    const groups: IGroup[] = geometry.groups;\n                    for (let k: number = 0, kl: number = groups.length; k < kl; k++) {\n                        const group: IGroup = groups[k];\n                        const groupMaterial: Material = material[group.materialIndex];\n                        if (groupMaterial && groupMaterial.visible) {\n                            const depthMaterial: MeshDepthMaterial | MeshDistanceMaterial = this.getDepthMaterial(\n                                object,\n                                groupMaterial,\n                                isPointLight,\n                                this.lightPositionWorld,\n                                shadowCamera.near,\n                                shadowCamera.far,\n                            );\n                            this.renderer.renderBufferDirect(\n                                shadowCamera,\n                                null,\n                                geometry,\n                                depthMaterial,\n                                object,\n                                group,\n                            );\n                        }\n                    }\n                } else if (material.visible) {\n                    const depthMaterial: MeshDepthMaterial | MeshDistanceMaterial = this.getDepthMaterial(\n                        object,\n                        material,\n                        isPointLight,\n                        this.lightPositionWorld,\n                        shadowCamera.near,\n                        shadowCamera.far,\n                    );\n                    this.renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);\n                }\n            }\n        }\n        const children: Object3D[] = object.children;\n        for (let i: number = 0, l: number = children.length; i < l; i++) {\n            this.renderObject(children[i], camera, shadowCamera, isPointLight);\n        }\n    }\n}\n","import { CanvasTexture } from \"../../textures/CanvasTexture\";\nimport { WebGLRenderer } from \"../WebGLRenderer\";\nimport { WebGLState } from \"./WebGLState\";\nimport { WebGLTextures } from \"./WebGLTextures\";\nimport { WebGLCapabilities } from \"./WebGLCapabilities\";\nimport { Vector3, Quaternion, Scene, Camera, Fog, FogExp2, Sprite, Material } from \"../../Three\";\n\nexport class WebGLSpriteRenderer {\n    public renderer: WebGLRenderer;\n    public state: WebGLState;\n    public textures: WebGLTextures;\n    public capabilities: WebGLCapabilities;\n\n    protected vertexBuffer: WebGLBuffer;\n    protected elementBuffer: WebGLBuffer;\n    protected program: WebGLProgram;\n    protected attributes: { [key: string]: number };\n    protected uniforms: { [key: string]: WebGLUniformLocation };\n    protected texture: CanvasTexture;\n\n    constructor(renderer: WebGLRenderer, state: WebGLState, textures: WebGLTextures, capabilities: WebGLCapabilities) {\n        this.renderer = renderer;\n        this.state = state;\n        this.textures = textures;\n        this.capabilities = capabilities;\n    }\n\n    protected init() {\n        const gl: WebGLRenderingContext = this.renderer.context;\n        const program: WebGLProgram = this.program;\n        const vertices: Float32Array = new Float32Array([\n            -0.5,\n            -0.5,\n            0,\n            0,\n            0.5,\n            -0.5,\n            1,\n            0,\n            0.5,\n            0.5,\n            1,\n            1,\n            -0.5,\n            0.5,\n            0,\n            1,\n        ]);\n        const faces: Uint16Array = new Uint16Array([0, 1, 2, 0, 2, 3]);\n        this.vertexBuffer = gl.createBuffer();\n        this.elementBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elementBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW);\n        this.program = this.createProgram();\n        this.attributes = {\n            position: gl.getAttribLocation(program, \"position\"),\n            uv: gl.getAttribLocation(program, \"uv\"),\n        };\n        this.uniforms = {\n            uvOffset: gl.getUniformLocation(program, \"uvOffset\"),\n            uvScale: gl.getUniformLocation(program, \"uvScale\"),\n            rotation: gl.getUniformLocation(program, \"rotation\"),\n            scale: gl.getUniformLocation(program, \"scale\"),\n            color: gl.getUniformLocation(program, \"color\"),\n            map: gl.getUniformLocation(program, \"map\"),\n            opacity: gl.getUniformLocation(program, \"opacity\"),\n            modelViewMatrix: gl.getUniformLocation(program, \"modelViewMatrix\"),\n            projectionMatrix: gl.getUniformLocation(program, \"projectionMatrix\"),\n            fogType: gl.getUniformLocation(program, \"fogType\"),\n            fogDensity: gl.getUniformLocation(program, \"fogDensity\"),\n            fogNear: gl.getUniformLocation(program, \"fogNear\"),\n            fogFar: gl.getUniformLocation(program, \"fogFar\"),\n            fogColor: gl.getUniformLocation(program, \"fogColor\"),\n            fogDepth: gl.getUniformLocation(program, \"fogDepth\"),\n            alphaTest: gl.getUniformLocation(program, \"alphaTest\"),\n        };\n        const canvas: HTMLCanvasElement = document.createElementNS(\n            \"http://www.w3.org/1999/xhtml\",\n            \"canvas\",\n        ) as HTMLCanvasElement;\n        canvas.width = 8;\n        canvas.height = 8;\n        const context: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n        context.fillStyle = \"white\";\n        context.fillRect(0, 0, 8, 8);\n        this.texture = new CanvasTexture(canvas);\n    }\n\n    protected createProgram(): WebGLProgram {\n        const gl: WebGLRenderingContext = this.renderer.context;\n        const program: WebGLProgram = gl.createProgram();\n        const vertexShader: WebGLShader = gl.createShader(gl.VERTEX_SHADER);\n        const fragmentShader: WebGLShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(\n            vertexShader,\n            [\n                \"precision \" + this.capabilities.precision + \" float;\",\n                \"#define SHADER_NAME \" + \"SpriteMaterial\",\n                \"uniform mat4 modelViewMatrix;\",\n                \"uniform mat4 projectionMatrix;\",\n                \"uniform float rotation;\",\n                \"uniform vec2 scale;\",\n                \"uniform vec2 uvOffset;\",\n                \"uniform vec2 uvScale;\",\n                \"attribute vec2 position;\",\n                \"attribute vec2 uv;\",\n                \"varying vec2 vUV;\",\n                \"varying float fogDepth;\",\n                \"void main() {\",\n                \"\tvUV = uvOffset + uv * uvScale;\",\n                \"\tvec2 alignedPosition = position * scale;\",\n                \"\tvec2 rotatedPosition;\",\n                \"\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\",\n                \"\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\",\n                \"\tvec4 mvPosition;\",\n                \"\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\",\n                \"\tmvPosition.xy += rotatedPosition;\",\n                \"\tgl_Position = projectionMatrix * mvPosition;\",\n                \"\tfogDepth = - mvPosition.z;\",\n                \"}\",\n            ].join(\"\\n\"),\n        );\n        gl.shaderSource(\n            fragmentShader,\n            [\n                \"precision \" + this.capabilities.precision + \" float;\",\n                \"#define SHADER_NAME \" + \"SpriteMaterial\",\n                \"uniform vec3 color;\",\n                \"uniform sampler2D map;\",\n                \"uniform float opacity;\",\n                \"uniform int fogType;\",\n                \"uniform vec3 fogColor;\",\n                \"uniform float fogDensity;\",\n                \"uniform float fogNear;\",\n                \"uniform float fogFar;\",\n                \"uniform float alphaTest;\",\n                \"varying vec2 vUV;\",\n                \"varying float fogDepth;\",\n                \"void main() {\",\n                \"\tvec4 texture = texture2D( map, vUV );\",\n                \"\tgl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\",\n                \"\tif ( gl_FragColor.a < alphaTest ) discard;\",\n                \"\tif ( fogType > 0 ) {\",\n                \"\t\tfloat fogFactor = 0.0;\",\n                \"\t\tif ( fogType == 1 ) {\",\n                \"\t\t\tfogFactor = smoothstep( fogNear, fogFar, fogDepth );\",\n                \"\t\t} else {\",\n                \"\t\t\tconst float LOG2 = 1.442695;\",\n                \"\t\t\tfogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );\",\n                \"\t\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\",\n                \"\t\t}\",\n                \"\t\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\",\n                \"\t}\",\n                \"}\",\n            ].join(\"\\n\"),\n        );\n        gl.compileShader(vertexShader);\n        gl.compileShader(fragmentShader);\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.linkProgram(program);\n        return program;\n    }\n\n    public render(sprites: Sprite[], scene: Scene, camera: Camera): void {\n        const gl: WebGLRenderingContext = this.renderer.context;\n        const program: WebGLProgram = gl.createProgram();\n        const attributes: { [key: string]: number } = this.attributes;\n        const uniforms: { [key: string]: WebGLUniformLocation } = this.uniforms;\n        const state: WebGLState = this.state;\n        if (sprites.length === 0) return;\n        // setup gl\n        if (program === undefined) {\n            this.init();\n        }\n        state.useProgram(program);\n        state.initAttributes();\n        state.enableAttribute(attributes.position);\n        state.enableAttribute(attributes.uv);\n        state.disableUnusedAttributes();\n        state.disable(gl.CULL_FACE);\n        state.enable(gl.BLEND);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.vertexAttribPointer(attributes.position, 2, gl.FLOAT, false, 2 * 8, 0);\n        gl.vertexAttribPointer(attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elementBuffer);\n        gl.uniformMatrix4fv(uniforms.projectionMatrix, false, camera.projectionMatrix.elements);\n        state.activeTexture(gl.TEXTURE0);\n        gl.uniform1i(uniforms.map, 0);\n        let oldFogType: number = 0;\n        let sceneFogType: number = 0;\n        const fog: Fog | FogExp2 = scene.fog;\n        if (fog) {\n            gl.uniform3f(uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b);\n            if (fog instanceof Fog) {\n                gl.uniform1f(uniforms.fogNear, fog.near);\n                gl.uniform1f(uniforms.fogFar, fog.far);\n                gl.uniform1i(uniforms.fogType, 1);\n                oldFogType = 1;\n                sceneFogType = 1;\n            } else if (fog instanceof FogExp2) {\n                gl.uniform1f(uniforms.fogDensity, fog.density);\n                gl.uniform1i(uniforms.fogType, 2);\n                oldFogType = 2;\n                sceneFogType = 2;\n            }\n        } else {\n            gl.uniform1i(uniforms.fogType, 0);\n            oldFogType = 0;\n            sceneFogType = 0;\n        }\n        // update positions and sort\n        for (let i: number = 0, l: number = sprites.length; i < l; i++) {\n            const sprite: Sprite = sprites[i];\n            sprite.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, sprite.matrixWorld);\n            sprite.z = -sprite.modelViewMatrix.elements[14];\n        }\n        sprites.sort((a, b) => {\n            if (a.renderOrder !== b.renderOrder) {\n                return a.renderOrder - b.renderOrder;\n            } else if (a.z !== b.z) {\n                return b.z - a.z;\n            } else {\n                return b.id - a.id;\n            }\n        });\n        // render all sprites\n        const scale: number[] = [];\n        for (let i: number = 0, l: number = sprites.length; i < l; i++) {\n            const sprite: Sprite = sprites[i];\n            const material: Material = sprite.material;\n            if (material.visible === false) continue;\n            //sprite.onBeforeRender(this.renderer, scene, camera, undefined, material, undefined );\n            gl.uniform1f(uniforms.alphaTest, material.alphaTest);\n            gl.uniformMatrix4fv(uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements);\n            const spritePosition: Vector3 = new Vector3();\n            const spriteRotation: Quaternion = new Quaternion();\n            const spriteScale: Vector3 = new Vector3();\n            sprite.matrixWorld.decompose(spritePosition, spriteRotation, spriteScale);\n            scale[0] = spriteScale.x;\n            scale[1] = spriteScale.y;\n            let fogType: number = 0;\n            if (scene.fog && material.fog) {\n                fogType = sceneFogType;\n            }\n            if (oldFogType !== fogType) {\n                gl.uniform1i(uniforms.fogType, fogType);\n                oldFogType = fogType;\n            }\n            if (material.map !== null) {\n                gl.uniform2f(uniforms.uvOffset, material.map.offset.x, material.map.offset.y);\n                gl.uniform2f(uniforms.uvScale, material.map.repeat.x, material.map.repeat.y);\n            } else {\n                gl.uniform2f(uniforms.uvOffset, 0, 0);\n                gl.uniform2f(uniforms.uvScale, 1, 1);\n            }\n            gl.uniform1f(uniforms.opacity, material.opacity);\n            gl.uniform3f(uniforms.color, material.color.r, material.color.g, material.color.b);\n            gl.uniform1f(uniforms.rotation, material.rotation);\n            gl.uniform2fv(uniforms.scale, scale);\n            state.setBlending(\n                material.blending,\n                material.blendEquation,\n                material.blendSrc,\n                material.blendDst,\n                material.blendEquationAlpha,\n                material.blendSrcAlpha,\n                material.blendDstAlpha,\n                material.premultipliedAlpha,\n            );\n            state.buffers.depth.setTest(material.depthTest);\n            state.buffers.depth.setMask(material.depthWrite);\n            state.buffers.color.setMask(material.colorWrite);\n            this.textures.setTexture2D(material.map || this.texture, 0);\n            gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n            //sprite.onAfterRender( this.renderer, scene, camera, undefined, material, undefined );\n        }\n        // restore gl\n        state.enable(gl.CULL_FACE);\n        state.reset();\n    }\n}\n","import {\n    AdditiveBlending,\n    AlwaysDepth,\n    BackSide,\n    CullFaceFront,\n    CullFaceBack,\n    CullFaceNone,\n    CustomBlending,\n    DoubleSide,\n    EqualDepth,\n    GreaterDepth,\n    GreaterEqualDepth,\n    LessEqualDepth,\n    LessDepth,\n    MultiplyBlending,\n    NeverDepth,\n    NoBlending,\n    NormalBlending,\n    NotEqualDepth,\n    SubtractiveBlending,\n} from \"../../constants\";\nimport { TypedArray } from \"../../core/BufferAttribute\";\nimport { Material } from \"../../materials/Material\";\nimport { Vector4 } from \"../../math/Vector4\";\nimport { WebGLExtensions } from \"./WebGLExtensions\";\nimport { WebGLUtils } from \"./WebGLUtils\";\n\nexport class ColorBuffer {\n    protected context: WebGLRenderingContext;\n    protected locked: boolean = false;\n    protected color: Vector4 = new Vector4();\n    protected currentColorMask: boolean | null = null;\n    protected currentColorClear: Vector4 = new Vector4(0, 0, 0, 0);\n\n    constructor(context: WebGLRenderingContext) {\n        this.context = context;\n    }\n\n    public setMask(colorMask: boolean): this {\n        if (this.currentColorMask !== colorMask && !this.locked) {\n            this.context.colorMask(colorMask, colorMask, colorMask, colorMask);\n            this.currentColorMask = colorMask;\n        }\n        return this;\n    }\n\n    public setLocked(lock: boolean): this {\n        this.locked = lock;\n        return this;\n    }\n\n    public setClear(r: number, g: number, b: number, a: number, premultipliedAlpha: boolean = false): this {\n        if (premultipliedAlpha === true) {\n            r *= a;\n            g *= a;\n            b *= a;\n        }\n        this.color.set(r, g, b, a);\n        if (this.currentColorClear.equals(this.color) === false) {\n            this.context.clearColor(r, g, b, a);\n            this.currentColorClear.copy(this.color);\n        }\n        return this;\n    }\n\n    public reset(): this {\n        this.locked = false;\n        this.currentColorMask = null;\n        /**\n         * set to invalid state\n         */\n        this.currentColorClear.set(-1, 0, 0, 0);\n        return this;\n    }\n}\n\nexport class DepthBuffer {\n    protected context: WebGLRenderingContext;\n    protected capabilities: { [key: number]: boolean };\n    protected locked: boolean = false;\n    protected currentDepthMask: boolean | null = null;\n    protected currentDepthFunc: number | null = null;\n    protected currentDepthClear: number | null = null;\n\n    constructor(context: WebGLRenderingContext, capabilities: { [key: number]: boolean }) {\n        this.context = context;\n        this.capabilities = capabilities;\n    }\n\n    public setTest(depthTest: boolean = false): this {\n        if (depthTest) {\n            this.enable(this.context.DEPTH_TEST);\n        } else {\n            this.disable(this.context.DEPTH_TEST);\n        }\n        return this;\n    }\n\n    public setMask(depthMask: boolean): this {\n        if (this.currentDepthMask !== depthMask && !this.locked) {\n            this.context.depthMask(depthMask);\n            this.currentDepthMask = depthMask;\n        }\n        return this;\n    }\n\n    /**\n     * 开启深度测试功能后才能设置对应的比较函数\n     * 启用方式gl.enable(gl.DEPTH_TEST)\n     * 用于指定深度缓冲比较值）\n     GL_NEVER,不通过（输入的深度值不取代参考值）\n     GL_LESS,如果输入的深度值小于参考值，则通过\n     GL_EQUAL,如果输入的深度值等于参考值，则通过\n     GL_LEQUAL,如果输入的深度值小于或等于参考值，则通过\n     GL_GREATER,如果输入的深度值大于参考值，则通过\n     GL_NOTEQUAL,如果输入的深度值不等于参考值，则通过\n     GL_GEQUAL,如果输入的深度值大于或等于参考值，则通过\n     GL_ALWAYS,总是通过（输入的深度值取代参考值）\n     * Z Buffer 值为具体的比较对象，在不使用深度测试的时候，\n     * 如果我们先绘制一个距离较近的物体，再绘制距离较远的物体，则距离远的物体因为后绘制，会把距离近的物体覆盖掉，这样的效果并不是我们所希望的。\n     * 而有了深度缓冲以后，绘制物体的顺序就不那么重要了，都能按照远近（Z值）正常显示，这很关键。\n     * 实际上，只要存在深度缓冲区，无论是否启用深度测试，OpenGL在像素被绘制时都会尝试将深度数据写入到缓冲区内，\n     * 除非调用了glDepthMask(GL_FALSE)来禁止写入。这些深度数据除了用于常规的测试外，还可以有一些有趣的用途，比如绘制阴影等等。\n     *\n     * 绘制半透明物体时，需注意：在绘制半透明物体时前，还需要利用glDepthMask(GL_FALSE)将深度缓冲区设置为只读形式，\n     * 否则可能出现画面错误。为什么呢，因为画透明物体时，将使用混色，这时就不能继续使用深度模式，\n     * 而是利用混色函数来进行混合。这一来，就可以使用混合函数绘制半透明物体了。\n     *\n     * @param depthFunc\n     */\n    public setFunc(depthFunc: number): this {\n        if (this.currentDepthFunc !== depthFunc) {\n            const gl: WebGLRenderingContext = this.context;\n            if (depthFunc) {\n                switch (depthFunc) {\n                    case NeverDepth:\n                        gl.depthFunc(gl.NEVER);\n                        break;\n                    case AlwaysDepth:\n                        gl.depthFunc(gl.ALWAYS);\n                        break;\n                    case LessDepth:\n                        gl.depthFunc(gl.LESS);\n                        break;\n                    case LessEqualDepth:\n                        gl.depthFunc(gl.LEQUAL);\n                        break;\n                    case EqualDepth:\n                        gl.depthFunc(gl.EQUAL);\n                        break;\n                    case GreaterEqualDepth:\n                        gl.depthFunc(gl.GEQUAL);\n                        break;\n                    case GreaterDepth:\n                        gl.depthFunc(gl.GREATER);\n                        break;\n                    case NotEqualDepth:\n                        gl.depthFunc(gl.NOTEQUAL);\n                        break;\n                    default:\n                        gl.depthFunc(gl.LEQUAL);\n                }\n            } else {\n                gl.depthFunc(gl.LEQUAL);\n            }\n            this.currentDepthFunc = depthFunc;\n        }\n        return this;\n    }\n\n    public setLocked(lock: boolean = false): this {\n        this.locked = lock;\n        return this;\n    }\n\n    public setClear(depth: number): this {\n        if (this.currentDepthClear !== depth) {\n            this.context.clearDepth(depth);\n            this.currentDepthClear = depth;\n        }\n        return this;\n    }\n\n    public reset(): this {\n        this.locked = false;\n        this.currentDepthMask = null;\n        this.currentDepthFunc = null;\n        this.currentDepthClear = null;\n        return this;\n    }\n\n    protected enable(id: number): this {\n        if (this.capabilities[id] !== true) {\n            this.context.enable(id);\n            this.capabilities[id] = true;\n        }\n        return this;\n    }\n\n    protected disable(id: number): this {\n        if (this.capabilities[id] !== false) {\n            this.context.disable(id);\n            this.capabilities[id] = false;\n        }\n        return this;\n    }\n}\n\nexport class StencilBuffer {\n    protected context: WebGLRenderingContext;\n    protected capabilities: { [key: number]: boolean };\n    protected locked: boolean = false;\n    protected currentStencilMask: number | null = null;\n    protected currentStencilFunc: number | null = null;\n    protected currentStencilRef: number | null = null;\n    protected currentStencilFuncMask: number | null = null;\n    protected currentStencilFail: number | null = null;\n    protected currentStencilZFail: number | null = null;\n    protected currentStencilZPass: number | null = null;\n    protected currentStencilClear: number | null = null;\n\n    constructor(context: WebGLRenderingContext, capabilities: { [key: number]: boolean }) {\n        this.context = context;\n        this.capabilities = capabilities;\n    }\n\n    public setTest(stencilTest: boolean): this {\n        if (stencilTest) {\n            this.enable(this.context.STENCIL_TEST);\n        } else {\n            this.disable(this.context.STENCIL_TEST);\n        }\n        return this;\n    }\n\n    public setMask(stencilMask: number): this {\n        if (this.currentStencilMask !== stencilMask && !this.locked) {\n            this.context.stencilMask(stencilMask);\n            this.currentStencilMask = stencilMask;\n        }\n        return this;\n    }\n\n    public setFunc(stencilFunc: number, stencilRef: number, stencilMask: number): this {\n        if (\n            this.currentStencilFunc !== stencilFunc ||\n            this.currentStencilRef !== stencilRef ||\n            this.currentStencilFuncMask !== stencilMask\n        ) {\n            this.context.stencilFunc(stencilFunc, stencilRef, stencilMask);\n            this.currentStencilFunc = stencilFunc;\n            this.currentStencilRef = stencilRef;\n            this.currentStencilFuncMask = stencilMask;\n        }\n        return this;\n    }\n\n    public setOp(stencilFail: number, stencilZFail: number, stencilZPass: number): this {\n        if (\n            this.currentStencilFail !== stencilFail ||\n            this.currentStencilZFail !== stencilZFail ||\n            this.currentStencilZPass !== stencilZPass\n        ) {\n            this.context.stencilOp(stencilFail, stencilZFail, stencilZPass);\n            this.currentStencilFail = stencilFail;\n            this.currentStencilZFail = stencilZFail;\n            this.currentStencilZPass = stencilZPass;\n        }\n        return this;\n    }\n\n    public setLocked(lock: boolean): this {\n        this.locked = lock;\n        return this;\n    }\n\n    public setClear(stencil: number): this {\n        if (this.currentStencilClear !== stencil) {\n            this.context.clearStencil(stencil);\n            this.currentStencilClear = stencil;\n        }\n        return this;\n    }\n\n    public reset(): this {\n        this.locked = false;\n        this.currentStencilMask = null;\n        this.currentStencilFunc = null;\n        this.currentStencilRef = null;\n        this.currentStencilFuncMask = null;\n        this.currentStencilFail = null;\n        this.currentStencilZFail = null;\n        this.currentStencilZPass = null;\n        this.currentStencilClear = null;\n        return this;\n    }\n\n    protected enable(id: number): this {\n        if (this.capabilities[id] !== true) {\n            this.context.enable(id);\n            this.capabilities[id] = true;\n        }\n        return this;\n    }\n\n    protected disable(id: number): this {\n        if (this.capabilities[id] !== false) {\n            this.context.disable(id);\n            this.capabilities[id] = false;\n        }\n        return this;\n    }\n}\n\nexport class WebGLState {\n    public capabilities: { [key: number]: boolean } = {};\n\n    public buffers: {\n        color: ColorBuffer | null;\n        depth: DepthBuffer | null;\n        stencil: StencilBuffer | null;\n    } = {\n        color: null,\n        depth: null,\n        stencil: null,\n    };\n\n    public maxVertexAttributes: number;\n    public newAttributes: Uint8Array;\n    public enabledAttributes: Uint8Array;\n    public attributeDivisors: Uint8Array;\n    public maxTextures: number;\n    public version: number;\n    public lineWidthAvailable: boolean = false;\n\n    public currentScissor: Vector4 = new Vector4();\n    public currentViewport: Vector4 = new Vector4();\n\n    public emptyTextures: { [key: number]: WebGLTexture } = {};\n\n    public currentFlipSided: boolean | null = null;\n    public currentCullFace: number | null = null;\n\n    public currentBlending: number | null = null;\n    public currentPremultipledAlpha: boolean = false;\n\n    public currentBlendEquation: number | null = null;\n    public currentBlendEquationAlpha: number | null = null;\n\n    public currentBlendSrc: number | null = null;\n    public currentBlendDst: number | null = null;\n\n    public currentBlendSrcAlpha: number | null = null;\n    public currentBlendDstAlpha: number | null = null;\n\n    public compressedTextureFormats: number[] | null = null;\n\n    public currentProgram: WebGLProgram | null = null;\n\n    public currentLineWidth: number | null = null;\n\n    public currentPolygonOffsetFactor: number | null = null;\n    public currentPolygonOffsetUnits: number | null = null;\n\n    public currentTextureSlot: number | null = null;\n\n    public currentBoundTextures: {\n        [key: number]: { type: number; texture: WebGLTexture };\n    } = {};\n\n    protected context: WebGLRenderingContext;\n    protected extensions: WebGLExtensions;\n    protected utils: WebGLUtils;\n\n    constructor(context: WebGLRenderingContext, extensions: WebGLExtensions, utils: WebGLUtils) {\n        this.context = context;\n        this.extensions = extensions;\n        this.utils = utils;\n        this.buffers.color = new ColorBuffer(context);\n        this.buffers.depth = new DepthBuffer(context, this.capabilities);\n        this.buffers.stencil = new StencilBuffer(context, this.capabilities);\n        this.maxVertexAttributes = context.getParameter(context.MAX_VERTEX_ATTRIBS) as number;\n        this.newAttributes = new Uint8Array(this.maxVertexAttributes);\n        this.enabledAttributes = new Uint8Array(this.maxVertexAttributes);\n        this.attributeDivisors = new Uint8Array(this.maxVertexAttributes);\n\n        this.maxTextures = context.getParameter(context.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.version = parseFloat(/^WebGL\\ ([0-9])/.exec(context.getParameter(context.VERSION))[1]);\n        this.lineWidthAvailable = this.version >= 1.0;\n\n        this.emptyTextures[context.TEXTURE_2D] = this.createTexture(context.TEXTURE_2D, context.TEXTURE_2D, 1);\n        this.emptyTextures[context.TEXTURE_CUBE_MAP] = this.createTexture(\n            context.TEXTURE_CUBE_MAP,\n            context.TEXTURE_CUBE_MAP_POSITIVE_X,\n            6,\n        );\n\n        /**\n         * initialize\n         */\n        this.buffers.color.setClear(0, 0, 0, 1);\n        this.buffers.depth.setClear(1);\n        this.buffers.stencil.setClear(0);\n        this.enable(context.DEPTH_TEST);\n        this.buffers.depth.setFunc(LessEqualDepth);\n        this.setFlipSided(false);\n        this.setCullFace(CullFaceBack);\n        this.enable(context.CULL_FACE);\n        this.enable(context.BLEND);\n        this.setBlending(NormalBlending);\n    }\n\n    public enable(id: number): this {\n        if (this.capabilities[id] !== true) {\n            this.context.enable(id);\n            this.capabilities[id] = true;\n        }\n        return this;\n    }\n\n    public disable(id: number): this {\n        if (this.capabilities[id] !== false) {\n            this.context.disable(id);\n            this.capabilities[id] = false;\n        }\n        return this;\n    }\n\n    /**\n     * 设置多边形的正反面（片元着色器？），这个和多边形的顶点连接顺序有关，CW为顺时针包围部分为正面，而CCW表示逆时针围绕部分为正面。\n     * @param flipSided\n     */\n    public setFlipSided(flipSided: boolean = false): this {\n        const gl: WebGLRenderingContext = this.context;\n        if (this.currentFlipSided !== flipSided) {\n            if (flipSided) {\n                gl.frontFace(gl.CW);\n            } else {\n                gl.frontFace(gl.CCW);\n            }\n            this.currentFlipSided = flipSided;\n        }\n        return this;\n    }\n\n    /**\n     * FRONT、BACK两个参数分别表示禁用多边形正面或者背面上的光照、阴影和颜色计算及操作，消除不必要的渲染计算。\n     * 例如某对象无论如何位置变化，我们都只能看到构成其组成的多边形的某一面时，可使用该函数。\n     *\n     * @param cullFace\n     */\n    public setCullFace(cullFace: number): this {\n        const gl: WebGLRenderingContext = this.context;\n        if (cullFace !== CullFaceNone) {\n            this.enable(gl.CULL_FACE);\n            if (cullFace !== this.currentCullFace) {\n                if (cullFace === CullFaceBack) {\n                    gl.cullFace(gl.BACK);\n                } else if (cullFace === CullFaceFront) {\n                    gl.cullFace(gl.FRONT);\n                } else {\n                    gl.cullFace(gl.FRONT_AND_BACK);\n                }\n            }\n        } else {\n            this.disable(gl.CULL_FACE);\n        }\n        this.currentCullFace = cullFace;\n        return this;\n    }\n\n    /**\n     * 采用标准混合方式时, 将帧缓存中的颜色和输入片元的颜色合并起来, 得到新的帧缓存颜色.\n     * 上面的函数用来指定其他数学运算,以计算帧缓存颜色和片元颜色的差, 它们中的最大值或最小值.\n     * 指定如何混合帧缓存中的颜色和片元颜色.\n     * Cs(Sr, Sg, Sb, Sa)和Cd(Dr,Dg,Db,Da)表示源颜色和目标颜色,\n     * S(Source)和D(Destination)表示函数glBlendFunc()或glBlendFuncSeparate()指定的源混合因子和目标混合因子.\n     *\n     * GL_FUNC_ADD                      CsS + CdD\n     * GL_FUNC_SUBTRACT                 CsS - CdD\n     * GL_FUNC_REVERSE_SUBTRACT        CdD - CsS\n     * GL_MIN                           min(CsS, CdD)\n     * GL_MAX                           max(CsS, CdD)\n     *\n     * 将该四元组的各个分量截取到[0,1].\n     *\n     * 选择源混合因子和目标混合因子的方式:\n     * 第一种方式是调用函数glBlendFunc(),并指定两个混合因子, 其中第一个参数为源RGBA的混合因子, 第二个参数为目标RGBA的混合因子.\n     * void glBlendFunc(GLenum srcfactor, GLenum destfactor);\n     *\n     * 第二种方法是调用glBlendFuncSeparate()并指定4个混合因子, 这样可以用不同的方式来混合RGB和alpha值.\n     * void glBlendFuncSeparate(GLenum srcRGB, GLenum destRGB, GLenum srcalpha, GLenum destalpha);\n     *\n     * 常量:                        RGB混合因子                        alpha混合因子\n     * GL_ZERO:                    (0, 0, 0)                        0\n     * GL_ONE:                    (1, 1, 1)                        1\n     * GL_DST_COLOR:            (Rd, Gd, Bd)\n     * GL_SRC_COLOR:            (Rs, Gs, Bs)                    A\n     * GL_ONE_MINUS_DST_COLOR:    (1, 1, 1) - (Rd, Gd, Bd)\n     * GL_ONE_MINUS_SRC_COLOR:    (1, 1, 1) - (Rs, Gs, Bs)        1 - A\n     * GL_SRC_ALPHA:            (As,As,As,As)\n     * GL_ONE_MINUS_SRC_ALPHA:    (1, 1, 1, 1) - (As,As,As,As)\n     * GL_DST_ALPHA:            (Ad, Ad, Ad, Ad)\n     * GL_ONE_MINUS_DST_ALPHA:    (1, 1, 1, 1) - (Ad, Ad, Ad, Ad)\n     * GL_SRC_ALPHA_STATURATE:    (f, f, f, 1); f = min(As, 1 - Ad)\n     *\n     * @param blending\n     * @param blendEquation\n     * @param blendSrc\n     * @param blendDst\n     * @param blendEquationAlpha\n     * @param blendSrcAlpha\n     * @param blendDstAlpha\n     * @param premultipliedAlpha\n     */\n    public setBlending(\n        blending: number,\n        blendEquation?: number,\n        blendSrc?: number,\n        blendDst?: number,\n        blendEquationAlpha?: number,\n        blendSrcAlpha?: number,\n        blendDstAlpha?: number,\n        premultipliedAlpha: boolean = false,\n    ): this {\n        const gl: WebGLRenderingContext = this.context;\n        if (blending !== NoBlending) {\n            this.enable(gl.BLEND);\n        } else {\n            this.disable(gl.BLEND);\n        }\n        if (blending !== CustomBlending) {\n            if (blending !== this.currentBlending || premultipliedAlpha !== this.currentPremultipledAlpha) {\n                switch (blending) {\n                    case AdditiveBlending:\n                        if (premultipliedAlpha) {\n                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                            gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE);\n                        } else {\n                            gl.blendEquation(gl.FUNC_ADD);\n                            gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n                        }\n                        break;\n                    case SubtractiveBlending:\n                        if (premultipliedAlpha) {\n                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                            gl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);\n                        } else {\n                            gl.blendEquation(gl.FUNC_ADD);\n                            gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);\n                        }\n                        break;\n                    case MultiplyBlending:\n                        if (premultipliedAlpha) {\n                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                            gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n                        } else {\n                            gl.blendEquation(gl.FUNC_ADD);\n                            gl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n                        }\n                        break;\n                    default:\n                        if (premultipliedAlpha) {\n                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                            gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                        } else {\n                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                            gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                        }\n                }\n            }\n            this.currentBlendEquation = null;\n            this.currentBlendSrc = null;\n            this.currentBlendDst = null;\n            this.currentBlendEquationAlpha = null;\n            this.currentBlendSrcAlpha = null;\n            this.currentBlendDstAlpha = null;\n        } else {\n            blendEquationAlpha = blendEquationAlpha || blendEquation;\n            blendSrcAlpha = blendSrcAlpha || blendSrc;\n            blendDstAlpha = blendDstAlpha || blendDst;\n            if (blendEquation !== this.currentBlendEquation || blendEquationAlpha !== this.currentBlendEquationAlpha) {\n                gl.blendEquationSeparate(this.utils.convert(blendEquation), this.utils.convert(blendEquationAlpha));\n                this.currentBlendEquation = blendEquation;\n                this.currentBlendEquationAlpha = blendEquationAlpha;\n            }\n            if (\n                blendSrc !== this.currentBlendSrc ||\n                blendDst !== this.currentBlendDst ||\n                blendSrcAlpha !== this.currentBlendSrcAlpha ||\n                blendDstAlpha !== this.currentBlendDstAlpha\n            ) {\n                gl.blendFuncSeparate(\n                    this.utils.convert(blendSrc),\n                    this.utils.convert(blendDst),\n                    this.utils.convert(blendSrcAlpha),\n                    this.utils.convert(blendDstAlpha),\n                );\n                this.currentBlendSrc = blendSrc;\n                this.currentBlendDst = blendDst;\n                this.currentBlendSrcAlpha = blendSrcAlpha;\n                this.currentBlendDstAlpha = blendDstAlpha;\n            }\n        }\n        this.currentBlending = blending;\n        this.currentPremultipledAlpha = premultipliedAlpha;\n        return this;\n    }\n\n    public setMaterial(material: Material, frontFaceCW: boolean = false): this {\n        const gl: WebGLRenderingContext = this.context;\n        material.side === DoubleSide ? this.disable(gl.CULL_FACE) : this.enable(gl.CULL_FACE);\n        let flipSided: boolean = material.side === BackSide;\n        if (frontFaceCW) flipSided = !flipSided;\n        this.setFlipSided(flipSided);\n        material.transparent === true\n            ? this.setBlending(\n                  material.blending,\n                  material.blendEquation,\n                  material.blendSrc,\n                  material.blendDst,\n                  material.blendEquationAlpha,\n                  material.blendSrcAlpha,\n                  material.blendDstAlpha,\n                  material.premultipliedAlpha,\n              )\n            : this.setBlending(NoBlending);\n\n        this.buffers.depth.setFunc(material.depthFunc);\n        this.buffers.depth.setTest(material.depthTest);\n        this.buffers.depth.setMask(material.depthWrite);\n        this.buffers.depth.setMask(material.colorWrite);\n        this.setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n        return this;\n    }\n\n    public initAttributes(): this {\n        for (let i: number = 0, l = this.newAttributes.length; i < l; i++) {\n            this.newAttributes[i] = 0;\n        }\n        return this;\n    }\n\n    public enableAttribute(attribute: number): this {\n        return this.enableAttributeAndDivisor(attribute);\n    }\n\n    public disableUnusedAttributes(): this {\n        const gl: WebGLRenderingContext = this.context;\n        for (let i: number = 0, l: number = this.enabledAttributes.length; i !== l; i++) {\n            if (this.enabledAttributes[i] !== this.newAttributes[i]) {\n                gl.disableVertexAttribArray(i);\n                this.enabledAttributes[i] = 0;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * @param attribute\n     * @param meshPerAttribute\n     */\n    public enableAttributeAndDivisor(attribute: number, meshPerAttribute: number = 0): this {\n        this.newAttributes[attribute] = 1;\n        if (this.enabledAttributes[attribute] === 0) {\n            /**\n             * 处于性能的考虑默认情况下CPU即使上传数据到GPU，所有顶点着色器的属性（Attribute）变量都是关闭的。\n             * glEnableVertexAttribArray决定了着色器能否读取到数据，由是否启用了对应的属性决定。\n             * glEnableVertexAttribArray与glVertexAttribPointer是VAO（Vertex Array Objects）的处理函数，\n             * glVertexAttribPointer负责告知GPU传入数据（VBO）的类型、大小、单位等信息。\n             * glEnableVertexAttribArray与glVertexAttribPointer的调用顺序并不影响，\n             * 只要在设置完VBO之后和drawCall之前即可。\n             * 参数attribute，代表了需要传入的attribute的location信息。\n             * 所以这里可以看出enabledAttributes顾名思义就是记录着那些location的attribute被启用了。\n             * 而反观newAttributes，只要是使用过某个location的attribute，那么就会被永久占用为1，\n             * 即使是reset也没有用，除非调用initAttributes。\n             * 这么做是有道理的，因为MAX_VERTEX_ATTRIBS决定了系统最大的attribute数目，\n             * 这就意味着attribute的个数不能超过这一数目。\n             * 所以，推测reset的作用只是释放内存，并禁用所有的attribute。\n             * 而每次useProgram之后由于shader的改变，所以都需要调用initAttributes，\n             * 在Three.js的几个Renderer中，WebGLState的用法都是在切换过program之后，\n             * 调用initAttributes，然后使用enableAttribute设置新的attribute，\n             * 最后通过disableUnusedAttributes纠正状态。\n             */\n            this.context.enableVertexAttribArray(attribute);\n            this.enabledAttributes[attribute] = 1;\n        }\n        /**\n         * ANGLE_instanced_arrays是属于 WebGL API 的一个扩展API，\n         * 如果使用它们提供了相同的顶点数据或者是原始的数目和类型的话，\n         * 就可以绘制相同的对象或是被多次使用的相似的对象组。\n         */\n        if (this.attributeDivisors[attribute] !== meshPerAttribute) {\n            const extension: any = this.extensions.get(\"ANGLE_instanced_arrays\");\n            extension.vertexAttribDivisorANGLE(attribute, meshPerAttribute);\n            this.attributeDivisors[attribute] = meshPerAttribute;\n        }\n        return this;\n    }\n\n    public getCompressedTextureFormats(): number[] {\n        if (this.compressedTextureFormats === null) {\n            this.compressedTextureFormats = [];\n            if (\n                this.extensions.get(\"WEBGL_compressed_texture_pvrtc\") ||\n                this.extensions.get(\"WEBGL_compressed_texture_s3tc\") ||\n                this.extensions.get(\"WEBGL_compressed_texture_etc1\") ||\n                this.extensions.get(\"WEBGL_compressed_texture_astc\")\n            ) {\n                const formats: number[] = this.context.getParameter(this.context.COMPRESSED_TEXTURE_FORMATS);\n                for (let i: number = 0; i < formats.length; i++) {\n                    this.compressedTextureFormats.push(formats[i]);\n                }\n            }\n        }\n        return this.compressedTextureFormats;\n    }\n\n    public useProgram(program: WebGLProgram): boolean {\n        if (this.currentProgram !== program) {\n            this.context.useProgram(program);\n            this.currentProgram = program;\n            return true;\n        }\n        return false;\n    }\n\n    public setLineWidth(width: number): this {\n        if (width !== this.currentLineWidth) {\n            if (this.lineWidthAvailable) this.context.lineWidth(width);\n            this.currentLineWidth = width;\n        }\n        return this;\n    }\n\n    /**\n     * 在OpenGL中，如果想绘制一个多边形同时绘制其边界，可是先使用多边形模式GL_FILL绘制物体，\n     * 然后使用多边形模式GL_LINE和不同的颜色再次绘制这个多边形。\n     * 但是由于直线和多边形的光栅化方式不同，导致位于同一位置的多边形和直线的深度值并不相同，\n     * 进而导致直线有时在多边形的里面，有时在多边形的外面，这种现象就是\"Stiching\"。\n     * 而Z-fighting主要是指当两个面共面时，二者的深度值一样，深度缓冲就不能清楚的将它们两者分离开来，\n     * 位于后面的图元上的一些像素就会被渲染到前面的图元上，最终导致图象在帧与帧之间产生微弱的闪光。\n     * 解决这两个问题的方法就是使用Polygon Offset，当然你也可以使用模板测试，但Polygon Offset的速度会比模板缓存快。\n     * 启用了Polygon Offset，就表示在执行深度测试前多边形的深度值被稍微增加了一点点，\n     * 这需要用glPolygonOffset来指定。glPolygonOffset需要2个参数：GLfloat factor 和GLfloat units。\n     * 每一个Fragment的深度值都会增加如下所示的偏移量：offset = (m * factor) + (r * units)\n     * m是多边形的深度的斜率（在光栅化阶段计算得出）中的最大值。\n     * 这句话难以理解，你只需知道，一个多边形越是与近裁剪面（near clipping plan）平行，m就越接近0。\n     * r是能产生在窗口坐标系的深度值中可分辨的差异的最小值，r是由具体实现OpenGL的平台指定的一个常量。\n     * 一个大于0的offset 会把模型推到离你（摄像机）更远一点的位置，相应地，一个小于0的offset 会把模型拉近。\n     * 如果想要非常好地使用Polygon Offset，你需要做一些数学上的研究。\n     * 不过一般而言，只需把1.0和0.0这样简单的值赋给glPolygonOffset即可满足需要。\n     *\n     * @param polygonOffset\n     * @param factor\n     * @param units\n     */\n    public setPolygonOffset(polygonOffset: boolean, factor?: number, units?: number): this {\n        const gl: WebGLRenderingContext = this.context;\n        if (polygonOffset) {\n            this.enable(gl.POLYGON_OFFSET_FILL);\n            if (this.currentPolygonOffsetFactor !== factor || this.currentPolygonOffsetUnits !== units) {\n                gl.polygonOffset(factor, units);\n                this.currentPolygonOffsetFactor = factor;\n                this.currentPolygonOffsetUnits = units;\n            }\n        } else {\n            this.disable(gl.POLYGON_OFFSET_FILL);\n        }\n        return this;\n    }\n\n    public setScissorTest(scissorTest: boolean): this {\n        if (scissorTest) {\n            this.enable(this.context.SCISSOR_TEST);\n        } else {\n            this.disable(this.context.SCISSOR_TEST);\n        }\n        return this;\n    }\n\n    public activeTexture(slot?: number): this {\n        const gl: WebGLRenderingContext = this.context;\n        if (slot === undefined) slot = gl.TEXTURE0 + this.maxTextures - 1;\n        /**\n         * 最后一个贴图空间用来做杂活...\n         */\n        if (this.currentTextureSlot !== slot) {\n            gl.activeTexture(slot);\n            this.currentTextureSlot = slot;\n        }\n        return this;\n    }\n\n    public bindTexture(type: number, texture: WebGLTexture): this {\n        if (this.currentTextureSlot === null) {\n            this.activeTexture();\n        }\n        let boundTexture = this.currentBoundTextures[this.currentTextureSlot];\n        if (boundTexture === undefined) {\n            boundTexture = { type: undefined, texture: undefined };\n            this.currentBoundTextures[this.currentTextureSlot] = boundTexture;\n        }\n        if (boundTexture.type !== type || boundTexture.texture !== texture) {\n            this.context.bindTexture(type, texture || this.emptyTextures[type]);\n            boundTexture.type = type;\n            boundTexture.texture = texture;\n        }\n        return this;\n    }\n\n    public compressedTexImage2D(\n        target: number,\n        level: number,\n        internalformat: number,\n        width: number,\n        height: number,\n        border: number,\n        data: TypedArray | null,\n    ): this {\n        /**\n         * 所支持压缩纹理格式数量可以查询GL_NUM_COMPRESSED_TEXTURE_FORMATS值来获取。\n         * 所支持的压缩格式列表可以查询GL_COMPRESSED_TEXTURE_FORMATS值来获取。\n         * getCompressedTextureFormats函数也是相关信息的查询工具\n         */\n        try {\n            this.context.compressedTexImage2D(target, level, internalformat, width, height, border, data);\n        } catch (error) {\n            console.error(`THREE.WebGLState: ${error}`);\n        }\n        return this;\n    }\n\n    public texImage2D(\n        target: number,\n        level: number,\n        internalformat: number,\n        width: number,\n        height: number,\n        border: number,\n        format: number,\n        type: number,\n        pixels: TypedArray | null,\n    ): this;\n    public texImage2D(\n        target: number,\n        level: number,\n        internalformat: number,\n        format: number,\n        type: number,\n        pixels: ImageBitmap | ImageData | HTMLVideoElement | HTMLImageElement | HTMLCanvasElement,\n    ): this;\n    public texImage2D(\n        target: number,\n        level: number,\n        internalformat: number,\n        a: number,\n        b: number,\n        c: any,\n        format?: number,\n        type?: number,\n        pixels?: TypedArray | null,\n    ): this {\n        /**\n         * 2D贴图，这里有重载是因为DOM的特殊关系，ImageBitmap | ImageData | HTMLVideoElement | HTMLImageElement | HTMLCanvasElement这些属性都有width，height属性包含在内，\n         * 而border值必须为0 ㄟ( ▔, ▔ )ㄏ\n         * 而且实际上internalformat与format的值必须一致 ㄟ( ▔, ▔ )ㄏ\n         * target的值必须为TEXTURE_2D与TEXTURE_CUBE_MAP_(NEGATIVE|POSITIVE)_(X|Y|Z)—之一\n         *\n         * Mipmap是一个功能强大的纹理技术，它可以提高渲染的性能以及提升场景的视觉质量。它可以用来解决使用一般的纹理贴图会出现的两个常见的问题：\n         *  1. 闪烁，当屏幕上被渲染物体的表面与它所应用的纹理图像相比显得非常小时，就会出现闪烁。尤其当相机和物体在移动的时候，这种负面效果更容易被看到。\n         *  2. 性能问题。加载了大量的纹理数据之后，还要对其进行过滤处理（缩小），在屏幕上显示的只是一小部分。纹理越大，所造成的性能影响就越大。\n         * Mipmap就可以解决上面那两个问题。当加载纹理的时候，不单单是加载一个纹理，而是加载一系列从大到小的纹理当mipmapped纹理状态中。\n         * 然后OpenGl会根据给定的几何图像的大小选择最合适的纹理。Mipmap是把纹理按照2的倍数进行缩放，直到图像为1x1的大小，然后把这些图都存储起来，当要使用的就选择一个合适的图像。\n         * 这会增加一些额外的内存。在正方形的纹理贴图中使用mipmap技术，大概要比原先多出三分之一的内存空间。\n         *\n         * Mipmap的纹理过滤模式如下表：\n         * 常量\t描述\n         * GL_NEAREST\t在mip基层上使用最邻近过滤\n         * GL_LINEAR\t在mip基层上使用线性过滤\n         * GL_NEAREST_MIPMAP_NEAREST\t选择最邻近的mip层，并使用最邻近过滤\n         * GL_NEAREST_MIPMAP_LINEAR\t在mip层之间使用线性插值和最邻近过滤\n         * GL_LINEAR_MIPMAP_NEAREST\t选择最邻近的mip层，使用线性过滤\n         * GL_LINEAR_MIPMAP_LINEAR\t在mip层之间使用线性插值和使用线性过滤，又称三线性mipmap\n         * 如果纹理过滤选择为GL_NEAREST或GL_LINEAR模式，那么只有基层的纹理会被加载，其他的纹理将会被忽略。\n         * 我们必须指定其中一个mipmap过滤器，这样才能使用所有已加载的纹理。\n         * 这个mipmap过滤器的常量是GL_[FILTER]_MIPMAP_[SELECTOR[的形式。\n         * 其中FLILTER指定了过滤模式，SELECTOR指定了如何选择mipmap层。例如GL_NEAREST_MIPMAP_LINEAR模式，\n         * 它的SELECTOR是GL_LINEAR，它会在两个最邻近的mip层中执行线性插值，然后得出的结果又由被选择的过滤器GL_NEAREST进行过滤。\n         *\n         * 其中GL_NEAREST_MIPMAP_NEAAREST具有很好的性能，也能够解决闪烁的问题，但在视觉效果上会比较差。\n         * 其中GL_LINEAR_MIPMAP_NEAREST常用于游戏加速，使用了质量较高的线性过滤，和快速的选择的方式(最邻近方式）。\n         * 使用最邻近的方式作为mipmap选择器的效果依然不能令人满意。从某一个角度去看，常常可以看到物体表面从一个mip层到另一个mip层的转变。\n         * GL_LINEAR_MIPMAP_LINEAR和GL_NEAREST_MIPMAP_LINEAR过滤器在mip层之间执行一些额外的线性插值，以消除不同层之间的变换痕迹，但也需要一些额外的性能开销。\n         * GL_LINEAR_MIPMAP_LINEAR具有最高的精度。\n         *\n         * 所以level参数就是用来指定这是低级级缩略图的，0代表基本，log_{2}(GL_MAX_TEXTURE_SIZE)为最大允许值\n         */\n        try {\n            this.context.texImage2D(target, level, internalformat, a, b, c, format, type, pixels);\n        } catch (error) {\n            console.error(`THREE.WebGLState: ${error}`);\n        }\n        return this;\n    }\n\n    public scissor(scissor: Vector4): this {\n        /**\n         * 对屏幕进行剪裁，x,y为起点，z,w分别表示width和height\n         * 剪裁功能\n         */\n        if (this.currentScissor.equals(scissor) === false) {\n            this.context.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n            this.currentScissor.copy(scissor);\n        }\n        return this;\n    }\n\n    public viewport(viewport: Vector4): this {\n        /**\n         * 打开窗口的整个像素矩形，x,y为起点，z,w分别表示width和height\n         * 缩放功能\n         */\n        if (this.currentViewport.equals(viewport) === false) {\n            this.context.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n            this.currentViewport.copy(viewport);\n        }\n        return this;\n    }\n\n    public reset(): this {\n        for (let i: number = 0; i < this.enabledAttributes.length; i++) {\n            if (this.enabledAttributes[i] === 1) {\n                this.context.disableVertexAttribArray(i);\n                this.enabledAttributes[i] = 0;\n            }\n        }\n        this.capabilities = {};\n        this.compressedTextureFormats = null;\n        this.currentTextureSlot = null;\n        this.currentBoundTextures = {};\n        this.currentProgram = null;\n        this.currentBlending = null;\n        this.currentFlipSided = null;\n        this.currentCullFace = null;\n        this.buffers.color.reset();\n        this.buffers.depth.reset();\n        this.buffers.stencil.reset();\n        return this;\n    }\n\n    protected createTexture(type: number, target: number, count: number): WebGLTexture {\n        const gl: WebGLRenderingContext = this.context;\n        /**\n         * 4 is required to match default unpack alignment of 4.\n         * @type {Uint8Array}\n         */\n        const data: Uint8Array = new Uint8Array(4);\n        const texture: WebGLTexture = gl.createTexture();\n        gl.bindTexture(type, texture);\n        gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        for (let i: number = 0; i < count; i++) {\n            gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n        }\n        return texture;\n    }\n}\n","import {\n    LinearFilter,\n    NearestFilter,\n    RGBFormat,\n    RGBAFormat,\n    DepthFormat,\n    DepthStencilFormat,\n    UnsignedShortType,\n    UnsignedIntType,\n    UnsignedInt248Type,\n    FloatType,\n    HalfFloatType,\n    ClampToEdgeWrapping,\n    NearestMipMapLinearFilter,\n    NearestMipMapNearestFilter,\n} from \"../../constants\";\nimport { WebGLExtensions } from \"./WebGLExtensions\";\nimport { WebGLState } from \"./WebGLState\";\nimport {\n    WebGLProperties,\n    ITextureProperties,\n    IRenderTargetProperties,\n    IRenderTargetCubeProperties,\n} from \"./WebGLProperties\";\nimport { WebGLCapabilities } from \"./WebGLCapabilities\";\nimport { WebGLUtils } from \"./WebGLUtils\";\nimport { IInfoMemory, IInfoRender } from \"../WebGLRenderer\";\nimport { HTMLTextureSource, Texture } from \"../../textures/Texture\";\nimport { MathUtil } from \"../../math/Math\";\nimport { IEventObject } from \"../../core/EventDispatcher\";\nimport { VideoTexture } from \"../../textures/VideoTexture\";\nimport { WebGLRenderTarget } from \"../WebGLRenderTarget\";\nimport { WebGLRenderTargetCube } from \"../WebGLRenderTargetCube\";\nimport { DepthTexture } from \"../../textures/DepthTexture\";\nimport { DataTexture } from \"../../textures/DataTexture\";\nimport { CompressedTexture } from \"../../textures/CompressedTexture\";\nimport { CanvasTexture } from \"../../textures/CanvasTexture\";\nimport { CubeTexture } from \"../../textures/CubeTexture\";\nimport { TypedArray } from \"../../core/BufferAttribute\";\n\ndeclare class ImageBitmap {\n    width: number;\n    height: number;\n    close: any;\n}\n\nfunction clampToMaxSize(image: PlainTextureImage, maxSize: number): PlainTextureImage {\n    if (image.width > maxSize || image.height > maxSize) {\n        const scale: number = maxSize / Math.max(image.width, image.height);\n        if (image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap) {\n            // Warning: Scaling through the canvas will only work with images that use\n            // premultiplied alpha.\n            const canvas: HTMLCanvasElement = document.createElementNS(\n                \"http://www.w3.org/1999/xhtml\",\n                \"canvas\",\n            ) as HTMLCanvasElement;\n            canvas.width = Math.max(Math.floor(image.width * scale), 1);\n            canvas.height = Math.max(Math.floor(image.height * scale), 1);\n            const context: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n            context.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n            console.warn(\n                \"THREE.WebGLRenderer: image is too big (\" +\n                    image.width +\n                    \"x\" +\n                    image.height +\n                    \"). Resized to \" +\n                    canvas.width +\n                    \"x\" +\n                    canvas.height,\n                image,\n            );\n            return canvas;\n        } else {\n            // https://github.com/mrdoob/three.js/issues/13454#issuecomment-369244843\n            const width: number = Math.max(Math.floor(image.width * scale), 1);\n            const height: number = Math.max(Math.floor(image.height * scale), 1);\n            console.warn(\"THREE.WebGLRenderer: image is too big (\" + image.width + \"x\" + image.height + \").\", image);\n        }\n    }\n    return image;\n}\n\nexport type PlainTextureImage = HTMLTextureSource | { width: number; height: number; data?: TypedArray };\n\nfunction isPowerOfTwo(image: PlainTextureImage): boolean {\n    return MathUtil.isPowerOfTwo(image.width) && MathUtil.isPowerOfTwo(image.height);\n}\n\nfunction makePowerOfTwo(image: PlainTextureImage): PlainTextureImage {\n    if (image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap) {\n        const canvas: HTMLCanvasElement = document.createElementNS(\n            \"http://www.w3.org/1999/xhtml\",\n            \"canvas\",\n        ) as HTMLCanvasElement;\n        canvas.width = MathUtil.floorPowerOfTwo(image.width);\n        canvas.height = MathUtil.floorPowerOfTwo(image.height);\n        const context: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n        context.drawImage(image, 0, 0, canvas.width, canvas.height);\n        console.warn(\n            \"THREE.WebGLRenderer: image is not power of two (\" +\n                image.width +\n                \"x\" +\n                image.height +\n                \"). Resized to \" +\n                canvas.width +\n                \"x\" +\n                canvas.height,\n            image,\n        );\n        return canvas;\n    }\n    return image;\n}\n\nfunction textureNeedsPowerOfTwo(texture: Texture): boolean {\n    return (\n        texture.wrapS !== ClampToEdgeWrapping ||\n        texture.wrapT !== ClampToEdgeWrapping ||\n        (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter)\n    );\n}\n\nfunction textureNeedsGenerateMipmaps(texture: Texture, isPowerOfTwo: boolean): boolean {\n    return (\n        texture.generateMipmaps &&\n        isPowerOfTwo &&\n        texture.minFilter !== NearestFilter &&\n        texture.minFilter !== LinearFilter\n    );\n}\n\nexport class WebGLTextures {\n    protected context: WebGLRenderingContext;\n    protected extensions: WebGLExtensions;\n    protected state: WebGLState;\n    protected properties: WebGLProperties;\n    protected capabilities: WebGLCapabilities;\n    protected utils: WebGLUtils;\n    protected infoMemory: IInfoMemory;\n    protected infoRender: IInfoRender;\n\n    protected videoTextures: { [key: number]: number } = {};\n\n    constructor(\n        context: WebGLRenderingContext,\n        extensions: WebGLExtensions,\n        state: WebGLState,\n        properties: WebGLProperties,\n        capabilities: WebGLCapabilities,\n        utils: WebGLUtils,\n        infoMemory: IInfoMemory,\n        infoRender: IInfoRender,\n    ) {\n        this.context = context;\n        this.extensions = extensions;\n        this.properties = properties;\n        this.capabilities = capabilities;\n        this.utils = utils;\n        this.state = state;\n        this.infoMemory = infoMemory;\n        this.infoRender = infoRender;\n    }\n\n    protected filterFallback(f: number): number {\n        if (f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter) {\n            return this.context.NEAREST;\n        }\n        return this.context.LINEAR;\n    }\n\n    protected onTextureDispose = (event: IEventObject): void => {\n        const texture: Texture = event.target as Texture;\n        texture.removeEventListener(\"dispose\", this.onTextureDispose);\n        this.deallocateTexture(texture);\n        if (texture instanceof VideoTexture) {\n            delete this.videoTextures[texture.id];\n        }\n        this.infoMemory.textures--;\n    };\n\n    protected onRenderTargetDispose = (event: IEventObject): void => {\n        const renderTarget: WebGLRenderTarget = event.target as WebGLRenderTarget;\n        renderTarget.removeEventListener(\"dispose\", this.onRenderTargetDispose);\n        this.deallocateRenderTarget(renderTarget);\n        this.infoMemory.textures--;\n    };\n\n    protected deallocateTexture(texture: Texture): void {\n        const textureProperties: ITextureProperties = this.properties.get(texture);\n        if (texture.image && textureProperties.__image__webglTextureCube) {\n            // cube texture\n            this.context.deleteTexture(textureProperties.__image__webglTextureCube);\n        } else {\n            // 2D texture\n            if (textureProperties.__webglInit === undefined) return;\n            this.context.deleteTexture(textureProperties.__webglTexture);\n        }\n        // remove all webgl properties\n        this.properties.remove(texture);\n    }\n\n    protected deallocateRenderTarget(renderTarget: WebGLRenderTarget | WebGLRenderTargetCube): void {\n        const renderTargetProperties: IRenderTargetProperties | IRenderTargetCubeProperties = this.properties.get(\n            renderTarget,\n        ) as IRenderTargetProperties | IRenderTargetCubeProperties;\n        const textureProperties: ITextureProperties = this.properties.get(renderTarget.texture);\n        if (!renderTarget) return;\n        if (textureProperties.__webglTexture !== undefined) {\n            this.context.deleteTexture(textureProperties.__webglTexture);\n        }\n        if (renderTarget.depthTexture) {\n            renderTarget.depthTexture.dispose();\n        }\n        if (renderTarget instanceof WebGLRenderTargetCube) {\n            for (let i: number = 0; i < 6; i++) {\n                this.context.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n                if (renderTargetProperties.__webglDepthbuffer) {\n                    this.context.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n                }\n            }\n        } else {\n            this.context.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n            if (renderTargetProperties.__webglDepthbuffer) {\n                this.context.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n            }\n        }\n        this.properties.remove(renderTarget.texture);\n        this.properties.remove(renderTarget);\n    }\n\n    protected updateVideoTexture(texture: VideoTexture): void {\n        const id: number = texture.id;\n        const frame: number = this.infoRender.frame;\n        // Check the last frame we updated the VideoTexture\n        if (this.videoTextures[id] !== frame) {\n            this.videoTextures[id] = frame;\n            texture.update();\n        }\n    }\n\n    protected uploadTexture(textureProperties: ITextureProperties, texture: Texture, slot: number): void {\n        const gl: WebGLRenderingContext = this.context;\n        const state: WebGLState = this.state;\n        const utils: WebGLUtils = this.utils;\n        if (textureProperties.__webglInit === undefined) {\n            textureProperties.__webglInit = true;\n            texture.addEventListener(\"dispose\", this.onTextureDispose);\n            textureProperties.__webglTexture = gl.createTexture();\n            this.infoMemory.textures++;\n        }\n        state.activeTexture(gl.TEXTURE0 + slot);\n        state.bindTexture(gl.TEXTURE_2D, textureProperties.__webglTexture);\n\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n        /**\n         * 为什么 texture.image 肯定是 HTMLTextureSource?\n         * Need to be fixed\n         */\n        let image: PlainTextureImage = clampToMaxSize(texture.image, this.capabilities.maxTextureSize);\n        if (textureNeedsPowerOfTwo(texture) && isPowerOfTwo(image) === false) {\n            /**\n             * 为什么这里的 texture.image 肯定是 HTMLTextureSource?\n             * 因为在 WebGLRenderer.setProgram 中 SkinnedMesh 中的 Skeleton 的 boneTexture 被强制调整为2的幂次\n             * 所以这个判断中 DataTexture 永远到不了，只能是 CanvasTexture 或者 VideoTexture\n             *\n             * Edited: 原本是这么认为的，但是不是\n             */\n            image = makePowerOfTwo(image);\n        }\n        const isPowerOfTwoImage: boolean = isPowerOfTwo(image);\n        let glFormat: number = utils.convert(texture.format),\n            glType: number = utils.convert(texture.type);\n        this.setTextureParameters(gl.TEXTURE_2D, texture, isPowerOfTwoImage);\n        let mipmap: { data: any; width: number; height: number },\n            mipmaps: Array<{ data: any; width: number; height: number }> = texture.mipmaps;\n        if (texture instanceof DepthTexture) {\n            // populate depth texture with dummy data\n            let internalFormat: number = gl.DEPTH_COMPONENT;\n            /*\n\t\t\tif ( texture.type === FloatType ) {\n\t\t\t\tif ( ! _isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );\n\t\t\t\tinternalFormat = gl.DEPTH_COMPONENT32F;\n\t\t\t} else if ( _isWebGL2 ) {\n\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\tinternalFormat = gl.DEPTH_COMPONENT16;\n            }\n            */\n            if (texture.format === DepthFormat && internalFormat === gl.DEPTH_COMPONENT) {\n                // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n                // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n                // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n                if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n                    console.warn(\n                        \"THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.\",\n                    );\n                    texture.type = UnsignedShortType;\n                    glType = utils.convert(texture.type);\n                }\n            }\n            // Depth stencil textures need the DEPTH_STENCIL internal format\n            // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n            if (texture.format === DepthStencilFormat) {\n                internalFormat = gl.DEPTH_STENCIL;\n                // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n                // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n                // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n                if (texture.type !== UnsignedInt248Type) {\n                    console.warn(\"THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.\");\n                    texture.type = UnsignedInt248Type;\n                    glType = utils.convert(texture.type);\n                }\n            }\n            state.texImage2D(gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null);\n        } else if (texture instanceof DataTexture) {\n            // use manually created mipmaps if available\n            // if there are no manual mipmaps\n            // set 0 level mipmap and then use GL to generate other mipmap levels\n            if (mipmaps.length > 0 && isPowerOfTwoImage) {\n                for (let i: number = 0, il: number = mipmaps.length; i < il; i++) {\n                    mipmap = mipmaps[i];\n                    state.texImage2D(\n                        gl.TEXTURE_2D,\n                        i,\n                        glFormat,\n                        mipmap.width,\n                        mipmap.height,\n                        0,\n                        glFormat,\n                        glType,\n                        mipmap.data,\n                    );\n                }\n                texture.generateMipmaps = false;\n            } else {\n                state.texImage2D(\n                    gl.TEXTURE_2D,\n                    0,\n                    glFormat,\n                    image.width,\n                    image.height,\n                    0,\n                    glFormat,\n                    glType,\n                    (image as { data?: any; width: number; height: number }).data,\n                );\n            }\n        } else if (texture instanceof CompressedTexture) {\n            for (let i: number = 0, il: number = mipmaps.length; i < il; i++) {\n                mipmap = mipmaps[i];\n                if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n                    if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {\n                        state.compressedTexImage2D(\n                            gl.TEXTURE_2D,\n                            i,\n                            glFormat,\n                            mipmap.width,\n                            mipmap.height,\n                            0,\n                            mipmap.data,\n                        );\n                    } else {\n                        console.warn(\n                            \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\",\n                        );\n                    }\n                } else {\n                    state.texImage2D(\n                        gl.TEXTURE_2D,\n                        i,\n                        glFormat,\n                        mipmap.width,\n                        mipmap.height,\n                        0,\n                        glFormat,\n                        glType,\n                        mipmap.data,\n                    );\n                }\n            }\n        } else {\n            // regular Texture (image, video, canvas)\n            // use manually created mipmaps if available\n            // if there are no manual mipmaps\n            // set 0 level mipmap and then use GL to generate other mipmap levels\n            if (mipmaps.length > 0 && isPowerOfTwoImage) {\n                for (let i: number = 0, il: number = mipmaps.length; i < il; i++) {\n                    mipmap = mipmaps[i];\n                    state.texImage2D(gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap);\n                }\n                texture.generateMipmaps = false;\n            } else {\n                /**\n                 * WHY as HTMLTextureSource ????\n                 */\n                state.texImage2D(gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image as HTMLTextureSource);\n            }\n        }\n        if (textureNeedsGenerateMipmaps(texture, isPowerOfTwoImage)) gl.generateMipmap(gl.TEXTURE_2D);\n        textureProperties.__version = texture.version;\n        //if ( texture.onUpdate ) texture.onUpdate( texture );\n    }\n\n    public setTexture2D(texture: Texture, slot: number): void {\n        const textureProperties: ITextureProperties = this.properties.get(texture) as ITextureProperties;\n        if (texture instanceof VideoTexture) {\n            this.updateVideoTexture(texture);\n        }\n        if (texture.version > 0 && textureProperties.__version !== texture.version) {\n            /**\n             * version > 0 不一样只能是needsUpdate被设为true的Texture\n             * 目前Three.js中只有CanvasTexture、 VideoTexture以及Skeleton.boneTexture（DataTexture）是这样的。\n             * 所以 uploadTexture 的 texture 参数必定是 CanvasTexture| VideoTexture | DataTexture 中的一个\n             */\n            const image: PlainTextureImage = texture.image;\n            if (image === undefined) {\n                console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is undefined\", texture);\n            } else if ((image as HTMLImageElement).complete === false) {\n                console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is incomplete\", texture);\n            } else {\n                this.uploadTexture(textureProperties, texture as CanvasTexture | VideoTexture | DataTexture, slot);\n                return;\n            }\n        }\n        this.state.activeTexture(this.context.TEXTURE0 + slot);\n        this.state.bindTexture(this.context.TEXTURE_2D, textureProperties.__webglTexture);\n    }\n\n    public setTextureCube(texture: CubeTexture | CompressedTexture, slot: number): void {\n        const gl: WebGLRenderingContext = this.context;\n        const state: WebGLState = this.state;\n        const utils: WebGLUtils = this.utils;\n        const textureProperties: ITextureProperties = this.properties.get(texture) as ITextureProperties;\n        if ((texture.image as any[]).length === 6) {\n            if (texture.version > 0 && textureProperties.__version !== texture.version) {\n                if (!textureProperties.__image__webglTextureCube) {\n                    texture.addEventListener(\"dispose\", this.onTextureDispose);\n                    textureProperties.__image__webglTextureCube = gl.createTexture();\n                    this.infoMemory.textures++;\n                }\n                state.activeTexture(gl.TEXTURE0 + slot);\n                state.bindTexture(gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube);\n                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n                const isCompressed: boolean = texture && texture instanceof CompressedTexture;\n                const isDataTexture: boolean = texture.image[0] && texture.image[0] instanceof DataTexture;\n                const cubeImage: PlainTextureImage[] = [];\n                for (let i: number = 0; i < 6; i++) {\n                    if (!isCompressed && !isDataTexture) {\n                        cubeImage[i] = clampToMaxSize(texture.image[i], this.capabilities.maxCubemapSize);\n                    } else {\n                        // CubeTexture with DataTexture or CompressedTexture\n                        cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n                    }\n                }\n                const image: PlainTextureImage = cubeImage[0],\n                    isPowerOfTwoImage: boolean = isPowerOfTwo(image),\n                    glFormat: number = utils.convert(texture.format),\n                    glType: number = utils.convert(texture.type);\n                this.setTextureParameters(gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage);\n                for (let i: number = 0; i < 6; i++) {\n                    if (!isCompressed) {\n                        // CubeTexture\n                        if (isDataTexture) {\n                            state.texImage2D(\n                                gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                                0,\n                                glFormat,\n                                cubeImage[i].width,\n                                cubeImage[i].height,\n                                0,\n                                glFormat,\n                                glType,\n                                (cubeImage[i] as any).data, // DataTexture.image: {data: }\n                            );\n                        } else {\n                            state.texImage2D(\n                                gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                                0,\n                                glFormat,\n                                glFormat,\n                                glType,\n                                cubeImage[i] as HTMLTextureSource,\n                            );\n                        }\n                    } else {\n                        let mipmap;\n                        // 未能解决的疑惑！！！ as any\n                        const mipmaps = (cubeImage[i] as any).mipmaps;\n                        for (let j: number = 0, jl: number = mipmaps.length; j < jl; j++) {\n                            mipmap = mipmaps[j];\n                            if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n                                if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {\n                                    state.compressedTexImage2D(\n                                        gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                                        j,\n                                        glFormat,\n                                        mipmap.width,\n                                        mipmap.height,\n                                        0,\n                                        mipmap.data,\n                                    );\n                                } else {\n                                    console.warn(\n                                        \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\",\n                                    );\n                                }\n                            } else {\n                                state.texImage2D(\n                                    gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                                    j,\n                                    glFormat,\n                                    mipmap.width,\n                                    mipmap.height,\n                                    0,\n                                    glFormat,\n                                    glType,\n                                    mipmap.data,\n                                );\n                            }\n                        }\n                    }\n                }\n                if (textureNeedsGenerateMipmaps(texture, isPowerOfTwoImage)) {\n                    gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n                }\n                textureProperties.__version = texture.version;\n                //if ( texture.onUpdate ) texture.onUpdate( texture );\n            } else {\n                state.activeTexture(gl.TEXTURE0 + slot);\n                state.bindTexture(gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube);\n            }\n        }\n    }\n\n    /**\n     * texture from WebGLRenderTargetCube\n     * @param texture\n     * @param slot\n     */\n    public setTextureCubeDynamic(texture: Texture, slot: number): void {\n        this.state.activeTexture(this.context.TEXTURE0 + slot);\n        this.state.bindTexture(this.context.TEXTURE_CUBE_MAP, this.properties.get(texture).__webglTexture);\n    }\n\n    protected setTextureParameters(textureType: number, texture: Texture, isPowerOfTwoImage: boolean): void {\n        const gl: WebGLRenderingContext = this.context;\n        const utils: WebGLUtils = this.utils;\n        const extensions: WebGLExtensions = this.extensions;\n        const properties: WebGLProperties = this.properties;\n        let extension: any;\n        if (isPowerOfTwoImage) {\n            gl.texParameteri(textureType, gl.TEXTURE_WRAP_S, utils.convert(texture.wrapS));\n            gl.texParameteri(textureType, gl.TEXTURE_WRAP_T, utils.convert(texture.wrapT));\n            gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, utils.convert(texture.magFilter));\n            gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, utils.convert(texture.minFilter));\n        } else {\n            gl.texParameteri(textureType, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(textureType, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n                console.warn(\n                    \"THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.\",\n                    texture,\n                );\n            }\n            gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, this.filterFallback(texture.magFilter));\n            gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, this.filterFallback(texture.minFilter));\n            if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n                console.warn(\n                    \"THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.\",\n                    texture,\n                );\n            }\n        }\n        extension = extensions.get(\"EXT_texture_filter_anisotropic\");\n        if (extension) {\n            if (texture.type === FloatType && extensions.get(\"OES_texture_float_linear\") === null) return;\n            if (texture.type === HalfFloatType && extensions.get(\"OES_texture_half_float_linear\") === null) return;\n            if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n                gl.texParameterf(\n                    textureType,\n                    extension.TEXTURE_MAX_ANISOTROPY_EXT,\n                    Math.min(texture.anisotropy, this.capabilities.getMaxAnisotropy()),\n                );\n                properties.get(texture).__currentAnisotropy = texture.anisotropy;\n            }\n        }\n    }\n\n    /****************************  Render targets ***********************/\n\n    // Setup storage for target texture and bind it to correct framebuffer\n    protected setupFrameBufferTexture(\n        framebuffer: WebGLFramebuffer,\n        renderTarget: WebGLRenderTarget,\n        attachment: number,\n        textureTarget: number,\n    ): void {\n        const glFormat: number = this.utils.convert(renderTarget.texture.format);\n        const glType: number = this.utils.convert(renderTarget.texture.type);\n        this.state.texImage2D(\n            textureTarget,\n            0,\n            glFormat,\n            renderTarget.width,\n            renderTarget.height,\n            0,\n            glFormat,\n            glType,\n            null,\n        );\n        const gl: WebGLRenderingContext = this.context;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        gl.framebufferTexture2D(\n            gl.FRAMEBUFFER,\n            attachment,\n            textureTarget,\n            this.properties.get(renderTarget.texture).__webglTexture,\n            0,\n        );\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n\n    // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n    protected setupRenderBufferStorage(renderbuffer: WebGLRenderbuffer, renderTarget: WebGLRenderTarget): void {\n        const gl: WebGLRenderingContext = this.context;\n        gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\n        if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height);\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\n        } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\n        } else {\n            // FIXME: We don't support !depth !stencil\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, renderTarget.width, renderTarget.height);\n        }\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    }\n\n    // Setup resources for a Depth Texture for a FBO (needs an extension)\n    protected setupDepthTexture(framebuffer: WebGLFramebuffer, renderTarget: WebGLRenderTarget): void {\n        const gl: WebGLRenderingContext = this.context;\n        const isCube: boolean = renderTarget && renderTarget instanceof WebGLRenderTargetCube;\n        if (isCube) {\n            throw new Error(\"Depth Texture with cube render targets is not supported\");\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        if (!(renderTarget.depthTexture && renderTarget.depthTexture instanceof DepthTexture)) {\n            throw new Error(\"renderTarget.depthTexture must be an instance of THREE.DepthTexture\");\n        }\n        // upload an empty depth texture with framebuffer size\n        if (\n            !this.properties.get(renderTarget.depthTexture).__webglTexture ||\n            renderTarget.depthTexture.image.width !== renderTarget.width ||\n            renderTarget.depthTexture.image.height !== renderTarget.height\n        ) {\n            renderTarget.depthTexture.image.width = renderTarget.width;\n            renderTarget.depthTexture.image.height = renderTarget.height;\n            renderTarget.depthTexture.needsUpdate = true;\n        }\n        this.setTexture2D(renderTarget.depthTexture, 0);\n        const webglDepthTexture: WebGLTexture = this.properties.get(renderTarget.depthTexture).__webglTexture;\n        if (renderTarget.depthTexture.format === DepthFormat) {\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, webglDepthTexture, 0);\n        } else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.TEXTURE_2D, webglDepthTexture, 0);\n        } else {\n            throw new Error(\"Unknown depthTexture format\");\n        }\n    }\n\n    // Setup GL resources for a non-texture depth buffer\n    protected setupDepthRenderbuffer(renderTarget: WebGLRenderTarget): void {\n        const gl: WebGLRenderingContext = this.context;\n        const renderTargetProperties: IRenderTargetProperties = this.properties.get(renderTarget);\n        const isCube: boolean = renderTarget instanceof WebGLRenderTargetCube;\n        if (renderTarget.depthTexture) {\n            if (isCube) throw new Error(\"target.depthTexture not supported in Cube render targets\");\n            this.setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n        } else {\n            if (isCube) {\n                renderTargetProperties.__webglDepthbuffer = [];\n                for (let i: number = 0; i < 6; i++) {\n                    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n                    renderTargetProperties.__webglDepthbuffer[i] = gl.createRenderbuffer();\n                    this.setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget);\n                }\n            } else {\n                gl.bindFramebuffer(gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n                renderTargetProperties.__webglDepthbuffer = gl.createRenderbuffer();\n                this.setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget);\n            }\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n\n    // Set up GL resources for the render target\n    public setupRenderTarget(renderTarget: WebGLRenderTarget): void {\n        const gl: WebGLRenderingContext = this.context;\n        const state: WebGLState = this.state;\n        const properties: WebGLProperties = this.properties;\n        const renderTargetProperties: IRenderTargetProperties = properties.get(renderTarget);\n        const textureProperties: ITextureProperties = properties.get(renderTarget.texture);\n        renderTarget.addEventListener(\"dispose\", this.onRenderTargetDispose);\n        textureProperties.__webglTexture = gl.createTexture();\n        this.infoMemory.textures++;\n        const isCube: boolean = renderTarget instanceof WebGLRenderTargetCube;\n        const isTargetPowerOfTwo: boolean = isPowerOfTwo(renderTarget);\n        // Setup framebuffer\n        if (isCube) {\n            renderTargetProperties.__webglFramebuffer = [];\n            for (let i: number = 0; i < 6; i++) {\n                renderTargetProperties.__webglFramebuffer[i] = gl.createFramebuffer();\n            }\n        } else {\n            renderTargetProperties.__webglFramebuffer = gl.createFramebuffer();\n        }\n        // Setup color buffer\n        if (isCube) {\n            state.bindTexture(gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n            this.setTextureParameters(gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo);\n            for (let i: number = 0; i < 6; i++) {\n                this.setupFrameBufferTexture(\n                    renderTargetProperties.__webglFramebuffer[i],\n                    renderTarget,\n                    gl.COLOR_ATTACHMENT0,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                );\n            }\n            if (textureNeedsGenerateMipmaps(renderTarget.texture, isTargetPowerOfTwo)) {\n                gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n            }\n            state.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n        } else {\n            state.bindTexture(gl.TEXTURE_2D, textureProperties.__webglTexture);\n            this.setTextureParameters(gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo);\n            this.setupFrameBufferTexture(\n                renderTargetProperties.__webglFramebuffer,\n                renderTarget,\n                gl.COLOR_ATTACHMENT0,\n                gl.TEXTURE_2D,\n            );\n            if (textureNeedsGenerateMipmaps(renderTarget.texture, isTargetPowerOfTwo)) {\n                gl.generateMipmap(gl.TEXTURE_2D);\n            }\n            state.bindTexture(gl.TEXTURE_2D, null);\n        }\n        // Setup depth and stencil buffers\n        if (renderTarget.depthBuffer) {\n            this.setupDepthRenderbuffer(renderTarget);\n        }\n    }\n\n    public updateRenderTargetMipmap(renderTarget: WebGLRenderTarget): void {\n        const gl: WebGLRenderingContext = this.context;\n        const state: WebGLState = this.state;\n        const properties: WebGLProperties = this.properties;\n        const texture: Texture = renderTarget.texture;\n        const isTargetPowerOfTwo = isPowerOfTwo(renderTarget);\n        if (textureNeedsGenerateMipmaps(texture, isTargetPowerOfTwo)) {\n            const target: number = renderTarget instanceof WebGLRenderTargetCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\n            const webglTexture = properties.get(texture).__webglTexture;\n            state.bindTexture(target, webglTexture);\n            gl.generateMipmap(target);\n            state.bindTexture(target, null);\n        }\n    }\n}\n","import { CubeTexture } from \"../../textures/CubeTexture\";\nimport { Texture } from \"../../textures/Texture\";\nimport { Vector2 } from \"../../math/Vector2\";\nimport { Vector3 } from \"../../math/Vector3\";\nimport { Color } from \"../../math/Color\";\nimport { Vector4 } from \"../../math/Vector4\";\nimport { Matrix2 } from \"../../math/Matrix2\";\nimport { Matrix3 } from \"../../math/Matrix3\";\nimport { Matrix4 } from \"../../math/Matrix4\";\nimport { WebGLRenderer } from \"../WebGLRenderer\";\nimport { IUniform } from \"../shaders/UniformsUtils\";\nimport { Object3D } from \"../../core/Object3D\";\nimport { Skeleton } from \"../../objects/Skeleton\";\n\nexport type ArrayUniformSource = Vector2[] | Vector3[] | Vector4[] | Matrix2[] | Matrix3[] | Matrix4[] | Float32Array;\n\nexport type AllUniformType =\n    | number\n    | Color\n    | Vector2\n    | Vector3\n    | Vector4\n    | Matrix2\n    | Matrix3\n    | Matrix4\n    | Int32Array\n    | Texture\n    | CubeTexture\n    | ArrayUniformSource\n    | number[]\n    | Texture[]\n    | CubeTexture[];\n\nconst emptyTexture: Texture = new Texture();\nconst emptyCubeTexture: CubeTexture = new CubeTexture();\n\nclass UniformSetter {\n    public static mat2array: Float32Array = new Float32Array(4);\n    public static mat3array: Float32Array = new Float32Array(9);\n    public static mat4array: Float32Array = new Float32Array(16);\n\n    public renderer: WebGLRenderer;\n    public context: WebGLRenderingContext;\n    public id: number | string;\n    public activeInfo: WebGLActiveInfo;\n    public addr: WebGLUniformLocation = 0;\n    public size: number = 0;\n\n    constructor(renderer: WebGLRenderer, id: number | string, activeInfo: WebGLActiveInfo, addr: WebGLUniformLocation) {\n        this.renderer = renderer;\n        this.context = renderer.context;\n        this.id = id;\n        this.activeInfo = activeInfo;\n        this.addr = addr;\n        this.size = activeInfo.size;\n    }\n\n    public setValue1f: (arg: AllUniformType) => void = (v: number): void => {\n        this.context.uniform1f(this.addr, v);\n    };\n\n    public setValue1i: (arg: AllUniformType) => void = (v: number): void => {\n        this.context.uniform1i(this.addr, v);\n    };\n\n    public setValue2fv: (arg: AllUniformType) => void = (v: Vector2 | Float32Array | number[]): void => {\n        if (v instanceof Float32Array || Array.isArray(v)) {\n            this.context.uniform2fv(this.addr, v);\n        } else {\n            this.context.uniform2f(this.addr, v.x, v.y);\n        }\n    };\n\n    public setValue3fv: (arg: AllUniformType) => void = (v: Vector3 | Float32Array | number[] | Color): void => {\n        if (v instanceof Float32Array || Array.isArray(v)) {\n            this.context.uniform3fv(this.addr, v);\n        } else if (v instanceof Vector3) {\n            this.context.uniform3f(this.addr, v.x, v.y, v.z);\n        } else {\n            this.context.uniform3f(this.addr, v.r, v.g, v.b);\n        }\n    };\n\n    public setValue4fv: (arg: AllUniformType) => void = (v: Vector4 | Float32Array | number[]): void => {\n        if (v instanceof Float32Array || Array.isArray(v)) {\n            this.context.uniform4fv(this.addr, v);\n        } else {\n            this.context.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n        }\n    };\n\n    public setValue2fm: (arg: AllUniformType) => void = (v: Float32Array | number[] | Matrix2): void => {\n        if (v instanceof Matrix2) {\n            UniformSetter.mat2array.set(v.elements);\n            this.context.uniformMatrix2fv(this.addr, false, UniformSetter.mat2array);\n        } else {\n            this.context.uniformMatrix2fv(this.addr, false, v);\n        }\n    };\n\n    public setValue3fm: (arg: AllUniformType) => void = (v: Float32Array | number[] | Matrix3): void => {\n        if (v instanceof Matrix3) {\n            UniformSetter.mat3array.set(v.elements);\n            this.context.uniformMatrix3fv(this.addr, false, UniformSetter.mat3array);\n        } else {\n            this.context.uniformMatrix3fv(this.addr, false, v);\n        }\n    };\n\n    public setValue4fm: (arg: AllUniformType) => void = (v: Float32Array | number[] | Matrix4): void => {\n        if (v instanceof Matrix4) {\n            UniformSetter.mat4array.set(v.elements);\n            this.context.uniformMatrix4fv(this.addr, false, UniformSetter.mat4array);\n        } else {\n            this.context.uniformMatrix4fv(this.addr, false, v);\n        }\n    };\n\n    public setValueT1: (arg: AllUniformType) => void = (v: Texture): void => {\n        const unit: number = this.renderer.allocTextureUnit();\n        this.context.uniform1i(this.addr, unit);\n        this.renderer.setTexture2D(v || emptyTexture, unit);\n    };\n\n    public setValueT6: (arg: AllUniformType) => void = (v: CubeTexture): void => {\n        const unit: number = this.renderer.allocTextureUnit();\n        this.context.uniform1i(this.addr, unit);\n        this.renderer.setTextureCube(v || emptyCubeTexture, unit);\n    };\n\n    public setValue2iv: (arg: AllUniformType) => void = (v: Int32Array | number[]): void => {\n        this.context.uniform2iv(this.addr, v);\n    };\n\n    public setValue3iv: (arg: AllUniformType) => void = (v: Int32Array | number[]): void => {\n        this.context.uniform3iv(this.addr, v);\n    };\n\n    public setValue4iv: (arg: AllUniformType) => void = (v: Int32Array | number[]): void => {\n        this.context.uniform4iv(this.addr, v);\n    };\n\n    public getSingularSetter(): (arg: AllUniformType) => void {\n        switch (this.activeInfo.type) {\n            case 0x1406:\n                return this.setValue1f; // FLOAT\n            case 0x8b50:\n                return this.setValue2fv; // _VEC2\n            case 0x8b51:\n                return this.setValue3fv; // _VEC3\n            case 0x8b52:\n                return this.setValue4fv; // _VEC4\n\n            case 0x8b5a:\n                return this.setValue2fm; // _MAT2\n            case 0x8b5b:\n                return this.setValue3fm; // _MAT3\n            case 0x8b5c:\n                return this.setValue4fm; // _MAT4\n\n            case 0x8b5e:\n            case 0x8d66:\n                return this.setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\n            case 0x8b60:\n                return this.setValueT6; // SAMPLER_CUBE\n\n            case 0x1404:\n            case 0x8b56:\n                return this.setValue1i; // INT, BOOL\n            case 0x8b53:\n            case 0x8b57:\n                return this.setValue2iv; // _VEC2\n            case 0x8b54:\n            case 0x8b58:\n                return this.setValue3iv; // _VEC3\n            case 0x8b55:\n            case 0x8b59:\n                return this.setValue4iv; // _VEC4\n        }\n        throw new Error(`Unknown type for getSingularSetter: ${this.activeInfo.type}`);\n    }\n\n    public setValue1fv: (arg: AllUniformType) => void = (v: Float32Array) => {\n        this.context.uniform1fv(this.addr, v);\n    };\n\n    public setValue1iv: (arg: AllUniformType) => void = (v: Int32Array) => {\n        this.context.uniform1iv(this.addr, v);\n    };\n\n    public static arrayCacheF32: Float32Array[] = [];\n    public static arrayCacheI32: Int32Array[] = [];\n\n    public static flatten(array: ArrayUniformSource, nBlocks: number, blockSize: number): Float32Array {\n        if (array instanceof Float32Array) {\n            return array;\n        }\n        const n: number = nBlocks * blockSize;\n        let r: Float32Array = UniformSetter.arrayCacheF32[n];\n        if (r === undefined) {\n            r = new Float32Array(n);\n            UniformSetter.arrayCacheF32[n] = r;\n        }\n        if (nBlocks !== 0) {\n            for (let i: number = 0, offset: number = 0; i !== nBlocks; i++) {\n                array[i].toArray(r, offset);\n                offset += blockSize;\n            }\n        }\n        return r;\n    }\n\n    public allocTexUnits(n: number): Int32Array {\n        let r: Int32Array = UniformSetter.arrayCacheI32[n];\n        if (r === undefined) {\n            r = new Int32Array(n);\n            UniformSetter.arrayCacheI32[n] = r;\n        }\n        for (let i: number = 0; i !== n; i++) {\n            r[i] = this.renderer.allocTextureUnit();\n        }\n        return r;\n    }\n\n    public setValueV2a: (arg: AllUniformType) => void = (v: Vector2[]) => {\n        this.context.uniform2fv(this.addr, UniformSetter.flatten(v, this.size, 2));\n    };\n\n    public setValueV3a: (arg: AllUniformType) => void = (v: Vector3[]) => {\n        this.context.uniform3fv(this.addr, UniformSetter.flatten(v, this.size, 3));\n    };\n\n    public setValueV4a: (arg: AllUniformType) => void = (v: Vector4[]) => {\n        this.context.uniform4fv(this.addr, UniformSetter.flatten(v, this.size, 4));\n    };\n\n    public setValueM2a: (arg: AllUniformType) => void = (v: Matrix2[]) => {\n        this.context.uniformMatrix2fv(this.addr, false, UniformSetter.flatten(v, this.size, 4));\n    };\n\n    public setValueM3a: (arg: AllUniformType) => void = (v: Matrix3[]) => {\n        this.context.uniformMatrix3fv(this.addr, false, UniformSetter.flatten(v, this.size, 9));\n    };\n\n    public setValueM4a: (arg: AllUniformType) => void = (v: Matrix4[]) => {\n        this.context.uniformMatrix4fv(this.addr, false, UniformSetter.flatten(v, this.size, 16));\n    };\n\n    public setValueT1a: (arg: AllUniformType) => void = (v: Texture[]) => {\n        const n: number = v.length,\n            units: Int32Array = this.allocTexUnits(n);\n        this.context.uniform1iv(this.addr, units);\n        for (let i: number = 0; i !== n; i++) {\n            this.renderer.setTexture2D(v[i] || emptyTexture, units[i]);\n        }\n    };\n\n    public setValueT6a: (arg: AllUniformType) => void = (v: CubeTexture[]) => {\n        const n: number = v.length,\n            units: Int32Array = this.allocTexUnits(n);\n        this.context.uniform1iv(this.addr, units);\n        for (let i: number = 0; i !== n; i++) {\n            this.renderer.setTextureCube(v[i] || emptyCubeTexture, units[i]);\n        }\n    };\n\n    public getPureArraySetter(): (arg: AllUniformType) => void {\n        switch (this.activeInfo.type) {\n            case 0x1406:\n                return this.setValue1fv; // FLOAT\n            case 0x8b50:\n                return this.setValueV2a; // _VEC2\n            case 0x8b51:\n                return this.setValueV3a; // _VEC3\n            case 0x8b52:\n                return this.setValueV4a; // _VEC4\n\n            case 0x8b5a:\n                return this.setValueM2a; // _MAT2\n            case 0x8b5b:\n                return this.setValueM3a; // _MAT3\n            case 0x8b5c:\n                return this.setValueM4a; // _MAT4\n\n            case 0x8b5e:\n                return this.setValueT1a; // SAMPLER_2D\n            case 0x8b60:\n                return this.setValueT6a; // SAMPLER_CUBE\n\n            case 0x1404:\n            case 0x8b56:\n                return this.setValue1iv; // INT, BOOL\n            case 0x8b53:\n            case 0x8b57:\n                return this.setValue2iv; // _VEC2\n            case 0x8b54:\n            case 0x8b58:\n                return this.setValue3iv; // _VEC3\n            case 0x8b55:\n            case 0x8b59:\n                return this.setValue4iv; // _VEC4\n        }\n        throw new Error(`Unknown type for getSingularSetter: ${this.activeInfo.type}`);\n    }\n}\n\nclass SingleUniformSetter {\n    public setValue: (value: AllUniformType) => void;\n    public id: number | string;\n\n    constructor(renderer: WebGLRenderer, id: number | string, activeInfo: WebGLActiveInfo, addr: WebGLUniformLocation) {\n        const setter: UniformSetter = new UniformSetter(renderer, id, activeInfo, addr);\n        this.id = id;\n        this.setValue = setter.getSingularSetter();\n    }\n}\n\nclass PureArrayUniformSetter {\n    public setValue: (value: AllUniformType) => void;\n    public id: number | string;\n    constructor(renderer: WebGLRenderer, id: number | string, activeInfo: WebGLActiveInfo, addr: WebGLUniformLocation) {\n        const setter: UniformSetter = new UniformSetter(renderer, id, activeInfo, addr);\n        this.id = id;\n        this.setValue = setter.getPureArraySetter();\n    }\n}\n\nexport type UniformSetterType = SingleUniformSetter | PureArrayUniformSetter | StructuredUniformSetter;\n\nclass UniformContainer {\n    public seq: UniformSetterType[] = [];\n    public map: { [key: string]: UniformSetterType } = {};\n}\n\ntype AllUniformTypeObject = { [key: string]: AllUniformType };\n\nexport type NestUniformType = AllUniformType | AllUniformTypeObject | { [key: string]: AllUniformTypeObject | null };\n\nclass StructuredUniformSetter extends UniformContainer {\n    public id: number | string;\n\n    constructor(id: number | string) {\n        super();\n        this.id = id;\n    }\n\n    public setValue(value: NestUniformType): void {\n        // Note: Don't need an extra 'renderer' parameter, since samplers\n        // are not allowed in structured uniforms.\n        for (let i: number = 0, n: number = this.seq.length; i !== n; i++) {\n            const u: UniformSetterType = this.seq[i];\n            const v: AllUniformType | { [key: string]: AllUniformType } = value[u.id as string];\n            /**\n             * Well the following is the actually type logic...\n             * if(u instanceof StructuredUniformSetter) {\n             *     u.setValue(v as {[key: string]: AllUniformType;});\n             * } else {\n             *     u.setValue(v as AllUniformType);\n             * }\n             */\n            (u as any).setValue(v);\n        }\n    }\n}\n\nconst RePathPart: RegExp = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\n\nexport class WebGLUniformsWrapper extends UniformContainer {\n    public renderer: WebGLRenderer;\n    public program: WebGLProgram;\n\n    constructor(renderer: WebGLRenderer, program: WebGLProgram) {\n        super();\n        this.renderer = renderer;\n        this.program = program;\n        const gl = this.renderer.context;\n        const n: number = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n        for (let i: number = 0; i < n; ++i) {\n            const info: WebGLActiveInfo = gl.getActiveUniform(program, i),\n                path: string = info.name,\n                addr: WebGLUniformLocation = gl.getUniformLocation(program, path);\n            this.parseUniform(info, addr, this);\n        }\n    }\n\n    protected static addUniform(container: UniformContainer, uniformObject: UniformSetterType): void {\n        container.seq.push(uniformObject);\n        container.map[uniformObject.id as string] = uniformObject;\n    }\n\n    protected parseUniform(activeInfo: WebGLActiveInfo, addr: WebGLUniformLocation, container: UniformContainer): void {\n        /**\n         * Hard to explain, take an example.\n         * When there is a single basic type uniform the typeInfo will be [\\d\\w_]+\n         * and when there is an array of basic type uniform the typeInfo will be [\\d\\w_]+[0]\n         * So this is how matchEnd + 2 === pathLength works\n         *\n         * when path is \"spotLights[0].direction\"\n         * the first match will get [ \"spotLights[\", \"spotLights\", undefined, \"[\" ] lastIndex == 11\n         * This round the regex first get matchEnd + 2 !== pathLength, then we can get this is a\n         * StructuredUniformSetter, So all the thing dealing in else bracket is about StructuredUniformSetter\n         * The Setter from the map is sure to be StructuredUniformSetter.\n         * So we use as StructuredUniformSetter\n         */\n        const path: string = activeInfo.name;\n        const pathLength: number = path.length;\n        // reset RegExp object, because of the early exit of a previous run\n        RePathPart.lastIndex = 0;\n        for (;;) {\n            const match: RegExpExecArray | null = RePathPart.exec(path);\n            const matchEnd: number = RePathPart.lastIndex;\n            let id: string | number = match[1];\n            const idIsIndex: boolean = match[2] === \"]\";\n            const subscript: string = match[3];\n            if (idIsIndex) id = parseInt(id, 10); // convert to integer\n            if (subscript === undefined || (subscript === \"[\" && matchEnd + 2 === pathLength)) {\n                // bare name or \"pure\" bottom-level array \"[0]\" suffix\n                WebGLUniformsWrapper.addUniform(\n                    container,\n                    subscript === undefined\n                        ? new SingleUniformSetter(this.renderer, id, activeInfo, addr)\n                        : new PureArrayUniformSetter(this.renderer, id, activeInfo, addr),\n                );\n                break;\n            } else {\n                // step into inner node / create it in case it doesn't exist\n                const map: { [key: string]: UniformSetterType } = container.map;\n                let next: StructuredUniformSetter = map[id] as StructuredUniformSetter;\n                if (next === undefined) {\n                    next = new StructuredUniformSetter(id);\n                    WebGLUniformsWrapper.addUniform(container, next);\n                }\n                container = next;\n            }\n        }\n    }\n\n    public setValue(name: string, value: NestUniformType): void {\n        const u: UniformSetterType = this.map[name];\n        if (u !== undefined) {\n            (u as any).setValue(value);\n        }\n    }\n\n    public setOptional(object: Object3D | Skeleton, name: string): void {\n        const v: NestUniformType = object[name];\n        if (v !== undefined) {\n            this.setValue(name, v);\n        }\n    }\n\n    public static upload(seq: UniformSetterType[], values: { [key: string]: IUniform }) {\n        for (let i: number = 0, n: number = seq.length; i !== n; i++) {\n            const u: UniformSetterType = seq[i],\n                v = values[u.id];\n            if (v.needsUpdate !== false) {\n                // note: always updating when .needsUpdate is undefined\n                (u as any).setValue(v.value);\n            }\n        }\n    }\n\n    public static seqWithValue(seq: UniformSetterType[], values: { [key: string]: any }): UniformSetterType[] {\n        const r: UniformSetterType[] = [];\n        for (let i: number = 0, n: number = seq.length; i !== n; i++) {\n            const u: UniformSetterType = seq[i];\n            if (u.id in values) r.push(u);\n        }\n        return r;\n    }\n}\n","import {\n    AddEquation,\n    AlphaFormat,\n    ByteType,\n    ClampToEdgeWrapping,\n    DepthFormat,\n    DepthStencilFormat,\n    DstAlphaFactor,\n    DstColorFactor,\n    FloatType,\n    HalfFloatType,\n    IntType,\n    LinearFilter,\n    LinearMipMapLinearFilter,\n    LinearMipMapNearestFilter,\n    LuminanceAlphaFormat,\n    LuminanceFormat,\n    MaxEquation,\n    MinEquation,\n    MirroredRepeatWrapping,\n    NearestFilter,\n    NearestMipMapLinearFilter,\n    NearestMipMapNearestFilter,\n    OneFactor,\n    OneMinusDstAlphaFactor,\n    OneMinusDstColorFactor,\n    OneMinusSrcAlphaFactor,\n    OneMinusSrcColorFactor,\n    RGBAFormat,\n    RGBA_ASTC_10x10_Format,\n    RGBA_ASTC_10x5_Format,\n    RGBA_ASTC_10x6_Format,\n    RGBA_ASTC_10x8_Format,\n    RGBA_ASTC_12x10_Format,\n    RGBA_ASTC_12x12_Format,\n    RGBA_ASTC_4x4_Format,\n    RGBA_ASTC_5x4_Format,\n    RGBA_ASTC_5x5_Format,\n    RGBA_ASTC_6x5_Format,\n    RGBA_ASTC_6x6_Format,\n    RGBA_ASTC_8x5_Format,\n    RGBA_ASTC_8x6_Format,\n    RGBA_ASTC_8x8_Format,\n    RGBA_PVRTC_2BPPV1_Format,\n    RGBA_PVRTC_4BPPV1_Format,\n    RGBA_S3TC_DXT1_Format,\n    RGBA_S3TC_DXT3_Format,\n    RGBA_S3TC_DXT5_Format,\n    RGBFormat,\n    RGB_ETC1_Format,\n    RGB_PVRTC_2BPPV1_Format,\n    RGB_PVRTC_4BPPV1_Format,\n    RGB_S3TC_DXT1_Format,\n    RepeatWrapping,\n    ReverseSubtractEquation,\n    ShortType,\n    SrcAlphaFactor,\n    SrcAlphaSaturateFactor,\n    SrcColorFactor,\n    SubtractEquation,\n    UnsignedByteType,\n    UnsignedInt248Type,\n    UnsignedIntType,\n    UnsignedShort4444Type,\n    UnsignedShort5551Type,\n    UnsignedShort565Type,\n    UnsignedShortType,\n    ZeroFactor,\n} from \"../../constants\";\nimport { WebGLExtensions } from \"./WebGLExtensions\";\n\nexport class WebGLUtils {\n    public context: WebGLRenderingContext;\n    public extensions: WebGLExtensions;\n\n    constructor(context: WebGLRenderingContext, extensions: WebGLExtensions) {\n        this.context = context;\n        this.extensions = extensions;\n    }\n\n    public convert(parameter: number): any {\n        const extensions: WebGLExtensions = this.extensions;\n        const context = this.context;\n\n        let extension: any;\n\n        if (parameter === RepeatWrapping) {\n            return context.REPEAT;\n        }\n        if (parameter === ClampToEdgeWrapping) {\n            return context.CLAMP_TO_EDGE;\n        }\n        if (parameter === MirroredRepeatWrapping) {\n            return context.MIRRORED_REPEAT;\n        }\n\n        if (parameter === NearestFilter) {\n            return context.NEAREST;\n        }\n        if (parameter === NearestMipMapNearestFilter) {\n            return context.NEAREST_MIPMAP_NEAREST;\n        }\n        if (parameter === NearestMipMapLinearFilter) {\n            return context.NEAREST_MIPMAP_LINEAR;\n        }\n\n        if (parameter === LinearFilter) {\n            return context.LINEAR;\n        }\n        if (parameter === LinearMipMapNearestFilter) {\n            return context.LINEAR_MIPMAP_NEAREST;\n        }\n        if (parameter === LinearMipMapLinearFilter) {\n            return context.LINEAR_MIPMAP_LINEAR;\n        }\n\n        if (parameter === UnsignedByteType) {\n            return context.UNSIGNED_BYTE;\n        }\n        if (parameter === UnsignedShort4444Type) {\n            return context.UNSIGNED_SHORT_4_4_4_4;\n        }\n        if (parameter === UnsignedShort5551Type) {\n            return context.UNSIGNED_SHORT_5_5_5_1;\n        }\n        if (parameter === UnsignedShort565Type) {\n            return context.UNSIGNED_SHORT_5_6_5;\n        }\n\n        if (parameter === ByteType) {\n            return context.BYTE;\n        }\n        if (parameter === ShortType) {\n            return context.SHORT;\n        }\n        if (parameter === UnsignedShortType) {\n            return context.UNSIGNED_SHORT;\n        }\n        if (parameter === IntType) {\n            return context.INT;\n        }\n        if (parameter === UnsignedIntType) {\n            return context.UNSIGNED_INT;\n        }\n        if (parameter === FloatType) {\n            return context.FLOAT;\n        }\n\n        if (parameter === HalfFloatType) {\n            extension = extensions.get(\"OES_texture_half_float\");\n\n            if (extension !== null) {\n                return extension.HALF_FLOAT_OES;\n            }\n        }\n\n        if (parameter === AlphaFormat) {\n            return context.ALPHA;\n        }\n        if (parameter === RGBFormat) {\n            return context.RGB;\n        }\n        if (parameter === RGBAFormat) {\n            return context.RGBA;\n        }\n        if (parameter === LuminanceFormat) {\n            return context.LUMINANCE;\n        }\n        if (parameter === LuminanceAlphaFormat) {\n            return context.LUMINANCE_ALPHA;\n        }\n        if (parameter === DepthFormat) {\n            return context.DEPTH_COMPONENT;\n        }\n        if (parameter === DepthStencilFormat) {\n            return context.DEPTH_STENCIL;\n        }\n\n        if (parameter === AddEquation) {\n            return context.FUNC_ADD;\n        }\n        if (parameter === SubtractEquation) {\n            return context.FUNC_SUBTRACT;\n        }\n        if (parameter === ReverseSubtractEquation) {\n            return context.FUNC_REVERSE_SUBTRACT;\n        }\n\n        if (parameter === ZeroFactor) {\n            return context.ZERO;\n        }\n        if (parameter === OneFactor) {\n            return context.ONE;\n        }\n        if (parameter === SrcColorFactor) {\n            return context.SRC_COLOR;\n        }\n        if (parameter === OneMinusSrcColorFactor) {\n            return context.ONE_MINUS_SRC_COLOR;\n        }\n        if (parameter === SrcAlphaFactor) {\n            return context.SRC_ALPHA;\n        }\n        if (parameter === OneMinusSrcAlphaFactor) {\n            return context.ONE_MINUS_SRC_ALPHA;\n        }\n        if (parameter === DstAlphaFactor) {\n            return context.DST_ALPHA;\n        }\n        if (parameter === OneMinusDstAlphaFactor) {\n            return context.ONE_MINUS_DST_ALPHA;\n        }\n\n        if (parameter === DstColorFactor) {\n            return context.DST_COLOR;\n        }\n        if (parameter === OneMinusDstColorFactor) {\n            return context.ONE_MINUS_DST_COLOR;\n        }\n        if (parameter === SrcAlphaSaturateFactor) {\n            return context.SRC_ALPHA_SATURATE;\n        }\n\n        if (\n            parameter === RGB_S3TC_DXT1_Format ||\n            parameter === RGBA_S3TC_DXT1_Format ||\n            parameter === RGBA_S3TC_DXT3_Format ||\n            parameter === RGBA_S3TC_DXT5_Format\n        ) {\n            extension = extensions.get(\"WEBGL_compressed_texture_s3tc\");\n            if (extension !== null) {\n                if (parameter === RGB_S3TC_DXT1_Format) {\n                    return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n                }\n                if (parameter === RGBA_S3TC_DXT1_Format) {\n                    return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n                }\n                if (parameter === RGBA_S3TC_DXT3_Format) {\n                    return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n                }\n                if (parameter === RGBA_S3TC_DXT5_Format) {\n                    return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n                }\n            }\n        }\n\n        if (\n            parameter === RGB_PVRTC_4BPPV1_Format ||\n            parameter === RGB_PVRTC_2BPPV1_Format ||\n            parameter === RGBA_PVRTC_4BPPV1_Format ||\n            parameter === RGBA_PVRTC_2BPPV1_Format\n        ) {\n            extension = extensions.get(\"WEBGL_compressed_texture_pvrtc\");\n            if (extension !== null) {\n                if (parameter === RGB_PVRTC_4BPPV1_Format) {\n                    return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n                }\n                if (parameter === RGB_PVRTC_2BPPV1_Format) {\n                    return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n                }\n                if (parameter === RGBA_PVRTC_4BPPV1_Format) {\n                    return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n                }\n                if (parameter === RGBA_PVRTC_2BPPV1_Format) {\n                    return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n                }\n            }\n        }\n\n        if (parameter === RGB_ETC1_Format) {\n            extension = extensions.get(\"WEBGL_compressed_texture_etc1\");\n            if (extension !== null) {\n                return extension.COMPRESSED_RGB_ETC1_WEBGL;\n            }\n        }\n\n        if (\n            parameter === RGBA_ASTC_4x4_Format ||\n            parameter === RGBA_ASTC_5x4_Format ||\n            parameter === RGBA_ASTC_5x5_Format ||\n            parameter === RGBA_ASTC_6x5_Format ||\n            parameter === RGBA_ASTC_6x6_Format ||\n            parameter === RGBA_ASTC_8x5_Format ||\n            parameter === RGBA_ASTC_8x6_Format ||\n            parameter === RGBA_ASTC_8x8_Format ||\n            parameter === RGBA_ASTC_10x5_Format ||\n            parameter === RGBA_ASTC_10x6_Format ||\n            parameter === RGBA_ASTC_10x8_Format ||\n            parameter === RGBA_ASTC_10x10_Format ||\n            parameter === RGBA_ASTC_12x10_Format ||\n            parameter === RGBA_ASTC_12x12_Format\n        ) {\n            extension = extensions.get(\"WEBGL_compressed_texture_astc\");\n            if (extension !== null) {\n                return parameter;\n            }\n        }\n\n        if (parameter === MinEquation || parameter === MaxEquation) {\n            extension = extensions.get(\"EXT_blend_minmax\");\n            if (extension !== null) {\n                if (parameter === MinEquation) {\n                    return extension.MIN_EXT;\n                }\n                if (parameter === MaxEquation) {\n                    return extension.MAX_EXT;\n                }\n            }\n        }\n\n        if (parameter === UnsignedInt248Type) {\n            extension = extensions.get(\"WEBGL_depth_texture\");\n            if (extension !== null) {\n                return extension.UNSIGNED_INT_24_8_WEBGL;\n            }\n        }\n\n        return 0;\n    }\n}\n","import { Color } from \"../math/Color\";\n\nexport class Fog {\n    public name: string = \"\";\n    public color: Color;\n    public near: number = 1;\n    public far: number = 1000;\n\n    constructor(color: Color | number | string, near: number = 1, far: number = 1000) {\n        if (color instanceof Color) {\n            this.color = new Color().copy(color);\n        } else if (typeof color === \"number\") {\n            this.color = new Color().setHex(color);\n        } else if (typeof color === \"string\") {\n            this.color = new Color().setStyle(color);\n        }\n        this.near = near;\n        this.far = far;\n    }\n\n    public copy(source: Fog): this {\n        this.color.copy(source.color);\n        this.near = source.near;\n        this.far = source.far;\n        return this;\n    }\n\n    public clone(): Fog {\n        return new (this.constructor as new (color: Color, near: number, far: number) => Fog)(\n            this.color,\n            this.near,\n            this.far,\n        ).copy(this);\n    }\n}\n","import { Color } from \"../math/Color\";\n\nexport class FogExp2 {\n    public name: string = \"\";\n    public color: Color;\n    public density: number = 0.00025;\n\n    constructor(color: Color | number | string, density: number = 1) {\n        if (color instanceof Color) {\n            this.color = new Color().copy(color);\n        } else if (typeof color === \"number\") {\n            this.color = new Color().setHex(color);\n        } else if (typeof color === \"string\") {\n            this.color = new Color().setStyle(color);\n        }\n        this.density = density;\n    }\n\n    public copy(source: FogExp2): this {\n        this.color.copy(source.color);\n        this.density = source.density;\n        return this;\n    }\n\n    public clone(): FogExp2 {\n        return new (this.constructor as new (color: Color, density: number) => FogExp2)(this.color, this.density).copy(\n            this,\n        );\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Color } from \"../math/Color\";\nimport { CubeTexture } from \"../textures/CubeTexture\";\nimport { Texture } from \"../textures/Texture\";\nimport { Fog } from \"./Fog\";\nimport { FogExp2 } from \"./FogExp2\";\nimport { Material } from \"../materials/Material\";\n\nexport class Scene extends Object3D {\n    public readonly type: string = \"Scene\";\n\n    public background: Color | Texture | CubeTexture | null = null;\n    public fog: Fog | FogExp2 | null = null;\n    public overrideMaterial: Material | null = null;\n    public autoUpdate: boolean = true; // checked by the renderer\n\n    public copy(source: Scene): this {\n        super.copy(source);\n        if (source.background !== null) {\n            this.background = source.background.clone();\n        }\n        if (source.fog !== null) {\n            this.fog = source.fog.clone();\n        }\n        if (source.overrideMaterial !== null) {\n            this.overrideMaterial = source.overrideMaterial.clone();\n        }\n        this.autoUpdate = source.autoUpdate;\n        // this.matrixAutoUpdate = source.matrixAutoUpdate;\n        return this;\n    }\n\n    public clone(): Scene {\n        return new (this.constructor as new () => Scene)().copy(this);\n    }\n}\n","import { Texture } from \"./Texture\";\n\nexport class CanvasTexture extends Texture {\n    public image: HTMLImageElement | HTMLCanvasElement | ImageBitmap = Texture.DEFAULT_IMAGE;\n\n    constructor(\n        canvas: HTMLCanvasElement,\n        mapping?: number,\n        wrapS?: number,\n        wrapT?: number,\n        magFilter?: number,\n        minFilter?: number,\n        format?: number,\n        type?: number,\n        anisotropy?: number,\n    ) {\n        super(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n        this.needsUpdate = true;\n    }\n}\n","import { Texture } from \"./Texture\";\n\nexport class CompressedTexture extends Texture {\n    public image: { width: number; height: number };\n\n    constructor(\n        mipmaps: Array<{ data: any; width: number; height: number }>,\n        width: number,\n        height: number,\n        mapping?: number,\n        wrapS?: number,\n        wrapT?: number,\n        magFilter?: number,\n        minFilter?: number,\n        format?: number,\n        type?: number,\n        anisotropy?: number,\n        encoding?: number,\n    ) {\n        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n        this.image = { width: width, height: height };\n        this.mipmaps = mipmaps;\n\n        /**\n         * no flipping for cube textures\n         * (also flipping doesn't work for compressed textures )\n         * @type {boolean}\n         */\n        this.flipY = false;\n\n        /**\n         * can't generate mipmaps for compressed textures\n         * mips must be embedded in DDS files\n         * @type {boolean}\n         */\n        this.generateMipmaps = false;\n    }\n}\n","import { CubeReflectionMapping } from \"../constants\";\nimport { Texture, HTMLTextureSource } from \"./Texture\";\nimport { DataTexture } from \"./DataTexture\";\n\nexport class CubeTexture extends Texture {\n    public image: HTMLTextureSource[];\n\n    constructor(\n        images: HTMLTextureSource[] | DataTexture = [],\n        mapping: number = CubeReflectionMapping,\n        wrapS?: number,\n        wrapT?: number,\n        magFilter?: number,\n        minFilter?: number,\n        format?: number,\n        type?: number,\n        anisotropy?: number,\n        encoding?: number,\n    ) {\n        super(images as any, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n        this.flipY = false;\n    }\n\n    get images(): HTMLTextureSource[] {\n        return this.image;\n    }\n\n    set images(images: HTMLTextureSource[]) {\n        this.image = images;\n    }\n}\n","import { NearestFilter } from \"../constants\";\nimport { Texture } from \"./Texture\";\nimport { TypedArray } from \"../core/BufferAttribute\";\n\nexport class DataTexture extends Texture {\n    public image: { data: TypedArray; width: number; height: number };\n\n    constructor(\n        data: any,\n        width: number,\n        height: number,\n        mapping?: number,\n        wrapS?: number,\n        wrapT?: number,\n        magFilter?: number,\n        minFilter?: number,\n        format?: number,\n        type?: number,\n        anisotropy?: number,\n        encoding?: number,\n    ) {\n        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n        this.image = { data: data, width: width, height: height };\n        this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n        this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n        this.generateMipmaps = false;\n        this.flipY = false;\n        this.unpackAlignment = 1;\n    }\n}\n","import { DepthFormat, DepthStencilFormat, NearestFilter, UnsignedInt248Type, UnsignedShortType } from \"../constants\";\nimport { Texture } from \"./Texture\";\n\nexport class DepthTexture extends Texture {\n    public image: { width: number; height: number };\n\n    constructor(\n        width: number,\n        height: number,\n        mapping?: number,\n        wrapS?: number,\n        wrapT?: number,\n        magFilter?: number,\n        minFilter?: number,\n        format?: number,\n        type?: number,\n        anisotropy?: number,\n        encoding?: number,\n    ) {\n        format = format !== undefined ? format : DepthFormat;\n        if (format !== DepthFormat && format !== DepthStencilFormat) {\n            throw new Error(`DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat`);\n        }\n        if (type === undefined && format === DepthFormat) {\n            type = UnsignedShortType;\n        }\n        if (type === undefined && format === DepthStencilFormat) {\n            type = UnsignedInt248Type;\n        }\n        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n        this.image = { width: width, height: height };\n        this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n        this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n        this.flipY = false;\n        this.generateMipmaps = false;\n    }\n}\n","import {\n    ClampToEdgeWrapping,\n    LinearEncoding,\n    LinearFilter,\n    LinearMipMapLinearFilter,\n    MirroredRepeatWrapping,\n    RepeatWrapping,\n    RGBAFormat,\n    UnsignedByteType,\n    UVMapping,\n} from \"../constants\";\nimport { EventDispatcher } from \"../core/EventDispatcher\";\nimport { MathUtil } from \"../math/Math\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { TypedArray } from \"../core/BufferAttribute\";\n\nlet textureId: number = 0;\n\nexport type HTMLTextureSource = HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap;\n\nexport class Texture extends EventDispatcher {\n    public static DEFAULT_IMAGE: undefined;\n    public static DEFAULT_MAPPING: number = UVMapping;\n\n    public readonly id: number = textureId++;\n    public readonly uuid: string = MathUtil.generateUUID();\n    public name: string = \"\";\n    public image: HTMLTextureSource | any = Texture.DEFAULT_IMAGE;\n    public mipmaps: Array<{ data: any; width: number; height: number }> = [];\n    public mapping: number = Texture.DEFAULT_MAPPING;\n    public wrapS: number = ClampToEdgeWrapping;\n    public wrapT: number = ClampToEdgeWrapping;\n    public magFilter: number = LinearFilter;\n    public minFilter: number = LinearMipMapLinearFilter;\n    public anisotropy: number = 1;\n    public format: number = RGBAFormat;\n    public type: number = UnsignedByteType;\n    public offset: Vector2 = new Vector2(0, 0);\n    public repeat: Vector2 = new Vector2(1, 1);\n    public center: Vector2 = new Vector2(0, 0);\n    public rotation: number = 0;\n\n    public matrix: Matrix3 = new Matrix3();\n    public matrixAutoUpdate: boolean = true;\n    public generateMipmaps: boolean = true;\n    public premultiplyAlpha: boolean = false;\n    public flipY: boolean = true;\n\n    /**\n     * valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n     * @type {number}\n     */\n    public unpackAlignment: number = 4;\n\n    /**\n     * Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n     * Also changing the encoding after already used by a Material will not automatically make the Material update.\n     * You need to explicitly call Material.needsUpdate to trigger it to recompile.\n     */\n    public encoding: number = LinearEncoding;\n    public version: number = 0;\n\n    constructor(\n        image: HTMLTextureSource | null = Texture.DEFAULT_IMAGE,\n        mapping: number = Texture.DEFAULT_MAPPING,\n        wrapS: number = ClampToEdgeWrapping,\n        wrapT: number = ClampToEdgeWrapping,\n        magFilter: number = LinearFilter,\n        minFilter: number = LinearMipMapLinearFilter,\n        format: number = RGBAFormat,\n        type: number = UnsignedByteType,\n        anisotropy: number = 1,\n        encoding: number = LinearEncoding,\n    ) {\n        super();\n        this.image = image;\n        this.mapping = mapping;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.magFilter = magFilter;\n        this.minFilter = minFilter;\n        this.format = format;\n        this.type = type;\n        this.anisotropy = anisotropy;\n        this.encoding = encoding;\n    }\n\n    set needsUpdate(value: boolean) {\n        if (value === true) this.version++;\n    }\n\n    public dispose(): void {\n        this.dispatchEvent({ type: \"dispose\" });\n    }\n\n    public transformUv(uv: Vector2): this {\n        if (this.mapping !== UVMapping) return this;\n        uv.applyMatrix3(this.matrix);\n        if (uv.x < 0 || uv.x > 1) {\n            switch (this.wrapS) {\n                case RepeatWrapping:\n                    uv.x = uv.x - Math.floor(uv.x);\n                    break;\n                case ClampToEdgeWrapping:\n                    uv.x = uv.x < 0 ? 0 : 1;\n                    break;\n                case MirroredRepeatWrapping:\n                    if (Math.abs(Math.floor(uv.x) % 2) === 1) {\n                        uv.x = Math.ceil(uv.x) - uv.x;\n                    } else {\n                        uv.x = uv.x - Math.floor(uv.x);\n                    }\n                    break;\n            }\n        }\n\n        if (uv.y < 0 || uv.y > 1) {\n            switch (this.wrapT) {\n                case RepeatWrapping:\n                    uv.y = uv.y - Math.floor(uv.y);\n                    break;\n                case ClampToEdgeWrapping:\n                    uv.y = uv.y < 0 ? 0 : 1;\n                    break;\n                case MirroredRepeatWrapping:\n                    if (Math.abs(Math.floor(uv.y) % 2) === 1) {\n                        uv.y = Math.ceil(uv.y) - uv.y;\n                    } else {\n                        uv.y = uv.y - Math.floor(uv.y);\n                    }\n                    break;\n            }\n        }\n        if (this.flipY) {\n            uv.y = 1 - uv.y;\n        }\n        return this;\n    }\n\n    public clone(): Texture {\n        return new (this.constructor as new () => Texture)().copy(this);\n    }\n\n    public copy(source: Texture): this {\n        this.name = source.name;\n        this.image = source.image;\n        this.mipmaps = source.mipmaps.slice(0);\n        this.mapping = source.mapping;\n        this.wrapS = source.wrapS;\n        this.wrapT = source.wrapT;\n        this.magFilter = source.magFilter;\n        this.minFilter = source.minFilter;\n        this.anisotropy = source.anisotropy;\n        this.format = source.format;\n        this.type = source.type;\n        this.offset.copy(source.offset);\n        this.repeat.copy(source.repeat);\n        this.center.copy(source.center);\n        this.rotation = source.rotation;\n        this.matrixAutoUpdate = source.matrixAutoUpdate;\n        this.matrix.copy(source.matrix);\n        this.generateMipmaps = source.generateMipmaps;\n        this.premultiplyAlpha = source.premultiplyAlpha;\n        this.flipY = source.flipY;\n        this.unpackAlignment = source.unpackAlignment;\n        this.encoding = source.encoding;\n        return this;\n    }\n}\n","import { Texture } from \"./Texture\";\n\nexport class VideoTexture extends Texture {\n    public image: HTMLVideoElement = Texture.DEFAULT_IMAGE;\n\n    constructor(\n        video: HTMLVideoElement,\n        mapping?: number,\n        wrapS?: number,\n        wrapT?: number,\n        magFilter?: number,\n        minFilter?: number,\n        format?: number,\n        type?: number,\n        anisotropy?: number,\n    ) {\n        super(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n        this.generateMipmaps = false;\n    }\n\n    public update(): this {\n        const video: HTMLVideoElement = this.image as HTMLVideoElement;\n        if (video.readyState >= video.HAVE_CURRENT_DATA) {\n            this.needsUpdate = true;\n        }\n        return this;\n    }\n}\n","import { Matrix4 } from \"./math/Matrix4\";\nimport { Matrix3 } from \"./math/Matrix3\";\nimport { BufferAttribute } from \"./core/BufferAttribute\";\nimport { Vector3 } from \"./math/Vector3\";\nimport { Box3 } from \"./math/Box3\";\nimport { Camera } from \"./cameras/Camera\";\nimport { Vector2 } from \"./math/Vector2\";\nimport { Vector4 } from \"./math/Vector4\";\n\nexport function arrayMin(array: number[]): number {\n    if (array.length === 0) return Infinity;\n    let min: number = array[0];\n    for (let i: number = 1, l: number = array.length; i < l; ++i) {\n        if (array[i] < min) min = array[i];\n    }\n    return min;\n}\n\nexport function arrayMax(array: number[]): number {\n    if (array.length === 0) return -Infinity;\n    let max: number = array[0];\n    for (let i: number = 1, l: number = array.length; i < l; ++i) {\n        if (array[i] > max) max = array[i];\n    }\n    return max;\n}\n\nexport function applyMatrixToBufferAttribute(matrix: Matrix4 | Matrix3, attribute: BufferAttribute): BufferAttribute {\n    const vec: Vector3 = new Vector3();\n    for (let i: number = 0, l: number = attribute.count; i < l; i++) {\n        vec.x = attribute.getProperty(i, \"x\") as number;\n        vec.y = attribute.getProperty(i, \"y\") as number;\n        vec.z = attribute.getProperty(i, \"z\") as number;\n        if (matrix instanceof Matrix4) {\n            vec.applyMatrix4(matrix);\n        } else if (matrix instanceof Matrix3) {\n            vec.applyMatrix3(matrix);\n        }\n        attribute.setProperty(i, \"xyz\", vec);\n    }\n    return attribute;\n}\n\nexport function setBoxFromBufferAttribute(target: Box3, attribute: BufferAttribute): void {\n    let minX: number = +Infinity;\n    let minY: number = +Infinity;\n    let minZ: number = +Infinity;\n    let maxX: number = -Infinity;\n    let maxY: number = -Infinity;\n    let maxZ: number = -Infinity;\n    for (let i: number = 0, l: number = attribute.count; i < l; i++) {\n        const x: number = attribute.getProperty(i, \"x\") as number;\n        const y: number = attribute.getProperty(i, \"y\") as number;\n        const z: number = attribute.getProperty(i, \"z\") as number;\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (z < minZ) minZ = z;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n        if (z > maxZ) maxZ = z;\n    }\n    target.min.set(minX, minY, minZ);\n    target.max.set(maxX, maxY, maxZ);\n}\n\nexport function unprojectVector3OnCamera(vector: Vector3, camera: Camera): Vector3 {\n    const matrix: Matrix4 = new Matrix4();\n    vector.applyMatrix4(matrix.multiplyMatrices(camera.matrixWorld, matrix.getInverse(camera.projectionMatrix)));\n    return vector;\n}\n\nexport function vectorFromBufferAttribute<T = Vector4 | Vector3 | Vector2>(\n    vector: T,\n    attribute: BufferAttribute,\n    index: number = 0,\n): T {\n    if (vector instanceof Vector2) {\n        return vector.set(attribute.getProperty(index, \"x\") as number, attribute.getProperty(index, \"y\") as number);\n    } else if (vector instanceof Vector3) {\n        return vector.set(\n            attribute.getProperty(index, \"x\") as number,\n            attribute.getProperty(index, \"y\") as number,\n            attribute.getProperty(index, \"z\") as number,\n        );\n    } else if (vector instanceof Vector4) {\n        return vector.set(\n            attribute.getProperty(index, \"x\") as number,\n            attribute.getProperty(index, \"y\") as number,\n            attribute.getProperty(index, \"z\") as number,\n            attribute.getProperty(index, \"w\") as number,\n        );\n    }\n    return vector;\n}\n"],"sourceRoot":""}