{"version":3,"sources":["webpack://THREE/webpack/bootstrap","webpack://THREE/./es/Three.js","webpack://THREE/./es/audio/Audio.js","webpack://THREE/./es/audio/AudioAnalyser.js","webpack://THREE/./es/audio/AudioContext.js","webpack://THREE/./es/audio/AudioListener.js","webpack://THREE/./es/audio/PositionalAudio.js","webpack://THREE/./es/cameras/ArrayCamera.js","webpack://THREE/./es/cameras/Camera.js","webpack://THREE/./es/cameras/OrthographicCamera.js","webpack://THREE/./es/cameras/PerspectiveCamera.js","webpack://THREE/./es/constants.js","webpack://THREE/./es/core/BufferAttribute.js","webpack://THREE/./es/core/BufferGeometry.js","webpack://THREE/./es/core/Clock.js","webpack://THREE/./es/core/DirectGeometry.js","webpack://THREE/./es/core/EventDispatcher.js","webpack://THREE/./es/core/Face3.js","webpack://THREE/./es/core/Geometry.js","webpack://THREE/./es/core/InstancedBufferAttribute.js","webpack://THREE/./es/core/InstancedBufferGeometry.js","webpack://THREE/./es/core/InstancedInterleavedBufferAttribute.js","webpack://THREE/./es/core/InterleavedBufferAttribute.js","webpack://THREE/./es/core/Layers.js","webpack://THREE/./es/core/Object3D.js","webpack://THREE/./es/core/Raycaster.js","webpack://THREE/./es/extras/objects/ImmediateRenderObject.js","webpack://THREE/./es/geometries/BoxGeometry.js","webpack://THREE/./es/geometries/CircleGeometry.js","webpack://THREE/./es/geometries/ConeGeometry.js","webpack://THREE/./es/geometries/CylinderGeometry.js","webpack://THREE/./es/geometries/Geometries.js","webpack://THREE/./es/geometries/PlaneGeometry.js","webpack://THREE/./es/lights/AmbientLight.js","webpack://THREE/./es/lights/DirectionalLight.js","webpack://THREE/./es/lights/DirectionalLightShadow.js","webpack://THREE/./es/lights/HemisphereLight.js","webpack://THREE/./es/lights/Light.js","webpack://THREE/./es/lights/LightShadow.js","webpack://THREE/./es/lights/PointLight.js","webpack://THREE/./es/lights/RectAreaLight.js","webpack://THREE/./es/lights/SpotLight.js","webpack://THREE/./es/lights/SpotLightShadow.js","webpack://THREE/./es/materials/LineBasicMaterial.js","webpack://THREE/./es/materials/LineDashedMaterial.js","webpack://THREE/./es/materials/Material.js","webpack://THREE/./es/materials/Materials.js","webpack://THREE/./es/materials/MeshBasicMaterial.js","webpack://THREE/./es/materials/MeshDepthMaterial.js","webpack://THREE/./es/materials/MeshDistanceMaterial.js","webpack://THREE/./es/materials/MeshLambertMaterial.js","webpack://THREE/./es/materials/MeshNormalMaterial.js","webpack://THREE/./es/materials/MeshPhongMaterial.js","webpack://THREE/./es/materials/MeshPhysicalMaterial.js","webpack://THREE/./es/materials/MeshStandardMaterial.js","webpack://THREE/./es/materials/MeshToonMaterial.js","webpack://THREE/./es/materials/PointsMaterial.js","webpack://THREE/./es/materials/RawShaderMaterial.js","webpack://THREE/./es/materials/ShaderMaterial.js","webpack://THREE/./es/materials/ShadowMaterial.js","webpack://THREE/./es/materials/SpriteMaterial.js","webpack://THREE/./es/math/Box3.js","webpack://THREE/./es/math/Color.js","webpack://THREE/./es/math/Euler.js","webpack://THREE/./es/math/Frustum.js","webpack://THREE/./es/math/Line3.js","webpack://THREE/./es/math/Math.js","webpack://THREE/./es/math/Matrix2.js","webpack://THREE/./es/math/Matrix3.js","webpack://THREE/./es/math/Matrix4.js","webpack://THREE/./es/math/Plane.js","webpack://THREE/./es/math/Quaternion.js","webpack://THREE/./es/math/Ray.js","webpack://THREE/./es/math/Sphere.js","webpack://THREE/./es/math/Spherical.js","webpack://THREE/./es/math/Triangle.js","webpack://THREE/./es/math/Vector2.js","webpack://THREE/./es/math/Vector3.js","webpack://THREE/./es/math/Vector4.js","webpack://THREE/./es/objects/Bone.js","webpack://THREE/./es/objects/Group.js","webpack://THREE/./es/objects/LOD.js","webpack://THREE/./es/objects/Line.js","webpack://THREE/./es/objects/LineLoop.js","webpack://THREE/./es/objects/LineSegments.js","webpack://THREE/./es/objects/Mesh.js","webpack://THREE/./es/objects/Points.js","webpack://THREE/./es/objects/Skeleton.js","webpack://THREE/./es/objects/SkinnedMesh.js","webpack://THREE/./es/objects/Sprite.js","webpack://THREE/./es/renderers/WebGLRenderTarget.js","webpack://THREE/./es/renderers/WebGLRenderTargetCube.js","webpack://THREE/./es/renderers/WebGLRenderer.js","webpack://THREE/./es/renderers/shaders/ShaderChunk.js","webpack://THREE/./es/renderers/shaders/ShaderChunk/alphamap_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/alphatest_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/aomap_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/begin_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/bsdfs.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/clipping_planes_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/clipping_planes_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/clipping_planes_pars_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/clipping_planes_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/color_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/color_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/color_pars_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/color_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/common.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/dithering_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/dithering_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/encodings_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/envmap_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/envmap_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/fog_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/fog_pars_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/fog_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/gradientmap_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/lightmap_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/lights_pars.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/lights_physical_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/lights_template.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/map_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/map_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/map_particle_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/normal_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/packing.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/project_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/skinbase_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/skinning_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/specularmap_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/uv2_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/uv_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderChunk/worldpos_vertex.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib.js","webpack://THREE/./es/renderers/shaders/ShaderLib/cube_frag.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/cube_vert.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/depth_frag.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/depth_vert.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/equirect_frag.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/equirect_vert.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/linedashed_frag.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/linedashed_vert.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/meshbasic_frag.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/meshbasic_vert.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/meshlambert_frag.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/meshlambert_vert.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/meshphong_frag.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/meshphong_vert.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/meshphysical_frag.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/meshphysical_vert.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/normal_frag.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/normal_vert.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/points_frag.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/points_vert.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/shadow_frag.glsl","webpack://THREE/./es/renderers/shaders/ShaderLib/shadow_vert.glsl","webpack://THREE/./es/renderers/shaders/UniformsLib.js","webpack://THREE/./es/renderers/shaders/UniformsUtils.js","webpack://THREE/./es/renderers/webgl/WebGLAttributes.js","webpack://THREE/./es/renderers/webgl/WebGLBackground.js","webpack://THREE/./es/renderers/webgl/WebGLBufferRenderer.js","webpack://THREE/./es/renderers/webgl/WebGLCapabilities.js","webpack://THREE/./es/renderers/webgl/WebGLClipping.js","webpack://THREE/./es/renderers/webgl/WebGLExtensions.js","webpack://THREE/./es/renderers/webgl/WebGLGeometries.js","webpack://THREE/./es/renderers/webgl/WebGLIndexedBufferRenderer.js","webpack://THREE/./es/renderers/webgl/WebGLLights.js","webpack://THREE/./es/renderers/webgl/WebGLMorphtargets.js","webpack://THREE/./es/renderers/webgl/WebGLObjects.js","webpack://THREE/./es/renderers/webgl/WebGLProgram.js","webpack://THREE/./es/renderers/webgl/WebGLPrograms.js","webpack://THREE/./es/renderers/webgl/WebGLProperties.js","webpack://THREE/./es/renderers/webgl/WebGLRenderLists.js","webpack://THREE/./es/renderers/webgl/WebGLShader.js","webpack://THREE/./es/renderers/webgl/WebGLShadowMap.js","webpack://THREE/./es/renderers/webgl/WebGLSpriteRenderer.js","webpack://THREE/./es/renderers/webgl/WebGLState.js","webpack://THREE/./es/renderers/webgl/WebGLTextures.js","webpack://THREE/./es/renderers/webgl/WebGLUniforms.js","webpack://THREE/./es/renderers/webgl/WebGLUtils.js","webpack://THREE/./es/scenes/Fog.js","webpack://THREE/./es/scenes/FogExp2.js","webpack://THREE/./es/scenes/Scene.js","webpack://THREE/./es/textures/CanvasTexture.js","webpack://THREE/./es/textures/CompressedTexture.js","webpack://THREE/./es/textures/CubeTexture.js","webpack://THREE/./es/textures/DataTexture.js","webpack://THREE/./es/textures/DepthTexture.js","webpack://THREE/./es/textures/Texture.js","webpack://THREE/./es/textures/VideoTexture.js","webpack://THREE/./es/utils.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","_WebGLRenderTargetCube","_WebGLRenderTarget","_WebGLRenderer","_ShaderLib","_UniformsLib","_UniformsUtils","_ShaderChunk","_FogExp","_Fog","_Scene","_Sprite","_LOD","_SkinnedMesh","_Skeleton","_Bone","_Mesh","_LineSegments","_LineLoop","_Line","_Points","_Group","_VideoTexture","_DataTexture","_CompressedTexture","_CubeTexture","_CanvasTexture","_DepthTexture","_Texture","_Geometries","keys","forEach","key","_exportNames","_Materials","_SpotLightShadow","_SpotLight","_PointLight","_RectAreaLight","_HemisphereLight","_DirectionalLightShadow","_DirectionalLight","_AmbientLight","_LightShadow","_Light","_PerspectiveCamera","_OrthographicCamera","_ArrayCamera","_Camera","_AudioListener","_PositionalAudio","_AudioContext","_AudioAnalyser","_Audio","_InstancedBufferGeometry","_BufferGeometry","_Geometry","_InterleavedBufferAttribute","_InstancedInterleavedBufferAttribute","_InstancedBufferAttribute","_BufferAttribute","_Face","_Object3D","_Raycaster","_Layers","_EventDispatcher","_Clock","_Triangle","_Math","_Spherical","_Plane","_Frustum","_Sphere","_Ray","_Matrix","_Matrix2","_Matrix3","_Box","_Line2","_Euler","_Vector","_Vector2","_Vector3","_Quaternion","_Color","_ImmediateRenderObject","_WebGLUtils","_constants","_Object3D2","AudioWrapper","listener","_this","_classCallCheck","this","_possibleConstructorReturn","__proto__","getPrototypeOf","type","startTime","offset","isPlaying","hasPlaybackControl","sourceType","autoplay","buffer","loop","playbackRate","filters","context","gain","createGain","connect","getInput","audioNode","source","audioBuffer","play","console","warn","createBufferSource","onended","onEnded","bind","setValueAtTime","currentTime","start","stop","length","getOutput","disconnect","arguments","undefined","getFilters","filter","setFilters","AudioAnalyserWrapper","audio","fftSize","analyser","createAnalyser","data","Uint8Array","frequencyBinCount","getByteFrequencyData","getFrequencyData","AudioContextWrapper","window","AudioContext","webkitAudioContext","AudioListenerWrapper","getContext","destination","force","_get","position","Vector3","quaternion","Quaternion","scale","orientation","up","matrixWorld","decompose","set","applyQuaternion","positionX","x","positionY","y","positionZ","z","forwardX","forwardY","forwardZ","upX","upY","upZ","setPosition","setOrientation","PositionalAudio","panner","createPanner","refDistance","rolloffFactor","distanceModel","maxDistance","setFromMatrixPosition","_PerspectiveCamera2","ArrayCamera","cameras","Camera","matrixWorldInverse","Matrix4","projectionMatrix","getInverse","recursive","copy","constructor","worldQuaternion","_Camera2","OrthographicCamera","left","right","top","bottom","near","far","_left","_right","_top","_bottom","_zoom","_near","_far","_view","updateProjectionMatrix","fullWidth","fullHeight","width","height","enabled","offsetX","offsetY","view","dx","zoom","dy","cx","cy","zoomW","zoomH","scaleW","scaleH","makeOrthographic","assign","PerspectiveCamera","fov","aspect","focus","_fov","_aspect","_filmGauge","_filmOffset","focalLength","vExtentSlope","getFilmHeight","MathUtil","RAD2DEG","Math","atan","tan","DEG2RAD","filmGauge","min","max","skew","filmOffset","getFilmWidth","makePerspective","REVISION","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","BufferAttribute","array","itemSize","normalized","uuid","generateUUID","count","dynamic","updateRange","version","slice","index1","attribute","index2","colors","color","Color","g","b","vectors","vector","Vector2","Vector4","w","index","toLowerCase","replace","offsetMap","charAt","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","_utils","_DirectGeometry","_EventDispatcher2","bufferGeometryId","BufferGeometry","apply","id","attributes","morphAttributes","groups","boundingBox","boundingSphere","drawRange","Infinity","Array","isArray","arrayMax","setIndex","materialIndex","push","matrix","applyMatrixToBufferAttribute","needsUpdate","normal","normalMatrix","Matrix3","getNormalMatrix","computeBoundingBox","computeBoundingSphere","angle","applyMatrix","makeRotationX","makeRotationY","makeRotationZ","makeTranslation","makeScale","obj","Object3D","lookAt","updateMatrix","getCenter","negate","translate","geometry","positions","vertices","addAttribute","copyVector3sArray","copyColorsArray","lineDistances","copyArray","clone","fromGeometry","points","point","direct","directGeometry","elementsNeedUpdate","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","normals","uv","copyVector2sArray","uvs","lineDistancesNeedUpdate","lineDistance","computeGroups","DirectGeometry","fromDirectGeometry","uvs2","morphTargets","morphTarget","skinIndices","copyVector4sArray","skinWeights","Box3","setBoxFromBufferAttribute","makeEmpty","isNaN","error","Sphere","box","center","maxRadiusSquare","il","getProperty","distanceToSquared","radius","sqrt","vA","vB","vC","pA","pB","pC","cb","ab","indices","addGroup","j","jl","group","fromArray","sub","cross","normalizeNormals","normalize","setProperty","geometry2","array2","morphAttribute","dispatchEvent","Clock","autoStart","oldTime","elapsedTime","running","performance","Date","now","getElapsedTime","getDelta","diff","newTime","faces","face","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphNormals","morphNormalsLength","hasSkinIndices","hasSkinWeights","a","vertexNormals","vertexColors","vertexUvs","concat","morphNormal","EventDispatcher","_listeners","listeners","indexOf","listenerArray","splice","event","target","Face3","_Face2","GeometryFace","geometryId","Geometry","applyMatrix4","applyMatrix3","_this2","uv2","tempNormals","tempUVs","tempUVs2","addFace","computeFaceNormals","f","fl","areaWeighted","v","vl","add","originalFaceNormal","originalVertexNormals","tmpGeo","faceNormals","Triangle","computeVertexNormals","faceNormal","distanceTo","setFromPoints","materialIndexOffset","vertexOffset","thisVertices","thatVertices","thisFaces","thatFaces","thisUvs","thatUvs","thisColors","thatColors","vertexCopy","faceVertexNormals","faceVertexColors","faceCopy","uvCopy","mesh","matrixAutoUpdate","merge","verticesMap","unique","changes","precisionPoints","precision","pow","round","join","faceIndicesToRemove","idx","sort","uvs1","newUvs1","newUvs2","uvsCopy","k","kl","_BufferAttribute2","InstancedBufferAttribute","meshPerAttribute","_BufferGeometry2","InstancedBufferGeometry","maxInstancedCount","InstancedInterleavedBufferAttribute","stride","InterleavedBufferAttribute","Layers","mask","channel","layers","object3DId","parent","children","DefaultUp","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","rotation","Euler","modelViewMatrix","onBeforeRender","onAfterRender","compose","multiplyMatrices","updateMatrixWorld","raycaster","intersections","q","premultiply","axis","setFromAxisAngle","euler","setFromEuler","setFromRotationMatrix","multiply","rotateOnAxis","distance","vec","multiplyScalar","translateOnAxis","mat","remove","callback","traverse","traverseVisible","traverseAncestors","JSON","parse","stringify","result","setFromQuaternion","order","intersectObject","intersects","raycast","Raycaster","origin","direction","params","LOD","Line","Mesh","Points","threshold","Sprite","linePrecision","ray","Ray","coords","camera","unprojectVector3onCamera","transformDirection","objects","ImmediateRenderObject","material","_Geometry2","BoxGeometry","depth","widthSegments","heightSegments","depthSegments","parameters","fromBufferGeometry","BoxBufferGeometry","mergeVertices","floor","numberOfVertices","groupStart","buildPlane","u","uDir","vDir","width2","height2","depth2","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","iy","ix","CircleGeometry","segments","thetaStart","thetaLength","CircleBufferGeometry","PI","segment","cos","sin","_CylinderGeometry","ConeGeometry","radialSegments","openEnded","CylinderGeometry","_assertThisInitialized","ConeBufferGeometry","CylinderBufferGeometry","radiusTop","radiusBottom","indexArray","halfHeight","generateCap","centerIndexStart","centerIndexEnd","sign","theta","cosTheta","sinTheta","generateTorso","slope","indexRow","_PlaneGeometry","_ConeGeometry","_CircleGeometry","_BoxGeometry","PlaneGeometry","PlaneBufferGeometry","_Light2","AmbientLight","intensity","DirectionalLight","shadow","DirectionalLightShadow","_LightShadow2","HemisphereLight","skyColor","groundColor","Light","LightShadow","bias","mapSize","map","PointLight","decay","power","RectAreaLight","SpotLight","penumbra","SpotLightShadow","light","_Material2","LineBasicMaterial","setHex","lights","linecap","linejoin","linewidth","setValues","_LineBasicMaterial2","LineDashedMaterial","dashSize","gapSize","materialId","Material","alphaTest","blending","blendDst","blendDstAlpha","blendEquation","blendEquationAlpha","blendSrc","blendSrcAlpha","clipIntersection","clippingPlanes","clipShadows","colorWrite","depthFunc","depthTest","depthWrite","dithering","flatShading","fog","opacity","overdraw","onBeforeCompile","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","shadowSide","side","transparent","values","newValue","currentValue","setStyle","Number","srcPlanes","dstPlanes","_ShadowMaterial","_SpriteMaterial","_RawShaderMaterial","_ShaderMaterial","_PointsMaterial","_MeshPhysicalMaterial","_MeshStandardMaterial","_MeshPhongMaterial","_MeshToonMaterial","_MeshNormalMaterial","_MeshLambertMaterial","_MeshDepthMaterial","_MeshDistanceMaterial","_MeshBasicMaterial","_LineDashedMaterial","_LineBasicMaterial","_Material","MeshBasicMaterial","alphaMap","aoMap","aoMapIntensity","combine","envMap","lightMap","lightMapIntensity","reflectivity","refractionRatio","skinning","specularMap","wireframe","wireframeLinecap","wireframeLinejoin","wireframeLinewidth","MeshDepthMaterial","depthPacking","displacementMap","displacementScale","displacementBias","MeshDistanceMaterial","farDistance","nearDistance","referencePosition","MeshLambertMaterial","emissive","emissiveIntensity","emissiveMap","MeshNormalMaterial","paramenters","bumpMap","bumpScale","normalMap","normalScale","MeshPhongMaterial","shininess","specular","MeshPhysicalMaterial","clearCoat","clearCoatRoughness","defines","PHYSICAL","MeshStandardMaterial","STANDARD","envMapIntensity","metalness","metalnessMap","roughness","roughnessMap","_MeshPhongMaterial2","MeshToonMaterial","TOON","gradientMap","PointsMaterial","size","sizeAttenuation","_ShaderMaterial2","RawShaderMaterial","ShaderMaterial","uniforms","vertexShader","fragmentShader","clipping","extensions","derivatives","drawBuffers","fragDepth","shaderTextureLOD","defaultAttributeValues","UniformsUtils","ShadowMaterial","SpriteMaterial","minX","minY","minZ","maxX","maxY","maxZ","expandByPoint","halfSize","expandByObject","isEmpty","scalar","addScalar","node","v1","vectorFromBufferAttribute","sphere","closestPoint","clampPoint","plane","constant","clamp","clampedPoint","getSize","equals","HUE_TO_RGB","t","setRGB","hex","h","euclideanModulo","style","matches","exec","components","parseInt","parseFloat","setHSL","ColorKeywords","gammaFactor","safeInverse","getHex","toString","hsl","hue","saturation","lightness","delta","getHSL","alpha","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","EulerOrder","_order","DefaultOrder","_x","_y","_z","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","XYZ","asin","abs","atan2","YXZ","ZXY","ZYX","YZX","XZY","makeRotationFromQuaternion","newOrder","Frustum","p0","Plane","p1","p2","p3","p4","p5","planes","frustum","me","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setPlane","intersectsSphere","sprite","negRadius","distanceToPoint","d1","d2","Line3","end","line","clampToLine","startP","startEnd","startEnd2","dot","startEndStartP","closestPointToPointParameter","lut","toUpperCase","d0","random","d3","a1","a2","b1","b2","low","high","range","degrees","radians","ceil","log","LN2","Matrix2","n11","n12","n21","n22","mat2","ae","be","a11","a12","a21","a22","b11","b12","b21","b22","tmp","n13","n23","n31","n32","n33","mat3","mat4","a13","a23","a31","a32","a33","b13","b23","b31","b32","b33","e","throwOnDegenerate","t11","t12","t13","det","msg","Error","identity","detInv","matrix4","setFromMatrix4","transpose","tx","ty","sx","sy","n14","n24","n34","n41","n42","n43","n44","xAxis","yAxis","zAxis","scaleX","scaleY","scaleZ","af","bf","ce","cf","de","df","ac","ad","bc","bd","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","eye","lengthSquared","matA","matB","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","t14","scaleXSq","scaleYSq","scaleZSq","sz","determinant","invSX","invSY","invSZ","v2","setFromNormalAndCoplanarPoint","inverseNormalLength","denominator","startSign","endSign","intersectsPlane","optionalNormalMatrix","referencePoint","coplanarPoint","_w","c1","c2","c3","s1","s2","s3","halfAngle","trace","vFrom","vTo","EPS","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","qb","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","at","directionDistance","distanceSquaredToPoint","v0","optionalPointOnRay","optionalPointOnSegment","segCenter","segDir","segExtent","a01","b0","s0","sqrDist","extDet","invDet","tca","radius2","thc","t0","t1","distanceToPlane","isFinite","distToPoint","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectBox","triangle","backFaceCulling","edge1","edge2","DdN","DdQxE2","DdE1xQ","QdN","intersectTriangle","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSquared","expandByScalar","getMaxScaleOnAxis","Spherical","phi","other","vec3","acos","resultLengthSquared","setFromCoplanarPoints","dot00","dot01","dot02","dot11","dot12","denom","invDenom","barycoordFromPoint","projectedPoint","projectPoint","containsPoint","minDistance","edgeList","closestPointToPoint","divideScalar","qx","qy","qz","qw","iz","iw","ax","ay","az","bx","by","bz","planeNormal","projectOnVector","dz","sinPhiRadius","setFromMatrixColumn","epsilon","epsilon2","Bone","Group","levels","matrixPosition","getObjectForDistance","level","addLevel","precisionSquared","inverseMatrix","vStart","vEnd","interSegment","interRay","step","distSquared","distanceSquareToSegment","faceIndex","nbVertices","LineLoop","LineSegments","drawMode","morphTargetInfluences","morphTargetDictionary","updateMorphTargets","ml","String","intersectsBox","intersection","checkBufferGeometryIntersection","faceMaterial","fvA","fvB","fvC","tl","influence","targets","intersectionPoint","checkIntersection","uvsF","uvA","uvB","uvC","uvIntersection","uv1","uv3","baryCoord","intersect","intersectionPointWorld","testPoint","localThreshold","localThresholdSquare","rayPointDistanceSquare","intersectPoint","distanceToRay","offsetMatrix","identityMatrix","Skeleton","bones","boneInverses","boneMatrices","calculateInverses","inverse","bone","boneTexture","toArray","_Mesh2","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","initBones","skeleton","normalizeSkinWeights","gbone","pos","rotq","scl","pose","sw","manhattanLength","skinWeight","worldPosition","worldScale","setFromMatrixScale","guessSizeSq","WebGLRenderTarget","options","scissorTest","scissor","viewport","minFilter","texture","Texture","wrapS","wrapT","magFilter","format","anisotropy","encoding","depthBuffer","stencilBuffer","depthTexture","dispose","_WebGLRenderTarget2","WebGLRenderTargetCube","activeCubeFace","activeMipMapLevel","_WebGLUniforms","_WebGLShadowMap","_WebGLState","_WebGLClipping","_WebGLExtensions","_WebGLCapabilities","_WebGLProperties","_WebGLTextures","_WebGLAttributes","_WebGLGeometries","_WebGLObjects","_WebGLMorphtargets","_WebGLPrograms","_WebGLLights","_WebGLRenderLists","_WebGLBufferRenderer","_WebGLIndexedBufferRenderer","_WebGLSpriteRenderer","_WebGLBackground","WebGLRenderer","lightsArray","shadowsArray","spritesArray","currentRendererTarget","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","physicallyCorrectLights","toneMapping","toneMappingExposure","toneMappingWhitePoint","isContextLost","currentRenderTarget","currentFramebuffer","currentMaterialId","currentGeometryProgram","currentCamera","currentArrayCamera","currentViewport","currentScissor","currentScissorTest","usedTextureUnits","pixelRatio","WebGLClipping","clippingEnabled","localClippingEnabled","projScreenMatrix","tempVector3","infoMemory","geometries","textures","infoRender","frame","calls","info","render","memory","programs","autoReset","reset","onContextLost","preventDefault","onContextRestore","initGLContext","isAnimating","onAnimationFrame","time","requestAnimationFrame","onMaterialDispose","removeEventListener","deallocateMaterial","setTexture2DWarned","setTextureCubeWarned","domElement","canvas","document","createElementNS","stencil","antialias","preserveDrawingBuffer","powerPreference","contextAttributes","addEventListener","getShaderPrecisionFormat","rangeMin","rangeMax","message","shadowMap","WebGLShadowMap","capabilities","maxTextureSize","getContextAttributes","extension","loseContext","restoreContext","setSize","updateStyle","setViewport","state","setScissorTest","background","getClearColor","setClearColor","getClearAlpha","setClearAlpha","gl","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clear","renderTarget","setRenderTarget","renderLists","properties","WebGLExtensions","utils","WebGLUtils","WebGLCapabilities","WebGLState","WebGLProperties","WebGLTextures","WebGLAttributes","WebGLGeometries","WebGLObjects","morphtargets","WebGLMorphtargets","programCache","WebGLPrograms","WebGLLights","WebGLRenderLists","WebGLBackground","bufferRenderer","WebGLBufferRenderer","indexedBufferRenderer","WebGLIndexedBufferRenderer","spriteRenderer","WebGLSpriteRenderer","scene","setup","initMaterial","forceClear","autoUpdate","setFromMatrix","init","currentRenderList","projectObject","beginShadows","endShadows","opaqueObjects","opaque","transparentObjects","overrideMaterial","renderObjects","updateRenderTargetMipmap","buffers","setTest","setMask","setPolygonOffset","test","intersectsSprite","update","intersectsObject","groupMaterial","renderList","renderItem","camera2","bounds","renderObject","frontFaceCW","setMaterial","program","setProgram","renderObjectImmediate","renderBufferDirect","_this3","renderBufferImmediate","initAttributes","hasPositions","createBuffer","hasNormals","hasUvs","hasColors","programAttributes","getAttributes","bindBuffer","ARRAY_BUFFER","bufferData","positionArray","DYNAMIC_DRAW","enableAttribute","vertexAttribPointer","FLOAT","normalArray","nx","ny","nz","uvArray","colorArray","disableUnusedAttributes","drawArrays","TRIANGLES","geometryProgram","updateBuffers","rangeFactor","getWireframeAttribute","renderer","setupVertexAttributes","ELEMENT_ARRAY_BUFFER","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","setLineWidth","getTargetPixelRatio","setMode","LINES","TRIANGLE_STRIP","TRIANGLE_FAN","lineWidth","LINE_LOOP","LINE_STRIP","POINTS","renderInstances","materialProperties","useCache","setState","lightsHash","hash","numClippingPlanes","numPlanes","numIntersection","refreshProgram","refreshMaterial","refreshLights","p_uniforms","getUniforms","m_uniforms","shader","useProgram","setValue","logarithmicDepthBuffer","uCamPos","cameraPosition","setOptional","floatVertexTextures","ceilPowerOfTwo","DataTexture","boneTextureSize","markUniformsLightsNeedsUpdate","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","refreshUniformsToon","refreshUniformsPhong","refreshUniformsPhysical","refreshUniformsStandard","refreshUniformsDepth","refreshUniformsDistance","refreshUniformsNormal","refreshUniformsLine","refreshUniformsDash","refreshUniformsPoints","WebGLUniformsWrapper","upload","uniformsList","startIndex","geometryAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","bytesPerElement","enableAttributeAndDivisor","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","getParameters","code","getProgramCode","programChange","releaseMaterialProgramReference","shaderID","ShaderLib","acquireProgram","numSupportedMorphTargets","maxMorphTargets","numSupportedMorphNormals","maxMorphNormals","uniform","ambientLightColor","ambient","directionalLights","directional","spotLights","spot","rectAreaLights","rectArea","pointLights","hemisphereLights","hemi","directionalShadowMap","directionalShadowMatrix","spotShadowMap","spotShadowMatrix","pointShadowMap","pointShadowMatrix","progUniforms","seqWithValue","seq","programInfo","releaseProgram","cullFace","frontFaceDirection","setCullFace","setFlipSided","textureUnit","maxTextures","unit","setTexture2D","cubeTexture","slot","image","setTextureCube","setTextureCubeDynamic","__webglFramebuffer","setupRenderTarget","framebuffer","isCube","bindFramebuffer","FRAMEBUFFER","textureProperties","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_CUBE_MAP_POSITIVE_X","__webglTexture","restore","textureFormat","textureType","convert","getParameter","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","internalFormat","copyTexImage2D","TEXTURE_2D","diffuse","flipEnvMap","CubeTexture","uvScaleMap","repeat","setUvTransform","uvTransform","totalSize","fogColor","fogNear","fogFar","fogDensity","density","_alphamap_fragment","_interopRequireDefault","_alphamap_pars_fragment","_alphatest_fragment","_aomap_fragment","_aomap_pars_fragment","_begin_vertex","_beginnormal_vertex","_bsdfs","_bumpmap_pars_fragment","_clipping_planes_fragment","_clipping_planes_pars_fragment","_clipping_planes_pars_vertex","_clipping_planes_vertex","_color_fragment","_color_pars_fragment","_color_pars_vertex","_color_vertex","_common","_cube_uv_reflection_fragment","_defaultnormal_vertex","_displacementmap_pars_vertex","_displacementmap_vertex","_emissivemap_fragment","_emissivemap_pars_fragment","_encodings_fragment","_encodings_pars_fragment","_envmap_fragment","_envmap_pars_fragment","_envmap_pars_vertex","_envmap_vertex","_fog_vertex","_fog_pars_vertex","_fog_fragment","_fog_pars_fragment","_gradientmap_pars_fragment","_lightmap_fragment","_lightmap_pars_fragment","_lights_lambert_vertex","_lights_pars","_lights_phong_fragment","_lights_phong_pars_fragment","_lights_physical_fragment","_lights_physical_pars_fragment","_lights_template","_logdepthbuf_fragment","_logdepthbuf_pars_fragment","_logdepthbuf_pars_vertex","_logdepthbuf_vertex","_map_fragment","_map_pars_fragment","_map_particle_fragment","_map_particle_pars_fragment","_metalnessmap_fragment","_metalnessmap_pars_fragment","_morphnormal_vertex","_morphtarget_pars_vertex","_morphtarget_vertex","_normal_fragment","_normalmap_pars_fragment","_packing","_premultiplied_alpha_fragment","_project_vertex","_dithering_fragment","_dithering_pars_fragment","_roughnessmap_fragment","_roughnessmap_pars_fragment","_shadowmap_pars_fragment","_shadowmap_pars_vertex","_shadowmap_vertex","_shadowmask_pars_fragment","_skinbase_vertex","_skinning_pars_vertex","_skinning_vertex","_skinnormal_vertex","_specularmap_fragment","_specularmap_pars_fragment","_tonemapping_fragment","_tonemapping_pars_fragment","_uv_pars_fragment","_uv_pars_vertex","_uv_vertex","_uv2_pars_fragment","_uv2_pars_vertex","_uv2_vertex","_worldpos_vertex","_cube_frag","_cube_vert","_depth_frag","_depth_vert","_distanceRGBA_frag","_distanceRGBA_vert","_equirect_frag","_equirect_vert","_linedashed_frag","_linedashed_vert","_meshbasic_frag","_meshbasic_vert","_meshlambert_frag","_meshlambert_vert","_meshphong_frag","_meshphong_vert","_meshphysical_frag","_meshphysical_vert","_normal_frag","_normal_vert","_points_frag","_points_vert","_shadow_frag","_shadow_vert","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_template","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","__webpack_exports__","basic","UniformsLib","specularmap","envmap","aomap","lightmap","lambert","emissivemap","phong","bumpmap","normalmap","displacementmap","gradientmap","standard","roughnessmap","metalnessmap","dashed","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","physical","shadowBias","shadowRadius","shadowMapSize","coneCos","penumbraCos","shadowCameraNear","shadowCameraFar","merged","uniformsSrc","uniformsDst","parameterSrc","bufferType","usage","STATIC_DRAW","UNSIGNED_SHORT","SHORT","UNSIGNED_INT","INT","BYTE","UNSIGNED_BYTE","BYTES_PER_ELEMENT","bufferSubData","subarray","deleteBuffer","updateBuffer","clearColor","clearAlpha","setClear","boxMesh","removeAttribute","copyPosition","planeCamera","planeMesh","mode","drawArraysInstancedANGLE","maxVertexTextures","maxCubemapSize","maxAttributes","maxVertexUniforms","maxVaryings","maxFragmentUniforms","vertexTextures","floatFragmentTextures","maxAnisotropy","maxPrecision","getMaxPrecision","MAX_TEXTURE_IMAGE_UNITS","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","MAX_VERTEX_ATTRIBS","MAX_VERTEX_UNIFORM_VECTORS","MAX_VARYING_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","getMaxAnisotropy","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","MAX_TEXTURE_MAX_ANISOTROPY_EXT","globalState","numGlobalPlanes","renderingShadows","dstOffset","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","viewNormalMatrix","i4","enableLocalClipping","projectPlanes","resetGlobalState","cache","fromCache","nGlobal","lGlobal","clippingState","getExtension","wireframeAttributes","bufferGeometry","onGeometryDispose","setFromObject","drawElements","drawElementsInstancedANGLE","LightUniformsCache","halfWidth","shadows","vector3","matrix42","directionalLength","pointLength","spotLength","rectAreaLength","hemisphereLength","extractRotation","influencesList","morphInfluences","objectInfluences","influences","updateList","updateFromObject","_WebGLShader","generateDefines","chunks","generateExtensions","rendererExtensions","envMapCubeUV","filterEmptyLine","getToneMappingFunction","functionName","toneMappingName","str","getEncodingComponents","getTexelDecodingFunction","getTexelEncodingFunction","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","parseIncludes","match","include","unrollLoops","pattern","snippet","unroll","fetchAttributeLocations","getProgramParameter","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","programIdCount","WebGLProgramWrapper","usedTimes","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","mapping","gammaFactorDefine","customExtensions","customDefines","createProgram","prefixVertex","prefixFragment","supportsVertexTextures","maxBones","useFog","fogExp","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","numClipIntersection","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","vertexGlsl","fragmentGlsl","glVertexShader","WebGLShaderWrapper","glFragmentShader","attachShader","index0AttributeName","bindAttribLocation","linkProgram","programLog","getProgramInfoLog","trim","vertexLog","getShaderInfoLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","prefix","deleteShader","cachedAttributes","cachedUniforms","deleteProgram","_WebGLProgram","getTextureEncodingFromMap","gammaOverrideLinear","nVertexUniforms","nVertexMatrices","nClipPlanes","nClipIntersection","shaderIDs","allocateBones","getRenderTarget","gammaOutput","gammaInput","envMapMode","parameterNames","pl","pop","destroy","WebGLRenderList","renderItems","renderItemsIndex","lists","list","addLineNumbers","lines","split","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","lookTarget","lightPositionWorld","morphingFlag","skinningFlag","numberOfMaterialVariants","depthMaterials","distanceMaterials","materialCache","maxShadowMapSize","0","1","2","cubeDirections","cubeUps","cube2DViewPorts","useMorphing","useSkinning","depthMaterial","distanceMaterial","isPointLight","materialVariants","customMaterial","customDepthMaterial","customDistanceMaterial","variantIndex","keyA","keyB","materialsForVariant","cachedMaterial","disable","BLEND","faceCount","shadowCamera","vpWidth","vpHeight","pars","shadowMatrix","vpDimensions","getDepthMaterial","_Three","vertexBuffer","elementBuffer","uvOffset","getUniformLocation","uvScale","fogType","fogDepth","fillStyle","fillRect","CanvasTexture","sprites","CULL_FACE","enable","uniformMatrix4fv","activeTexture","TEXTURE0","uniform1i","oldFogType","sceneFogType","uniform3f","uniform1f","spritePosition","spriteRotation","spriteScale","uniform2f","uniform2fv","setBlending","ColorBuffer","locked","currentColorMask","currentColorClear","colorMask","lock","DepthBuffer","currentDepthMask","currentDepthFunc","currentDepthClear","DEPTH_TEST","depthMask","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","clearDepth","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","stencilFail","stencilZFail","stencilZPass","stencilOp","clearStencil","lineWidthAvailable","emptyTextures","currentFlipSided","currentCullFace","currentBlending","currentPremultipledAlpha","currentBlendEquation","currentBlendEquationAlpha","currentBlendSrc","currentBlendDst","currentBlendSrcAlpha","currentBlendDstAlpha","compressedTextureFormats","currentProgram","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","currentTextureSlot","currentBoundTextures","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","MAX_COMBINED_TEXTURE_IMAGE_UNITS","VERSION","createTexture","TEXTURE_CUBE_MAP","setFunc","frontFace","CW","CCW","BACK","FRONT","FRONT_AND_BACK","blendEquationSeparate","FUNC_ADD","blendFuncSeparate","ONE","blendFunc","SRC_ALPHA","ZERO","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","SRC_COLOR","disableVertexAttribArray","enableVertexAttribArray","vertexAttribDivisorANGLE","formats","COMPRESSED_TEXTURE_FORMATS","factor","units","POLYGON_OFFSET_FILL","SCISSOR_TEST","boundTexture","bindTexture","internalformat","border","compressedTexImage2D","pixels","texImage2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","RGBA","clampToMaxSize","maxSize","HTMLImageElement","HTMLCanvasElement","ImageBitmap","drawImage","isPowerOfTwo","makePowerOfTwo","floorPowerOfTwo","textureNeedsPowerOfTwo","textureNeedsGenerateMipmaps","generateMipmaps","videoTextures","onTextureDispose","deallocateTexture","onRenderTargetDispose","deallocateRenderTarget","LINEAR","__image__webglTextureCube","deleteTexture","__webglInit","renderTargetProperties","deleteFramebuffer","__webglDepthbuffer","deleteRenderbuffer","pixelStorei","UNPACK_FLIP_Y_WEBGL","flipY","UNPACK_PREMULTIPLY_ALPHA_WEBGL","premultiplyAlpha","UNPACK_ALIGNMENT","unpackAlignment","isPowerOfTwoImage","glFormat","glType","setTextureParameters","mipmap","mipmaps","DEPTH_COMPONENT","DEPTH_STENCIL","getCompressedTextureFormats","generateMipmap","__version","updateVideoTexture","complete","uploadTexture","isCompressed","isDataTexture","cubeImage","TEXTURE_WRAP_S","TEXTURE_WRAP_T","CLAMP_TO_EDGE","filterFallback","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","attachment","textureTarget","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","RGBA4","DepthTexture","webglDepthTexture","setupDepthTexture","createRenderbuffer","setupRenderBufferStorage","isTargetPowerOfTwo","createFramebuffer","setupFrameBufferTexture","setupDepthRenderbuffer","webglTexture","emptyTexture","emptyCubeTexture","UniformSetter","activeInfo","addr","setValue1f","setValue1i","setValue2fv","setValue3fv","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","mat2array","uniformMatrix2fv","setValue3fm","mat3array","uniformMatrix3fv","setValue4fm","mat4array","setValueT1","allocTextureUnit","setValueT6","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","flatten","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","allocTexUnits","setValueT6a","arrayCacheI32","nBlocks","blockSize","arrayCacheF32","SingleUniformSetter","PureArrayUniformSetter","UniformContainer","StructuredUniformSetter","RePathPart","ACTIVE_UNIFORMS","getActiveUniform","path","parseUniform","container","pathLength","lastIndex","matchEnd","idIsIndex","subscript","addUniform","next","uniformObject","parameter","REPEAT","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT_OES","ALPHA","RGB","LUMINANCE","LUMINANCE_ALPHA","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","MIN_EXT","MAX_EXT","UNSIGNED_INT_24_8_WEBGL","Fog","FogExp2","Scene","_Texture2","DEFAULT_IMAGE","CompressedTexture","images","textureId","DEFAULT_MAPPING","VideoTexture","video","readyState","HAVE_CURRENT_DATA","arrayMin"],"mappings":"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aAAAvG,uBAAAt9D,uDAAA,sDACA,IAAA8jE,aAAAxG,uBAAAt9D,uDAAA,sDACA,IAAA+jE,aAAAzG,uBAAAt9D,uDAAA,sDACA,IAAAgkE,aAAA1G,uBAAAt9D,uDAAA,sDACA,IAAAikE,aAAA3G,uBAAAt9D,uDAAA,sDACA,IAAAkkE,aAAA5G,uBAAAt9D,uDAAA,wIACA,IAAMmkE,aACFC,6CACAC,uDACAC,+CACAC,uCACAC,iDACAC,mCACAC,+CACAC,qBACAC,qDACAC,2DACAC,qEACAC,iEACAC,uDACAC,uCACAC,iDACAC,6CACAC,mCACAC,uBACAC,iEACAC,mDACAC,iEACAC,uDACAC,mDACAC,6DACAC,+CACAC,yDACAC,yCACAC,mDACAC,+CACAC,qCACAC,+BACAC,yCACAC,mCACAC,6CACAC,6DACAC,6CACAC,uDACAC,qDACAC,iCACAC,qDACAC,+DACAC,2DACAC,qEACAC,yCACAC,mDACAC,6DACAC,yDACAC,+CACAC,mCACAC,6CACAC,qDACAC,+DACAC,qDACAC,+DACAC,+CACAC,yDACAC,+CACAC,yCACAC,yDACAC,yBACAC,mEACAC,uCACAC,+CACAC,yDACAC,qDACAC,+DACAC,yDACAC,qDACAC,2CACAC,2DACAC,yCACAC,mDACAC,yCACAC,6CACAC,mDACAC,6DACAC,mDACAC,6DACAC,2CACAC,uCACAC,6BACAC,6CACAC,yCACAC,+BACAC,yCACAC,6BACAC,6BACAC,+BACAC,+BACAC,6CACAC,6CACAC,qCACAC,qCACAC,yCACAC,yCACAC,uCACAC,uCACAC,2CACAC,2CACAC,uCACAC,uCACAC,6CACAC,6CACAC,iCACAC,iCACAC,iCACAC,iCACAC,iCACAC;;;;;;;;4BC1NJC,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;;;;;;;4BCAAA,oBAAA;;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","file":"three.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./es/Three.js\");\n","export { WebGLRenderTargetCube } from \"./renderers/WebGLRenderTargetCube\";\nexport { WebGLRenderTarget } from \"./renderers/WebGLRenderTarget\";\nexport { WebGLRenderer } from \"./renderers/WebGLRenderer\";\n// export { WebGL2Renderer } from './renderers/WebGL2Renderer';\nexport { ShaderLib } from \"./renderers/shaders/ShaderLib\";\nexport { UniformsLib } from \"./renderers/shaders/UniformsLib\";\nexport { UniformsUtils } from \"./renderers/shaders/UniformsUtils\";\nexport { ShaderChunk } from \"./renderers/shaders/ShaderChunk\";\nexport { FogExp2 } from \"./scenes/FogExp2\";\nexport { Fog } from \"./scenes/Fog\";\nexport { Scene } from \"./scenes/Scene\";\nexport { Sprite } from \"./objects/Sprite\";\nexport { LOD } from \"./objects/LOD\";\nexport { SkinnedMesh } from \"./objects/SkinnedMesh\";\nexport { Skeleton } from \"./objects/Skeleton\";\nexport { Bone } from \"./objects/Bone\";\nexport { Mesh } from \"./objects/Mesh\";\nexport { LineSegments } from \"./objects/LineSegments\";\nexport { LineLoop } from \"./objects/LineLoop\";\nexport { Line } from \"./objects/Line\";\nexport { Points } from \"./objects/Points\";\nexport { Group } from \"./objects/Group\";\nexport { VideoTexture } from \"./textures/VideoTexture\";\nexport { DataTexture } from \"./textures/DataTexture\";\nexport { CompressedTexture } from \"./textures/CompressedTexture\";\nexport { CubeTexture } from \"./textures/CubeTexture\";\nexport { CanvasTexture } from \"./textures/CanvasTexture\";\nexport { DepthTexture } from \"./textures/DepthTexture\";\nexport { Texture } from \"./textures/Texture\";\nexport * from \"./geometries/Geometries\";\nexport * from \"./materials/Materials\";\n/*\nexport { CompressedTextureLoader } from './loaders/CompressedTextureLoader';\nexport { DataTextureLoader } from './loaders/DataTextureLoader';\nexport { CubeTextureLoader } from './loaders/CubeTextureLoader';\nexport { TextureLoader } from './loaders/TextureLoader';\nexport { ObjectLoader } from './loaders/ObjectLoader';\nexport { MaterialLoader } from './loaders/MaterialLoader';\nexport { BufferGeometryLoader } from './loaders/BufferGeometryLoader';\nexport { DefaultLoadingManager, LoadingManager } from './loaders/LoadingManager';\nexport { JSONLoader } from './loaders/JSONLoader';\nexport { ImageLoader } from './loaders/ImageLoader';\nexport { ImageBitmapLoader } from './loaders/ImageBitmapLoader';\nexport { FontLoader } from './loaders/FontLoader';\nexport { FileLoader } from './loaders/FileLoader';\nexport { Loader } from './loaders/Loader';\nexport { LoaderUtils } from './loaders/LoaderUtils';\nexport { Cache } from './loaders/Cache';\nexport { AudioLoader } from './loaders/AudioLoader';\n*/\nexport { SpotLightShadow } from \"./lights/SpotLightShadow\";\nexport { SpotLight } from \"./lights/SpotLight\";\nexport { PointLight } from \"./lights/PointLight\";\nexport { RectAreaLight } from \"./lights/RectAreaLight\";\nexport { HemisphereLight } from \"./lights/HemisphereLight\";\nexport { DirectionalLightShadow } from \"./lights/DirectionalLightShadow\";\nexport { DirectionalLight } from \"./lights/DirectionalLight\";\nexport { AmbientLight } from \"./lights/AmbientLight\";\nexport { LightShadow } from \"./lights/LightShadow\";\nexport { Light } from \"./lights/Light\";\n//export { StereoCamera } from './cameras/StereoCamera';\nexport { PerspectiveCamera } from \"./cameras/PerspectiveCamera\";\nexport { OrthographicCamera } from \"./cameras/OrthographicCamera\";\n//export { CubeCamera } from './cameras/CubeCamera';\nexport { ArrayCamera } from \"./cameras/ArrayCamera\";\nexport { Camera } from \"./cameras/Camera\";\nexport { AudioListenerWrapper as AudioListener } from \"./audio/AudioListener\";\nexport { PositionalAudio } from \"./audio/PositionalAudio\";\nexport { AudioContextWrapper as AudioContext } from \"./audio/AudioContext\";\nexport { AudioAnalyserWrapper as AudioAnalyser } from \"./audio/AudioAnalyser\";\nexport { AudioWrapper as Audio } from \"./audio/Audio\";\n/*\nexport { VectorKeyframeTrack } from './animation/tracks/VectorKeyframeTrack';\nexport { StringKeyframeTrack } from './animation/tracks/StringKeyframeTrack';\nexport { QuaternionKeyframeTrack } from './animation/tracks/QuaternionKeyframeTrack';\nexport { NumberKeyframeTrack } from './animation/tracks/NumberKeyframeTrack';\nexport { ColorKeyframeTrack } from './animation/tracks/ColorKeyframeTrack';\nexport { BooleanKeyframeTrack } from './animation/tracks/BooleanKeyframeTrack';\nexport { PropertyMixer } from './animation/PropertyMixer';\nexport { PropertyBinding } from './animation/PropertyBinding';\nexport { KeyframeTrack } from './animation/KeyframeTrack';\nexport { AnimationUtils } from './animation/AnimationUtils';\nexport { AnimationObjectGroup } from './animation/AnimationObjectGroup';\nexport { AnimationMixer } from './animation/AnimationMixer';\nexport { AnimationClip } from './animation/AnimationClip';\n*/\nexport { InstancedBufferGeometry } from \"./core/InstancedBufferGeometry\";\nexport { BufferGeometry } from \"./core/BufferGeometry\";\nexport { Geometry } from \"./core/Geometry\";\nexport { InterleavedBufferAttribute } from \"./core/InterleavedBufferAttribute\";\nexport { InstancedInterleavedBufferAttribute } from \"./core/InstancedInterleavedBufferAttribute\";\nexport { InstancedBufferAttribute } from \"./core/InstancedBufferAttribute\";\nexport * from \"./core/BufferAttribute\";\nexport { Face3 } from \"./core/Face3\";\nexport { Object3D } from \"./core/Object3D\";\nexport { Raycaster } from \"./core/Raycaster\";\nexport { Layers } from \"./core/Layers\";\nexport { EventDispatcher } from \"./core/EventDispatcher\";\nexport { Clock } from \"./core/Clock\";\n/*\nexport { QuaternionLinearInterpolant } from './math/interpolants/QuaternionLinearInterpolant';\nexport { LinearInterpolant } from './math/interpolants/LinearInterpolant';\nexport { DiscreteInterpolant } from './math/interpolants/DiscreteInterpolant';\nexport { CubicInterpolant } from './math/interpolants/CubicInterpolant';\nexport { Interpolant } from './math/Interpolant';\n*/\nexport { Triangle } from \"./math/Triangle\";\nexport { MathUtil as Math } from \"./math/Math\";\nexport { Spherical } from \"./math/Spherical\";\n//export { Cylindrical } from './math/Cylindrical';\nexport { Plane } from \"./math/Plane\";\nexport { Frustum } from \"./math/Frustum\";\nexport { Sphere } from \"./math/Sphere\";\nexport { Ray } from \"./math/Ray\";\nexport { Matrix2 } from \"./math/Matrix2\";\nexport { Matrix3 } from \"./math/Matrix3\";\nexport { Matrix4 } from \"./math/Matrix4\";\nexport { Box3 } from \"./math/Box3\";\n//export { Box2 } from './math/Box2';\nexport { Line3 } from \"./math/Line3\";\nexport { Euler } from \"./math/Euler\";\nexport { Vector4 } from \"./math/Vector4\";\nexport { Vector3 } from \"./math/Vector3\";\nexport { Vector2 } from \"./math/Vector2\";\nexport { Quaternion } from \"./math/Quaternion\";\nexport { Color } from \"./math/Color\";\nexport { ImmediateRenderObject } from \"./extras/objects/ImmediateRenderObject\";\n/*\nexport { VertexNormalsHelper } from './helpers/VertexNormalsHelper';\nexport { SpotLightHelper } from './helpers/SpotLightHelper';\nexport { SkeletonHelper } from './helpers/SkeletonHelper';\nexport { PointLightHelper } from './helpers/PointLightHelper';\nexport { RectAreaLightHelper } from './helpers/RectAreaLightHelper';\nexport { HemisphereLightHelper } from './helpers/HemisphereLightHelper';\nexport { GridHelper } from './helpers/GridHelper';\nexport { PolarGridHelper } from './helpers/PolarGridHelper';\nexport { FaceNormalsHelper } from './helpers/FaceNormalsHelper';\nexport { DirectionalLightHelper } from './helpers/DirectionalLightHelper';\nexport { CameraHelper } from './helpers/CameraHelper';\nexport { BoxHelper } from './helpers/BoxHelper';\nexport { Box3Helper } from './helpers/Box3Helper';\nexport { PlaneHelper } from './helpers/PlaneHelper';\nexport { ArrowHelper } from './helpers/ArrowHelper';\nexport { AxesHelper } from './helpers/AxesHelper';\nexport * from './extras/curves/Curves';\nexport { Shape } from './extras/core/Shape';\nexport { Path } from './extras/core/Path';\nexport { ShapePath } from './extras/core/ShapePath';\nexport { Font } from './extras/core/Font';\nexport { CurvePath } from './extras/core/CurvePath';\nexport { Curve } from './extras/core/Curve';\nexport { ShapeUtils } from './extras/ShapeUtils';\n*/\nexport { WebGLUtils } from \"./renderers/webgl/WebGLUtils\";\nexport * from \"./constants\";\n","import { Object3D } from \"../core/Object3D\";\nexport class AudioWrapper extends Object3D {\n    constructor(listener) {\n        super();\n        this.type = \"Audio\";\n        this.startTime = 0;\n        this.offset = 0;\n        this.isPlaying = false;\n        this.hasPlaybackControl = true;\n        this.sourceType = \"empty\";\n        this.autoplay = false;\n        this.buffer = null;\n        this.loop = false;\n        this.playbackRate = 1;\n        this.filters = [];\n        this.context = listener.context;\n        this.gain = this.context.createGain();\n        this.gain.connect(listener.getInput());\n    }\n    getOutput() {\n        return this.gain;\n    }\n    setNodeSource(audioNode) {\n        this.hasPlaybackControl = false;\n        this.source = audioNode;\n        this.sourceType = \"audioNode\";\n        this.connect();\n        return this;\n    }\n    setBuffer(audioBuffer) {\n        this.buffer = audioBuffer;\n        this.sourceType = \"buffer\";\n        if (this.autoplay)\n            this.play();\n        return this;\n    }\n    play() {\n        if (this.isPlaying === true) {\n            console.warn(`THREE.Audio: Audio is already playing.`);\n            return this;\n        }\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return this;\n        }\n        const source = this.context.createBufferSource();\n        source.buffer = this.buffer;\n        source.loop = this.loop;\n        source.onended = this.onEnded.bind(this);\n        source.playbackRate.setValueAtTime(this.playbackRate, this.startTime);\n        this.startTime = this.context.currentTime;\n        source.start(this.startTime, this.offset);\n        this.isPlaying = true;\n        this.source = source;\n        return this.connect();\n    }\n    pause() {\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return this;\n        }\n        if (this.isPlaying === true) {\n            this.source.stop();\n            this.offset += (this.context.currentTime - this.startTime) * this.playbackRate;\n            this.isPlaying = false;\n        }\n        return this;\n    }\n    stop() {\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return this;\n        }\n        this.source.stop();\n        this.offset = 0;\n        this.isPlaying = false;\n        return this;\n    }\n    connect() {\n        if (this.filters.length > 0) {\n            this.source.connect(this.filters[0]);\n            for (let i = 1, l = this.filters.length; i < l; i++) {\n                this.filters[i - 1].connect(this.filters[i]);\n            }\n            this.filters[this.filters.length - 1].connect(this.getOutput());\n        }\n        else {\n            this.source.connect(this.getOutput());\n        }\n        return this;\n    }\n    disconnect() {\n        if (this.filters.length > 0) {\n            this.source.disconnect(this.filters[0]);\n            for (let i = 1, l = this.filters.length; i < l; i++) {\n                this.filters[i - 1].disconnect(this.filters[i]);\n            }\n            this.filters[this.filters.length - 1].disconnect(this.getOutput());\n        }\n        else {\n            this.source.disconnect(this.getOutput());\n        }\n        return this;\n    }\n    getFilters() {\n        return this.filters;\n    }\n    setFilters(value = []) {\n        if (this.isPlaying === true) {\n            this.disconnect();\n            this.filters = value;\n            this.connect();\n        }\n        else {\n            this.filters = value;\n        }\n        return this;\n    }\n    getFilter() {\n        return this.getFilters()[0];\n    }\n    setFilter(filter) {\n        return this.setFilters(filter ? [filter] : []);\n    }\n    setPlaybackRate(value) {\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return this;\n        }\n        this.playbackRate = value;\n        if (this.isPlaying === true) {\n            this.source.playbackRate.setValueAtTime(this.playbackRate, this.context.currentTime);\n        }\n        return this;\n    }\n    getPlaybackRate() {\n        return this.playbackRate;\n    }\n    onEnded() {\n        this.isPlaying = false;\n    }\n    getLoop() {\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return false;\n        }\n        return this.loop;\n    }\n    setLoop(value) {\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return this;\n        }\n        this.loop = value;\n        if (this.isPlaying === true) {\n            this.source.loop = this.loop;\n        }\n        return this;\n    }\n    getVolume() {\n        return this.gain.gain.value;\n    }\n    setVolume(value) {\n        this.gain.gain.value = value;\n        return this;\n    }\n}\n","export class AudioAnalyserWrapper {\n    constructor(audio, fftSize = 2048) {\n        this.analyser = audio.context.createAnalyser();\n        this.analyser.fftSize = fftSize;\n        this.data = new Uint8Array(this.analyser.frequencyBinCount);\n        audio.getOutput().connect(this.analyser);\n    }\n    getFrequencyData() {\n        this.analyser.getByteFrequencyData(this.data);\n        return this.data;\n    }\n    getAverageFrequency() {\n        let value = 0;\n        const data = this.getFrequencyData();\n        for (let i = 0; i < data.length; i++) {\n            value += data[i];\n        }\n        return value / data.length;\n    }\n}\n","export class AudioContextWrapper {\n    static getContext() {\n        if (AudioContextWrapper.context === undefined) {\n            AudioContextWrapper.context = new (window.AudioContext ||\n                window.webkitAudioContext)();\n        }\n        return AudioContextWrapper.context;\n    }\n    static setContext(value) {\n        AudioContextWrapper.context = value;\n    }\n}\nAudioContextWrapper.context = undefined;\n","import { Object3D } from \"../core/Object3D\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { AudioContextWrapper } from \"./AudioContext\";\nexport class AudioListenerWrapper extends Object3D {\n    constructor() {\n        super();\n        this.type = \"AudioListener\";\n        this.context = AudioContextWrapper.getContext();\n        this.filter = null;\n        this.gain = this.context.createGain();\n        this.gain.connect(this.context.destination);\n    }\n    getInput() {\n        return this.gain;\n    }\n    removeFilter() {\n        if (this.filter !== null) {\n            this.gain.disconnect(this.filter);\n            this.filter.disconnect(this.context.destination);\n            this.gain.connect(this.context.destination);\n            this.filter = null;\n        }\n    }\n    getFilter() {\n        return this.filter;\n    }\n    setFilter(value) {\n        if (this.filter !== null) {\n            this.gain.disconnect(this.filter);\n            this.filter.disconnect(this.context.destination);\n        }\n        else {\n            this.gain.disconnect(this.context.destination);\n        }\n        this.filter = value;\n        this.gain.connect(this.filter);\n        this.filter.connect(this.context.destination);\n        return this;\n    }\n    getMasterVolume() {\n        return this.gain.gain.value;\n    }\n    setMasterVolume(value) {\n        this.gain.gain.value = value;\n        return this;\n    }\n    updateMatrixWorld(force = false) {\n        super.updateMatrixWorld(force);\n        const position = new Vector3();\n        const quaternion = new Quaternion();\n        const scale = new Vector3();\n        const orientation = new Vector3();\n        const listener = this.context.listener;\n        const up = this.up;\n        this.matrixWorld.decompose(position, quaternion, scale);\n        orientation.set(0, 0, -1).applyQuaternion(quaternion);\n        if (listener.positionX) {\n            listener.positionX.setValueAtTime(position.x, this.context.currentTime);\n            listener.positionY.setValueAtTime(position.y, this.context.currentTime);\n            listener.positionZ.setValueAtTime(position.z, this.context.currentTime);\n            listener.forwardX.setValueAtTime(orientation.x, this.context.currentTime);\n            listener.forwardY.setValueAtTime(orientation.y, this.context.currentTime);\n            listener.forwardZ.setValueAtTime(orientation.z, this.context.currentTime);\n            listener.upX.setValueAtTime(up.x, this.context.currentTime);\n            listener.upY.setValueAtTime(up.y, this.context.currentTime);\n            listener.upZ.setValueAtTime(up.z, this.context.currentTime);\n        }\n        else {\n            listener.setPosition(position.x, position.y, position.z);\n            listener.setOrientation(orientation.x, orientation.y, orientation.z, up.x, up.y, up.z);\n        }\n        return this;\n    }\n}\n","import { Vector3 } from \"../math/Vector3\";\nimport { AudioWrapper } from \"./Audio\";\nexport class PositionalAudio extends AudioWrapper {\n    constructor(listener) {\n        super(listener);\n        this.panner = this.context.createPanner();\n        this.panner.connect(this.gain);\n    }\n    getOutput() {\n        return this.panner;\n    }\n    getRefDistance() {\n        return this.panner.refDistance;\n    }\n    setRefDistance(value) {\n        this.panner.refDistance = value;\n    }\n    getRolloffFactor() {\n        return this.panner.rolloffFactor;\n    }\n    setRolloffFactor(value) {\n        this.panner.rolloffFactor = value;\n    }\n    getDistanceModel() {\n        return this.panner.distanceModel;\n    }\n    setDistanceModel(value) {\n        this.panner.distanceModel = value;\n    }\n    getMaxDistance() {\n        return this.panner.maxDistance;\n    }\n    setMaxDistance(value) {\n        this.panner.maxDistance = value;\n    }\n    updateMatrixWorld(force = false) {\n        super.updateMatrixWorld(force);\n        const position = new Vector3();\n        position.setFromMatrixPosition(this.matrixWorld);\n        this.panner.setPosition(position.x, position.y, position.z);\n        return this;\n    }\n}\n","import { PerspectiveCamera } from \"./PerspectiveCamera\";\nexport class ArrayCamera extends PerspectiveCamera {\n    constructor(cameras = []) {\n        super();\n        this.cameras = [];\n        this.cameras = cameras;\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Vector3 } from \"../math/Vector3\";\nexport class Camera extends Object3D {\n    constructor() {\n        super();\n        this.type = \"Camera\";\n        this.matrixWorldInverse = new Matrix4();\n        this.projectionMatrix = new Matrix4();\n    }\n    updateMatrixWorld(force = false) {\n        super.updateMatrixWorld(force);\n        this.matrixWorldInverse.getInverse(this.matrixWorld);\n        return this;\n    }\n    copy(source, recursive = true) {\n        super.copy(source, recursive);\n        this.matrixWorldInverse.copy(source.matrixWorldInverse);\n        this.projectionMatrix.copy(source.projectionMatrix);\n        return this;\n    }\n    get worldDirection() {\n        return new Vector3().set(0, 0, -1).applyQuaternion(this.worldQuaternion);\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n","import { Camera } from \"./Camera\";\nexport class OrthographicCamera extends Camera {\n    constructor(left = 0, right = 0, top = 0, bottom = 0, near = 0.1, far = 2000) {\n        super();\n        this.type = \"OrthographicCamera\";\n        this._left = 0;\n        this._right = 0;\n        this._top = 0;\n        this._bottom = 0;\n        this._zoom = 1;\n        this._near = 0.1;\n        this._far = 2000;\n        this._view = null;\n        this._left = left;\n        this._right = right;\n        this._top = top;\n        this._bottom = bottom;\n        this._near = near;\n        this._far = far;\n        this.updateProjectionMatrix();\n    }\n    get zoom() {\n        return this._zoom;\n    }\n    set zoom(_zoom) {\n        this._zoom = _zoom;\n        this.updateProjectionMatrix();\n    }\n    get near() {\n        return this._near;\n    }\n    set near(_near) {\n        this._near = _near;\n        this.updateProjectionMatrix();\n    }\n    get far() {\n        return this._far;\n    }\n    set far(_far) {\n        this._far = _far;\n        this.updateProjectionMatrix();\n    }\n    get left() {\n        return this._left;\n    }\n    set left(_left) {\n        this._left = _left;\n        this.updateProjectionMatrix();\n    }\n    get right() {\n        return this._right;\n    }\n    set right(_right) {\n        this._right = _right;\n        this.updateProjectionMatrix();\n    }\n    get top() {\n        return this._top;\n    }\n    set top(_top) {\n        this._top = _top;\n        this.updateProjectionMatrix();\n    }\n    get bottom() {\n        return this._bottom;\n    }\n    set bottom(_bottom) {\n        this._bottom = _bottom;\n        this.updateProjectionMatrix();\n    }\n    get view() {\n        return this._view;\n    }\n    setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n        this._view = {\n            enabled: true,\n            fullHeight: fullHeight,\n            fullWidth: fullWidth,\n            height: height,\n            offsetX: x,\n            offsetY: y,\n            width: width,\n        };\n        return this.updateProjectionMatrix();\n    }\n    clearViewOffset() {\n        if (this.view !== null) {\n            this.view.enabled = false;\n        }\n        return this.updateProjectionMatrix();\n    }\n    updateProjectionMatrix() {\n        const dx = (this.right - this.left) / (2 * this.zoom);\n        const dy = (this.top - this.bottom) / (2 * this.zoom);\n        const cx = (this.right + this.left) / 2;\n        const cy = (this.top + this.bottom) / 2;\n        let left = cx - dx;\n        let right = cx + dx;\n        let top = cy + dy;\n        let bottom = cy - dy;\n        if (this.view !== null && this.view.enabled) {\n            const zoomW = this.zoom / (this.view.width / this.view.fullWidth);\n            const zoomH = this.zoom / (this.view.height / this.view.fullHeight);\n            const scaleW = (this.right - this.left) / this._view.width;\n            const scaleH = (this.top - this.bottom) / this._view.height;\n            left += scaleW * (this.view.offsetX / zoomW);\n            right = left + scaleW * (this.view.width / zoomW);\n            top -= scaleH * (this.view.offsetY / zoomH);\n            bottom = top - scaleH * (this.view.height / zoomH);\n        }\n        this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n        return this;\n    }\n    copy(source) {\n        super.copy(source);\n        this._top = source.top;\n        this._bottom = source.bottom;\n        this._left = source.left;\n        this._right = source.right;\n        this._zoom = source.zoom;\n        this._near = source.near;\n        this._far = source.far;\n        this._view = source.view === null ? null : Object.assign({}, source.view);\n        return this.updateProjectionMatrix();\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n","import { MathUtil } from \"../math/Math\";\nimport { Camera } from \"./Camera\";\nexport class PerspectiveCamera extends Camera {\n    constructor(fov = 50, aspect = 1, near = 0.1, far = 2000) {\n        super();\n        this.type = \"PerspectiveCamera\";\n        this.focus = 10;\n        this._fov = 50;\n        this._zoom = 1;\n        this._near = 0.1;\n        this._far = 2000;\n        this._aspect = 1;\n        this._view = null;\n        /**\n         * width of the film (default in millimeters)\n         * @type {number}\n         */\n        this._filmGauge = 35;\n        /**\n         * horizontal film offset (same unit as gauge)\n         * @type {number}\n         */\n        this._filmOffset = 0;\n        this._fov = fov;\n        this._aspect = aspect;\n        this._near = near;\n        this._far = far;\n        this.updateProjectionMatrix();\n    }\n    get fov() {\n        return this._fov;\n    }\n    set fov(_fov) {\n        this._fov = _fov;\n        this.updateProjectionMatrix();\n    }\n    get zoom() {\n        return this._zoom;\n    }\n    set zoom(_zoom) {\n        this._zoom = _zoom;\n        this.updateProjectionMatrix();\n    }\n    get near() {\n        return this._near;\n    }\n    set near(_near) {\n        this._near = _near;\n        this.updateProjectionMatrix();\n    }\n    get far() {\n        return this._far;\n    }\n    set far(_far) {\n        this._far = _far;\n        this.updateProjectionMatrix();\n    }\n    get aspect() {\n        return this._aspect;\n    }\n    set aspect(_aspect) {\n        this._aspect = _aspect;\n        this.updateProjectionMatrix();\n    }\n    get view() {\n        return this._view;\n    }\n    get filmGauge() {\n        return this._filmGauge;\n    }\n    set filmGauge(_filmGauge) {\n        this._filmGauge = _filmGauge;\n        this.updateProjectionMatrix();\n    }\n    get filmOffset() {\n        return this._filmOffset;\n    }\n    set filmOffset(_filmOffset) {\n        this._filmOffset = _filmOffset;\n        this.updateProjectionMatrix();\n    }\n    /**\n     * see http://www.bobatkins.com/photography/technical/field_of_view.html\n     * Sets the FOV by focal length in respect to the current .filmGauge.\n     *\n     * The default film gauge is 35, so that the focal length can be specified for\n     * a 35mm (full frame) camera.\n     *\n     * Values for focal length and film gauge must have the same unit.\n     * @param focalLength\n     * @returns {PerspectiveCamera}\n     */\n    setFocalLength(focalLength) {\n        const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n        this._fov = MathUtil.RAD2DEG * 2 * Math.atan(vExtentSlope);\n        return this.updateProjectionMatrix();\n    }\n    getFocalLength() {\n        const vExtentSlope = Math.tan(MathUtil.DEG2RAD * 0.5 * this.fov);\n        return 0.5 * this.getFilmHeight() / vExtentSlope;\n    }\n    getEffectiveFOV() {\n        return MathUtil.RAD2DEG * 2 * Math.atan(Math.tan(MathUtil.DEG2RAD * 0.5 * this.fov) / this.zoom);\n    }\n    /**\n     * film not completely covered in portrait format (aspect < 1)\n     * @returns {number}\n     */\n    getFilmWidth() {\n        return this.filmGauge * Math.min(this.aspect, 1);\n    }\n    /**\n     * film not completely covered in landscape format (aspect > 1)\n     * @returns {number}\n     */\n    getFilmHeight() {\n        return this.filmGauge / Math.max(this.aspect, 1);\n    }\n    /**\n     * Sets an offset in a larger frustum. This is useful for multi-window or\n     * multi-monitor/multi-machine setups.\n     *\n     * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n     * the monitors are in grid like this\n     *\n     *   +---+---+---+\n     *   | A | B | C |\n     *   +---+---+---+\n     *   | D | E | F |\n     *   +---+---+---+\n     *\n     * then for each monitor you would call it like this\n     *\n     *   var w = 1920;\n     *   var h = 1080;\n     *   var fullWidth = w * 3;\n     *   var fullHeight = h * 2;\n     *\n     *   --A--\n     *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n     *   --B--\n     *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n     *   --C--\n     *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n     *   --D--\n     *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n     *   --E--\n     *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n     *   --F--\n     *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n     *\n     *   Note there is no reason monitors have to be the same size or in a grid.\n     */\n    setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n        this._view = {\n            enabled: true,\n            fullHeight: fullHeight,\n            fullWidth: fullWidth,\n            height: height,\n            offsetX: x,\n            offsetY: y,\n            width: width,\n        };\n        return this.updateProjectionMatrix();\n    }\n    clearViewOffset() {\n        if (this.view !== null) {\n            this.view.enabled = false;\n        }\n        return this.updateProjectionMatrix();\n    }\n    updateProjectionMatrix() {\n        const near = this.near;\n        let top = near * Math.tan(MathUtil.DEG2RAD * 0.5 * this.fov) / this.zoom;\n        let height = 2 * top;\n        let width = this.aspect * height;\n        let left = -0.5 * width;\n        const view = this.view;\n        if (this.view !== null && this.view.enabled) {\n            const fullWidth = view.fullWidth, fullHeight = view.fullHeight;\n            left += view.offsetX * width / fullWidth;\n            top -= view.offsetY * height / fullHeight;\n            width *= view.width / fullWidth;\n            height *= view.height / fullHeight;\n        }\n        const skew = this.filmOffset;\n        if (skew !== 0)\n            left += near * skew / this.getFilmWidth();\n        this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n        return this;\n    }\n    copy(source) {\n        super.copy(source);\n        this._fov = source.fov;\n        this._zoom = source.zoom;\n        this._near = source.near;\n        this._far = source.far;\n        this.focus = source.focus;\n        this._aspect = source.aspect;\n        this._view = source.view === null ? null : Object.assign({}, source.view);\n        this._filmGauge = source.filmGauge;\n        this._filmOffset = source.filmOffset;\n        return this.updateProjectionMatrix();\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n","/* tslint:disable */\nexport const REVISION = \"90dev\";\nexport const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\nexport const CullFaceNone = 0;\nexport const CullFaceBack = 1;\nexport const CullFaceFront = 2;\nexport const CullFaceFrontBack = 3;\nexport const FrontFaceDirectionCW = 0;\nexport const FrontFaceDirectionCCW = 1;\nexport const BasicShadowMap = 0;\nexport const PCFShadowMap = 1;\nexport const PCFSoftShadowMap = 2;\nexport const FrontSide = 0;\nexport const BackSide = 1;\nexport const DoubleSide = 2;\nexport const FlatShading = 1;\nexport const SmoothShading = 2;\nexport const NoColors = 0;\nexport const FaceColors = 1;\nexport const VertexColors = 2;\nexport const NoBlending = 0;\nexport const NormalBlending = 1;\nexport const AdditiveBlending = 2;\nexport const SubtractiveBlending = 3;\nexport const MultiplyBlending = 4;\nexport const CustomBlending = 5;\nexport const AddEquation = 100;\nexport const SubtractEquation = 101;\nexport const ReverseSubtractEquation = 102;\nexport const MinEquation = 103;\nexport const MaxEquation = 104;\nexport const ZeroFactor = 200;\nexport const OneFactor = 201;\nexport const SrcColorFactor = 202;\nexport const OneMinusSrcColorFactor = 203;\nexport const SrcAlphaFactor = 204;\nexport const OneMinusSrcAlphaFactor = 205;\nexport const DstAlphaFactor = 206;\nexport const OneMinusDstAlphaFactor = 207;\nexport const DstColorFactor = 208;\nexport const OneMinusDstColorFactor = 209;\nexport const SrcAlphaSaturateFactor = 210;\nexport const NeverDepth = 0;\nexport const AlwaysDepth = 1;\nexport const LessDepth = 2;\nexport const LessEqualDepth = 3;\nexport const EqualDepth = 4;\nexport const GreaterEqualDepth = 5;\nexport const GreaterDepth = 6;\nexport const NotEqualDepth = 7;\nexport const MultiplyOperation = 0;\nexport const MixOperation = 1;\nexport const AddOperation = 2;\nexport const NoToneMapping = 0;\nexport const LinearToneMapping = 1;\nexport const ReinhardToneMapping = 2;\nexport const Uncharted2ToneMapping = 3;\nexport const CineonToneMapping = 4;\nexport const UVMapping = 300;\nexport const CubeReflectionMapping = 301;\nexport const CubeRefractionMapping = 302;\nexport const EquirectangularReflectionMapping = 303;\nexport const EquirectangularRefractionMapping = 304;\nexport const SphericalReflectionMapping = 305;\nexport const CubeUVReflectionMapping = 306;\nexport const CubeUVRefractionMapping = 307;\nexport const RepeatWrapping = 1000;\nexport const ClampToEdgeWrapping = 1001;\nexport const MirroredRepeatWrapping = 1002;\nexport const NearestFilter = 1003;\nexport const NearestMipMapNearestFilter = 1004;\nexport const NearestMipMapLinearFilter = 1005;\nexport const LinearFilter = 1006;\nexport const LinearMipMapNearestFilter = 1007;\nexport const LinearMipMapLinearFilter = 1008;\nexport const UnsignedByteType = 1009;\nexport const ByteType = 1010;\nexport const ShortType = 1011;\nexport const UnsignedShortType = 1012;\nexport const IntType = 1013;\nexport const UnsignedIntType = 1014;\nexport const FloatType = 1015;\nexport const HalfFloatType = 1016;\nexport const UnsignedShort4444Type = 1017;\nexport const UnsignedShort5551Type = 1018;\nexport const UnsignedShort565Type = 1019;\nexport const UnsignedInt248Type = 1020;\nexport const AlphaFormat = 1021;\nexport const RGBFormat = 1022;\nexport const RGBAFormat = 1023;\nexport const LuminanceFormat = 1024;\nexport const LuminanceAlphaFormat = 1025;\nexport const RGBEFormat = RGBAFormat;\nexport const DepthFormat = 1026;\nexport const DepthStencilFormat = 1027;\nexport const RGB_S3TC_DXT1_Format = 33776;\nexport const RGBA_S3TC_DXT1_Format = 33777;\nexport const RGBA_S3TC_DXT3_Format = 33778;\nexport const RGBA_S3TC_DXT5_Format = 33779;\nexport const RGB_PVRTC_4BPPV1_Format = 35840;\nexport const RGB_PVRTC_2BPPV1_Format = 35841;\nexport const RGBA_PVRTC_4BPPV1_Format = 35842;\nexport const RGBA_PVRTC_2BPPV1_Format = 35843;\nexport const RGB_ETC1_Format = 36196;\nexport const RGBA_ASTC_4x4_Format = 37808;\nexport const RGBA_ASTC_5x4_Format = 37809;\nexport const RGBA_ASTC_5x5_Format = 37810;\nexport const RGBA_ASTC_6x5_Format = 37811;\nexport const RGBA_ASTC_6x6_Format = 37812;\nexport const RGBA_ASTC_8x5_Format = 37813;\nexport const RGBA_ASTC_8x6_Format = 37814;\nexport const RGBA_ASTC_8x8_Format = 37815;\nexport const RGBA_ASTC_10x5_Format = 37816;\nexport const RGBA_ASTC_10x6_Format = 37817;\nexport const RGBA_ASTC_10x8_Format = 37818;\nexport const RGBA_ASTC_10x10_Format = 37819;\nexport const RGBA_ASTC_12x10_Format = 37820;\nexport const RGBA_ASTC_12x12_Format = 37821;\nexport const LoopOnce = 2200;\nexport const LoopRepeat = 2201;\nexport const LoopPingPong = 2202;\nexport const InterpolateDiscrete = 2300;\nexport const InterpolateLinear = 2301;\nexport const InterpolateSmooth = 2302;\nexport const ZeroCurvatureEnding = 2400;\nexport const ZeroSlopeEnding = 2401;\nexport const WrapAroundEnding = 2402;\nexport const TrianglesDrawMode = 0;\nexport const TriangleStripDrawMode = 1;\nexport const TriangleFanDrawMode = 2;\nexport const LinearEncoding = 3000;\nexport const sRGBEncoding = 3001;\nexport const GammaEncoding = 3007;\nexport const RGBEEncoding = 3002;\nexport const LogLuvEncoding = 3003;\nexport const RGBM7Encoding = 3004;\nexport const RGBM16Encoding = 3005;\nexport const RGBDEncoding = 3006;\nexport const BasicDepthPacking = 3200;\nexport const RGBADepthPacking = 3201;\n","import { Color } from \"../math/Color\";\nimport { MathUtil } from \"../math/Math\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Vector4 } from \"../math/Vector4\";\nexport class BufferAttribute {\n    constructor(array, itemSize = 0, normalized = false) {\n        this.uuid = MathUtil.generateUUID();\n        this.name = \"\";\n        this.itemSize = 1;\n        this.count = 0;\n        this.normalized = false;\n        this.dynamic = false;\n        this.updateRange = { offset: 0, count: -1 };\n        this.version = 0;\n        this.array = array;\n        this.itemSize = itemSize;\n        this.count = array !== undefined ? array.length / itemSize : 0;\n        this.normalized = normalized;\n    }\n    set needsUpdate(value) {\n        if (value === true)\n            this.version++;\n    }\n    setArray(array) {\n        this.count = array !== undefined ? array.length / this.itemSize : 0;\n        this.array = array;\n        return this;\n    }\n    setDynamic(value) {\n        this.dynamic = value;\n        return this;\n    }\n    copy(source) {\n        this.array = new source.array.constructor();\n        this.itemSize = source.itemSize;\n        this.count = source.count;\n        this.normalized = source.normalized;\n        this.dynamic = source.dynamic;\n        return this;\n    }\n    set(value, offset = 0) {\n        this.array.set(value, offset);\n        return this;\n    }\n    get(offset = 0, length = 1) {\n        return this.array.slice(offset, length);\n    }\n    copyAt(index1, attribute, index2) {\n        index1 *= this.itemSize;\n        index2 *= attribute.itemSize;\n        for (let i = 0, l = this.itemSize; i < l; i++) {\n            this.array[index1 + i] = attribute.array[index2 + i];\n        }\n        return this;\n    }\n    copyArray(array) {\n        this.array.set(array);\n        return this;\n    }\n    copyColorsArray(colors) {\n        const array = this.array;\n        let offset = 0;\n        for (let i = 0, l = colors.length; i < l; i++) {\n            const color = colors[i] || new Color();\n            array[offset++] = color.r;\n            array[offset++] = color.g;\n            array[offset++] = color.b;\n        }\n        return this;\n    }\n    /**\n     * TODO question https://discourse.threejs.org/t/question-about-fromdirectgeometry-function-of-buffergeometry/1890/2\n     * @param indices\n     * @returns {BufferAttribute}\n     public copyIndicesArray(indices: Face3[]): BufferAttribute {\n        const array: TypedArray = this.array;\n        let offset: number = 0;\n        for (let i: number = 0, l: number = indices.length; i < l; i++) {\n            const index = indices[i];\n            array[offset++] = index.a;\n            array[offset++] = index.b;\n            array[offset++] = index.c;\n        }\n        return this;\n    }\n     */\n    copyVector2sArray(vectors) {\n        const array = this.array;\n        let offset = 0;\n        for (let i = 0, l = vectors.length; i < l; i++) {\n            const vector = vectors[i] || new Vector2();\n            array[offset++] = vector.x;\n            array[offset++] = vector.y;\n        }\n        return this;\n    }\n    copyVector3sArray(vectors) {\n        const array = this.array;\n        let offset = 0;\n        for (let i = 0, l = vectors.length; i < l; i++) {\n            const vector = vectors[i] || new Vector3();\n            array[offset++] = vector.x;\n            array[offset++] = vector.y;\n            array[offset++] = vector.z;\n        }\n        return this;\n    }\n    copyVector4sArray(vectors) {\n        const array = this.array;\n        let offset = 0;\n        for (let i = 0, l = vectors.length; i < l; i++) {\n            const vector = vectors[i] || new Vector4();\n            array[offset++] = vector.x;\n            array[offset++] = vector.y;\n            array[offset++] = vector.z;\n            array[offset++] = vector.w;\n        }\n        return this;\n    }\n    setProperty(index, property, value) {\n        property = property.toLowerCase();\n        if (property && property.length <= 4 && property.replace(/[xyzw]/g, \"\").length === 0) {\n            const offsetMap = { x: 0, y: 1, z: 2 };\n            if (property.length === 1 && typeof value === \"number\") {\n                this.array[index * this.itemSize + offsetMap[property.charAt(0)]] = value;\n            }\n            else if (property.length === 2 && value instanceof Vector2) {\n                this.array[index * this.itemSize + offsetMap[property.charAt(0)]] = value.x;\n                this.array[index * this.itemSize + offsetMap[property.charAt(1)]] = value.y;\n            }\n            else if (property.length === 3 && value instanceof Vector3) {\n                this.array[index * this.itemSize + offsetMap[property.charAt(0)]] = value.x;\n                this.array[index * this.itemSize + offsetMap[property.charAt(1)]] = value.y;\n                this.array[index * this.itemSize + offsetMap[property.charAt(2)]] = value.z;\n            }\n            else if (property.length === 4 && value instanceof Vector4) {\n                this.array[index * this.itemSize + offsetMap[property.charAt(0)]] = value.x;\n                this.array[index * this.itemSize + offsetMap[property.charAt(1)]] = value.y;\n                this.array[index * this.itemSize + offsetMap[property.charAt(2)]] = value.z;\n                this.array[index * this.itemSize + offsetMap[property.charAt(3)]] = value.w;\n            }\n        }\n        return this;\n    }\n    getProperty(index, property) {\n        property = property.toLowerCase();\n        if (property && property.length <= 4 && property.replace(/[xyzw]/g, \"\").length === 0) {\n            const offsetMap = { x: 0, y: 1, z: 2 };\n            if (property.length === 1) {\n                return this.array[index * this.itemSize + offsetMap[property.charAt(0)]];\n            }\n            else if (property.length === 2) {\n                return new Vector2(this.array[index * this.itemSize + offsetMap[property.charAt(0)]], this.array[index * this.itemSize + offsetMap[property.charAt(1)]]);\n            }\n            else if (property.length === 3) {\n                return new Vector3(this.array[index * this.itemSize + offsetMap[property.charAt(0)]], this.array[index * this.itemSize + offsetMap[property.charAt(1)]], this.array[index * this.itemSize + offsetMap[property.charAt(2)]]);\n            }\n            else if (property.length === 4) {\n                return new Vector4(this.array[index * this.itemSize + offsetMap[property.charAt(0)]], this.array[index * this.itemSize + offsetMap[property.charAt(1)]], this.array[index * this.itemSize + offsetMap[property.charAt(2)]], this.array[index * this.itemSize + offsetMap[property.charAt(3)]]);\n            }\n        }\n        return undefined;\n    }\n    clone() {\n        return new this.constructor(this.array, this.itemSize, true).copy(this);\n    }\n}\nexport class Int8BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n        super(new Int8Array(array), itemSize, normalized);\n    }\n}\nexport class Uint8BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n        super(new Uint8Array(array), itemSize, normalized);\n    }\n}\nexport class Uint8ClampedBufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n        super(new Uint8ClampedArray(array), itemSize, normalized);\n    }\n}\nexport class Int16BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n        super(new Int16Array(array), itemSize, normalized);\n    }\n}\nexport class Uint16BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n        super(new Uint16Array(array), itemSize, normalized);\n    }\n}\nexport class Int32BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n        super(new Int32Array(array), itemSize, normalized);\n    }\n}\nexport class Uint32BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n        super(new Uint32Array(array), itemSize, normalized);\n    }\n}\nexport class Float32BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n        super(new Float32Array(array), itemSize, normalized);\n    }\n}\nexport class Float64BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n        super(new Float64Array(array), itemSize, normalized);\n    }\n}\n","import { Box3 } from \"../math/Box3\";\nimport { MathUtil } from \"../math/Math\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { applyMatrixToBufferAttribute, arrayMax, setBoxFromBufferAttribute } from \"../utils\";\nimport { BufferAttribute, Float32BufferAttribute, Uint16BufferAttribute, Uint32BufferAttribute, } from \"./BufferAttribute\";\nimport { DirectGeometry } from \"./DirectGeometry\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport { Geometry } from \"./Geometry\";\nimport { Object3D } from \"./Object3D\";\nimport { Mesh } from \"../objects/Mesh\";\nimport { Line } from \"../objects/Line\";\nimport { Points } from \"../objects/Points\";\nlet bufferGeometryId = 1;\nexport class BufferGeometry extends EventDispatcher {\n    constructor() {\n        super(...arguments);\n        this.id = (bufferGeometryId += 2);\n        this.uuid = MathUtil.generateUUID();\n        this.name = \"\";\n        this.type = \"BufferGeometry\";\n        this.index = null;\n        this.attributes = {};\n        this.morphAttributes = {};\n        this.groups = [];\n        this.boundingBox = null;\n        this.boundingSphere = null;\n        this.drawRange = { start: 0, count: Infinity };\n    }\n    setIndex(index) {\n        if (Array.isArray(index)) {\n            this.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n        }\n        else {\n            this.index = index;\n        }\n        return this;\n    }\n    addAttribute(name, attribute) {\n        if (name === \"index\") {\n            this.setIndex(attribute);\n            return this;\n        }\n        this.attributes[name] = attribute;\n        return this;\n    }\n    getAttribute(name) {\n        return this.attributes[name];\n    }\n    removeAttribute(name) {\n        delete this.attributes[name];\n        return this;\n    }\n    addGroup(start, count, materialIndex = 0) {\n        this.groups.push({\n            count: count,\n            materialIndex: materialIndex,\n            start: start,\n        });\n        return this;\n    }\n    clearGroups() {\n        this.groups = [];\n        return this;\n    }\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n        return this;\n    }\n    applyMatrix(matrix) {\n        const position = this.attributes.position;\n        if (position !== undefined) {\n            applyMatrixToBufferAttribute(matrix, position);\n            position.needsUpdate = true;\n        }\n        const normal = this.attributes.normal;\n        if (normal !== undefined) {\n            const normalMatrix = new Matrix3().getNormalMatrix(matrix);\n            applyMatrixToBufferAttribute(normalMatrix, normal);\n            normal.needsUpdate = true;\n        }\n        if (this.boundingBox !== null) {\n            this.computeBoundingBox();\n        }\n        if (this.boundingSphere !== null) {\n            this.computeBoundingSphere();\n        }\n        return this;\n    }\n    rotateX(angle) {\n        return this.applyMatrix(new Matrix4().makeRotationX(angle));\n    }\n    rotateY(angle) {\n        return this.applyMatrix(new Matrix4().makeRotationY(angle));\n    }\n    rotateZ(angle) {\n        return this.applyMatrix(new Matrix4().makeRotationZ(angle));\n    }\n    translate(x, y, z) {\n        return this.applyMatrix(new Matrix4().makeTranslation(x, y, z));\n    }\n    scale(x, y, z) {\n        return this.applyMatrix(new Matrix4().makeScale(x, y, z));\n    }\n    lookAt(vector) {\n        const obj = new Object3D().lookAt(vector);\n        obj.updateMatrix();\n        return this.applyMatrix(obj.matrix);\n    }\n    center() {\n        this.computeBoundingBox();\n        const offset = this.boundingBox.getCenter().negate();\n        this.translate(offset.x, offset.y, offset.z);\n        return offset;\n    }\n    /**\n     * Same as updateFromObject\n     * @param object\n     */\n    setFromObject(object) {\n        const geometry = object.geometry;\n        if (object instanceof Points || object instanceof Line) {\n            const positions = new Float32BufferAttribute(geometry.vertices.length * 3, 3);\n            const colors = new Float32BufferAttribute(geometry.colors.length * 3, 3);\n            this.addAttribute(\"position\", positions.copyVector3sArray(geometry.vertices));\n            this.addAttribute(\"color\", colors.copyColorsArray(geometry.colors));\n            if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {\n                const lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);\n                this.addAttribute(\"lineDistance\", lineDistances.copyArray(geometry.lineDistances));\n            }\n            if (geometry.boundingSphere !== null) {\n                this.boundingSphere = geometry.boundingSphere.clone();\n            }\n            if (geometry.boundingBox !== null) {\n                this.boundingBox = geometry.boundingBox.clone();\n            }\n        }\n        else if (object instanceof Mesh) {\n            this.fromGeometry(geometry);\n        }\n        return this;\n    }\n    setFromPoints(points) {\n        const position = [];\n        for (let i = 0, l = points.length; i < l; i++) {\n            const point = points[i];\n            position.push(point.x, point.y, point.z || 0);\n        }\n        this.addAttribute(\"position\", new Float32BufferAttribute(position, 3));\n        return this;\n    }\n    /**\n     * This function is a mess.\n     * The argument has implicit requirement for arg `object`\n     * Since the only use of this function is in `WebGLObjects`,\n     * and it requires the object's `geometry` property should be a `Geometry` instance,\n     * So we can/must assert the object.geometry as type `Geometry`.\n     * So the whole function is dealing with no BufferGeometry instance,\n     * which may be the reason why BufferGeometry is faster.\n     *\n     * @param object\n     * @returns {BufferGeometry}\n     */\n    updateFromObject(object) {\n        let geometry = object.geometry;\n        if (object instanceof Mesh) {\n            let direct = geometry.directGeometry;\n            if (geometry.elementsNeedUpdate === true) {\n                direct = undefined;\n                geometry.elementsNeedUpdate = false;\n            }\n            if (direct === undefined) {\n                // Geometry -> DirectGeometry -> BufferGeometry\n                return this.fromGeometry(geometry);\n            }\n            direct.verticesNeedUpdate = geometry.verticesNeedUpdate;\n            direct.normalsNeedUpdate = geometry.normalsNeedUpdate;\n            direct.colorsNeedUpdate = geometry.colorsNeedUpdate;\n            direct.uvsNeedUpdate = geometry.uvsNeedUpdate;\n            direct.groupsNeedUpdate = geometry.groupsNeedUpdate;\n            geometry.verticesNeedUpdate = false;\n            geometry.normalsNeedUpdate = false;\n            geometry.colorsNeedUpdate = false;\n            geometry.uvsNeedUpdate = false;\n            geometry.groupsNeedUpdate = false;\n            geometry = direct;\n        }\n        // Used by both Geometry and DirectGeometry\n        if (geometry.verticesNeedUpdate === true) {\n            const attribute = this.attributes.position;\n            if (attribute !== undefined) {\n                attribute.copyVector3sArray(geometry.vertices);\n                attribute.needsUpdate = true;\n            }\n            geometry.verticesNeedUpdate = false;\n        }\n        // Used only by DirectGeometry\n        if (geometry instanceof DirectGeometry && geometry.normalsNeedUpdate === true) {\n            const attribute = this.attributes.normal;\n            if (attribute !== undefined) {\n                attribute.copyVector3sArray(geometry.normals);\n                attribute.needsUpdate = true;\n            }\n            geometry.normalsNeedUpdate = false;\n        }\n        // Used by both Geometry and DirectGeometry\n        if (geometry.colorsNeedUpdate === true) {\n            const attribute = this.attributes.color;\n            if (attribute !== undefined) {\n                attribute.copyColorsArray(geometry.colors);\n                attribute.needsUpdate = true;\n            }\n            geometry.colorsNeedUpdate = false;\n        }\n        // Used only by DirectGeometry\n        if (geometry instanceof DirectGeometry && geometry.uvsNeedUpdate) {\n            const attribute = this.attributes.uv;\n            if (attribute !== undefined) {\n                attribute.copyVector2sArray(geometry.uvs);\n                attribute.needsUpdate = true;\n            }\n            geometry.uvsNeedUpdate = false;\n        }\n        // Used only by Geometry\n        if (geometry instanceof Geometry && geometry.lineDistancesNeedUpdate) {\n            const attribute = this.attributes.lineDistance;\n            if (attribute !== undefined) {\n                attribute.copyArray(geometry.lineDistances);\n                attribute.needsUpdate = true;\n            }\n            geometry.lineDistancesNeedUpdate = false;\n        }\n        // Used only by DirectGeometry\n        if (geometry instanceof DirectGeometry && geometry.groupsNeedUpdate) {\n            geometry.computeGroups(object.geometry);\n            this.groups = geometry.groups;\n            geometry.groupsNeedUpdate = false;\n        }\n        // Well, IMO!!\n        return this;\n    }\n    /**\n     * Geometry of a Mesh\n     * @param geometry\n     */\n    fromGeometry(geometry) {\n        geometry.directGeometry = new DirectGeometry().fromGeometry(geometry);\n        return this.fromDirectGeometry(geometry.directGeometry);\n    }\n    fromDirectGeometry(geometry) {\n        const positions = new Float32Array(geometry.vertices.length * 3);\n        this.addAttribute(\"position\", new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));\n        if (geometry.normals.length > 0) {\n            const normals = new Float32Array(geometry.normals.length * 3);\n            this.addAttribute(\"normal\", new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));\n        }\n        if (geometry.colors.length > 0) {\n            const colors = new Float32Array(geometry.colors.length * 3);\n            this.addAttribute(\"color\", new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));\n        }\n        if (geometry.uvs.length > 0) {\n            const uvs = new Float32Array(geometry.uvs.length * 2);\n            this.addAttribute(\"uv\", new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));\n        }\n        if (geometry.uvs2.length > 0) {\n            const uvs2 = new Float32Array(geometry.uvs2.length * 2);\n            this.addAttribute(\"uv2\", new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));\n        }\n        /**\n         * TODO question https://discourse.threejs.org/t/question-about-fromdirectgeometry-function-of-buffergeometry/1890/2\n         if (geometry.indices.length > 0) {\n            const indices: Uint32Array | Uint16Array = new (arrayMax(geometry.indices) > 65535 ? Uint32Array : Uint16Array)(geometry.indices.length * 3);\n            this.setIndex(new BufferAttribute(indices, 1).copyIndicesArray(geometry.indices));\n        }\n         */\n        // groups\n        this.groups = geometry.groups;\n        // morphs\n        for (const name in geometry.morphTargets) {\n            if (!geometry.morphTargets.hasOwnProperty(name))\n                continue;\n            const array = [];\n            const morphTargets = geometry.morphTargets[name];\n            for (let i = 0, l = morphTargets.length; i < l; i++) {\n                const morphTarget = morphTargets[i];\n                const attribute = new Float32BufferAttribute(new Array(morphTarget.length * 3), 3);\n                array.push(attribute.copyVector3sArray(morphTarget));\n            }\n            this.morphAttributes[name] = array;\n        }\n        // skinning\n        if (geometry.skinIndices.length > 0) {\n            const skinIndices = new Float32BufferAttribute(new Array(geometry.skinIndices.length * 4), 4);\n            this.addAttribute(\"skinIndex\", skinIndices.copyVector4sArray(geometry.skinIndices));\n        }\n        if (geometry.skinWeights.length > 0) {\n            const skinWeights = new Float32BufferAttribute(new Array(geometry.skinWeights.length * 4), 4);\n            this.addAttribute(\"skinWeight\", skinWeights.copyVector4sArray(geometry.skinWeights));\n        }\n        if (geometry.boundingSphere !== null) {\n            this.boundingSphere = geometry.boundingSphere.clone();\n        }\n        if (geometry.boundingBox !== null) {\n            this.boundingBox = geometry.boundingBox.clone();\n        }\n        return this;\n    }\n    computeBoundingBox() {\n        if (this.boundingBox === null) {\n            this.boundingBox = new Box3();\n        }\n        const position = this.attributes.position;\n        if (position !== undefined) {\n            setBoxFromBufferAttribute(this.boundingBox, position);\n        }\n        else {\n            this.boundingBox.makeEmpty();\n        }\n        if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n            console.error(`THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.`, this);\n        }\n    }\n    computeBoundingSphere() {\n        if (this.boundingSphere === null) {\n            this.boundingSphere = new Sphere();\n        }\n        const position = this.attributes.position;\n        if (position) {\n            const box = new Box3();\n            setBoxFromBufferAttribute(box, position);\n            const center = box.getCenter();\n            // hoping to find a boundingSphere with a radius smaller than the\n            // boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n            let maxRadiusSquare = 0;\n            for (let i = 0, il = position.count; i < il; i++) {\n                const vector = new Vector3();\n                vector.x = position.getProperty(i, \"x\");\n                vector.y = position.getProperty(i, \"y\");\n                vector.z = position.getProperty(i, \"z\");\n                maxRadiusSquare = Math.max(maxRadiusSquare, center.distanceToSquared(vector));\n            }\n            this.boundingSphere.radius = Math.sqrt(maxRadiusSquare);\n            if (isNaN(this.boundingSphere.radius)) {\n                console.error(`THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.`, this);\n            }\n        }\n    }\n    computeVertexNormals() {\n        const index = this.index;\n        const attributes = this.attributes;\n        const groups = this.groups;\n        if (attributes.position) {\n            const positions = attributes.position.array;\n            if (attributes.normal === undefined) {\n                this.addAttribute(\"normal\", new BufferAttribute(new Float32Array(positions.length), 3));\n            }\n            else {\n                // reset existing normals to zero\n                const array = attributes.normal.array;\n                for (let i = 0, il = array.length; i < il; i++) {\n                    array[i] = 0;\n                }\n            }\n            const normals = attributes.normal.array;\n            let vA, vB, vC;\n            const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n            const cb = new Vector3(), ab = new Vector3();\n            // indexed elements\n            if (index) {\n                const indices = index.array;\n                if (groups.length === 0) {\n                    this.addGroup(0, indices.length);\n                }\n                for (let j = 0, jl = groups.length; j < jl; ++j) {\n                    const group = groups[j];\n                    const start = group.start;\n                    const count = group.count;\n                    for (let i = start, il = start + count; i < il; i += 3) {\n                        vA = indices[i] * 3;\n                        vB = indices[i + 1] * 3;\n                        vC = indices[i + 2] * 3;\n                        pA.fromArray(positions, vA);\n                        pB.fromArray(positions, vB);\n                        pC.fromArray(positions, vC);\n                        cb.copy(pC).sub(pB);\n                        ab.copy(pA).sub(pB);\n                        cb.cross(ab);\n                        normals[vA] += cb.x;\n                        normals[vA + 1] += cb.y;\n                        normals[vA + 2] += cb.z;\n                        normals[vB] += cb.x;\n                        normals[vB + 1] += cb.y;\n                        normals[vB + 2] += cb.z;\n                        normals[vC] += cb.x;\n                        normals[vC + 1] += cb.y;\n                        normals[vC + 2] += cb.z;\n                    }\n                }\n            }\n            else {\n                // non-indexed elements (unconnected triangle soup)\n                for (let i = 0, il = positions.length; i < il; i += 9) {\n                    pA.fromArray(positions, i);\n                    pB.fromArray(positions, i + 3);\n                    pC.fromArray(positions, i + 6);\n                    cb.copy(pC).sub(pB);\n                    ab.copy(pA).sub(pB);\n                    cb.cross(ab);\n                    normals[i] = cb.x;\n                    normals[i + 1] = cb.y;\n                    normals[i + 2] = cb.z;\n                    normals[i + 3] = cb.x;\n                    normals[i + 4] = cb.y;\n                    normals[i + 5] = cb.z;\n                    normals[i + 6] = cb.x;\n                    normals[i + 7] = cb.y;\n                    normals[i + 8] = cb.z;\n                }\n            }\n            this.normalizeNormals();\n            attributes.normal.needsUpdate = true;\n        }\n    }\n    normalizeNormals() {\n        const vector = new Vector3();\n        const normals = this.attributes.normal;\n        for (let i = 0, il = normals.count; i < il; i++) {\n            vector.x = normals.getProperty(i, \"x\");\n            vector.y = normals.getProperty(i, \"y\");\n            vector.z = normals.getProperty(i, \"z\");\n            vector.normalize();\n            normals.setProperty(i, \"xyz\", vector);\n        }\n    }\n    toNonIndexed() {\n        if (this.index === null) {\n            console.warn(`THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.`);\n            return this;\n        }\n        const geometry2 = new BufferGeometry();\n        const indices = this.index.array;\n        const attributes = this.attributes;\n        for (const name in attributes) {\n            if (!attributes.hasOwnProperty(name))\n                continue;\n            const attribute = attributes[name];\n            const array = attribute.array;\n            const itemSize = attribute.itemSize;\n            const array2 = new array.constructor(indices.length * itemSize);\n            let index = 0, index2 = 0;\n            for (let i = 0, l = indices.length; i < l; i++) {\n                index = indices[i] * itemSize;\n                for (let j = 0; j < itemSize; j++) {\n                    array2[index2++] = array[index++];\n                }\n            }\n            geometry2.addAttribute(name, new BufferAttribute(array2, itemSize));\n        }\n        return geometry2;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n    copy(source) {\n        // reset\n        this.index = null;\n        this.attributes = {};\n        this.morphAttributes = {};\n        this.groups = [];\n        this.boundingBox = null;\n        this.boundingSphere = null;\n        // name\n        this.name = source.name;\n        // index\n        const index = source.index;\n        if (index !== null) {\n            this.setIndex(index.clone());\n        }\n        // attributes\n        const attributes = source.attributes;\n        for (const name in attributes) {\n            if (!attributes.hasOwnProperty(name))\n                continue;\n            const attribute = attributes[name];\n            this.addAttribute(name, attribute.clone());\n        }\n        // morph attributes\n        const morphAttributes = source.morphAttributes;\n        for (const name in morphAttributes) {\n            if (!attributes.hasOwnProperty(name))\n                continue;\n            const array = [];\n            const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n            for (let i = 0, l = morphAttribute.length; i < l; i++) {\n                array.push(morphAttribute[i].clone());\n            }\n            this.morphAttributes[name] = array;\n        }\n        // groups\n        const groups = source.groups;\n        for (let i = 0, l = groups.length; i < l; i++) {\n            const group = groups[i];\n            this.addGroup(group.start, group.count, group.materialIndex);\n        }\n        // bounding box\n        const boundingBox = source.boundingBox;\n        if (boundingBox !== null) {\n            this.boundingBox = boundingBox.clone();\n        }\n        // bounding sphere\n        const boundingSphere = source.boundingSphere;\n        if (boundingSphere !== null) {\n            this.boundingSphere = boundingSphere.clone();\n        }\n        // draw range\n        this.drawRange.start = source.drawRange.start;\n        this.drawRange.count = source.drawRange.count;\n        return this;\n    }\n    dispose() {\n        this.dispatchEvent({ type: \"dispose\" });\n    }\n}\n","export class Clock {\n    constructor(autoStart = false) {\n        this.autoStart = false;\n        this.startTime = 0;\n        this.oldTime = 0;\n        this.elapsedTime = 0;\n        this.running = false;\n        this.autoStart = autoStart;\n    }\n    start() {\n        this.startTime = (typeof performance === \"undefined\" ? Date : performance).now(); // see #10732\n        this.oldTime = this.startTime;\n        this.elapsedTime = 0;\n        this.running = true;\n    }\n    stop() {\n        this.getElapsedTime();\n        this.running = false;\n        this.autoStart = false;\n    }\n    getElapsedTime() {\n        this.getDelta();\n        return this.elapsedTime;\n    }\n    getDelta() {\n        let diff = 0;\n        if (this.autoStart && !this.running) {\n            this.start();\n            return 0;\n        }\n        if (this.running) {\n            const newTime = (typeof performance === \"undefined\" ? Date : performance).now();\n            diff = (newTime - this.oldTime) / 1000;\n            this.oldTime = newTime;\n            this.elapsedTime += diff;\n        }\n        return diff;\n    }\n}\n","import { Vector2 } from \"../math/Vector2\";\nexport class DirectGeometry {\n    constructor() {\n        this.vertices = [];\n        this.normals = [];\n        this.colors = [];\n        this.uvs = [];\n        this.uvs2 = [];\n        this.groups = [];\n        this.morphTargets = {};\n        this.skinWeights = [];\n        this.skinIndices = [];\n        this.boundingSphere = null;\n        this.boundingBox = null;\n        this.verticesNeedUpdate = false;\n        this.uvsNeedUpdate = false;\n        this.normalsNeedUpdate = false;\n        this.colorsNeedUpdate = false;\n        this.groupsNeedUpdate = false;\n    }\n    computeGroups(geometry) {\n        let group;\n        const groups = [];\n        let materialIndex;\n        const faces = geometry.faces;\n        let i = 0;\n        for (; i < faces.length; i++) {\n            const face = faces[i];\n            // materials\n            if (face.materialIndex !== materialIndex) {\n                materialIndex = face.materialIndex;\n                if (group !== undefined) {\n                    group.count = i * 3 - group.start;\n                    groups.push(group);\n                }\n                group = {\n                    materialIndex: materialIndex,\n                    start: i * 3,\n                };\n            }\n        }\n        if (group !== undefined) {\n            group.count = i * 3 - group.start;\n            groups.push(group);\n        }\n        this.groups = groups;\n    }\n    fromGeometry(geometry) {\n        const faces = geometry.faces;\n        const vertices = geometry.vertices;\n        const faceVertexUvs = geometry.faceVertexUvs;\n        const hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;\n        const hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0;\n        // morphs\n        const morphTargets = geometry.morphTargets;\n        const morphTargetsLength = morphTargets.length;\n        if (morphTargetsLength > 0) {\n            this.morphTargets.position = [];\n            for (let i = 0; i < morphTargetsLength; i++) {\n                this.morphTargets.position[i] = [];\n            }\n        }\n        const morphNormals = geometry.morphNormals;\n        const morphNormalsLength = morphNormals.length;\n        if (morphNormalsLength > 0) {\n            this.morphTargets.normal = [];\n            for (let i = 0; i < morphNormalsLength; i++) {\n                this.morphTargets.normal[i] = [];\n            }\n        }\n        // skins\n        const skinIndices = geometry.skinIndices;\n        const skinWeights = geometry.skinWeights;\n        const hasSkinIndices = skinIndices.length === vertices.length;\n        const hasSkinWeights = skinWeights.length === vertices.length;\n        for (let i = 0; i < faces.length; i++) {\n            const face = faces[i];\n            this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);\n            const vertexNormals = face.vertexNormals;\n            if (vertexNormals.length === 3) {\n                this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);\n            }\n            else {\n                const normal = face.normal;\n                this.normals.push(normal, normal, normal);\n            }\n            const vertexColors = face.vertexColors;\n            if (vertexColors.length === 3) {\n                this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);\n            }\n            else {\n                const color = face.color;\n                this.colors.push(color, color, color);\n            }\n            if (hasFaceVertexUv === true) {\n                const vertexUvs = faceVertexUvs[0][i];\n                if (vertexUvs !== undefined) {\n                    this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n                }\n                else {\n                    console.warn(`THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ${i}`);\n                    this.uvs.push(new Vector2(), new Vector2(), new Vector2());\n                }\n            }\n            if (hasFaceVertexUv2 === true) {\n                const vertexUvs = faceVertexUvs[1][i];\n                if (vertexUvs !== undefined) {\n                    this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n                }\n                else {\n                    console.warn(`THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ${i}`);\n                    this.uvs2.push(new Vector2(), new Vector2(), new Vector2());\n                }\n            }\n            // morphs\n            for (let j = 0; j < morphTargetsLength; j++) {\n                const morphTarget = morphTargets[j].vertices;\n                this.morphTargets.position[j].push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);\n            }\n            for (let j = 0; j < morphNormalsLength; j++) {\n                const morphNormal = morphNormals[j].vertexNormals[i];\n                this.morphTargets.normal[j].push(morphNormal.a, morphNormal.b, morphNormal.c);\n            }\n            // skins\n            if (hasSkinIndices) {\n                this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);\n            }\n            if (hasSkinWeights) {\n                this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);\n            }\n        }\n        if (geometry.boundingSphere !== null) {\n            this.boundingSphere = geometry.boundingSphere.clone();\n        }\n        if (geometry.boundingBox !== null) {\n            this.boundingBox = geometry.boundingBox.clone();\n        }\n        this.computeGroups(geometry);\n        this.verticesNeedUpdate = geometry.verticesNeedUpdate;\n        this.normalsNeedUpdate = geometry.normalsNeedUpdate;\n        this.colorsNeedUpdate = geometry.colorsNeedUpdate;\n        this.uvsNeedUpdate = geometry.uvsNeedUpdate;\n        this.groupsNeedUpdate = geometry.groupsNeedUpdate;\n        return this;\n    }\n}\n","export class EventDispatcher {\n    constructor() {\n        this._listeners = {};\n    }\n    addEventListener(type, listener) {\n        const listeners = this._listeners;\n        if (listeners[type] === undefined) {\n            listeners[type] = [];\n        }\n        if (listeners[type].indexOf(listener) === -1) {\n            listeners[type].push(listener);\n        }\n    }\n    hasEventListener(type, listener) {\n        if (this._listeners === undefined)\n            return false;\n        const listeners = this._listeners;\n        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n    }\n    removeEventListener(type, listener) {\n        if (this._listeners === undefined)\n            return;\n        const listeners = this._listeners;\n        const listenerArray = listeners[type];\n        if (listenerArray !== undefined) {\n            const index = listenerArray.indexOf(listener);\n            if (index !== -1) {\n                listenerArray.splice(index, 1);\n            }\n        }\n    }\n    dispatchEvent(event = {}) {\n        if (this._listeners === undefined)\n            return;\n        const listeners = this._listeners;\n        const listenerArray = listeners[event.type];\n        if (listenerArray !== undefined) {\n            event.target = this;\n            const array = listenerArray.slice(0);\n            for (let i = 0, l = array.length; i < l; i++) {\n                array[i].call(this, event);\n            }\n        }\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Vector3 } from \"../math/Vector3\";\nexport class Face3 {\n    constructor(a = 0, b = 0, c = 0, normal = new Vector3(), color = new Color(), materialIndex = 0) {\n        this.a = 0;\n        this.b = 0;\n        this.c = 0;\n        this.normal = new Vector3();\n        this.vertexNormals = [];\n        this.color = new Color();\n        this.vertexColors = [];\n        this.materialIndex = 0;\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        if (normal instanceof Vector3)\n            this.normal = normal;\n        if (Array.isArray(normal))\n            this.vertexNormals = normal;\n        if (color instanceof Color)\n            this.color = color;\n        if (Array.isArray(color))\n            this.vertexColors = color;\n        this.materialIndex = materialIndex;\n    }\n    copy(source) {\n        this.a = source.a;\n        this.b = source.b;\n        this.c = source.c;\n        this.normal.copy(source.normal);\n        this.color.copy(source.color);\n        this.materialIndex = source.materialIndex;\n        for (let i = 0, il = source.vertexNormals.length; i < il; i++) {\n            this.vertexNormals[i] = source.vertexNormals[i].clone();\n        }\n        for (let i = 0, il = source.vertexColors.length; i < il; i++) {\n            this.vertexColors[i] = source.vertexColors[i].clone();\n        }\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n","import { Box3 } from \"../math/Box3\";\nimport { Color } from \"../math/Color\";\nimport { MathUtil } from \"../math/Math\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Triangle } from \"../math/Triangle\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport { Face3 } from \"./Face3\";\nimport { Object3D } from \"./Object3D\";\nexport class GeometryFace extends Face3 {\n}\nlet geometryId = 0;\nexport class Geometry extends EventDispatcher {\n    constructor() {\n        super(...arguments);\n        this.id = (geometryId += 2);\n        this.uuid = MathUtil.generateUUID();\n        this.name = \"\";\n        this.type = \"Geometry\";\n        this.vertices = [];\n        this.colors = [];\n        this.faces = [];\n        this.faceVertexUvs = [[]];\n        this.morphTargets = [];\n        this.morphNormals = [];\n        this.skinWeights = [];\n        this.skinIndices = [];\n        this.lineDistances = [];\n        this.boundingBox = null;\n        this.boundingSphere = null;\n        this.elementsNeedUpdate = false;\n        this.verticesNeedUpdate = false;\n        this.uvsNeedUpdate = false;\n        this.normalsNeedUpdate = false;\n        this.colorsNeedUpdate = false;\n        this.lineDistancesNeedUpdate = false;\n        this.groupsNeedUpdate = false;\n    }\n    applyMatrix(matrix) {\n        const normalMatrix = new Matrix3().getNormalMatrix(matrix);\n        for (let i = 0, il = this.vertices.length; i < il; i++) {\n            this.vertices[i].applyMatrix4(matrix);\n        }\n        for (let i = 0, il = this.faces.length; i < il; i++) {\n            const face = this.faces[i];\n            face.normal.applyMatrix3(normalMatrix).normalize();\n            for (let j = 0, jl = face.vertexNormals.length; j < jl; j++) {\n                face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();\n            }\n        }\n        if (this.boundingBox !== null) {\n            this.computeBoundingBox();\n        }\n        if (this.boundingSphere !== null) {\n            this.computeBoundingSphere();\n        }\n        this.verticesNeedUpdate = true;\n        this.normalsNeedUpdate = true;\n        return this;\n    }\n    rotateX(angle) {\n        return this.applyMatrix(new Matrix4().makeRotationX(angle));\n    }\n    rotateY(angle) {\n        return this.applyMatrix(new Matrix4().makeRotationY(angle));\n    }\n    rotateZ(angle) {\n        return this.applyMatrix(new Matrix4().makeRotationZ(angle));\n    }\n    translate(x, y, z) {\n        return this.applyMatrix(new Matrix4().makeTranslation(x, y, z));\n    }\n    scale(x, y, z) {\n        return this.applyMatrix(new Matrix4().makeScale(x, y, z));\n    }\n    lookAt(vector) {\n        const obj = new Object3D().lookAt(vector);\n        obj.updateMatrix();\n        return this.applyMatrix(obj.matrix);\n    }\n    fromBufferGeometry(geometry) {\n        const indices = geometry.index !== null ? geometry.index.array : undefined;\n        const attributes = geometry.attributes;\n        const positions = attributes.position.array;\n        const normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n        const colors = attributes.color !== undefined ? attributes.color.array : undefined;\n        const uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n        const uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n        if (uvs2 !== undefined)\n            this.faceVertexUvs[1] = [];\n        const tempNormals = [];\n        const tempUVs = [];\n        const tempUVs2 = [];\n        for (let i = 0, j = 0; i < positions.length; i += 3, j += 2) {\n            this.vertices.push(new Vector3(positions[i], positions[i + 1], positions[i + 2]));\n            if (normals !== undefined) {\n                tempNormals.push(new Vector3(normals[i], normals[i + 1], normals[i + 2]));\n            }\n            if (colors !== undefined) {\n                this.colors.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n            }\n            if (uvs !== undefined) {\n                tempUVs.push(new Vector2(uvs[j], uvs[j + 1]));\n            }\n            if (uvs2 !== undefined) {\n                tempUVs2.push(new Vector2(uvs2[j], uvs2[j + 1]));\n            }\n        }\n        const addFace = (a, b, c, materialIndex) => {\n            const vertexNormals = normals !== undefined ? [tempNormals[a].clone(), tempNormals[b].clone(), tempNormals[c].clone()] : [];\n            const vertexColors = colors !== undefined ? [this.colors[a].clone(), this.colors[b].clone(), this.colors[c].clone()] : [];\n            const face = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);\n            this.faces.push(face);\n            if (uvs !== undefined) {\n                this.faceVertexUvs[0].push([tempUVs[a].clone(), tempUVs[b].clone(), tempUVs[c].clone()]);\n            }\n            if (uvs2 !== undefined) {\n                this.faceVertexUvs[1].push([tempUVs2[a].clone(), tempUVs2[b].clone(), tempUVs2[c].clone()]);\n            }\n        };\n        const groups = geometry.groups;\n        if (groups.length > 0) {\n            for (let i = 0; i < groups.length; i++) {\n                const group = groups[i];\n                const start = group.start;\n                const count = group.count;\n                for (let j = start, jl = start + count; j < jl; j += 3) {\n                    if (indices !== undefined) {\n                        addFace(indices[j], indices[j + 1], indices[j + 2], group.materialIndex);\n                    }\n                    else {\n                        addFace(j, j + 1, j + 2, group.materialIndex);\n                    }\n                }\n            }\n        }\n        else {\n            if (indices !== undefined) {\n                for (let i = 0; i < indices.length; i += 3) {\n                    addFace(indices[i], indices[i + 1], indices[i + 2]);\n                }\n            }\n            else {\n                for (let i = 0; i < positions.length / 3; i += 3) {\n                    addFace(i, i + 1, i + 2);\n                }\n            }\n        }\n        this.computeFaceNormals();\n        if (geometry.boundingBox !== null) {\n            this.boundingBox = geometry.boundingBox.clone();\n        }\n        if (geometry.boundingSphere !== null) {\n            this.boundingSphere = geometry.boundingSphere.clone();\n        }\n        return this;\n    }\n    center() {\n        this.computeBoundingBox();\n        const offset = this.boundingBox.getCenter().negate();\n        this.translate(offset.x, offset.y, offset.z);\n        return offset;\n    }\n    normalize() {\n        this.computeBoundingSphere();\n        const center = this.boundingSphere.center;\n        const radius = this.boundingSphere.radius;\n        const s = radius === 0 ? 1 : 1.0 / radius;\n        const matrix = new Matrix4();\n        matrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);\n        return this.applyMatrix(matrix);\n    }\n    computeFaceNormals() {\n        const cb = new Vector3(), ab = new Vector3();\n        for (let f = 0, fl = this.faces.length; f < fl; f++) {\n            const face = this.faces[f];\n            const vA = this.vertices[face.a];\n            const vB = this.vertices[face.b];\n            const vC = this.vertices[face.c];\n            cb.copy(vC).sub(vB);\n            ab.copy(vA).sub(vB);\n            cb.cross(ab);\n            cb.normalize();\n            face.normal.copy(cb);\n        }\n        return this;\n    }\n    computeVertexNormals(areaWeighted = true) {\n        const vertices = new Array(this.vertices.length);\n        for (let v = 0, vl = this.vertices.length; v < vl; v++) {\n            vertices[v] = new Vector3();\n        }\n        if (areaWeighted) {\n            // vertex normals weighted by triangle areas\n            // http://www.iquilezles.org/www/articles/normals/normals.htm\n            for (let f = 0, fl = this.faces.length; f < fl; f++) {\n                const face = this.faces[f];\n                const vA = this.vertices[face.a];\n                const vB = this.vertices[face.b];\n                const vC = this.vertices[face.c];\n                const cb = new Vector3().copy(vC).sub(vB);\n                const ab = new Vector3().copy(vA).sub(vB);\n                cb.cross(ab);\n                vertices[face.a].add(cb);\n                vertices[face.b].add(cb);\n                vertices[face.c].add(cb);\n            }\n        }\n        else {\n            this.computeFaceNormals();\n            for (let f = 0, fl = this.faces.length; f < fl; f++) {\n                const face = this.faces[f];\n                vertices[face.a].add(face.normal);\n                vertices[face.b].add(face.normal);\n                vertices[face.c].add(face.normal);\n            }\n        }\n        for (let v = 0, vl = this.vertices.length; v < vl; v++) {\n            vertices[v].normalize();\n        }\n        for (let f = 0, fl = this.faces.length; f < fl; f++) {\n            const face = this.faces[f];\n            const vertexNormals = face.vertexNormals;\n            if (vertexNormals.length === 3) {\n                vertexNormals[0].copy(vertices[face.a]);\n                vertexNormals[1].copy(vertices[face.b]);\n                vertexNormals[2].copy(vertices[face.c]);\n            }\n            else {\n                vertexNormals[0] = vertices[face.a].clone();\n                vertexNormals[1] = vertices[face.b].clone();\n                vertexNormals[2] = vertices[face.c].clone();\n            }\n        }\n        if (this.faces.length > 0) {\n            this.normalsNeedUpdate = true;\n        }\n        return this;\n    }\n    computeFlatVertexNormals() {\n        this.computeFaceNormals();\n        for (let f = 0, fl = this.faces.length; f < fl; f++) {\n            const face = this.faces[f];\n            const vertexNormals = face.vertexNormals;\n            if (vertexNormals.length === 3) {\n                vertexNormals[0].copy(face.normal);\n                vertexNormals[1].copy(face.normal);\n                vertexNormals[2].copy(face.normal);\n            }\n            else {\n                vertexNormals[0] = face.normal.clone();\n                vertexNormals[1] = face.normal.clone();\n                vertexNormals[2] = face.normal.clone();\n            }\n        }\n        if (this.faces.length > 0) {\n            this.normalsNeedUpdate = true;\n        }\n        return this;\n    }\n    computeMorphNormals() {\n        // save original normals\n        // - create temp variables on first access\n        //   otherwise just copy (for faster repeated calls)\n        for (let f = 0, fl = this.faces.length; f < fl; f++) {\n            const face = this.faces[f];\n            if (!face.originalFaceNormal) {\n                face.originalFaceNormal = face.normal.clone();\n            }\n            else {\n                face.originalFaceNormal.copy(face.normal);\n            }\n            if (!face.originalVertexNormals)\n                face.originalVertexNormals = [];\n            for (let i = 0, il = face.vertexNormals.length; i < il; i++) {\n                if (!face.originalVertexNormals[i]) {\n                    face.originalVertexNormals[i] = face.vertexNormals[i].clone();\n                }\n                else {\n                    face.originalVertexNormals[i].copy(face.vertexNormals[i]);\n                }\n            }\n        }\n        // use temp geometry to compute face and vertex normals for each morph\n        const tmpGeo = new Geometry();\n        tmpGeo.faces = this.faces;\n        for (let i = 0, il = this.morphTargets.length; i < il; i++) {\n            // create on first access\n            if (!this.morphNormals[i]) {\n                this.morphNormals[i] = {\n                    faceNormals: [],\n                    vertexNormals: [],\n                };\n                for (let f = 0, fl = this.faces.length; f < fl; f++) {\n                    this.morphNormals[i].faceNormals.push(new Vector3());\n                    this.morphNormals[i].vertexNormals.push(new Triangle());\n                }\n            }\n            const morphNormals = this.morphNormals[i];\n            // set vertices to morph target\n            tmpGeo.vertices = this.morphTargets[i].vertices;\n            // compute morph normals\n            tmpGeo.computeFaceNormals();\n            tmpGeo.computeVertexNormals();\n            // store morph normals\n            for (let f = 0, fl = this.faces.length; f < fl; f++) {\n                const face = this.faces[f];\n                const faceNormal = morphNormals.faceNormals[f];\n                const vertexNormals = morphNormals.vertexNormals[f];\n                faceNormal.copy(face.normal);\n                vertexNormals.a.copy(face.vertexNormals[0]);\n                vertexNormals.b.copy(face.vertexNormals[1]);\n                vertexNormals.c.copy(face.vertexNormals[2]);\n            }\n        }\n        // restore original normals\n        for (let f = 0, fl = this.faces.length; f < fl; f++) {\n            const face = this.faces[f];\n            face.normal = face.originalFaceNormal;\n            face.vertexNormals = face.originalVertexNormals;\n        }\n        return this;\n    }\n    computeLineDistances() {\n        let d = 0;\n        const vertices = this.vertices;\n        for (let i = 0, il = vertices.length; i < il; i++) {\n            if (i > 0) {\n                d += vertices[i].distanceTo(vertices[i - 1]);\n            }\n            this.lineDistances[i] = d;\n        }\n        return this;\n    }\n    computeBoundingBox() {\n        if (this.boundingBox === null) {\n            this.boundingBox = new Box3();\n        }\n        this.boundingBox.setFromPoints(this.vertices);\n        return this;\n    }\n    computeBoundingSphere() {\n        if (this.boundingSphere === null) {\n            this.boundingSphere = new Sphere();\n        }\n        this.boundingSphere.setFromPoints(this.vertices);\n        return this;\n    }\n    merge(geometry, matrix, materialIndexOffset = 0) {\n        let normalMatrix;\n        const vertexOffset = this.vertices.length, thisVertices = this.vertices, thatVertices = geometry.vertices, thisFaces = this.faces, thatFaces = geometry.faces, thisUvs = this.faceVertexUvs[0], thatUvs = geometry.faceVertexUvs[0], thisColors = this.colors, thatColors = geometry.colors;\n        if (matrix !== undefined) {\n            normalMatrix = new Matrix3().getNormalMatrix(matrix);\n        }\n        // vertices\n        for (let i = 0, il = thatVertices.length; i < il; i++) {\n            const vertexCopy = thatVertices[i].clone();\n            if (matrix !== undefined)\n                vertexCopy.applyMatrix4(matrix);\n            thisVertices.push(vertexCopy);\n        }\n        // colors\n        for (let i = 0, il = thatColors.length; i < il; i++) {\n            thisColors.push(thatColors[i].clone());\n        }\n        // faces\n        for (let i = 0, il = thatFaces.length; i < il; i++) {\n            const face = thatFaces[i], faceVertexNormals = face.vertexNormals, faceVertexColors = face.vertexColors;\n            const faceCopy = new GeometryFace(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);\n            faceCopy.normal.copy(face.normal);\n            if (normalMatrix !== undefined) {\n                faceCopy.normal.applyMatrix3(normalMatrix).normalize();\n            }\n            for (let j = 0, jl = faceVertexNormals.length; j < jl; j++) {\n                const normal = faceVertexNormals[j].clone();\n                if (normalMatrix !== undefined) {\n                    normal.applyMatrix3(normalMatrix).normalize();\n                }\n                faceCopy.vertexNormals.push(normal);\n            }\n            faceCopy.color.copy(face.color);\n            for (let j = 0, jl = faceVertexColors.length; j < jl; j++) {\n                const color = faceVertexColors[j];\n                faceCopy.vertexColors.push(color.clone());\n            }\n            faceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n            thisFaces.push(faceCopy);\n        }\n        // uvs\n        for (let i = 0, il = thatUvs.length; i < il; i++) {\n            const uv = thatUvs[i], uvCopy = [];\n            if (uv === undefined) {\n                continue;\n            }\n            for (let j = 0, jl = uv.length; j < jl; j++) {\n                uvCopy.push(uv[j].clone());\n            }\n            thisUvs.push(uvCopy);\n        }\n        return this;\n    }\n    mergeMesh(mesh) {\n        if (mesh.geometry instanceof Geometry) {\n            if (mesh.matrixAutoUpdate) {\n                mesh.updateMatrix();\n            }\n            this.merge(mesh.geometry, mesh.matrix);\n        }\n        else {\n            console.error(`THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.`, mesh.geometry);\n        }\n    }\n    /**\n     * Checks for duplicate vertices with hashmap.\n     * Duplicated vertices are removed\n     * and faces' vertices are updated.\n     * @returns {number}\n     */\n    mergeVertices() {\n        /**\n         * Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n         * @type {{}}\n         */\n        const verticesMap = {};\n        const unique = [], changes = [];\n        /**\n         * number of decimal points, e.g. 4 for epsilon of 0.0001\n         * @type {number}\n         */\n        const precisionPoints = 4;\n        const precision = Math.pow(10, precisionPoints);\n        for (let i = 0, il = this.vertices.length; i < il; i++) {\n            const v = this.vertices[i];\n            const key = [\n                Math.round(v.x * precision),\n                Math.round(v.y * precision),\n                Math.round(v.z * precision),\n            ].join(\"_\");\n            if (verticesMap[key] === undefined) {\n                verticesMap[key] = i;\n                unique.push(this.vertices[i]);\n                changes[i] = unique.length - 1;\n            }\n            else {\n                // console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n                changes[i] = changes[verticesMap[key]];\n            }\n        }\n        // if faces are completely degenerate after merging vertices, we\n        // have to remove them from the geometry.\n        const faceIndicesToRemove = [];\n        for (let i = 0, il = this.faces.length; i < il; i++) {\n            const face = this.faces[i];\n            face.a = changes[face.a];\n            face.b = changes[face.b];\n            face.c = changes[face.c];\n            const indices = [face.a, face.b, face.c];\n            // if any duplicate vertices are found in a Face3\n            // we have to remove the face as nothing can be saved\n            for (let n = 0; n < 3; n++) {\n                if (indices[n] === indices[(n + 1) % 3]) {\n                    faceIndicesToRemove.push(i);\n                    break;\n                }\n            }\n        }\n        for (let i = faceIndicesToRemove.length - 1; i >= 0; i--) {\n            const idx = faceIndicesToRemove[i];\n            this.faces.splice(idx, 1);\n            for (let j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {\n                this.faceVertexUvs[j].splice(idx, 1);\n            }\n        }\n        // Use unique set of vertices\n        const diff = this.vertices.length - unique.length;\n        this.vertices = unique;\n        return diff;\n    }\n    setFromPoints(points) {\n        this.vertices = [];\n        for (let i = 0, l = points.length; i < l; i++) {\n            const point = points[i];\n            this.vertices.push(new Vector3(point.x, point.y, point.z || 0));\n        }\n        return this;\n    }\n    sortFacesByMaterialIndex() {\n        const faces = this.faces;\n        const length = faces.length;\n        // tag faces\n        for (let i = 0; i < length; i++) {\n            faces[i].id = i;\n        }\n        // sort faces\n        faces.sort((a, b) => {\n            return a.materialIndex - b.materialIndex;\n        });\n        // sort uvs\n        const uvs1 = this.faceVertexUvs[0];\n        const uvs2 = this.faceVertexUvs[1];\n        let newUvs1, newUvs2;\n        if (uvs1 && uvs1.length === length)\n            newUvs1 = [];\n        if (uvs2 && uvs2.length === length)\n            newUvs2 = [];\n        for (let i = 0; i < length; i++) {\n            const id = faces[i].id;\n            if (newUvs1)\n                newUvs1.push(uvs1[id]);\n            if (newUvs2)\n                newUvs2.push(uvs2[id]);\n        }\n        if (newUvs1)\n            this.faceVertexUvs[0] = newUvs1;\n        if (newUvs2)\n            this.faceVertexUvs[1] = newUvs2;\n        return this;\n    }\n    copy(source) {\n        // reset\n        this.vertices = [];\n        this.colors = [];\n        this.faces = [];\n        this.faceVertexUvs = [[]];\n        this.morphTargets = [];\n        this.morphNormals = [];\n        this.skinWeights = [];\n        this.skinIndices = [];\n        this.lineDistances = [];\n        this.boundingBox = null;\n        this.boundingSphere = null;\n        // name\n        this.name = source.name;\n        // vertices\n        const vertices = source.vertices;\n        for (let i = 0, il = vertices.length; i < il; i++) {\n            this.vertices.push(vertices[i].clone());\n        }\n        // colors\n        const colors = source.colors;\n        for (let i = 0, il = colors.length; i < il; i++) {\n            this.colors.push(colors[i].clone());\n        }\n        // faces\n        const faces = source.faces;\n        for (let i = 0, il = faces.length; i < il; i++) {\n            this.faces.push(faces[i].clone());\n        }\n        // face vertex uvs\n        for (let i = 0, il = source.faceVertexUvs.length; i < il; i++) {\n            const faceVertexUvs = source.faceVertexUvs[i];\n            if (this.faceVertexUvs[i] === undefined) {\n                this.faceVertexUvs[i] = [];\n            }\n            for (let j = 0, jl = faceVertexUvs.length; j < jl; j++) {\n                const uvs = faceVertexUvs[j];\n                const uvsCopy = [];\n                for (let k = 0, kl = uvs.length; k < kl; k++) {\n                    uvsCopy.push(uvs[k].clone());\n                }\n                this.faceVertexUvs[i].push(uvsCopy);\n            }\n        }\n        // morph targets\n        const morphTargets = source.morphTargets;\n        for (let i = 0, il = morphTargets.length; i < il; i++) {\n            const morphTarget = { name: morphTargets[i].name };\n            // vertices\n            if (morphTargets[i].vertices !== undefined) {\n                morphTarget.vertices = [];\n                for (let j = 0, jl = morphTargets[i].vertices.length; j < jl; j++) {\n                    morphTarget.vertices.push(morphTargets[i].vertices[j].clone());\n                }\n            }\n            // normals\n            if (morphTargets[i].normals !== undefined) {\n                morphTarget.normals = [];\n                for (let j = 0, jl = morphTargets[i].normals.length; j < jl; j++) {\n                    morphTarget.normals.push(morphTargets[i].normals[j].clone());\n                }\n            }\n            this.morphTargets.push(morphTarget);\n        }\n        // morph normals\n        const morphNormals = source.morphNormals;\n        for (let i = 0, il = morphNormals.length; i < il; i++) {\n            const morphNormal = {};\n            // vertex normals\n            if (morphNormals[i].vertexNormals !== undefined) {\n                morphNormal.vertexNormals = [];\n                for (let j = 0, jl = morphNormals[i].vertexNormals.length; j < jl; j++) {\n                    morphNormal.vertexNormals.push(morphNormals[i].vertexNormals[j].clone());\n                }\n            }\n            // face normals\n            if (morphNormals[i].faceNormals !== undefined) {\n                morphNormal.faceNormals = [];\n                for (let j = 0, jl = morphNormals[i].faceNormals.length; j < jl; j++) {\n                    morphNormal.faceNormals.push(morphNormals[i].faceNormals[j].clone());\n                }\n            }\n            this.morphNormals.push(morphNormal);\n        }\n        // skin weights\n        const skinWeights = source.skinWeights;\n        for (let i = 0, il = skinWeights.length; i < il; i++) {\n            this.skinWeights.push(skinWeights[i].clone());\n        }\n        // skin indices\n        const skinIndices = source.skinIndices;\n        for (let i = 0, il = skinIndices.length; i < il; i++) {\n            this.skinIndices.push(skinIndices[i].clone());\n        }\n        // line distances\n        const lineDistances = source.lineDistances;\n        for (let i = 0, il = lineDistances.length; i < il; i++) {\n            this.lineDistances.push(lineDistances[i]);\n        }\n        // bounding box\n        const boundingBox = source.boundingBox;\n        if (boundingBox !== null) {\n            this.boundingBox = boundingBox.clone();\n        }\n        // bounding sphere\n        const boundingSphere = source.boundingSphere;\n        if (boundingSphere !== null) {\n            this.boundingSphere = boundingSphere.clone();\n        }\n        // update flags\n        this.elementsNeedUpdate = source.elementsNeedUpdate;\n        this.verticesNeedUpdate = source.verticesNeedUpdate;\n        this.uvsNeedUpdate = source.uvsNeedUpdate;\n        this.normalsNeedUpdate = source.normalsNeedUpdate;\n        this.colorsNeedUpdate = source.colorsNeedUpdate;\n        this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n        this.groupsNeedUpdate = source.groupsNeedUpdate;\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n","import { BufferAttribute } from \"./BufferAttribute\";\nexport class InstancedBufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized = false, meshPerAttribute = 1) {\n        super(array, itemSize, normalized);\n        this.meshPerAttribute = 1;\n        this.meshPerAttribute = meshPerAttribute;\n    }\n    copy(source) {\n        super.copy(source);\n        this.meshPerAttribute = source.meshPerAttribute;\n        return this;\n    }\n}\n","import { BufferGeometry } from \"./BufferGeometry\";\nexport class InstancedBufferGeometry extends BufferGeometry {\n    constructor() {\n        super(...arguments);\n        this.type = \"InstancedBufferGeometry\";\n    }\n    copy(source) {\n        super.copy(source);\n        this.maxInstancedCount = source.maxInstancedCount;\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n","import { InterleavedBufferAttribute } from \"./InterleavedBufferAttribute\";\nexport class InstancedInterleavedBufferAttribute extends InterleavedBufferAttribute {\n    constructor(array, stride, itemSize, offset, normalized = false, meshPerAttribute = 1) {\n        super(array, stride, itemSize, offset, normalized);\n        this.meshPerAttribute = 1;\n        this.meshPerAttribute = meshPerAttribute;\n    }\n    copy(source) {\n        super.copy(source);\n        this.meshPerAttribute = source.meshPerAttribute;\n        return this;\n    }\n}\n","import { MathUtil } from \"../math/Math\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Vector4 } from \"../math/Vector4\";\nexport class InterleavedBufferAttribute {\n    constructor(array, stride, itemSize, offset, normalized = false) {\n        this.uuid = MathUtil.generateUUID();\n        this.array = undefined;\n        this.stride = 1;\n        this.count = 0;\n        this.dynamic = false;\n        this.updateRange = { offset: 0, count: -1 };\n        this.version = 0;\n        this.normalized = false;\n        this.array = array;\n        this.stride = stride;\n        this.count = array !== undefined ? array.length / stride : 0;\n        this.itemSize = itemSize;\n        this.offset = offset;\n        this.normalized = normalized;\n    }\n    set needsUpdate(value) {\n        if (value === true)\n            this.version++;\n    }\n    setArray(array) {\n        this.count = array !== undefined ? array.length / this.stride : 0;\n        this.array = array;\n        return this;\n    }\n    setDynamic(value) {\n        this.dynamic = value;\n        return this;\n    }\n    copy(source) {\n        this.array = new source.array.constructor(source.array);\n        this.stride = source.stride;\n        this.count = source.count;\n        this.dynamic = source.dynamic;\n        return this;\n    }\n    set(value, offset = 0) {\n        this.array.set(value, offset);\n        return this;\n    }\n    get(offset = 0, length = 1) {\n        return this.array.slice(offset, length);\n    }\n    copyAt(index1, attribute, index2) {\n        index1 *= this.stride;\n        index2 *= attribute.stride;\n        for (let i = 0, l = this.stride; i < l; i++) {\n            this.array[index1 + i] = attribute.array[index2 + i];\n        }\n        return this;\n    }\n    clone() {\n        return new this.constructor(this.array, this.stride).copy(this);\n    }\n    setProperty(index, property, value) {\n        property = property.toLowerCase();\n        if (property && property.length <= 4 && property.replace(/[xyzw]/g, \"\").length === 0) {\n            const offsetMap = { x: 0, y: 1, z: 2 };\n            if (property.length === 1 && typeof value === \"number\") {\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(0)]] = value;\n            }\n            else if (property.length === 2 && value instanceof Vector2) {\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(0)]] = value.x;\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(1)]] = value.y;\n            }\n            else if (property.length === 3 && value instanceof Vector3) {\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(0)]] = value.x;\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(1)]] = value.y;\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(2)]] = value.z;\n            }\n            else if (property.length === 4 && value instanceof Vector4) {\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(0)]] = value.x;\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(1)]] = value.y;\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(2)]] = value.z;\n                this.array[index * this.stride + this.offset + offsetMap[property.charAt(3)]] = value.w;\n            }\n        }\n        return this;\n    }\n    getProperty(index, property) {\n        property = property.toLowerCase();\n        if (property && property.length <= 4 && property.replace(/[xyzw]/g, \"\").length === 0) {\n            const offsetMap = { x: 0, y: 1, z: 2 };\n            if (property.length === 1) {\n                return this.array[index * this.stride + this.offset + offsetMap[property.charAt(0)]];\n            }\n            else if (property.length === 2) {\n                return new Vector2(this.array[index * this.stride + this.offset + offsetMap[property.charAt(0)]], this.array[index * this.stride + this.offset + offsetMap[property.charAt(1)]]);\n            }\n            else if (property.length === 3) {\n                return new Vector3(this.array[index * this.stride + this.offset + offsetMap[property.charAt(0)]], this.array[index * this.stride + this.offset + offsetMap[property.charAt(1)]], this.array[index * this.stride + this.offset + offsetMap[property.charAt(2)]]);\n            }\n            else if (property.length === 4) {\n                return new Vector4(this.array[index * this.stride + this.offset + offsetMap[property.charAt(0)]], this.array[index * this.stride + this.offset + offsetMap[property.charAt(1)]], this.array[index * this.stride + this.offset + offsetMap[property.charAt(2)]], this.array[index * this.stride + this.offset + offsetMap[property.charAt(3)]]);\n            }\n        }\n        return undefined;\n    }\n}\n","export class Layers {\n    constructor() {\n        this.mask = 1 | 0;\n    }\n    set(channel) {\n        this.mask = (1 << channel) | 0;\n    }\n    enable(channel) {\n        this.mask |= (1 << channel) | 0;\n    }\n    toggle(channel) {\n        this.mask ^= (1 << channel) | 0;\n    }\n    disable(channel) {\n        this.mask &= ~((1 << channel) | 0);\n    }\n    test(layers) {\n        return (this.mask & layers.mask) !== 0;\n    }\n}\n","import { Camera } from \"../cameras/Camera\";\nimport { Euler } from \"../math/Euler\";\nimport { MathUtil } from \"../math/Math\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport { Layers } from \"./Layers\";\nlet object3DId = 0;\nexport class Object3D extends EventDispatcher {\n    constructor() {\n        super(...arguments);\n        this.id = object3DId++;\n        this.uuid = MathUtil.generateUUID();\n        this.name = \"\";\n        this.type = \"Object3D\";\n        this.parent = null;\n        this.children = [];\n        this.up = new Vector3().copy(Object3D.DefaultUp);\n        this.matrix = new Matrix4();\n        this.matrixWorld = new Matrix4();\n        this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n        this.matrixWorldNeedsUpdate = false;\n        this.layers = new Layers();\n        this.visible = true;\n        this.castShadow = false;\n        this.receiveShadow = false;\n        this.frustumCulled = true;\n        this.renderOrder = 0;\n        this.userData = {};\n        this.position = new Vector3();\n        this.rotation = new Euler();\n        this.quaternion = new Quaternion();\n        this.scale = new Vector3(1, 1, 1);\n        this.modelViewMatrix = new Matrix4();\n        this.normalMatrix = new Matrix3();\n        this.onBeforeRender = function () { };\n        this.onAfterRender = function () { };\n    }\n    updateMatrix() {\n        this.matrix.compose(this.position, this.quaternion, this.scale);\n        this.matrixWorldNeedsUpdate = true;\n        return this;\n    }\n    updateMatrixWorld(force = false) {\n        if (this.matrixAutoUpdate) {\n            this.updateMatrix();\n        }\n        if (this.matrixWorldNeedsUpdate || force) {\n            if (this.parent === null) {\n                this.matrixWorld.copy(this.matrix);\n            }\n            else {\n                this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n            }\n            this.matrixWorldNeedsUpdate = false;\n            force = true;\n        }\n        // update children\n        const children = this.children;\n        for (let i = 0, l = children.length; i < l; i++) {\n            children[i].updateMatrixWorld(force);\n        }\n        return this;\n    }\n    raycast(raycaster, intersections) { }\n    applyMatrix(matrix) {\n        this.matrix.multiplyMatrices(matrix, this.matrix);\n        this.matrix.decompose(this.position, this.quaternion, this.scale);\n        return this;\n    }\n    applyQuaternion(q) {\n        this.quaternion.premultiply(q);\n        return this;\n    }\n    /**\n     * assumes axis is normalized\n     * @param axis\n     * @param angle\n     * @returns {Object3D}\n     */\n    setRotationFromAxisAngle(axis, angle) {\n        this.quaternion.setFromAxisAngle(axis, angle);\n        return this;\n    }\n    setRotationFromEuler(euler) {\n        this.quaternion.setFromEuler(euler);\n        return this;\n    }\n    /**\n     * assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n     * @param m\n     * @returns {Object3D}\n     */\n    setRotationFromMatrix(m) {\n        this.quaternion.setFromRotationMatrix(m);\n        return this;\n    }\n    /**\n     * assumes q is normalized\n     * @param q\n     * @returns {Object3D}\n     */\n    setRotationFromQuaternion(q) {\n        this.quaternion.copy(q);\n        return this;\n    }\n    rotateOnAxis(axis, angle) {\n        const q = new Quaternion();\n        q.setFromAxisAngle(axis, angle);\n        this.quaternion.multiply(q);\n        return this;\n    }\n    /**\n     * rotate object on axis in world space\n     * axis is assumed to be normalized\n     * method assumes no rotated parent\n     * @param axis\n     * @param angle\n     * @returns {Object3D}\n     */\n    rotateOnWorldAxis(axis, angle) {\n        const q = new Quaternion();\n        q.setFromAxisAngle(axis, angle);\n        this.quaternion.premultiply(q);\n        return this;\n    }\n    rotateX(angle) {\n        return this.rotateOnAxis(new Vector3(1, 0, 0), angle);\n    }\n    rotateY(angle) {\n        return this.rotateOnAxis(new Vector3(0, 1, 0), angle);\n    }\n    rotateZ(angle) {\n        return this.rotateOnAxis(new Vector3(0, 0, 1), angle);\n    }\n    /**\n     * translate object by distance along axis in object space\n     * axis is assumed to be normalized\n     * @param axis\n     * @param distance\n     * @returns {Object3D}\n     */\n    translateOnAxis(axis, distance) {\n        const vec = new Vector3();\n        vec.copy(axis).applyQuaternion(this.quaternion);\n        this.position.add(vec.multiplyScalar(distance));\n        return this;\n    }\n    translateX(distance) {\n        return this.translateOnAxis(new Vector3(1, 0, 0), distance);\n    }\n    translateY(distance) {\n        return this.translateOnAxis(new Vector3(0, 1, 0), distance);\n    }\n    translateZ(distance) {\n        return this.translateOnAxis(new Vector3(0, 0, 1), distance);\n    }\n    localToWorld(vector) {\n        return vector.applyMatrix4(this.matrixWorld);\n    }\n    worldToLocal(vector) {\n        return vector.applyMatrix4(new Matrix4().getInverse(this.matrixWorld));\n    }\n    lookAt(vec) {\n        const mat = new Matrix4();\n        const vector = new Vector3();\n        if (this instanceof Camera) {\n            mat.lookAt(this.position, vector, this.up);\n        }\n        else {\n            mat.lookAt(vector, this.position, this.up);\n        }\n        this.quaternion.setFromRotationMatrix(mat);\n        return this;\n    }\n    add(object, ...objects) {\n        if (objects.length > 1) {\n            for (let i = 0; i < objects.length; i++) {\n                this.add(objects[i]);\n            }\n            return this;\n        }\n        if (object === this) {\n            console.error(`THREE.Object3D.add: object can't be added as a child of itself. ${object}`);\n            return this;\n        }\n        if (object.parent !== null) {\n            object.parent.remove(object);\n        }\n        object.parent = this;\n        object.dispatchEvent({ type: \"added\" });\n        this.children.push(object);\n        return this;\n    }\n    remove(object, ...objects) {\n        if (objects.length > 1) {\n            for (let i = 0; i < objects.length; i++) {\n                this.remove(objects[i]);\n            }\n            return this;\n        }\n        const index = this.children.indexOf(object);\n        if (index !== -1) {\n            object.parent = null;\n            object.dispatchEvent({ type: \"removed\" });\n            this.children.splice(index, 1);\n        }\n        return this;\n    }\n    get worldPosition() {\n        this.updateMatrixWorld(true);\n        return new Vector3().setFromMatrixPosition(this.matrixWorld);\n    }\n    get worldQuaternion() {\n        const position = new Vector3();\n        const scale = new Vector3();\n        const result = new Quaternion();\n        this.updateMatrixWorld(true);\n        this.matrixWorld.decompose(position, result, scale);\n        return result;\n    }\n    get worldRotation() {\n        return new Euler().setFromQuaternion(this.worldQuaternion, this.rotation.order);\n    }\n    get worldScale() {\n        const position = new Vector3();\n        const quaternion = new Quaternion();\n        const result = new Vector3();\n        this.updateMatrixWorld(true);\n        this.matrixWorld.decompose(position, quaternion, result);\n        return result;\n    }\n    get worldDirection() {\n        return new Vector3().set(0, 0, 1).applyQuaternion(this.worldQuaternion);\n    }\n    traverse(callback) {\n        callback(this);\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverse(callback);\n        }\n    }\n    traverseVisible(callback) {\n        if (this.visible === false)\n            return;\n        callback(this);\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverseVisible(callback);\n        }\n    }\n    traverseAncestors(callback) {\n        if (this.parent !== null) {\n            callback(this.parent);\n            this.parent.traverseAncestors(callback);\n        }\n    }\n    clone(recursive = false) {\n        return new this.constructor().copy(this, recursive);\n    }\n    copy(source, recursive = true) {\n        this.name = source.name;\n        this.up.copy(source.up);\n        this.position.copy(source.position);\n        this.quaternion.copy(source.quaternion);\n        this.scale.copy(source.scale);\n        this.matrix.copy(source.matrix);\n        this.matrixWorld.copy(source.matrixWorld);\n        this.matrixAutoUpdate = source.matrixAutoUpdate;\n        this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n        this.layers.mask = source.layers.mask;\n        this.visible = source.visible;\n        this.castShadow = source.castShadow;\n        this.receiveShadow = source.receiveShadow;\n        this.frustumCulled = source.frustumCulled;\n        this.renderOrder = source.renderOrder;\n        this.userData = JSON.parse(JSON.stringify(source.userData));\n        if (recursive === true) {\n            for (let i = 0; i < source.children.length; i++) {\n                this.add(source.children[i].clone());\n            }\n        }\n        return this;\n    }\n}\nObject3D.DefaultUp = new Vector3(0, 1, 0);\nObject3D.DefaultMatrixAutoUpdate = true;\n","import { OrthographicCamera } from \"../cameras/OrthographicCamera\";\nimport { PerspectiveCamera } from \"../cameras/PerspectiveCamera\";\nimport { Ray } from \"../math/Ray\";\nimport { unprojectVector3onCamera } from \"../utils\";\nfunction intersectObject(object, raycaster, intersects, recursive = false) {\n    if (object.visible === false)\n        return;\n    object.raycast(raycaster, intersects);\n    if (recursive === true) {\n        const children = object.children;\n        for (let i = 0, l = children.length; i < l; i++) {\n            intersectObject(children[i], raycaster, intersects, true);\n        }\n    }\n}\nexport class Raycaster {\n    constructor(origin, direction, near = 0, far = Infinity) {\n        this.params = {\n            LOD: {},\n            Line: {},\n            Mesh: {},\n            Points: { threshold: 1 },\n            Sprite: {},\n        };\n        this.near = 0;\n        this.far = Infinity;\n        this.linePrecision = 1;\n        this.ray = new Ray(origin, direction);\n        this.near = near;\n        this.far = far;\n    }\n    set(origin, direction) {\n        this.ray.set(origin, direction);\n        return this;\n    }\n    setFromCamera(coords, camera) {\n        if (camera && camera instanceof PerspectiveCamera) {\n            this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n            this.ray.direction.set(coords.x, coords.y, 0.5);\n            unprojectVector3onCamera(this.ray.direction, camera);\n            this.ray.direction.sub(this.ray.origin).normalize();\n        }\n        else if (camera && camera instanceof OrthographicCamera) {\n            this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far));\n            unprojectVector3onCamera(this.ray.origin, camera); // set origin in plane of camera\n            this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n        }\n        else {\n            console.error(`THREE.Raycaster: Unsupported camera type.`);\n        }\n        return this;\n    }\n    intersectObject(object, recursive = false) {\n        const intersects = [];\n        intersectObject(object, this, intersects, recursive);\n        intersects.sort((a, b) => a.distance - b.distance);\n        return intersects;\n    }\n    intersectObjects(objects, recursive = false) {\n        const intersects = [];\n        for (let i = 0, l = objects.length; i < l; i++) {\n            intersectObject(objects[i], this, intersects, recursive);\n        }\n        intersects.sort((a, b) => a.distance - b.distance);\n        return intersects;\n    }\n}\n","import { Object3D } from \"../../core/Object3D\";\nexport class ImmediateRenderObject extends Object3D {\n    constructor(material) {\n        super();\n        this.material = material;\n    }\n}\n","import { Float32BufferAttribute } from \"../core/BufferAttribute\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Vector3 } from \"../math/Vector3\";\nexport class BoxGeometry extends Geometry {\n    constructor(width, height, depth, widthSegments, heightSegments, depthSegments) {\n        super();\n        this.type = \"BoxGeometry\";\n        this.parameters = {\n            depth: depth,\n            depthSegments: depthSegments,\n            height: height,\n            heightSegments: heightSegments,\n            width: width,\n            widthSegments: widthSegments,\n        };\n        this.fromBufferGeometry(new BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments));\n        this.mergeVertices();\n    }\n}\nexport class BoxBufferGeometry extends BufferGeometry {\n    constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {\n        super();\n        this.type = \"BoxBufferGeometry\";\n        this.parameters = {\n            depth: depth,\n            depthSegments: depthSegments,\n            height: height,\n            heightSegments: heightSegments,\n            width: width,\n            widthSegments: widthSegments,\n        };\n        widthSegments = Math.floor(widthSegments);\n        heightSegments = Math.floor(heightSegments);\n        depthSegments = Math.floor(depthSegments);\n        // buffers\n        const indices = [];\n        const vertices = [];\n        const normals = [];\n        const uvs = [];\n        // helper variables\n        let numberOfVertices = 0;\n        let groupStart = 0;\n        const buildPlane = (u, v, w, uDir, vDir, width2, height2, depth2, gridX, gridY, materialIndex) => {\n            const segmentWidth = width2 / gridX;\n            const segmentHeight = height2 / gridY;\n            const widthHalf = width2 / 2;\n            const heightHalf = height2 / 2;\n            const depthHalf = depth2 / 2;\n            const gridX1 = gridX + 1;\n            const gridY1 = gridY + 1;\n            let vertexCounter = 0;\n            let groupCount = 0;\n            // generate vertices, normals and uvs\n            for (let iy = 0; iy < gridY1; iy++) {\n                const y = iy * segmentHeight - heightHalf;\n                for (let ix = 0; ix < gridX1; ix++) {\n                    const x = ix * segmentWidth - widthHalf;\n                    const vector = new Vector3();\n                    // set values to correct vector component\n                    vector[u] = x * uDir;\n                    vector[v] = y * vDir;\n                    vector[w] = depthHalf;\n                    // now apply vector to vertex buffer\n                    vertices.push(vector.x, vector.y, vector.z);\n                    // set values to correct vector component\n                    vector[u] = 0;\n                    vector[v] = 0;\n                    vector[w] = depth2 > 0 ? 1 : -1;\n                    // now apply vector to normal buffer\n                    normals.push(vector.x, vector.y, vector.z);\n                    // uvs\n                    uvs.push(ix / gridX);\n                    uvs.push(1 - iy / gridY);\n                    // counters\n                    vertexCounter += 1;\n                }\n            }\n            // indices\n            // 1. you need three indices to draw a single face\n            // 2. a single segment consists of two faces\n            // 3. so we need to generate six (2*3) indices per segment\n            for (let iy = 0; iy < gridY; iy++) {\n                for (let ix = 0; ix < gridX; ix++) {\n                    const a = numberOfVertices + ix + gridX1 * iy;\n                    const b = numberOfVertices + ix + gridX1 * (iy + 1);\n                    const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n                    const d = numberOfVertices + (ix + 1) + gridX1 * iy;\n                    // faces\n                    indices.push(a, b, d);\n                    indices.push(b, c, d);\n                    // increase counter\n                    groupCount += 6;\n                }\n            }\n            // add a group to the geometry. this will ensure multi material support\n            this.addGroup(groupStart, groupCount, materialIndex);\n            // calculate new start value for groups\n            groupStart += groupCount;\n            // update total number of vertices\n            numberOfVertices += vertexCounter;\n        };\n        // build each side of the box geometry\n        buildPlane(\"z\", \"y\", \"x\", -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n        buildPlane(\"z\", \"y\", \"x\", 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n        buildPlane(\"x\", \"z\", \"y\", 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n        buildPlane(\"x\", \"z\", \"y\", 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n        buildPlane(\"x\", \"y\", \"z\", 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n        buildPlane(\"x\", \"y\", \"z\", -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n        // build geometry\n        this.setIndex(indices);\n        this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n        this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    }\n}\n","import { Float32BufferAttribute } from \"../core/BufferAttribute\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nexport class CircleGeometry extends Geometry {\n    constructor(radius, segments, thetaStart, thetaLength) {\n        super();\n        this.type = \"CircleGeometry\";\n        this.parameters = {\n            radius: radius,\n            segments: segments,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n        this.fromBufferGeometry(new CircleBufferGeometry(radius, segments, thetaStart, thetaLength));\n        this.mergeVertices();\n    }\n}\nexport class CircleBufferGeometry extends BufferGeometry {\n    constructor(radius = 1, segments, thetaStart = 0, thetaLength = Math.PI * 2) {\n        super();\n        this.type = \"CircleBufferGeometry\";\n        this.parameters = {\n            radius: radius,\n            segments: segments,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n        segments = segments !== undefined ? Math.max(3, segments) : 8;\n        // buffers\n        const indices = [];\n        const vertices = [];\n        const normals = [];\n        const uvs = [];\n        // center point\n        vertices.push(0, 0, 0);\n        normals.push(0, 0, 1);\n        uvs.push(0.5, 0.5);\n        for (let s = 0, i = 3; s <= segments; s++, i += 3) {\n            const segment = thetaStart + s / segments * thetaLength;\n            // vertex\n            vertices.push(radius * Math.cos(segment), radius * Math.sin(segment), 0);\n            // normal\n            normals.push(0, 0, 1);\n            // uvs\n            uvs.push((vertices[i] / radius + 1) / 2, (vertices[i + 1] / radius + 1) / 2);\n        }\n        // indices\n        for (let i = 1; i <= segments; i++) {\n            indices.push(i, i + 1, 0);\n        }\n        // build geometry\n        this.setIndex(indices);\n        this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n        this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    }\n}\n","import { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { CylinderBufferGeometry, CylinderGeometry } from \"./CylinderGeometry\";\nexport class ConeGeometry extends Geometry {\n    constructor(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n        super();\n        this.type = \"ConeGeometry\";\n        CylinderGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n        this.parameters = {\n            height: height,\n            heightSegments: heightSegments,\n            openEnded: openEnded,\n            radialSegments: radialSegments,\n            radius: radius,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n    }\n}\nexport class ConeBufferGeometry extends BufferGeometry {\n    constructor(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n        super();\n        this.type = \"ConeBufferGeometry\";\n        CylinderBufferGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n        this.parameters = {\n            height: height,\n            heightSegments: heightSegments,\n            openEnded: openEnded,\n            radialSegments: radialSegments,\n            radius: radius,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n    }\n}\n","import { Float32BufferAttribute } from \"../core/BufferAttribute\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Vector3 } from \"../math/Vector3\";\nexport class CylinderGeometry extends Geometry {\n    constructor(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n        super();\n        this.type = \"CylinderGeometry\";\n        this.parameters = {\n            height: height,\n            heightSegments: heightSegments,\n            openEnded: openEnded,\n            radialSegments: radialSegments,\n            radiusBottom: radiusBottom,\n            radiusTop: radiusTop,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n        this.fromBufferGeometry(new CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength));\n        this.mergeVertices();\n    }\n}\nexport class CylinderBufferGeometry extends BufferGeometry {\n    constructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 9, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {\n        super();\n        this.type = \"CylinderBufferGeometry\";\n        this.parameters = {\n            height: height,\n            heightSegments: heightSegments,\n            openEnded: openEnded,\n            radialSegments: radialSegments,\n            radiusBottom: radiusBottom,\n            radiusTop: radiusTop,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n        radialSegments = Math.floor(radialSegments);\n        heightSegments = Math.floor(heightSegments);\n        // buffers\n        const indices = [];\n        const vertices = [];\n        const normals = [];\n        const uvs = [];\n        // helper variables\n        let index = 0;\n        const indexArray = [];\n        const halfHeight = height / 2;\n        let groupStart = 0;\n        const generateCap = (top) => {\n            let centerIndexStart, centerIndexEnd;\n            let groupCount = 0;\n            const radius = top ? radiusTop : radiusBottom;\n            const sign = top ? 1 : -1;\n            // save the index of the first center vertex\n            centerIndexStart = index;\n            // first we generate the center vertex data of the cap.\n            // because the geometry needs one set of uvs per face,\n            // we must generate a center vertex per face/segment\n            for (let x = 1; x <= radialSegments; x++) {\n                // vertex\n                vertices.push(0, halfHeight * sign, 0);\n                // normal\n                normals.push(0, sign, 0);\n                // uv\n                uvs.push(0.5, 0.5);\n                // increase index\n                index++;\n            }\n            // save the index of the last center vertex\n            centerIndexEnd = index;\n            // now we generate the surrounding vertices, normals and uvs\n            for (let x = 0; x <= radialSegments; x++) {\n                const u = x / radialSegments;\n                const theta = u * thetaLength + thetaStart;\n                const cosTheta = Math.cos(theta);\n                const sinTheta = Math.sin(theta);\n                // vertex\n                vertices.push(radius * sinTheta, halfHeight * sign, radius * cosTheta);\n                // normal\n                normals.push(0, sign, 0);\n                // uv\n                uvs.push(cosTheta * 0.5 + 0.5, sinTheta * 0.5 * sign + 0.5);\n                // increase index\n                index++;\n            }\n            // generate indices\n            for (let x = 0; x < radialSegments; x++) {\n                const c = centerIndexStart + x;\n                const i = centerIndexEnd + x;\n                if (top) {\n                    // face top\n                    indices.push(i, i + 1, c);\n                }\n                else {\n                    // face bottom\n                    indices.push(i + 1, i, c);\n                }\n                groupCount += 3;\n            }\n            // add a group to the geometry. this will ensure multi material support\n            this.addGroup(groupStart, groupCount, top === true ? 1 : 2);\n            // calculate new start value for groups\n            groupStart += groupCount;\n        };\n        const generateTorso = () => {\n            let groupCount = 0;\n            // this will be used to calculate the normal\n            const slope = (radiusBottom - radiusTop) / height;\n            // generate vertices, normals and uvs\n            for (let y = 0; y <= heightSegments; y++) {\n                const indexRow = [];\n                const v = y / heightSegments;\n                // calculate the radius of the current row\n                const radius = v * (radiusBottom - radiusTop) + radiusTop;\n                for (let x = 0; x <= radialSegments; x++) {\n                    const u = x / radialSegments;\n                    const theta = u * thetaLength + thetaStart;\n                    const sinTheta = Math.sin(theta);\n                    const cosTheta = Math.cos(theta);\n                    // vertex\n                    vertices.push(radius * sinTheta, -v * height + halfHeight, radius * cosTheta);\n                    // normal\n                    const normal = new Vector3();\n                    normal.set(sinTheta, slope, cosTheta).normalize();\n                    normals.push(normal.x, normal.y, normal.z);\n                    // uv\n                    uvs.push(u, 1 - v);\n                    // save index of vertex in respective row\n                    indexRow.push(index++);\n                }\n                // now save vertices of the row in our index array\n                indexArray.push(indexRow);\n            }\n            // generate indices\n            for (let x = 0; x < radialSegments; x++) {\n                for (let y = 0; y < heightSegments; y++) {\n                    // we use the index array to access the correct indices\n                    const a = indexArray[y][x];\n                    const b = indexArray[y + 1][x];\n                    const c = indexArray[y + 1][x + 1];\n                    const d = indexArray[y][x + 1];\n                    // faces\n                    indices.push(a, b, d);\n                    indices.push(b, c, d);\n                    // update group counter\n                    groupCount += 6;\n                }\n            }\n            // add a group to the geometry. this will ensure multi material support\n            this.addGroup(groupStart, groupCount, 0);\n            // calculate new start value for groups\n            groupStart += groupCount;\n        };\n        // generate geometry\n        generateTorso();\n        if (openEnded === false) {\n            if (radiusTop > 0)\n                generateCap(true);\n            if (radiusBottom > 0)\n                generateCap(false);\n        }\n        // build geometry\n        this.setIndex(indices);\n        this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n        this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    }\n}\n","/*\nexport { WireframeGeometry } from './WireframeGeometry';\nexport { ParametricGeometry, ParametricBufferGeometry } from './ParametricGeometry';\nexport { TetrahedronGeometry, TetrahedronBufferGeometry } from './TetrahedronGeometry';\nexport { OctahedronGeometry, OctahedronBufferGeometry } from './OctahedronGeometry';\nexport { IcosahedronGeometry, IcosahedronBufferGeometry } from './IcosahedronGeometry';\nexport { DodecahedronGeometry, DodecahedronBufferGeometry } from './DodecahedronGeometry';\nexport { PolyhedronGeometry, PolyhedronBufferGeometry } from './PolyhedronGeometry';\nexport { TubeGeometry, TubeBufferGeometry } from './TubeGeometry';\nexport { TorusKnotGeometry, TorusKnotBufferGeometry } from './TorusKnotGeometry';\nexport { TorusGeometry, TorusBufferGeometry } from './TorusGeometry';\nexport { TextGeometry, TextBufferGeometry } from './TextGeometry';\nexport { SphereGeometry, SphereBufferGeometry } from './SphereGeometry';\nexport { RingGeometry, RingBufferGeometry } from './RingGeometry';\nexport { LatheGeometry, LatheBufferGeometry } from './LatheGeometry';\nexport { ShapeGeometry, ShapeBufferGeometry } from './ShapeGeometry';\nexport { ExtrudeGeometry, ExtrudeBufferGeometry } from './ExtrudeGeometry';\nexport { EdgesGeometry } from './EdgesGeometry';\n*/\nexport { PlaneGeometry, PlaneBufferGeometry } from \"./PlaneGeometry\";\nexport { ConeGeometry, ConeBufferGeometry } from \"./ConeGeometry\";\nexport { CylinderGeometry, CylinderBufferGeometry } from \"./CylinderGeometry\";\nexport { CircleGeometry, CircleBufferGeometry } from \"./CircleGeometry\";\nexport { BoxGeometry, BoxBufferGeometry } from \"./BoxGeometry\";\n","import { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Float32BufferAttribute } from \"../core/BufferAttribute\";\nexport class PlaneGeometry extends Geometry {\n    constructor(width, height, widthSegments, heightSegments) {\n        super();\n        this.type = \"PlaneGeometry\";\n        this.parameters = {\n            width: width,\n            height: height,\n            widthSegments: widthSegments,\n            heightSegments: heightSegments,\n        };\n        this.fromBufferGeometry(new PlaneBufferGeometry(width, height, widthSegments, heightSegments));\n        this.mergeVertices();\n    }\n}\nexport class PlaneBufferGeometry extends BufferGeometry {\n    constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {\n        super();\n        this.type = \"PlaneBufferGeometry\";\n        this.parameters = {\n            width: width,\n            height: height,\n            widthSegments: widthSegments,\n            heightSegments: heightSegments,\n        };\n        const widthHalf = width / 2;\n        const heightHalf = height / 2;\n        const gridX = Math.floor(widthSegments) || 1;\n        const gridY = Math.floor(heightSegments) || 1;\n        const gridX1 = gridX + 1;\n        const gridY1 = gridY + 1;\n        const segmentWidth = width / gridX;\n        const segmentHeight = height / gridY;\n        // buffers\n        const indices = [];\n        const vertices = [];\n        const normals = [];\n        const uvs = [];\n        // generate vertices, normals and uvs\n        for (let iy = 0; iy < gridY1; iy++) {\n            const y = iy * segmentHeight - heightHalf;\n            for (let ix = 0; ix < gridX1; ix++) {\n                const x = ix * segmentWidth - widthHalf;\n                vertices.push(x, -y, 0);\n                normals.push(0, 0, 1);\n                uvs.push(ix / gridX);\n                uvs.push(1 - iy / gridY);\n            }\n        }\n        // indices\n        for (let iy = 0; iy < gridY; iy++) {\n            for (let ix = 0; ix < gridX; ix++) {\n                const a = ix + gridX1 * iy;\n                const b = ix + gridX1 * (iy + 1);\n                const c = ix + 1 + gridX1 * (iy + 1);\n                const d = ix + 1 + gridX1 * iy;\n                // faces\n                indices.push(a, b, d);\n                indices.push(b, c, d);\n            }\n        }\n        // build geometry\n        this.setIndex(indices);\n        this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n        this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    }\n}\n","import { Light } from \"./Light\";\nexport class AmbientLight extends Light {\n    constructor(color, intensity) {\n        super(color, intensity);\n        this.type = \"AmbientLight\";\n        this.castShadow = false;\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { DirectionalLightShadow } from \"./DirectionalLightShadow\";\nimport { Light } from \"./Light\";\nexport class DirectionalLight extends Light {\n    constructor(color, intensity) {\n        super(color, intensity);\n        this.type = \"DirectionalLight\";\n        this.target = new Object3D();\n        this.shadow = new DirectionalLightShadow();\n        this.position = Object3D.DefaultUp.clone();\n        this.updateMatrix();\n    }\n    copy(source) {\n        super.copy(source);\n        this.target = source.target.clone();\n        this.shadow = source.shadow.clone();\n        return this;\n    }\n}\n","import { OrthographicCamera } from \"../cameras/OrthographicCamera\";\nimport { LightShadow } from \"./LightShadow\";\nexport class DirectionalLightShadow extends LightShadow {\n    constructor() {\n        super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Light } from \"./Light\";\nexport class HemisphereLight extends Light {\n    constructor(skyColor, groundColor, intensity) {\n        super(skyColor, intensity);\n        this.type = \"HemisphereLight\";\n        this.castShadow = false;\n        this.groundColor = groundColor;\n        this.position = Object3D.DefaultUp.clone();\n        this.updateMatrix();\n    }\n    copy(source) {\n        super.copy(source);\n        this.groundColor.copy(source.groundColor);\n        return this;\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Color } from \"../math/Color\";\nexport class Light extends Object3D {\n    constructor(color = new Color(), intensity = 1) {\n        super();\n        this.type = \"Light\";\n        this.intensity = 1;\n        this.receiveShadow = false;\n        this.color = color;\n        this.intensity = intensity;\n    }\n    copy(source) {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.intensity = source.intensity;\n        return this;\n    }\n}\n","import { Matrix4 } from \"../math/Matrix4\";\nimport { Vector2 } from \"../math/Vector2\";\nexport class LightShadow {\n    constructor(camera) {\n        this.bias = 0;\n        this.radius = 1;\n        this.mapSize = new Vector2(512, 512);\n        this.map = null;\n        this.matrix = new Matrix4();\n        this.camera = camera;\n    }\n    copy(source) {\n        this.camera = source.camera.clone();\n        this.bias = source.bias;\n        this.radius = source.radius;\n        this.mapSize.copy(source.mapSize);\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n","import { PerspectiveCamera } from \"../cameras/PerspectiveCamera\";\nimport { Light } from \"./Light\";\nimport { LightShadow } from \"./LightShadow\";\nexport class PointLight extends Light {\n    constructor(color, intensity, distance = 0, decay = 1) {\n        super(color, intensity);\n        this.type = \"PointLight\";\n        this.distance = 0;\n        this.decay = 1;\n        this.distance = distance;\n        this.decay = decay;\n        this.shadow = new LightShadow(new PerspectiveCamera(90, 1, 0.5, 500));\n    }\n    /**\n     * ntensity = power per solid angle.\n     * ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n     * @returns {number}\n     */\n    get power() {\n        return this.intensity * 4 * Math.PI;\n    }\n    set power(power) {\n        this.intensity = power / (4 * Math.PI);\n    }\n    copy(source) {\n        super.copy(source);\n        this.distance = source.distance;\n        this.decay = source.decay;\n        this.shadow = source.shadow.clone();\n        return this;\n    }\n}\n","import { Light } from \"./Light\";\nexport class RectAreaLight extends Light {\n    constructor(color, intensity, width = 10, height = 10) {\n        super(color, intensity);\n        this.type = \"RectAreaLight\";\n        this.width = 10;\n        this.height = 10;\n        this.width = width;\n        this.height = height;\n    }\n    copy(source) {\n        super.copy(source);\n        this.width = source.width;\n        this.height = source.height;\n        return this;\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Light } from \"./Light\";\nimport { SpotLightShadow } from \"./SpotLightShadow\";\nexport class SpotLight extends Light {\n    constructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1) {\n        super(color, intensity);\n        this.type = \"SpotLight\";\n        this.target = new Object3D();\n        this.distance = 0;\n        this.angle = Math.PI / 3;\n        this.penumbra = 0;\n        this.decay = 0;\n        this.position = Object3D.DefaultUp.clone();\n        this.updateMatrix();\n        this.distance = distance;\n        this.angle = angle;\n        this.penumbra = penumbra;\n        this.decay = decay;\n        this.shadow = new SpotLightShadow();\n    }\n    get power() {\n        return this.intensity * Math.PI;\n    }\n    set power(power) {\n        this.intensity = power / Math.PI;\n    }\n    copy(source) {\n        super.copy(source);\n        this.distance = source.distance;\n        this.angle = source.angle;\n        this.penumbra = source.penumbra;\n        this.decay = source.decay;\n        this.target = source.target.clone();\n        this.shadow = source.shadow.clone();\n        return this;\n    }\n}\n","import { PerspectiveCamera } from \"../cameras/PerspectiveCamera\";\nimport { MathUtil } from \"../math/Math\";\nimport { LightShadow } from \"./LightShadow\";\nexport class SpotLightShadow extends LightShadow {\n    constructor() {\n        super(new PerspectiveCamera(50, 1, 0.5, 500));\n    }\n    update(light) {\n        const camera = this.camera;\n        const fov = MathUtil.RAD2DEG * 2 * light.angle;\n        const aspect = this.mapSize.width / this.mapSize.height;\n        const far = light.distance || camera.far;\n        if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n            camera.fov = fov;\n            camera.aspect = aspect;\n            camera.far = far;\n        }\n        return this;\n    }\n    clone() {\n        return super.clone();\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Material } from \"./Material\";\nexport class LineBasicMaterial extends Material {\n    constructor(parameters) {\n        super();\n        this.type = \"LineBasicMaterial\";\n        this.color = new Color().setHex(0xffffff);\n        this.lights = false;\n        this.linecap = \"round\";\n        this.linejoin = \"round\";\n        this.linewidth = 1;\n        this.setValues(parameters);\n    }\n    copy(source) {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.linewidth = source.linewidth;\n        this.linecap = source.linecap;\n        this.linejoin = source.linejoin;\n        return this;\n    }\n}\n","import { LineBasicMaterial } from \"./LineBasicMaterial\";\nexport class LineDashedMaterial extends LineBasicMaterial {\n    constructor(parameters) {\n        super(parameters);\n        this.type = \"LineDashedMaterial\";\n        this.dashSize = 3;\n        this.gapSize = 1;\n        this.scale = 1;\n        this.setValues(parameters);\n    }\n    copy(source) {\n        this.scale = source.scale;\n        this.dashSize = source.dashSize;\n        this.gapSize = source.gapSize;\n        return this;\n    }\n}\n","import { AddEquation, FlatShading, FrontSide, LessEqualDepth, NoColors, NormalBlending, OneMinusSrcAlphaFactor, SrcAlphaFactor, } from \"../constants\";\nimport { EventDispatcher } from \"../core/EventDispatcher\";\nimport { Color } from \"../math/Color\";\nimport { MathUtil } from \"../math/Math\";\nimport { Vector3 } from \"../math/Vector3\";\nlet materialId = 0;\nexport class Material extends EventDispatcher {\n    constructor() {\n        super(...arguments);\n        this.id = materialId++;\n        this.uuid = MathUtil.generateUUID();\n        this.type = \"Material\";\n        this.alphaTest = 0;\n        this.blending = NormalBlending;\n        this.blendDst = OneMinusSrcAlphaFactor;\n        this.blendDstAlpha = null;\n        this.blendEquation = AddEquation;\n        this.blendEquationAlpha = null;\n        this.blendSrc = SrcAlphaFactor;\n        this.blendSrcAlpha = null;\n        this.clipIntersection = false;\n        this.clippingPlanes = null;\n        this.clipShadows = false;\n        this.colorWrite = true;\n        this.depthFunc = LessEqualDepth;\n        this.depthTest = true;\n        this.depthWrite = true;\n        this.dithering = false;\n        this.flatShading = false;\n        this.fog = true;\n        this.lights = true;\n        /**\n         * For mesh type extension\n         */\n        this.morphTargets = false;\n        this.name = \"\";\n        this.needsUpdate = true;\n        this.opacity = 1;\n        this.overdraw = 0;\n        this.onBeforeCompile = function () { };\n        this.polygonOffset = false;\n        this.polygonOffsetFactor = 0;\n        this.polygonOffsetUnits = 0;\n        /**\n         * override the renderer's default precision for this material\n         * \"highp\", \"mediump\" or \"lowp\"\n         * @type {string}\n         */\n        this.precision = null; // Question type\n        this.premultipliedAlpha = false;\n        /**\n         * THREE.FrontSide  back side\n         * THREE.BackSide   front side\n         * THREE.DoubleSide both sides\n         * @type {number}\n         */\n        this.shadowSide = null; // Question type\n        this.side = FrontSide;\n        this.transparent = false;\n        this.userData = {};\n        /**\n         * THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n         */\n        this.vertexColors = NoColors;\n        /**\n         * Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n         * @type {number}\n         */\n        this.visible = true;\n    }\n    setValues(values) {\n        if (values === undefined)\n            return this;\n        for (const key in values) {\n            if (!values.hasOwnProperty(key))\n                continue;\n            const newValue = values[key];\n            if (newValue === undefined) {\n                console.warn(`THREE.Material: \"${key}\" parameter is undefined.`);\n                continue;\n            }\n            /**\n             * for backward compatability if shading is set in the constructor\n             */\n            if (key === \"shading\") {\n                console.warn(`THREE.${this.type}: .shading has been removed. Use the boolean .flatShading instead.`);\n                this.flatShading = newValue === FlatShading;\n                continue;\n            }\n            const currentValue = this[key];\n            if (currentValue === undefined) {\n                console.warn(`THREE.${this.type}: \"${key}\" is not a property of this material.`);\n                continue;\n            }\n            if (currentValue && currentValue instanceof Color) {\n                if (newValue instanceof Color)\n                    currentValue.copy(newValue);\n                else if (typeof newValue === \"number\") {\n                    currentValue.setHex(newValue);\n                }\n                else if (typeof newValue === \"string\") {\n                    currentValue.setStyle(newValue);\n                }\n            }\n            else if (currentValue && currentValue instanceof Vector3 && (newValue && newValue instanceof Vector3)) {\n                currentValue.copy(newValue);\n            }\n            else if (key === \"overdraw\") {\n                /**\n                 * ensure overdraw is backwards-compatible with legacy boolean type\n                 * @type {Number}\n                 */\n                this[key] = Number(newValue);\n            }\n            else {\n                this[key] = newValue;\n            }\n        }\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n    copy(source) {\n        this.name = source.name;\n        this.fog = source.fog;\n        this.lights = source.lights;\n        this.blending = source.blending;\n        this.side = source.side;\n        this.flatShading = source.flatShading;\n        this.vertexColors = source.vertexColors;\n        this.opacity = source.opacity;\n        this.transparent = source.transparent;\n        this.blendSrc = source.blendSrc;\n        this.blendDst = source.blendDst;\n        this.blendEquation = source.blendEquation;\n        this.blendSrcAlpha = source.blendSrcAlpha;\n        this.blendDstAlpha = source.blendDstAlpha;\n        this.blendEquationAlpha = source.blendEquationAlpha;\n        this.depthFunc = source.depthFunc;\n        this.depthTest = source.depthTest;\n        this.depthWrite = source.depthWrite;\n        this.colorWrite = source.colorWrite;\n        this.precision = source.precision;\n        this.polygonOffset = source.polygonOffset;\n        this.polygonOffsetFactor = source.polygonOffsetFactor;\n        this.polygonOffsetUnits = source.polygonOffsetUnits;\n        this.dithering = source.dithering;\n        this.alphaTest = source.alphaTest;\n        this.premultipliedAlpha = source.premultipliedAlpha;\n        this.overdraw = source.overdraw;\n        this.visible = source.visible;\n        this.userData = JSON.parse(JSON.stringify(source.userData));\n        this.clipShadows = source.clipShadows;\n        this.clipIntersection = source.clipIntersection;\n        const srcPlanes = source.clippingPlanes;\n        let dstPlanes = null;\n        if (srcPlanes !== null) {\n            const n = srcPlanes.length;\n            dstPlanes = new Array(n);\n            for (let i = 0; i !== n; ++i) {\n                dstPlanes[i] = srcPlanes[i].clone();\n            }\n        }\n        this.clippingPlanes = dstPlanes;\n        this.shadowSide = source.shadowSide;\n        return this;\n    }\n    dispose() {\n        this.dispatchEvent({ type: \"dispose\" });\n    }\n}\n","export { ShadowMaterial } from \"./ShadowMaterial\";\nexport { SpriteMaterial } from \"./SpriteMaterial\";\nexport { RawShaderMaterial } from \"./RawShaderMaterial\";\nexport { ShaderMaterial } from \"./ShaderMaterial\";\nexport { PointsMaterial } from \"./PointsMaterial\";\nexport { MeshPhysicalMaterial } from \"./MeshPhysicalMaterial\";\nexport { MeshStandardMaterial } from \"./MeshStandardMaterial\";\nexport { MeshPhongMaterial } from \"./MeshPhongMaterial\";\nexport { MeshToonMaterial } from \"./MeshToonMaterial\";\nexport { MeshNormalMaterial } from \"./MeshNormalMaterial\";\nexport { MeshLambertMaterial } from \"./MeshLambertMaterial\";\nexport { MeshDepthMaterial } from \"./MeshDepthMaterial\";\nexport { MeshDistanceMaterial } from \"./MeshDistanceMaterial\";\nexport { MeshBasicMaterial } from \"./MeshBasicMaterial\";\nexport { LineDashedMaterial } from \"./LineDashedMaterial\";\nexport { LineBasicMaterial } from \"./LineBasicMaterial\";\nexport { Material } from \"./Material\";\n","import { MultiplyOperation } from \"../constants\";\nimport { Color } from \"../math/Color\";\nimport { Material } from \"./Material\";\nexport class MeshBasicMaterial extends Material {\n    constructor(parameters) {\n        super();\n        this.type = \"MeshBasicMaterial\";\n        this.alphaMap = null;\n        this.aoMap = null;\n        this.aoMapIntensity = 1.0;\n        this.color = new Color().setHex(0xffffff);\n        this.combine = MultiplyOperation;\n        this.envMap = null;\n        this.lights = false;\n        this.lightMap = null;\n        this.lightMapIntensity = 1.0;\n        this.map = null;\n        this.morphTargets = false;\n        this.reflectivity = 1;\n        this.refractionRatio = 0.98;\n        this.skinning = false;\n        this.specularMap = null;\n        this.wireframe = false;\n        this.wireframeLinecap = \"round\";\n        this.wireframeLinejoin = \"round\";\n        this.wireframeLinewidth = 1;\n        this.setValues(parameters);\n    }\n    copy(source) {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.map = source.map;\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n        this.specularMap = source.specularMap;\n        this.alphaMap = source.alphaMap;\n        this.envMap = source.envMap;\n        this.combine = source.combine;\n        this.reflectivity = source.reflectivity;\n        this.refractionRatio = source.refractionRatio;\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        return this;\n    }\n}\n","import { BasicDepthPacking } from \"../constants\";\nimport { Material } from \"./Material\";\nexport class MeshDepthMaterial extends Material {\n    constructor(parameters) {\n        super();\n        this.type = \"MeshDepthMaterial\";\n        this.alphaMap = null;\n        this.depthPacking = BasicDepthPacking;\n        this.displacementMap = null;\n        this.displacementScale = 1;\n        this.displacementBias = 0;\n        this.fog = false;\n        this.lights = false;\n        this.map = null;\n        this.morphTargets = false;\n        this.skinning = false;\n        this.wireframe = false;\n        this.wireframeLinewidth = 1;\n        this.setValues(parameters);\n    }\n    copy(source) {\n        super.copy(source);\n        this.depthPacking = source.depthPacking;\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        this.map = source.map;\n        this.alphaMap = source.alphaMap;\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        return this;\n    }\n}\n","import { Vector3 } from \"../math/Vector3\";\nimport { Material } from \"./Material\";\nexport class MeshDistanceMaterial extends Material {\n    constructor(parameters) {\n        super();\n        this.type = \"MeshDepthMaterial\";\n        this.alphaMap = null;\n        this.displacementMap = null;\n        this.displacementScale = 1;\n        this.displacementBias = 0;\n        this.farDistance = 1;\n        this.fog = false;\n        this.lights = false;\n        this.map = null;\n        this.morphTargets = false;\n        this.nearDistance = 1;\n        this.referencePosition = new Vector3();\n        this.skinning = false;\n        this.setValues(parameters);\n    }\n    copy(source) {\n        super.copy(source);\n        this.referencePosition.copy(source.referencePosition);\n        this.nearDistance = source.nearDistance;\n        this.farDistance = source.farDistance;\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        this.map = source.map;\n        this.alphaMap = source.alphaMap;\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n        return this;\n    }\n}\n","import { MultiplyOperation } from \"../constants\";\nimport { Color } from \"../math/Color\";\nimport { Material } from \"./Material\";\nexport class MeshLambertMaterial extends Material {\n    constructor(parameters) {\n        super();\n        this.type = \"MeshLambertMaterial\";\n        this.aoMap = null;\n        this.aoMapIntensity = 1;\n        this.alphaMap = null;\n        this.color = new Color().setHex(0xffffff);\n        this.combine = MultiplyOperation;\n        this.emissive = new Color().setHex(0x000000);\n        this.emissiveIntensity = 1;\n        this.emissiveMap = null;\n        this.envMap = null;\n        this.map = null;\n        this.morphNormals = true;\n        this.morphTargets = true;\n        this.lightMap = null;\n        this.lightMapIntensity = 1;\n        this.skinning = false;\n        this.specularMap = null;\n        this.reflectivity = 1;\n        this.refractionRatio = 0.98;\n        this.wireframe = false;\n        this.wireframeLinecap = \"round\";\n        this.wireframeLinejoin = \"round\";\n        this.wireframeLinewidth = 1;\n        this.setValues(parameters);\n    }\n    copy(source) {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.map = source.map;\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n        this.emissive.copy(source.emissive);\n        this.emissiveMap = source.emissiveMap;\n        this.emissiveIntensity = source.emissiveIntensity;\n        this.specularMap = source.specularMap;\n        this.alphaMap = source.alphaMap;\n        this.envMap = source.envMap;\n        this.combine = source.combine;\n        this.reflectivity = source.reflectivity;\n        this.refractionRatio = source.refractionRatio;\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        this.morphNormals = source.morphNormals;\n        return this;\n    }\n}\n","import { Vector2 } from \"../math/Vector2\";\nimport { Material } from \"./Material\";\nexport class MeshNormalMaterial extends Material {\n    constructor(paramenters) {\n        super();\n        this.type = \"MeshNormalMaterial\";\n        this.bumpMap = null;\n        this.bumpScale = 1;\n        this.normalMap = null;\n        this.normalScale = new Vector2(1, 1);\n        this.displacementMap = null;\n        this.displacementScale = 1;\n        this.displacementBias = 0;\n        this.wireframe = false;\n        this.wireframeLinewidth = 1;\n        this.fog = false;\n        this.lights = false;\n        this.skinning = false;\n        this.morphTargets = false;\n        this.morphNormals = false;\n        this.setValues(paramenters);\n    }\n}\n","import { MultiplyOperation } from \"../constants\";\nimport { Color } from \"../math/Color\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Material } from \"./Material\";\n/**\n * parameters = {\n *  color: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\nexport class MeshPhongMaterial extends Material {\n    constructor(parameters) {\n        super();\n        this.type = \"MeshPhongMaterial\";\n        this.alphaMap = null;\n        this.aoMap = null;\n        this.aoMapIntensity = 1.0;\n        this.bumpMap = null;\n        this.bumpScale = 1;\n        this.color = new Color().setHex(0xffffff);\n        this.combine = MultiplyOperation;\n        this.displacementBias = 0;\n        this.displacementMap = null;\n        this.displacementScale = 1;\n        this.emissive = new Color().setHex(0x000000);\n        this.emissiveIntensity = 1.0;\n        this.emissiveMap = null;\n        this.envMap = null;\n        this.lightMap = null;\n        this.lightMapIntensity = 1.0;\n        this.map = null;\n        this.morphNormals = false;\n        this.morphTargets = false;\n        this.normalMap = null;\n        this.normalScale = new Vector2(1, 1);\n        this.reflectivity = 1;\n        this.refractionRatio = 0.98;\n        this.shininess = 30;\n        this.skinning = false;\n        this.specular = new Color().setHex(0x111111);\n        this.specularMap = null;\n        this.wireframe = false;\n        this.wireframeLinecap = \"round\";\n        this.wireframeLinejoin = \"round\";\n        this.wireframeLinewidth = 1;\n        this.setValues(parameters);\n    }\n    copy(source) {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.specular.copy(source.specular);\n        this.shininess = source.shininess;\n        this.map = source.map;\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n        this.emissive.copy(source.emissive);\n        this.emissiveMap = source.emissiveMap;\n        this.emissiveIntensity = source.emissiveIntensity;\n        this.bumpMap = source.bumpMap;\n        this.bumpScale = source.bumpScale;\n        this.normalMap = source.normalMap;\n        this.normalScale.copy(source.normalScale);\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n        this.specularMap = source.specularMap;\n        this.alphaMap = source.alphaMap;\n        this.envMap = source.envMap;\n        this.combine = source.combine;\n        this.reflectivity = source.reflectivity;\n        this.refractionRatio = source.refractionRatio;\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        this.morphNormals = source.morphNormals;\n        return this;\n    }\n}\n","import { Material } from \"./Material\";\nexport class MeshPhysicalMaterial extends Material {\n    constructor(parameters) {\n        super();\n        this.type = \"MeshPhysicalMaterial\";\n        // maps to F0 = 0.04\n        this.clearCoat = 0.0;\n        this.clearCoatRoughness = 0.0;\n        this.defines = { PHYSICAL: \"\" };\n        this.reflectivity = 0.5;\n        this.setValues(parameters);\n    }\n    copy(source) {\n        this.defines = { PHYSICAL: \"\" };\n        this.reflectivity = source.reflectivity;\n        this.clearCoat = source.clearCoat;\n        this.clearCoatRoughness = source.clearCoatRoughness;\n        return this;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Material } from \"./Material\";\n/**\n *\n * parameters = {\n *  color: <hex>,\n *  roughness: <float>,\n *  metalness: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  roughnessMap: new THREE.Texture( <Image> ),\n *\n *  metalnessMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  envMapIntensity: <float>\n *\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\nexport class MeshStandardMaterial extends Material {\n    constructor(parameters) {\n        super();\n        this.type = \"MeshStandardMaterial\";\n        this.alphaMap = null;\n        this.aoMap = null;\n        this.aoMapIntensity = 1.0;\n        this.bumpMap = null;\n        this.bumpScale = 1;\n        this.color = new Color().setHex(0xffffff);\n        this.defines = { STANDARD: \"\" };\n        this.displacementBias = 0;\n        this.displacementMap = null;\n        this.displacementScale = 1;\n        this.emissive = new Color().setHex(0x000000);\n        this.emissiveIntensity = 1.0;\n        this.emissiveMap = null;\n        this.envMap = null;\n        this.envMapIntensity = 1.0;\n        this.lightMap = null;\n        this.lightMapIntensity = 1.0;\n        this.map = null;\n        this.metalness = 0.5;\n        this.metalnessMap = null;\n        this.morphNormals = false;\n        this.morphTargets = false;\n        this.normalMap = null;\n        this.normalScale = new Vector2(1, 1);\n        this.refractionRatio = 0.98;\n        this.roughness = 0.5;\n        this.roughnessMap = null;\n        this.skinning = false;\n        this.wireframe = false;\n        this.wireframeLinecap = \"round\";\n        this.wireframeLinejoin = \"round\";\n        this.wireframeLinewidth = 1;\n        this.setValues(parameters);\n    }\n    copy(source) {\n        super.copy(source);\n        this.defines = { STANDARD: \"\" };\n        this.color.copy(source.color);\n        this.roughness = source.roughness;\n        this.metalness = source.metalness;\n        this.map = source.map;\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n        this.emissive.copy(source.emissive);\n        this.emissiveMap = source.emissiveMap;\n        this.emissiveIntensity = source.emissiveIntensity;\n        this.bumpMap = source.bumpMap;\n        this.bumpScale = source.bumpScale;\n        this.normalMap = source.normalMap;\n        this.normalScale.copy(source.normalScale);\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n        this.roughnessMap = source.roughnessMap;\n        this.metalnessMap = source.metalnessMap;\n        this.alphaMap = source.alphaMap;\n        this.envMap = source.envMap;\n        this.envMapIntensity = source.envMapIntensity;\n        this.refractionRatio = source.refractionRatio;\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        this.morphNormals = source.morphNormals;\n        return this;\n    }\n}\n","import { MeshPhongMaterial } from \"./MeshPhongMaterial\";\nexport class MeshToonMaterial extends MeshPhongMaterial {\n    constructor(parameters) {\n        super(parameters);\n        this.type = \"MeshToonMaterial\";\n        this.defines = { TOON: \"\" };\n        this.gradientMap = null;\n        this.setValues(parameters);\n    }\n    copy(source) {\n        super.copy(source);\n        this.gradientMap = source.gradientMap;\n        return this;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Material } from \"./Material\";\nexport class PointsMaterial extends Material {\n    constructor(parameters) {\n        super();\n        this.type = \"PointsMaterial\";\n        this.color = new Color().setHex(0xffffff);\n        this.lights = false;\n        this.map = null;\n        this.size = 1;\n        this.sizeAttenuation = true;\n        this.setValues(parameters);\n    }\n    copy(source) {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.map = source.map;\n        this.size = source.size;\n        this.sizeAttenuation = source.sizeAttenuation;\n        return this;\n    }\n}\n","import { ShaderMaterial } from \"./ShaderMaterial\";\nexport class RawShaderMaterial extends ShaderMaterial {\n}\n","import { UniformsUtils } from \"../renderers/shaders/UniformsUtils\";\nimport { Material } from \"./Material\";\nexport class ShaderMaterial extends Material {\n    constructor(parameters) {\n        super();\n        this.type = \"ShaderMaterial\";\n        this.defines = {};\n        this.uniforms = {};\n        this.vertexShader = `void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}`;\n        this.fragmentShader = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n        this.linewidth = 1;\n        this.wireframe = false;\n        this.wireframeLinewidth = 1;\n        this.fog = false; // set to use scene fog\n        this.lights = false; // set to use scene lights\n        this.clipping = false; // set to use user-defined clipping planes\n        this.skinning = false; // set to use skinning attribute streams\n        this.morphTargets = false; // set to use morph targets\n        this.morphNormals = false; // set to use morph normals\n        this.extensions = {\n            derivatives: false,\n            drawBuffers: false,\n            fragDepth: false,\n            shaderTextureLOD: false,\n        };\n        // When rendered geometry doesn't include these attributes but the material does,\n        // use these default values in WebGL. This avoids errors when buffer data is missing.\n        this.defaultAttributeValues = {\n            color: [1, 1, 1],\n            uv: [0, 0],\n            uv2: [0, 0],\n        };\n        this.setValues(parameters);\n    }\n    copy(source) {\n        this.fragmentShader = source.fragmentShader;\n        this.vertexShader = source.vertexShader;\n        this.uniforms = UniformsUtils.clone(source.uniforms);\n        this.defines = source.defines;\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.lights = source.lights;\n        this.clipping = source.clipping;\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        this.morphNormals = source.morphNormals;\n        this.extensions = source.extensions;\n        return this;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Material } from \"./Material\";\nexport class ShadowMaterial extends Material {\n    constructor(parameters) {\n        super();\n        this.type = \"ShadowMaterial\";\n        this.color = new Color().setHex(0x000000);\n        this.transparent = true;\n        this.setValues(parameters);\n    }\n    copy(source) {\n        super.copy(source);\n        this.color.copy(source.color);\n        return this;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Material } from \"./Material\";\nexport class SpriteMaterial extends Material {\n    constructor(parameters) {\n        super();\n        this.type = \"SpriteMaterial\";\n        this.color = new Color().setHex(0xffffff);\n        this.fog = false;\n        this.lights = false;\n        this.map = null;\n        this.rotation = 0;\n        this.setValues(parameters);\n    }\n    copy(source) {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.map = source.map;\n        this.rotation = source.rotation;\n        return this;\n    }\n}\n","import { Sphere } from \"./Sphere\";\nimport { Vector3 } from \"./Vector3\";\nimport { vectorFromBufferAttribute } from \"../utils\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nexport class Box3 {\n    constructor(min = new Vector3(+Infinity, +Infinity, +Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {\n        this.min = new Vector3(+Infinity, +Infinity, +Infinity);\n        this.max = new Vector3(-Infinity, -Infinity, -Infinity);\n        this.max = max;\n        this.min = min;\n    }\n    set(min, max) {\n        this.min.copy(min);\n        this.max.copy(max);\n        return this;\n    }\n    setFromArray(array) {\n        let minX = +Infinity, minY = +Infinity, minZ = +Infinity;\n        let maxX = -Infinity, maxY = -Infinity, maxZ = -Infinity;\n        for (let i = 0, l = array.length; i < l; i += 3) {\n            const x = array[i], y = array[i + 1], z = array[i + 2];\n            if (x < minX)\n                minX = x;\n            if (y < minY)\n                minY = y;\n            if (z < minZ)\n                minZ = z;\n            if (x > maxX)\n                maxX = x;\n            if (y > maxY)\n                maxY = y;\n            if (z > maxZ)\n                maxZ = z;\n        }\n        this.min.set(minX, minY, minZ);\n        this.max.set(maxX, maxY, maxZ);\n        return this;\n    }\n    setFromPoints(points) {\n        this.makeEmpty();\n        for (let i = 0, il = points.length; i < il; i++) {\n            this.expandByPoint(points[i]);\n        }\n        return this;\n    }\n    setFromCenterAndSize(center, size) {\n        const halfSize = new Vector3().copy(size).multiplyScalar(0.5);\n        this.min.copy(center).sub(halfSize);\n        this.max.copy(center).add(halfSize);\n        return this;\n    }\n    setFromObject(object) {\n        this.makeEmpty();\n        return this.expandByObject(object);\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n    copy(box) {\n        this.min.copy(box.min);\n        this.max.copy(box.max);\n        return this;\n    }\n    makeEmpty() {\n        this.min.x = this.min.y = this.min.z = +Infinity;\n        this.max.x = this.max.y = this.max.z = -Infinity;\n        return this;\n    }\n    /**\n     * this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n     * @returns {boolean}\n     */\n    isEmpty() {\n        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n    }\n    getCenter() {\n        const result = new Vector3();\n        return this.isEmpty()\n            ? result.set(0, 0, 0)\n            : result\n                .copy(this.min)\n                .add(this.max)\n                .multiplyScalar(0.5);\n    }\n    getSize() {\n        const result = new Vector3();\n        return this.isEmpty() ? result.set(0, 0, 0) : result.copy(this.max).sub(this.min);\n    }\n    expandByPoint(point) {\n        this.min.min(point);\n        this.max.max(point);\n        return this;\n    }\n    expandByVector(vector) {\n        this.min.sub(vector);\n        this.max.add(vector);\n        return this;\n    }\n    expandByScalar(scalar) {\n        this.min.addScalar(-scalar);\n        this.max.addScalar(scalar);\n        return this;\n    }\n    /**\n     * TODO expandByObject\n     * @param object\n     * @returns {Box3}\n     */\n    expandByObject(object) {\n        // Computes the world-axis-aligned bounding box of an object (including its children),\n        // accounting for both the object's, and children's, world transforms\n        const traverse = (node) => {\n            const geometry = node.geometry;\n            if (geometry !== undefined) {\n                if (geometry instanceof Geometry) {\n                    const vertices = geometry.vertices;\n                    for (let i = 0, l = vertices.length; i < l; i++) {\n                        const v1 = new Vector3().copy(vertices[i]);\n                        v1.applyMatrix4(node.matrixWorld);\n                        this.expandByPoint(v1);\n                    }\n                }\n                else if (geometry instanceof BufferGeometry) {\n                    const attribute = geometry.attributes.position;\n                    if (attribute !== undefined) {\n                        for (let i = 0, l = attribute.count; i < l; i++) {\n                            const v1 = vectorFromBufferAttribute(new Vector3(), attribute, i).applyMatrix4(node.matrixWorld);\n                            this.expandByPoint(v1);\n                        }\n                    }\n                }\n            }\n        };\n        object.updateMatrixWorld(true);\n        object.traverse(traverse);\n        return this;\n    }\n    containsPoint(point) {\n        return !(point.x < this.min.x ||\n            point.x > this.max.x ||\n            point.y < this.min.y ||\n            point.y > this.max.y ||\n            point.z < this.min.z ||\n            point.z > this.max.z);\n    }\n    containsBox(box) {\n        return (this.min.x <= box.min.x &&\n            box.max.x <= this.max.x &&\n            this.min.y <= box.min.y &&\n            box.max.y <= this.max.y &&\n            this.min.z <= box.min.z &&\n            box.max.z <= this.max.z);\n    }\n    /**\n     * This can potentially have a divide by zero if the box has a size dimension of 0.\n     * @param point\n     * @returns {Vector3}\n     */\n    getParameter(point) {\n        const result = new Vector3();\n        return result.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n    }\n    /**\n     * using 6 splitting planes to rule out intersections\n     * @param box\n     * @returns {boolean}\n     */\n    intersectsBox(box) {\n        return !(box.max.x < this.min.x ||\n            box.min.x > this.max.x ||\n            box.max.y < this.min.y ||\n            box.min.y > this.max.y ||\n            box.max.z < this.min.z ||\n            box.min.z > this.max.z);\n    }\n    /**\n     * Find the point on the AABB closest to the sphere center.\n     * If that point is inside the sphere, the AABB and sphere intersect.\n     * @param sphere\n     * @returns {boolean}\n     */\n    intersectsSphere(sphere) {\n        const closestPoint = this.clampPoint(sphere.center);\n        return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n    }\n    /**\n     * We compute the minimum and maximum dot product values. If those values\n     * are on the same side (back or front) of the plane, then there is no intersection.\n     * @param plane\n     * @returns {boolean}\n     */\n    intersectsPlane(plane) {\n        let min, max;\n        if (plane.normal.x > 0) {\n            min = plane.normal.x * this.min.x;\n            max = plane.normal.x * this.max.x;\n        }\n        else {\n            min = plane.normal.x * this.max.x;\n            max = plane.normal.x * this.min.x;\n        }\n        if (plane.normal.y > 0) {\n            min += plane.normal.y * this.min.y;\n            max += plane.normal.y * this.max.y;\n        }\n        else {\n            min += plane.normal.y * this.max.y;\n            max += plane.normal.y * this.min.y;\n        }\n        if (plane.normal.z > 0) {\n            min += plane.normal.z * this.min.z;\n            max += plane.normal.z * this.max.z;\n        }\n        else {\n            min += plane.normal.z * this.max.z;\n            max += plane.normal.z * this.min.z;\n        }\n        return min <= plane.constant && max >= plane.constant;\n    }\n    clampPoint(point) {\n        return new Vector3().copy(point).clamp(this.min, this.max);\n    }\n    distanceToPoint(point) {\n        const clampedPoint = new Vector3().copy(point).clamp(this.min, this.max);\n        return clampedPoint.sub(point).length();\n    }\n    getBoundingSphere() {\n        const result = new Sphere();\n        result.center = this.getCenter();\n        result.radius = this.getSize().length() * 0.5;\n        return result;\n    }\n    intersect(box) {\n        this.min.max(box.min);\n        this.max.min(box.max);\n        // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n        if (this.isEmpty())\n            this.makeEmpty();\n        return this;\n    }\n    union(box) {\n        this.min.min(box.min);\n        this.max.max(box.max);\n        return this;\n    }\n    applyMatrix4(matrix) {\n        // transform of empty box is an empty box.\n        if (this.isEmpty())\n            return this;\n        const points = [\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n        ];\n        // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n        points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n        points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n        points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n        points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n        points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n        points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n        points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n        points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n        this.setFromPoints(points);\n        return this;\n    }\n    translate(offset) {\n        this.min.add(offset);\n        this.max.add(offset);\n        return this;\n    }\n    equals(box) {\n        return box.min.equals(this.min) && box.max.equals(this.max);\n    }\n}\n","import { MathUtil } from \"./Math\";\nfunction HUE_TO_RGB(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * 6 * (2 / 3 - t);\n    return p;\n}\nexport class Color {\n    constructor(r = 0, g = 0, b = 0) {\n        this.r = 1;\n        this.g = 1;\n        this.b = 1;\n        this.setRGB(r, g, b);\n    }\n    copy(color) {\n        this.r = color.r;\n        this.g = color.g;\n        this.b = color.b;\n        return this;\n    }\n    setScalar(scalar) {\n        this.r = scalar;\n        this.g = scalar;\n        this.b = scalar;\n        return this;\n    }\n    setHex(hex) {\n        hex = Math.floor(hex);\n        this.r = ((hex >> 16) & 255) / 255;\n        this.g = ((hex >> 8) & 255) / 255;\n        this.b = (hex & 255) / 255;\n        return this;\n    }\n    setRGB(r, g, b) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        return this;\n    }\n    /**\n     * HSL即是代表色相，饱和度，明度三个通道的颜色\n     * H: Hue 色相 S：Saturation 饱和度 L Lightness 明度\n     * @param h\n     * @param s\n     * @param l\n     * @returns {Color}\n     */\n    setHSL(h, s, l) {\n        // h,s,l ranges are in 0.0 - 1.0\n        h = MathUtil.euclideanModulo(h, 1);\n        s = MathUtil.clamp(s, 0, 1);\n        l = MathUtil.clamp(l, 0, 1);\n        if (s === 0) {\n            this.r = this.g = this.b = l;\n        }\n        else {\n            const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n            const q = 2 * l - p;\n            this.r = HUE_TO_RGB(q, p, h + 1 / 3);\n            this.g = HUE_TO_RGB(q, p, h);\n            this.b = HUE_TO_RGB(q, p, h - 1 / 3);\n        }\n        return this;\n    }\n    setStyle(style) {\n        let matches;\n        /**\n         * rgb || hsl\n         */\n        if ((matches = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(style))) {\n            let color;\n            const name = matches[1];\n            const components = matches[2];\n            switch (name) {\n                case \"rgb\":\n                case \"rgba\":\n                    if ((color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components))) {\n                        // rgb(255,0,0) rgba(255,0,0,0.5)\n                        this.r = Math.min(255, parseInt(color[1], 10)) / 255;\n                        this.g = Math.min(255, parseInt(color[2], 10)) / 255;\n                        this.b = Math.min(255, parseInt(color[3], 10)) / 255;\n                        // handleAlpha(color[5]);\n                        return this;\n                    }\n                    if ((color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components))) {\n                        // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n                        this.r = Math.min(100, parseInt(color[1], 10)) / 100;\n                        this.g = Math.min(100, parseInt(color[2], 10)) / 100;\n                        this.b = Math.min(100, parseInt(color[3], 10)) / 100;\n                        // handleAlpha(color[5]);\n                        return this;\n                    }\n                    break;\n                case \"hsl\":\n                case \"hsla\":\n                    if ((color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components))) {\n                        // hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n                        const h = parseFloat(color[1]) / 360;\n                        const s = parseInt(color[2], 10) / 100;\n                        const l = parseInt(color[3], 10) / 100;\n                        // handleAlpha(color[5]);\n                        return this.setHSL(h, s, l);\n                    }\n                    break;\n            }\n        }\n        else if ((matches = /^\\#([A-Fa-f0-9]+)$/.exec(style))) {\n            // hex color\n            const hex = matches[1];\n            const size = hex.length;\n            if (size === 3) {\n                // #ff0\n                this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n                this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n                this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n                return this;\n            }\n            else if (size === 6) {\n                // #ff0000\n                this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n                this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n                this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n                return this;\n            }\n        }\n        if (style && style.length > 0) {\n            // color keywords\n            const hex = Color.ColorKeywords[style];\n            if (hex !== undefined) {\n                // red\n                this.setHex(hex);\n            }\n            else {\n                console.warn(\"THREE.Color: Unknown color \" + style);\n            }\n        }\n        return this;\n    }\n    convertGammaToLinear(color, gammaFactor = 2.0) {\n        return this.setRGB(Math.pow(color.r, gammaFactor), Math.pow(color.g, gammaFactor), Math.pow(color.b, gammaFactor));\n    }\n    convertLinearToGamma(color, gammaFactor = 2.0) {\n        const safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n        return this.setRGB(Math.pow(color.r, safeInverse), Math.pow(color.g, safeInverse), Math.pow(color.b, safeInverse));\n    }\n    getHex() {\n        return ((this.r * 255) << 16) ^ ((this.g * 255) << 8) ^ ((this.b * 255) << 0);\n    }\n    getHexString() {\n        return (\"000000\" + this.getHex().toString(16)).slice(-6);\n    }\n    getHSL(hsl = { h: 0, s: 0, l: 0 }) {\n        // h,s,l ranges are in 0.0 - 1.0\n        const { r, g, b } = this;\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let hue, saturation;\n        const lightness = (min + max) / 2.0;\n        if (min === max) {\n            hue = 0;\n            saturation = 0;\n        }\n        else {\n            const delta = max - min;\n            saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n            switch (max) {\n                case r:\n                    hue = (g - b) / delta + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    hue = (b - r) / delta + 2;\n                    break;\n                case b:\n                    hue = (r - g) / delta + 4;\n                    break;\n            }\n            hue /= 6;\n        }\n        hsl.h = hue;\n        hsl.s = saturation;\n        hsl.l = lightness;\n        return hsl;\n    }\n    getStyle() {\n        const { r, g, b } = this;\n        return \"rgb(\" + ((r * 255) | 0) + \",\" + ((g * 255) | 0) + \",\" + ((b * 255) | 0) + \")\";\n    }\n    offsetHSL(h, s, l) {\n        const hsl = this.getHSL();\n        hsl.h += h;\n        hsl.s += s;\n        hsl.l += l;\n        return this.setHSL(hsl.h, hsl.s, hsl.l);\n    }\n    add(color) {\n        this.r = Math.min(1, this.r + color.r);\n        this.g = Math.min(1, this.g + color.g);\n        this.b = Math.min(1, this.b + color.b);\n        return this;\n    }\n    addScalar(scalar) {\n        this.r = Math.min(1, this.r + scalar);\n        this.g = Math.min(1, this.g + scalar);\n        this.b = Math.min(1, this.b + scalar);\n        return this;\n    }\n    sub(color) {\n        this.r = Math.max(0, this.r - color.r);\n        this.g = Math.max(0, this.g - color.g);\n        this.b = Math.max(0, this.b - color.b);\n        return this;\n    }\n    subScalar(scalar) {\n        this.r = Math.min(1, this.r - scalar);\n        this.g = Math.min(1, this.g - scalar);\n        this.b = Math.min(1, this.b - scalar);\n        return this;\n    }\n    multiply(color) {\n        this.r *= color.r;\n        this.g *= color.g;\n        this.b *= color.b;\n        return this;\n    }\n    multiplyScalar(scalar) {\n        this.r = Math.min(1, this.r * scalar);\n        this.g = Math.min(1, this.g * scalar);\n        this.b = Math.min(1, this.b * scalar);\n        return this;\n    }\n    lerp(color, alpha) {\n        this.r += (color.r - this.r) * alpha;\n        this.g += (color.g - this.g) * alpha;\n        this.b += (color.b - this.b) * alpha;\n        return this;\n    }\n    equals(c) {\n        return c.r === this.r && c.g === this.g && c.b === this.b;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\nColor.ColorKeywords = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32,\n};\n","import { MathUtil } from \"./Math\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Quaternion } from \"./Quaternion\";\nexport var EulerOrder;\n(function (EulerOrder) {\n    EulerOrder[EulerOrder[\"XYZ\"] = 0] = \"XYZ\";\n    EulerOrder[EulerOrder[\"YZX\"] = 1] = \"YZX\";\n    EulerOrder[EulerOrder[\"ZXY\"] = 2] = \"ZXY\";\n    EulerOrder[EulerOrder[\"XZY\"] = 3] = \"XZY\";\n    EulerOrder[EulerOrder[\"YXZ\"] = 4] = \"YXZ\";\n    EulerOrder[EulerOrder[\"ZYX\"] = 5] = \"ZYX\";\n})(EulerOrder || (EulerOrder = {}));\n/**\n * TODO: setFromVector3\n */\nexport class Euler {\n    constructor(x = 0, y = 0, z = 0) {\n        this._order = Euler.DefaultOrder;\n        this._x = x;\n        this._y = y;\n        this._z = z;\n    }\n    get x() {\n        return this._x;\n    }\n    set x(x) {\n        this._x = x;\n    }\n    get y() {\n        return this._y;\n    }\n    set y(y) {\n        this._y = y;\n    }\n    get z() {\n        return this._z;\n    }\n    set z(z) {\n        this._z = z;\n    }\n    get order() {\n        return this._order;\n    }\n    set order(_order) {\n        this._order = _order;\n    }\n    set(x, y, z, order) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._order = order;\n        return this;\n    }\n    copy(euler) {\n        return this.set(euler.x, euler.y, euler.z, euler.order);\n    }\n    /**\n     * assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n     * @param m\n     * @param order\n     * @returns {Euler}\n     */\n    setFromRotationMatrix(m, order = this.order) {\n        const clamp = MathUtil.clamp;\n        const te = m.elements;\n        const m11 = te[0], m12 = te[4], m13 = te[8];\n        const m21 = te[1], m22 = te[5], m23 = te[9];\n        const m31 = te[2], m32 = te[6], m33 = te[10];\n        if (order === EulerOrder.XYZ) {\n            this._y = Math.asin(clamp(m13, -1, 1));\n            if (Math.abs(m13) < 0.99999) {\n                this._x = Math.atan2(-m23, m33);\n                this._z = Math.atan2(-m12, m11);\n            }\n            else {\n                this._x = Math.atan2(m32, m22);\n                this._z = 0;\n            }\n        }\n        else if (order === EulerOrder.YXZ) {\n            this._x = Math.asin(-clamp(m23, -1, 1));\n            if (Math.abs(m23) < 0.99999) {\n                this._y = Math.atan2(m13, m33);\n                this._z = Math.atan2(m21, m22);\n            }\n            else {\n                this._y = Math.atan2(-m31, m11);\n                this._z = 0;\n            }\n        }\n        else if (order === EulerOrder.ZXY) {\n            this._x = Math.asin(clamp(m32, -1, 1));\n            if (Math.abs(m32) < 0.99999) {\n                this._y = Math.atan2(-m31, m33);\n                this._z = Math.atan2(-m12, m22);\n            }\n            else {\n                this._y = 0;\n                this._z = Math.atan2(m21, m11);\n            }\n        }\n        else if (order === EulerOrder.ZYX) {\n            this._y = Math.asin(-clamp(m31, -1, 1));\n            if (Math.abs(m31) < 0.99999) {\n                this._x = Math.atan2(m32, m33);\n                this._z = Math.atan2(m21, m11);\n            }\n            else {\n                this._x = 0;\n                this._z = Math.atan2(-m12, m22);\n            }\n        }\n        else if (order === EulerOrder.YZX) {\n            this._z = Math.asin(clamp(m21, -1, 1));\n            if (Math.abs(m21) < 0.99999) {\n                this._x = Math.atan2(-m23, m22);\n                this._y = Math.atan2(-m31, m11);\n            }\n            else {\n                this._x = 0;\n                this._y = Math.atan2(m13, m33);\n            }\n        }\n        else if (order === EulerOrder.XZY) {\n            this._z = Math.asin(-clamp(m12, -1, 1));\n            if (Math.abs(m12) < 0.99999) {\n                this._x = Math.atan2(m32, m22);\n                this._y = Math.atan2(m13, m11);\n            }\n            else {\n                this._x = Math.atan2(-m23, m33);\n                this._y = 0;\n            }\n        }\n        this.order = order;\n        return this;\n    }\n    setFromQuaternion(q, order) {\n        const matrix = new Matrix4();\n        matrix.makeRotationFromQuaternion(q);\n        return this.setFromRotationMatrix(matrix, order);\n    }\n    /**\n     * this discards revolution information -bhouston\n     * @param newOrder\n     * @returns {Euler}\n     */\n    reorder(newOrder) {\n        const q = new Quaternion();\n        q.setFromEuler(this);\n        return this.setFromQuaternion(q, newOrder);\n    }\n    equals(euler) {\n        return euler.x === this.x && euler.y === this.y && euler.z === this.z && euler.order === this.order;\n    }\n    fromArray(array) {\n        return this.set(array[0], array[1], array[2], array[3] || this.order);\n    }\n    toArray(array = [], offset = 0) {\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        array[offset + 2] = this.z;\n        array[offset + 3] = this.order;\n        return array;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\nEuler.DefaultOrder = EulerOrder.XYZ;\n","import { Plane } from \"./Plane\";\nimport { Sphere } from \"./Sphere\";\nimport { Vector3 } from \"./Vector3\";\nexport class Frustum {\n    constructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {\n        this.planes = [p0, p1, p2, p3, p4, p5];\n    }\n    set(p0, p1, p2, p3, p4, p5) {\n        const planes = this.planes;\n        planes[0].copy(p0);\n        planes[1].copy(p1);\n        planes[2].copy(p2);\n        planes[3].copy(p3);\n        planes[4].copy(p4);\n        planes[5].copy(p5);\n        return this;\n    }\n    copy(frustum) {\n        const planes = this.planes;\n        for (let i = 0; i < 6; i++) {\n            planes[i].copy(frustum.planes[i]);\n        }\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n    setFromMatrix(m) {\n        const planes = this.planes;\n        const me = m.elements;\n        const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];\n        const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];\n        const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];\n        const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];\n        const setPlane = (plane, x, y, z, w) => {\n            plane.normal.set(x, y, z);\n            plane.constant = w;\n            plane.normalize();\n        };\n        setPlane(planes[0], me3 - me0, me7 - me4, me11 - me8, me15 - me12);\n        setPlane(planes[1], me3 + me0, me7 + me4, me11 + me8, me15 + me12);\n        setPlane(planes[2], me3 + me1, me7 + me5, me11 + me9, me15 + me13);\n        setPlane(planes[3], me3 - me1, me7 - me5, me11 - me9, me15 - me13);\n        setPlane(planes[4], me3 - me2, me7 - me6, me11 - me10, me15 - me14);\n        setPlane(planes[5], me3 + me2, me7 + me6, me11 + me10, me15 + me14);\n        return this;\n    }\n    intersectsObject(object) {\n        const geometry = object.geometry;\n        if (geometry.boundingSphere === null) {\n            geometry.computeBoundingSphere();\n        }\n        const sphere = new Sphere().copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n        return this.intersectsSphere(sphere);\n    }\n    intersectsSprite(sprite) {\n        const sphere = new Sphere();\n        sphere.center.set(0, 0, 0);\n        sphere.radius = 0.7071067811865476;\n        sphere.applyMatrix4(sprite.matrixWorld);\n        return this.intersectsSphere(sphere);\n    }\n    intersectsSphere(sphere) {\n        const planes = this.planes;\n        const center = sphere.center;\n        const negRadius = -sphere.radius;\n        for (let i = 0; i < 6; i++) {\n            const distance = planes[i].distanceToPoint(center);\n            if (distance < negRadius) {\n                return false;\n            }\n        }\n        return true;\n    }\n    intersectsBox(box) {\n        const p1 = new Vector3(), p2 = new Vector3();\n        const planes = this.planes;\n        for (let i = 0; i < 6; i++) {\n            const plane = planes[i];\n            p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n            p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n            p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n            p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n            p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n            p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n            const d1 = plane.distanceToPoint(p1);\n            const d2 = plane.distanceToPoint(p2);\n            // if both outside plane, no intersection\n            if (d1 < 0 && d2 < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    containsPoint(point) {\n        const planes = this.planes;\n        for (let i = 0; i < 6; i++) {\n            if (planes[i].distanceToPoint(point) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","import { MathUtil } from \"./Math\";\nimport { Vector3 } from \"./Vector3\";\nexport class Line3 {\n    constructor(start = new Vector3(), end = new Vector3()) {\n        this.start = new Vector3();\n        this.end = new Vector3();\n        this.start = start;\n        this.end = end;\n    }\n    set(start, end) {\n        this.start.copy(start);\n        this.end.copy(end);\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n    copy(line) {\n        this.start.copy(line.start);\n        this.end.copy(line.end);\n        return this;\n    }\n    getCenter() {\n        return new Vector3()\n            .copy(this.start)\n            .add(this.end)\n            .multiplyScalar(0.5);\n    }\n    delta() {\n        return new Vector3().copy(this.end).sub(this.start);\n    }\n    distanceSquared() {\n        return this.start.distanceToSquared(this.end);\n    }\n    distance() {\n        return this.start.distanceTo(this.end);\n    }\n    at(t) {\n        return this.delta()\n            .multiplyScalar(t)\n            .add(this.start);\n    }\n    closestPointToPointParameter(point, clampToLine = false) {\n        const startP = new Vector3();\n        const startEnd = new Vector3();\n        startP.copy(point).sub(this.start);\n        startEnd.copy(this.end).sub(this.start);\n        const startEnd2 = startEnd.dot(startEnd);\n        const startEndStartP = startEnd.dot(startP);\n        let t = startEndStartP / startEnd2;\n        if (clampToLine) {\n            t = MathUtil.clamp(t, 0, 1);\n        }\n        return t;\n    }\n    closestPointToPoint(point, clampToLine = false) {\n        const t = this.closestPointToPointParameter(point, clampToLine);\n        return this.delta()\n            .multiplyScalar(t)\n            .add(this.start);\n    }\n    applyMatrix4(matrix) {\n        this.start.applyMatrix4(matrix);\n        this.end.applyMatrix4(matrix);\n        return this;\n    }\n    equals(line) {\n        return line.start.equals(this.start) && line.end.equals(this.end);\n    }\n}\n","const lut = [];\nfor (let i = 0; i < 256; i++) {\n    lut[i] = (i < 16 ? \"0\" : \"\") + i.toString(16).toUpperCase();\n}\n/**\n * Finished\n */\nexport class MathUtil {\n    /**\n     * 产生一个UUID的算法，主要是遵循UUID的规范来产生字符串\n     * http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n     * @returns {string}\n     */\n    static generateUUID() {\n        const d0 = (Math.random() * 0xffffffff) | 0;\n        const d1 = (Math.random() * 0xffffffff) | 0;\n        const d2 = (Math.random() * 0xffffffff) | 0;\n        const d3 = (Math.random() * 0xffffffff) | 0;\n        return (lut[d0 & 0xff] +\n            lut[(d0 >> 8) & 0xff] +\n            lut[(d0 >> 16) & 0xff] +\n            lut[(d0 >> 24) & 0xff] +\n            \"-\" +\n            lut[d1 & 0xff] +\n            lut[(d1 >> 8) & 0xff] +\n            \"-\" +\n            lut[((d1 >> 16) & 0x0f) | 0x40] +\n            lut[(d1 >> 24) & 0xff] +\n            \"-\" +\n            lut[(d2 & 0x3f) | 0x80] +\n            lut[(d2 >> 8) & 0xff] +\n            \"-\" +\n            lut[(d2 >> 16) & 0xff] +\n            lut[(d2 >> 24) & 0xff] +\n            lut[d3 & 0xff] +\n            lut[(d3 >> 8) & 0xff] +\n            lut[(d3 >> 16) & 0xff] +\n            lut[(d3 >> 24) & 0xff]);\n    }\n    /**\n     * 在一定范围内截断value的数值\n     * @param value\n     * @param min\n     * @param max\n     * @returns {number}\n     */\n    static clamp(value, min, max) {\n        return Math.max(min, Math.min(max, value));\n    }\n    /**\n     * 计算欧几里得取模算法\n     * 详见 https://en.wikipedia.org/wiki/Modulo_operation\n     * 这里还需要+m的原因是考虑负数取模的原因\n     * @param n\n     * @param m\n     * @returns {number}\n     */\n    static euclideanModulo(n, m) {\n        return (n % m + m) % m;\n    }\n    /**\n     * 将x在a范围内的值映射到b范围中\n     * @param x\n     * @param a1\n     * @param a2\n     * @param b1\n     * @param b2\n     * @returns {number}\n     */\n    static mapLinear(x, a1, a2, b1, b2) {\n        return b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n    }\n    /**\n     * 线性插值\n     * https://en.wikipedia.org/wiki/Linear_interpolation\n     * @param x\n     * @param y\n     * @param t\n     * @returns {number}\n     */\n    static lerp(x, y, t) {\n        return (1 - t) * x + t * y;\n    }\n    /**\n     * 这个插值过程是将点原本的线性插值的点映射到f(x) = 3 * x^2 - 2 * x^3上，\n     * f\"(x) = 6 * x - 6 * x^2 x \\in [0, 1] \\geq 0\n     * 所以f(x)在[0, 1]上单调递增，\n     * 观察其二阶导可知f(x)在[0, 0.5]和[0.5 , 1]上分别为下凸和上凸函数，\n     * 所以其形状类似于电梯\n     * http://en.wikipedia.org/wiki/Smoothstep\n     * @param x\n     * @param min\n     * @param max\n     * @returns {number}\n     */\n    static smoothstep(x, min, max) {\n        if (x <= min)\n            return 0;\n        if (x >= max)\n            return 1;\n        x = (x - min) / (max - min);\n        return x * x * (3 - 2 * x);\n    }\n    /**\n     * 类似与上面的函数，计算量更大\n     * @param x\n     * @param min\n     * @param max\n     * @returns {number}\n     */\n    static smootherstep(x, min, max) {\n        if (x <= min)\n            return 0;\n        if (x >= max)\n            return 1;\n        x = (x - min) / (max - min);\n        return x * x * x * (x * (x * 6 - 15) + 10);\n    }\n    /**\n     * 随机整数\n     * @param low\n     * @param high\n     * @returns {number}\n     */\n    static randInt(low, high) {\n        return low + Math.floor(Math.random() * (high - low + 1));\n    }\n    /**\n     * 随机浮点数\n     * @param low\n     * @param high\n     * @returns {number}\n     */\n    static randFloat(low, high) {\n        return low + Math.random() * (high - low);\n    }\n    /**\n     * [-range/2, range/2]的随机浮点数\n     * @param range\n     * @returns {number}\n     */\n    static randFloatSpread(range) {\n        return range * (0.5 - Math.random());\n    }\n    /***************************** 下面的太简单了不说明了 *******************************/\n    static degToRad(degrees) {\n        return degrees * MathUtil.DEG2RAD;\n    }\n    static radToDeg(radians) {\n        return radians * MathUtil.RAD2DEG;\n    }\n    /**\n     * 这里用到了二进制的技巧\n     * @param value\n     * @returns {boolean}\n     */\n    static isPowerOfTwo(value) {\n        return (value & (value - 1)) === 0 && value !== 0;\n    }\n    static ceilPowerOfTwo(value) {\n        return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n    }\n    static floorPowerOfTwo(value) {\n        return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n    }\n}\n/**\n * 弧度/角度\n * @type {number}\n */\nMathUtil.DEG2RAD = Math.PI / 180;\n/**\n * 角度/弧度\n * @type {number}\n */\nMathUtil.RAD2DEG = 180 / Math.PI;\n","export class Matrix2 {\n    constructor() {\n        this.elements = [1, 0, 0, 1];\n    }\n    set(n11, n12, n21, n22) {\n        const te = this.elements;\n        te[0] = n11;\n        te[1] = n21;\n        te[3] = n12;\n        te[4] = n22;\n        return this;\n    }\n    identity() {\n        return this.set(1, 0, 0, 1);\n    }\n    copy(mat2) {\n        const te = this.elements;\n        const me = mat2.elements;\n        te[0] = me[0];\n        te[1] = me[1];\n        te[2] = me[2];\n        te[3] = me[3];\n        return this;\n    }\n    setFromMatrix4(mat2) {\n        const me = mat2.elements;\n        return this.set(me[0], me[2], me[1], me[3]);\n    }\n    multiply(mat2) {\n        return this.multiplyMatrices(this, mat2);\n    }\n    premultiply(m) {\n        return this.multiplyMatrices(m, this);\n    }\n    multiplyMatrices(a, b) {\n        const ae = a.elements;\n        const be = b.elements;\n        const te = this.elements;\n        const a11 = ae[0], a12 = ae[2];\n        const a21 = ae[1], a22 = ae[3];\n        const b11 = be[0], b12 = be[2];\n        const b21 = be[1], b22 = be[3];\n        te[0] = a11 * b11 + a12 * b21;\n        te[2] = a11 * b12 + a12 * b22;\n        te[1] = a21 * b11 + a22 * b21;\n        te[3] = a21 * b12 + a22 * b22;\n        return this;\n    }\n    multiplyScalar(s) {\n        const te = this.elements;\n        te[0] *= s;\n        te[2] *= s;\n        te[1] *= s;\n        te[3] *= s;\n        return this;\n    }\n    determinant() {\n        const te = this.elements;\n        const a = te[0], b = te[1], c = te[2], d = te[3];\n        return a * d - b * c;\n    }\n    // getInverse\n    transpose() {\n        let tmp;\n        const m = this.elements;\n        tmp = m[1];\n        m[1] = m[2];\n        m[2] = tmp;\n        return this;\n    }\n    equals(matrix) {\n        const te = this.elements;\n        const me = matrix.elements;\n        for (let i = 0; i < 4; i++) {\n            if (te[i] !== me[i])\n                return false;\n        }\n        return true;\n    }\n    fromArray(array, offset = 0) {\n        for (let i = 0; i < 4; i++) {\n            this.elements[i] = array[i + offset];\n        }\n        return this;\n    }\n    toArray(array = [], offset = 0) {\n        const te = this.elements;\n        array[offset] = te[0];\n        array[offset + 1] = te[1];\n        array[offset + 2] = te[2];\n        array[offset + 3] = te[3];\n        return array;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n","export class Matrix3 {\n    constructor() {\n        this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    }\n    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n        const te = this.elements;\n        te[0] = n11;\n        te[1] = n21;\n        te[2] = n31;\n        te[3] = n12;\n        te[4] = n22;\n        te[5] = n32;\n        te[6] = n13;\n        te[7] = n23;\n        te[8] = n33;\n        return this;\n    }\n    identity() {\n        return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n    }\n    copy(mat3) {\n        const te = this.elements;\n        const me = mat3.elements;\n        te[0] = me[0];\n        te[1] = me[1];\n        te[2] = me[2];\n        te[3] = me[3];\n        te[4] = me[4];\n        te[5] = me[5];\n        te[6] = me[6];\n        te[7] = me[7];\n        te[8] = me[8];\n        return this;\n    }\n    setFromMatrix4(mat4) {\n        const me = mat4.elements;\n        return this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n    }\n    multiply(mat3) {\n        return this.multiplyMatrices(this, mat3);\n    }\n    premultiply(m) {\n        return this.multiplyMatrices(m, this);\n    }\n    multiplyMatrices(a, b) {\n        const ae = a.elements;\n        const be = b.elements;\n        const te = this.elements;\n        const a11 = ae[0], a12 = ae[3], a13 = ae[6];\n        const a21 = ae[1], a22 = ae[4], a23 = ae[7];\n        const a31 = ae[2], a32 = ae[5], a33 = ae[8];\n        const b11 = be[0], b12 = be[3], b13 = be[6];\n        const b21 = be[1], b22 = be[4], b23 = be[7];\n        const b31 = be[2], b32 = be[5], b33 = be[8];\n        te[0] = a11 * b11 + a12 * b21 + a13 * b31;\n        te[3] = a11 * b12 + a12 * b22 + a13 * b32;\n        te[6] = a11 * b13 + a12 * b23 + a13 * b33;\n        te[1] = a21 * b11 + a22 * b21 + a23 * b31;\n        te[4] = a21 * b12 + a22 * b22 + a23 * b32;\n        te[7] = a21 * b13 + a22 * b23 + a23 * b33;\n        te[2] = a31 * b11 + a32 * b21 + a33 * b31;\n        te[5] = a31 * b12 + a32 * b22 + a33 * b32;\n        te[8] = a31 * b13 + a32 * b23 + a33 * b33;\n        return this;\n    }\n    multiplyScalar(s) {\n        const te = this.elements;\n        te[0] *= s;\n        te[3] *= s;\n        te[6] *= s;\n        te[1] *= s;\n        te[4] *= s;\n        te[7] *= s;\n        te[2] *= s;\n        te[5] *= s;\n        te[8] *= s;\n        return this;\n    }\n    determinant() {\n        const te = this.elements;\n        const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i = te[8];\n        return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n    }\n    getInverse(matrix, throwOnDegenerate = false) {\n        const me = matrix.elements, te = this.elements, n11 = me[0], n21 = me[1], n31 = me[2], n12 = me[3], n22 = me[4], n32 = me[5], n13 = me[6], n23 = me[7], n33 = me[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;\n        if (det === 0) {\n            const msg = `THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0`;\n            if (throwOnDegenerate === true) {\n                throw new Error(msg);\n            }\n            else {\n                console.warn(msg);\n            }\n            return this.identity();\n        }\n        const detInv = 1 / det;\n        te[0] = t11 * detInv;\n        te[1] = (n31 * n23 - n33 * n21) * detInv;\n        te[2] = (n32 * n21 - n31 * n22) * detInv;\n        te[3] = t12 * detInv;\n        te[4] = (n33 * n11 - n31 * n13) * detInv;\n        te[5] = (n31 * n12 - n32 * n11) * detInv;\n        te[6] = t13 * detInv;\n        te[7] = (n21 * n13 - n23 * n11) * detInv;\n        te[8] = (n22 * n11 - n21 * n12) * detInv;\n        return this;\n    }\n    transpose() {\n        let tmp;\n        const m = this.elements;\n        tmp = m[1];\n        m[1] = m[3];\n        m[3] = tmp;\n        tmp = m[2];\n        m[2] = m[6];\n        m[6] = tmp;\n        tmp = m[5];\n        m[5] = m[7];\n        m[7] = tmp;\n        return this;\n    }\n    getNormalMatrix(matrix4) {\n        return this.setFromMatrix4(matrix4)\n            .getInverse(this)\n            .transpose();\n    }\n    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n        const c = Math.cos(rotation);\n        const s = Math.sin(rotation);\n        return this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n    }\n    scale(sx, sy) {\n        const te = this.elements;\n        te[0] *= sx;\n        te[3] *= sx;\n        te[6] *= sx;\n        te[1] *= sy;\n        te[4] *= sy;\n        te[7] *= sy;\n        return this;\n    }\n    rotate(theta) {\n        const c = Math.cos(theta);\n        const s = Math.sin(theta);\n        const te = this.elements;\n        const a11 = te[0], a12 = te[3], a13 = te[6];\n        const a21 = te[1], a22 = te[4], a23 = te[7];\n        te[0] = c * a11 + s * a21;\n        te[3] = c * a12 + s * a22;\n        te[6] = c * a13 + s * a23;\n        te[1] = -s * a11 + c * a21;\n        te[4] = -s * a12 + c * a22;\n        te[7] = -s * a13 + c * a23;\n        return this;\n    }\n    translate(tx, ty) {\n        const te = this.elements;\n        te[0] += tx * te[2];\n        te[3] += tx * te[5];\n        te[6] += tx * te[8];\n        te[1] += ty * te[2];\n        te[4] += ty * te[5];\n        te[7] += ty * te[8];\n        return this;\n    }\n    equals(matrix) {\n        const te = this.elements;\n        const me = matrix.elements;\n        for (let i = 0; i < 9; i++) {\n            if (te[i] !== me[i])\n                return false;\n        }\n        return true;\n    }\n    fromArray(array, offset = 0) {\n        for (let i = 0; i < 9; i++) {\n            this.elements[i] = array[i + offset];\n        }\n        return this;\n    }\n    toArray(array = [], offset = 0) {\n        const te = this.elements;\n        array[offset] = te[0];\n        array[offset + 1] = te[1];\n        array[offset + 2] = te[2];\n        array[offset + 3] = te[3];\n        array[offset + 4] = te[4];\n        array[offset + 5] = te[5];\n        array[offset + 6] = te[6];\n        array[offset + 7] = te[7];\n        array[offset + 8] = te[8];\n        return array;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n","import { EulerOrder } from \"./Euler\";\nimport { Vector3 } from \"./Vector3\";\n/**\n * TODO: applyToBufferAttribute\n */\nexport class Matrix4 {\n    constructor() {\n        this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n    }\n    copy(mat4) {\n        const te = this.elements;\n        const me = mat4.elements;\n        te[0] = me[0];\n        te[1] = me[1];\n        te[2] = me[2];\n        te[3] = me[3];\n        te[4] = me[4];\n        te[5] = me[5];\n        te[6] = me[6];\n        te[7] = me[7];\n        te[8] = me[8];\n        te[9] = me[9];\n        te[10] = me[10];\n        te[11] = me[11];\n        te[12] = me[12];\n        te[13] = me[13];\n        te[14] = me[14];\n        te[15] = me[15];\n        return this;\n    }\n    set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n        const te = this.elements;\n        te[0] = n11;\n        te[4] = n12;\n        te[8] = n13;\n        te[12] = n14;\n        te[1] = n21;\n        te[5] = n22;\n        te[9] = n23;\n        te[13] = n24;\n        te[2] = n31;\n        te[6] = n32;\n        te[10] = n33;\n        te[14] = n34;\n        te[3] = n41;\n        te[7] = n42;\n        te[11] = n43;\n        te[15] = n44;\n        return this;\n    }\n    identity() {\n        return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n    }\n    copyPosition(m) {\n        const te = this.elements, me = m.elements;\n        te[12] = me[12];\n        te[13] = me[13];\n        te[14] = me[14];\n        return this;\n    }\n    extractBasis(xAxis, yAxis, zAxis) {\n        xAxis.fromArray(this.elements, 0);\n        yAxis.fromArray(this.elements, 4);\n        zAxis.fromArray(this.elements, 8);\n        return this;\n    }\n    makeBasis(xAxis, yAxis, zAxis) {\n        return this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n    }\n    extractRotation(mat4) {\n        const vec = new Vector3();\n        const te = this.elements;\n        const me = mat4.elements;\n        const scaleX = 1 / vec.fromArray(mat4.elements, 0).length();\n        const scaleY = 1 / vec.fromArray(mat4.elements, 4).length();\n        const scaleZ = 1 / vec.fromArray(mat4.elements, 8).length();\n        te[0] = me[0] * scaleX;\n        te[1] = me[1] * scaleX;\n        te[2] = me[2] * scaleX;\n        te[4] = me[4] * scaleY;\n        te[5] = me[5] * scaleY;\n        te[6] = me[6] * scaleY;\n        te[8] = me[8] * scaleZ;\n        te[9] = me[9] * scaleZ;\n        te[10] = me[10] * scaleZ;\n        return this;\n    }\n    makeRotationFromEuler(euler) {\n        const te = this.elements;\n        const x = euler.x, y = euler.y, z = euler.z;\n        const a = Math.cos(x), b = Math.sin(x);\n        const c = Math.cos(y), d = Math.sin(y);\n        const e = Math.cos(z), f = Math.sin(z);\n        if (euler.order === EulerOrder.XYZ) {\n            const ae = a * e, af = a * f, be = b * e, bf = b * f;\n            te[0] = c * e;\n            te[4] = -c * f;\n            te[8] = d;\n            te[1] = af + be * d;\n            te[5] = ae - bf * d;\n            te[9] = -b * c;\n            te[2] = bf - ae * d;\n            te[6] = be + af * d;\n            te[10] = a * c;\n        }\n        else if (euler.order === EulerOrder.YXZ) {\n            const ce = c * e, cf = c * f, de = d * e, df = d * f;\n            te[0] = ce + df * b;\n            te[4] = de * b - cf;\n            te[8] = a * d;\n            te[1] = a * f;\n            te[5] = a * e;\n            te[9] = -b;\n            te[2] = cf * b - de;\n            te[6] = df + ce * b;\n            te[10] = a * c;\n        }\n        else if (euler.order === EulerOrder.ZXY) {\n            const ce = c * e, cf = c * f, de = d * e, df = d * f;\n            te[0] = ce - df * b;\n            te[4] = -a * f;\n            te[8] = de + cf * b;\n            te[1] = cf + de * b;\n            te[5] = a * e;\n            te[9] = df - ce * b;\n            te[2] = -a * d;\n            te[6] = b;\n            te[10] = a * c;\n        }\n        else if (euler.order === EulerOrder.ZYX) {\n            const ae = a * e, af = a * f, be = b * e, bf = b * f;\n            te[0] = c * e;\n            te[4] = be * d - af;\n            te[8] = ae * d + bf;\n            te[1] = c * f;\n            te[5] = bf * d + ae;\n            te[9] = af * d - be;\n            te[2] = -d;\n            te[6] = b * c;\n            te[10] = a * c;\n        }\n        else if (euler.order === EulerOrder.YZX) {\n            const ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n            te[0] = c * e;\n            te[4] = bd - ac * f;\n            te[8] = bc * f + ad;\n            te[1] = f;\n            te[5] = a * e;\n            te[9] = -b * e;\n            te[2] = -d * e;\n            te[6] = ad * f + bc;\n            te[10] = ac - bd * f;\n        }\n        else if (euler.order === EulerOrder.XZY) {\n            const ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n            te[0] = c * e;\n            te[4] = -f;\n            te[8] = d * e;\n            te[1] = ac * f + bd;\n            te[5] = a * e;\n            te[9] = ad * f - bc;\n            te[2] = bc * f - ad;\n            te[6] = b * e;\n            te[10] = bd * f + ac;\n        }\n        // last column\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = 0;\n        // bottom row\n        te[12] = 0;\n        te[13] = 0;\n        te[14] = 0;\n        te[15] = 1;\n        return this;\n    }\n    makeRotationFromQuaternion(quaternion) {\n        const te = this.elements;\n        const x = quaternion.x, y = quaternion.y, z = quaternion.z, w = quaternion.w;\n        const x2 = x + x, y2 = y + y, z2 = z + z;\n        const xx = x * x2, xy = x * y2, xz = x * z2;\n        const yy = y * y2, yz = y * z2, zz = z * z2;\n        const wx = w * x2, wy = w * y2, wz = w * z2;\n        te[0] = 1 - (yy + zz);\n        te[4] = xy - wz;\n        te[8] = xz + wy;\n        te[1] = xy + wz;\n        te[5] = 1 - (xx + zz);\n        te[9] = yz - wx;\n        te[2] = xz - wy;\n        te[6] = yz + wx;\n        te[10] = 1 - (xx + yy);\n        // last column\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = 0;\n        // bottom row\n        te[12] = 0;\n        te[13] = 0;\n        te[14] = 0;\n        te[15] = 1;\n        return this;\n    }\n    lookAt(eye, target, up) {\n        const x = new Vector3();\n        const y = new Vector3();\n        const z = new Vector3();\n        const te = this.elements;\n        z.copy(eye).sub(target);\n        if (z.lengthSquared() === 0) {\n            // eye and target are in the same position\n            z.z = 1;\n        }\n        z.normalize();\n        x.copy(up).cross(z);\n        if (x.lengthSquared() === 0) {\n            // up and z are parallel\n            if (Math.abs(up.z) === 1) {\n                z.x += 0.0001;\n            }\n            else {\n                z.z += 0.0001;\n            }\n            z.normalize();\n            x.copy(up).cross(z);\n        }\n        x.normalize();\n        y.copy(z).cross(x);\n        te[0] = x.x;\n        te[4] = y.x;\n        te[8] = z.x;\n        te[1] = x.y;\n        te[5] = y.y;\n        te[9] = z.y;\n        te[2] = x.z;\n        te[6] = y.z;\n        te[10] = z.z;\n        return this;\n    }\n    multiply(mat) {\n        return this.multiplyMatrices(this, mat);\n    }\n    premultiply(mat) {\n        return this.multiplyMatrices(mat, this);\n    }\n    multiplyMatrices(matA, matB) {\n        const ae = matA.elements;\n        const be = matB.elements;\n        const te = this.elements;\n        const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];\n        const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];\n        const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];\n        const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];\n        const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];\n        const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];\n        const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];\n        const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];\n        te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n        te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n        te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n        te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n        te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n        te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n        te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n        te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n        te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n        te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n        te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n        te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n        te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n        te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n        te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n        te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n        return this;\n    }\n    multiplyScalar(s) {\n        const te = this.elements;\n        te[0] *= s;\n        te[4] *= s;\n        te[8] *= s;\n        te[12] *= s;\n        te[1] *= s;\n        te[5] *= s;\n        te[9] *= s;\n        te[13] *= s;\n        te[2] *= s;\n        te[6] *= s;\n        te[10] *= s;\n        te[14] *= s;\n        te[3] *= s;\n        te[7] *= s;\n        te[11] *= s;\n        te[15] *= s;\n        return this;\n    }\n    /**\n     * http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n     * @returns {number}\n     */\n    determinant() {\n        const te = this.elements;\n        const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];\n        const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];\n        const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];\n        const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];\n        return (n41 *\n            (+n14 * n23 * n32 -\n                n13 * n24 * n32 -\n                n14 * n22 * n33 +\n                n12 * n24 * n33 +\n                n13 * n22 * n34 -\n                n12 * n23 * n34) +\n            n42 *\n                (+n11 * n23 * n34 -\n                    n11 * n24 * n33 +\n                    n14 * n21 * n33 -\n                    n13 * n21 * n34 +\n                    n13 * n24 * n31 -\n                    n14 * n23 * n31) +\n            n43 *\n                (+n11 * n24 * n32 -\n                    n11 * n22 * n34 -\n                    n14 * n21 * n32 +\n                    n12 * n21 * n34 +\n                    n14 * n22 * n31 -\n                    n12 * n24 * n31) +\n            n44 *\n                (-n13 * n22 * n31 -\n                    n11 * n23 * n32 +\n                    n11 * n22 * n33 +\n                    n13 * n21 * n32 -\n                    n12 * n21 * n33 +\n                    n12 * n23 * n31));\n    }\n    transpose() {\n        const te = this.elements;\n        let tmp;\n        tmp = te[1];\n        te[1] = te[4];\n        te[4] = tmp;\n        tmp = te[2];\n        te[2] = te[8];\n        te[8] = tmp;\n        tmp = te[6];\n        te[6] = te[9];\n        te[9] = tmp;\n        tmp = te[3];\n        te[3] = te[12];\n        te[12] = tmp;\n        tmp = te[7];\n        te[7] = te[13];\n        te[13] = tmp;\n        tmp = te[11];\n        te[11] = te[14];\n        te[14] = tmp;\n        return this;\n    }\n    setPosition(v) {\n        const te = this.elements;\n        te[12] = v.x;\n        te[13] = v.y;\n        te[14] = v.z;\n        return this;\n    }\n    /**\n     * http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n     * @param m\n     * @param throwOnDegenerate\n     * @returns {Matrix4}\n     */\n    getInverse(m, throwOnDegenerate = false) {\n        const te = this.elements, me = m.elements;\n        const n11 = me[0], n21 = me[1], n31 = me[2], n41 = me[3], n12 = me[4], n22 = me[5], n32 = me[6], n42 = me[7], n13 = me[8], n23 = me[9], n33 = me[10], n43 = me[11], n14 = me[12], n24 = me[13], n34 = me[14], n44 = me[15], t11 = n23 * n34 * n42 -\n            n24 * n33 * n42 +\n            n24 * n32 * n43 -\n            n22 * n34 * n43 -\n            n23 * n32 * n44 +\n            n22 * n33 * n44, t12 = n14 * n33 * n42 -\n            n13 * n34 * n42 -\n            n14 * n32 * n43 +\n            n12 * n34 * n43 +\n            n13 * n32 * n44 -\n            n12 * n33 * n44, t13 = n13 * n24 * n42 -\n            n14 * n23 * n42 +\n            n14 * n22 * n43 -\n            n12 * n24 * n43 -\n            n13 * n22 * n44 +\n            n12 * n23 * n44, t14 = n14 * n23 * n32 -\n            n13 * n24 * n32 -\n            n14 * n22 * n33 +\n            n12 * n24 * n33 +\n            n13 * n22 * n34 -\n            n12 * n23 * n34;\n        const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n        if (det === 0) {\n            const msg = `THREE.Matrix4: .getInverse() can\"t invert matrix, determinant is 0`;\n            if (throwOnDegenerate === true) {\n                throw new Error(msg);\n            }\n            else {\n                console.warn(msg);\n            }\n            return this.identity();\n        }\n        const detInv = 1 / det;\n        te[0] = t11 * detInv;\n        te[1] =\n            (n24 * n33 * n41 -\n                n23 * n34 * n41 -\n                n24 * n31 * n43 +\n                n21 * n34 * n43 +\n                n23 * n31 * n44 -\n                n21 * n33 * n44) *\n                detInv;\n        te[2] =\n            (n22 * n34 * n41 -\n                n24 * n32 * n41 +\n                n24 * n31 * n42 -\n                n21 * n34 * n42 -\n                n22 * n31 * n44 +\n                n21 * n32 * n44) *\n                detInv;\n        te[3] =\n            (n23 * n32 * n41 -\n                n22 * n33 * n41 -\n                n23 * n31 * n42 +\n                n21 * n33 * n42 +\n                n22 * n31 * n43 -\n                n21 * n32 * n43) *\n                detInv;\n        te[4] = t12 * detInv;\n        te[5] =\n            (n13 * n34 * n41 -\n                n14 * n33 * n41 +\n                n14 * n31 * n43 -\n                n11 * n34 * n43 -\n                n13 * n31 * n44 +\n                n11 * n33 * n44) *\n                detInv;\n        te[6] =\n            (n14 * n32 * n41 -\n                n12 * n34 * n41 -\n                n14 * n31 * n42 +\n                n11 * n34 * n42 +\n                n12 * n31 * n44 -\n                n11 * n32 * n44) *\n                detInv;\n        te[7] =\n            (n12 * n33 * n41 -\n                n13 * n32 * n41 +\n                n13 * n31 * n42 -\n                n11 * n33 * n42 -\n                n12 * n31 * n43 +\n                n11 * n32 * n43) *\n                detInv;\n        te[8] = t13 * detInv;\n        te[9] =\n            (n14 * n23 * n41 -\n                n13 * n24 * n41 -\n                n14 * n21 * n43 +\n                n11 * n24 * n43 +\n                n13 * n21 * n44 -\n                n11 * n23 * n44) *\n                detInv;\n        te[10] =\n            (n12 * n24 * n41 -\n                n14 * n22 * n41 +\n                n14 * n21 * n42 -\n                n11 * n24 * n42 -\n                n12 * n21 * n44 +\n                n11 * n22 * n44) *\n                detInv;\n        te[11] =\n            (n13 * n22 * n41 -\n                n12 * n23 * n41 -\n                n13 * n21 * n42 +\n                n11 * n23 * n42 +\n                n12 * n21 * n43 -\n                n11 * n22 * n43) *\n                detInv;\n        te[12] = t14 * detInv;\n        te[13] =\n            (n13 * n24 * n31 -\n                n14 * n23 * n31 +\n                n14 * n21 * n33 -\n                n11 * n24 * n33 -\n                n13 * n21 * n34 +\n                n11 * n23 * n34) *\n                detInv;\n        te[14] =\n            (n14 * n22 * n31 -\n                n12 * n24 * n31 -\n                n14 * n21 * n32 +\n                n11 * n24 * n32 +\n                n12 * n21 * n34 -\n                n11 * n22 * n34) *\n                detInv;\n        te[15] =\n            (n12 * n23 * n31 -\n                n13 * n22 * n31 +\n                n13 * n21 * n32 -\n                n11 * n23 * n32 -\n                n12 * n21 * n33 +\n                n11 * n22 * n33) *\n                detInv;\n        return this;\n    }\n    scale(v) {\n        const te = this.elements;\n        const x = v.x, y = v.y, z = v.z;\n        te[0] *= x;\n        te[4] *= y;\n        te[8] *= z;\n        te[1] *= x;\n        te[5] *= y;\n        te[9] *= z;\n        te[2] *= x;\n        te[6] *= y;\n        te[10] *= z;\n        te[3] *= x;\n        te[7] *= y;\n        te[11] *= z;\n        return this;\n    }\n    getMaxScaleOnAxis() {\n        const te = this.elements;\n        const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n        const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n        const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n        return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n    }\n    makeTranslation(x, y, z) {\n        return this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n    }\n    makeRotationX(theta) {\n        const c = Math.cos(theta), s = Math.sin(theta);\n        return this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n    }\n    makeRotationY(theta) {\n        const c = Math.cos(theta), s = Math.sin(theta);\n        return this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n    }\n    makeRotationZ(theta) {\n        const c = Math.cos(theta), s = Math.sin(theta);\n        return this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n    }\n    /**\n     * http://www.gamedev.net/reference/articles/article1199.asp\n     * @param axis\n     * @param angle\n     * @returns {Matrix4}\n     */\n    makeRotationAxis(axis, angle) {\n        const c = Math.cos(angle);\n        const s = Math.sin(angle);\n        const t = 1 - c;\n        const x = axis.x, y = axis.y, z = axis.z;\n        const tx = t * x, ty = t * y;\n        return this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n    }\n    makeScale(x, y, z) {\n        return this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n    }\n    makeShear(x, y, z) {\n        return this.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);\n    }\n    compose(position, quaternion, scale) {\n        this.makeRotationFromQuaternion(quaternion);\n        this.scale(scale);\n        this.setPosition(position);\n        return this;\n    }\n    decompose(position, quaternion, scale) {\n        const vector = new Vector3();\n        const matrix = new Matrix4();\n        const te = this.elements;\n        let sx = vector.set(te[0], te[1], te[2]).length();\n        const sy = vector.set(te[4], te[5], te[6]).length();\n        const sz = vector.set(te[8], te[9], te[10]).length();\n        // if determine is negative, we need to invert one scale\n        const det = this.determinant();\n        if (det < 0)\n            sx = -sx;\n        position.x = te[12];\n        position.y = te[13];\n        position.z = te[14];\n        // scale the rotation part\n        matrix.copy(this);\n        const invSX = 1 / sx;\n        const invSY = 1 / sy;\n        const invSZ = 1 / sz;\n        matrix.elements[0] *= invSX;\n        matrix.elements[1] *= invSX;\n        matrix.elements[2] *= invSX;\n        matrix.elements[4] *= invSY;\n        matrix.elements[5] *= invSY;\n        matrix.elements[6] *= invSY;\n        matrix.elements[8] *= invSZ;\n        matrix.elements[9] *= invSZ;\n        matrix.elements[10] *= invSZ;\n        quaternion.setFromRotationMatrix(matrix);\n        scale.set(sx, sy, sz);\n        return this;\n    }\n    makePerspective(left, right, top, bottom, near, far) {\n        return this.set(2 * near / (right - left), 0, (right + left) / (right - left), 0, 0, 2 * near / (top - bottom), (top + bottom) / (top - bottom), 0, 0, 0, -(far + near) / (far - near), -2 * far * near / (far - near), 0, 0, -1, 0);\n    }\n    makeOrthographic(left, right, top, bottom, near, far) {\n        const w = 1.0 / (right - left);\n        const h = 1.0 / (top - bottom);\n        const p = 1.0 / (far - near);\n        const x = (right + left) * w;\n        const y = (top + bottom) * h;\n        const z = (far + near) * p;\n        return this.set(2 * w, 0, 0, -x, 0, 2 * h, 0, -y, 0, 0, -2 * p, -z, 0, 0, 0, 1);\n    }\n    equals(matrix) {\n        const me = matrix.elements;\n        for (let i = 0; i < 16; i++) {\n            if (this.elements[i] !== me[i])\n                return false;\n        }\n        return true;\n    }\n    fromArray(array, offset = 0) {\n        for (let i = 0; i < 16; i++) {\n            this.elements[i] = array[i + offset];\n        }\n        return this;\n    }\n    toArray(array = [], offset = 0) {\n        const te = this.elements;\n        array[offset] = te[0];\n        array[offset + 1] = te[1];\n        array[offset + 2] = te[2];\n        array[offset + 3] = te[3];\n        array[offset + 4] = te[4];\n        array[offset + 5] = te[5];\n        array[offset + 6] = te[6];\n        array[offset + 7] = te[7];\n        array[offset + 8] = te[8];\n        array[offset + 9] = te[9];\n        array[offset + 10] = te[10];\n        array[offset + 11] = te[11];\n        array[offset + 12] = te[12];\n        array[offset + 13] = te[13];\n        array[offset + 14] = te[14];\n        array[offset + 15] = te[15];\n        return array;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n","import { Matrix3 } from \"./Matrix3\";\nimport { Vector3 } from \"./Vector3\";\nexport class Plane {\n    constructor(normal = new Vector3(1, 0, 0), constant = 0) {\n        this.normal = new Vector3(1, 0, 0);\n        this.constant = 0;\n        this.normal = normal;\n        this.constant = constant;\n    }\n    set(normal, constant) {\n        this.normal.copy(normal);\n        this.constant = constant;\n        return this;\n    }\n    setFromNormalAndCoplanarPoint(normal, point) {\n        this.normal.copy(normal);\n        this.constant = -point.dot(this.normal);\n        return this;\n    }\n    setFromCoplanarPoints(a, b, c) {\n        const v1 = new Vector3();\n        const v2 = new Vector3();\n        const normal = v1\n            .copy(c)\n            .sub(b)\n            .cross(v2.copy(a).sub(b))\n            .normalize();\n        // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n        this.setFromNormalAndCoplanarPoint(normal, a);\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n    copy(plane) {\n        this.normal.copy(plane.normal);\n        this.constant = plane.constant;\n        return this;\n    }\n    /**\n     * Note: will lead to a divide by zero if the plane is invalid\n     * @returns {Plane}\n     */\n    normalize() {\n        const inverseNormalLength = 1.0 / this.normal.length();\n        this.normal.multiplyScalar(inverseNormalLength);\n        this.constant *= inverseNormalLength;\n        return this;\n    }\n    negate() {\n        this.constant *= -1;\n        this.normal.negate();\n        return this;\n    }\n    distanceToPoint(point) {\n        return this.normal.dot(point) + this.constant;\n    }\n    distanceToSphere(sphere) {\n        return this.distanceToPoint(sphere.center) - sphere.radius;\n    }\n    projectPoint(point) {\n        return new Vector3()\n            .copy(this.normal)\n            .multiplyScalar(-this.distanceToPoint(point))\n            .add(point);\n    }\n    intersectLine(line) {\n        const direction = line.delta();\n        const denominator = this.normal.dot(direction);\n        if (denominator === 0) {\n            // line is coplanar, return origin\n            if (this.distanceToPoint(line.start) === 0) {\n                return new Vector3().copy(line.start);\n            }\n            // Unsure if this is the correct method to handle this case.\n            return undefined;\n        }\n        const t = -(line.start.dot(this.normal) + this.constant) / denominator;\n        if (t < 0 || t > 1) {\n            return undefined;\n        }\n        return new Vector3()\n            .copy(direction)\n            .multiplyScalar(t)\n            .add(line.start);\n    }\n    intersectsLine(line) {\n        // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n        const startSign = this.distanceToPoint(line.start);\n        const endSign = this.distanceToPoint(line.end);\n        return (startSign < 0 && endSign > 0) || (endSign < 0 && startSign > 0);\n    }\n    intersectsBox(box) {\n        return box.intersectsPlane(this);\n    }\n    intersectsSphere(sphere) {\n        return sphere.intersectsPlane(this);\n    }\n    coplanarPoint() {\n        return new Vector3().copy(this.normal).multiplyScalar(-this.constant);\n    }\n    applyMatrix4(matrix, optionalNormalMatrix) {\n        const normalMatrix = optionalNormalMatrix || new Matrix3().getNormalMatrix(matrix);\n        const referencePoint = this.coplanarPoint().applyMatrix4(matrix);\n        const normal = this.normal.applyMatrix3(normalMatrix).normalize();\n        this.constant = -referencePoint.dot(normal);\n        return this;\n    }\n    translate(offset) {\n        this.constant -= offset.dot(this.normal);\n        return this;\n    }\n    equals(plane) {\n        return plane.normal.equals(this.normal) && plane.constant === this.constant;\n    }\n}\n","import { EulerOrder } from \"./Euler\";\nimport { Vector3 } from \"./Vector3\";\nexport class Quaternion {\n    constructor(x = 0, y = 0, z = 0, w = 1) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._w = w;\n    }\n    get x() {\n        return this._x;\n    }\n    set x(_x) {\n        this._x = _x;\n    }\n    get y() {\n        return this._y;\n    }\n    set y(_y) {\n        this._y = _y;\n    }\n    get z() {\n        return this._z;\n    }\n    set z(_z) {\n        this._z = _z;\n    }\n    get w() {\n        return this._w;\n    }\n    set w(_w) {\n        this._w = _w;\n    }\n    set(x, y, z, w) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._w = w;\n        return this;\n    }\n    copy(quaternion) {\n        return this.set(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n    }\n    setFromEuler(euler) {\n        const { x, y, z, order } = euler;\n        const cos = Math.cos;\n        const sin = Math.sin;\n        const c1 = cos(x / 2);\n        const c2 = cos(y / 2);\n        const c3 = cos(z / 2);\n        const s1 = sin(x / 2);\n        const s2 = sin(y / 2);\n        const s3 = sin(z / 2);\n        if (order === EulerOrder.XYZ) {\n            return this.set(s1 * c2 * c3 + c1 * s2 * s3, c1 * s2 * c3 - s1 * c2 * s3, c1 * c2 * s3 + s1 * s2 * c3, c1 * c2 * c3 - s1 * s2 * s3);\n        }\n        else if (order === EulerOrder.YXZ) {\n            return this.set(s1 * c2 * c3 + c1 * s2 * s3, c1 * s2 * c3 - s1 * c2 * s3, c1 * c2 * s3 - s1 * s2 * c3, c1 * c2 * c3 + s1 * s2 * s3);\n        }\n        else if (order === EulerOrder.ZXY) {\n            return this.set(s1 * c2 * c3 - c1 * s2 * s3, c1 * s2 * c3 + s1 * c2 * s3, c1 * c2 * s3 + s1 * s2 * c3, c1 * c2 * c3 - s1 * s2 * s3);\n        }\n        else if (order === EulerOrder.ZYX) {\n            return this.set(s1 * c2 * c3 - c1 * s2 * s3, c1 * s2 * c3 + s1 * c2 * s3, c1 * c2 * s3 - s1 * s2 * c3, c1 * c2 * c3 + s1 * s2 * s3);\n        }\n        else if (order === EulerOrder.YZX) {\n            return this.set(s1 * c2 * c3 + c1 * s2 * s3, c1 * s2 * c3 + s1 * c2 * s3, c1 * c2 * s3 - s1 * s2 * c3, c1 * c2 * c3 - s1 * s2 * s3);\n        }\n        else if (order === EulerOrder.XZY) {\n            return this.set(s1 * c2 * c3 - c1 * s2 * s3, c1 * s2 * c3 - s1 * c2 * s3, c1 * c2 * s3 + s1 * s2 * c3, c1 * c2 * c3 + s1 * s2 * s3);\n        }\n        return this;\n    }\n    /**\n     * !!! assumes axis is normalized\n     * http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n     * @param axis\n     * @param angle\n     * @returns {Quaternion}\n     */\n    setFromAxisAngle(axis, angle) {\n        const halfAngle = angle / 2, s = Math.sin(halfAngle);\n        return this.set(axis.x * s, axis.y * s, axis.z * s, Math.cos(halfAngle));\n    }\n    /**\n     * !!! assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n     * http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n     * @param m\n     * @returns {Quaternion}\n     */\n    setFromRotationMatrix(m) {\n        const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;\n        let s;\n        if (trace > 0) {\n            s = 0.5 / Math.sqrt(trace + 1.0);\n            return this.set((m32 - m23) * s, (m13 - m31) * s, (m21 - m12) * s, 0.25 / s);\n        }\n        else if (m11 > m22 && m11 > m33) {\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n            return this.set(0.25 * s, (m12 + m21) / s, (m13 + m31) / s, (m32 - m23) / s);\n        }\n        else if (m22 > m33) {\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n            return this.set((m12 + m21) / s, 0.25 * s, (m23 + m32) / s, (m13 - m31) / s);\n        }\n        else {\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n            return this.set((m13 + m31) / s, (m23 + m32) / s, 0.25 * s, (m21 - m12) / s);\n        }\n    }\n    /**\n     * !! assumes direction vectors vFrom and vTo are normalized\n     * @param vFrom\n     * @param vTo\n     * @returns {Quaternion}\n     */\n    setFromUnitVectors(vFrom, vTo) {\n        const vec = new Vector3();\n        const EPS = 0.000001;\n        let r = vFrom.dot(vTo) + 1;\n        if (r < EPS) {\n            r = 0;\n            if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n                vec.set(-vFrom.y, vFrom.x, 0);\n            }\n            else {\n                vec.set(0, -vFrom.z, vFrom.y);\n            }\n        }\n        else {\n            vec.copy(vFrom).cross(vTo);\n        }\n        this._x = vec.x;\n        this._y = vec.y;\n        this._z = vec.z;\n        this._w = r;\n        return this.normalize();\n    }\n    inverse() {\n        return this.conjugate().normalize();\n    }\n    conjugate() {\n        return this.set(this.x * -1, this.y * -1, this.z * -1, this.w);\n    }\n    dot(vec) {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z + this.w * vec.w;\n    }\n    lengthSquared() {\n        const { x, y, z, w } = this;\n        return x * x + y * y + z * z + w * w;\n    }\n    length() {\n        return Math.sqrt(this.lengthSquared());\n    }\n    normalize() {\n        let l = this.length();\n        if (l === 0) {\n            return this.set(0, 0, 0, 1);\n        }\n        else {\n            l = 1 / l;\n            return this.set(this.x * l, this.y * l, this.z * l, this.w * l);\n        }\n    }\n    multiply(quaternion) {\n        return this.multiplyQuaternions(this, quaternion);\n    }\n    premultiply(quaternion) {\n        return this.multiplyQuaternions(quaternion, this);\n    }\n    /**\n     * http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n     * @param a\n     * @param b\n     * @returns {Quaternion}\n     */\n    multiplyQuaternions(a, b) {\n        const qax = a.x, qay = a.y, qaz = a.z, qaw = a.w;\n        const qbx = b.x, qby = b.y, qbz = b.z, qbw = b.w;\n        return this.set(qax * qbw + qaw * qbx + qay * qbz - qaz * qby, qay * qbw + qaw * qby + qaz * qbx - qax * qbz, qaz * qbw + qaw * qbz + qax * qby - qay * qbx, qaw * qbw - qax * qbx - qay * qby - qaz * qbz);\n    }\n    /**\n     * http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n     * @param qb\n     * @param t\n     * @returns {Quaternion}\n     */\n    slerp(qb, t) {\n        if (t === 0)\n            return this;\n        if (t === 1)\n            return this.copy(qb);\n        const { x, y, z, w } = this;\n        let cosHalfTheta = w * qb.w + x * qb.x + y * qb.y + z * qb.z;\n        if (cosHalfTheta < 0) {\n            this.set(-qb.x, -qb.y, -qb.z, -qb.w);\n            cosHalfTheta = -cosHalfTheta;\n        }\n        else {\n            this.copy(qb);\n        }\n        if (cosHalfTheta >= 1.0) {\n            return this.set(x, y, z, w);\n        }\n        const sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\n        if (Math.abs(sinHalfTheta) < 0.001) {\n            return this.set(0.5 * (x + this.x), 0.5 * (y + this.y), 0.5 * (z + this.z), 0.5 * (w + this.w));\n        }\n        const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n        const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n        return this.set(x * ratioA + this.x * ratioB, y * ratioA + this.y * ratioB, z * ratioA + this.z * ratioB, w * ratioA + this.w * ratioB);\n    }\n    equals(quaternion) {\n        const { x, y, z, w } = this;\n        return quaternion.x === x && quaternion.y === y && quaternion.z === z && quaternion.w === w;\n    }\n    fromArray(array, offset = 0) {\n        return this.set(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n    }\n    toArray(array = [], offset = 0) {\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        array[offset + 2] = this.z;\n        array[offset + 3] = this.w;\n        return array;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n","import { Vector3 } from \"./Vector3\";\nexport class Ray {\n    constructor(origin = new Vector3(), direction = new Vector3()) {\n        this.origin = new Vector3();\n        this.direction = new Vector3();\n        this.origin = origin;\n        this.direction = direction;\n    }\n    set(origin, direction) {\n        this.origin.copy(origin);\n        this.direction.copy(direction);\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n    copy(ray) {\n        this.origin.copy(ray.origin);\n        this.direction.copy(ray.direction);\n        return this;\n    }\n    at(t) {\n        return new Vector3()\n            .copy(this.direction)\n            .multiplyScalar(t)\n            .add(this.origin);\n    }\n    lookAt(v) {\n        this.direction\n            .copy(v)\n            .sub(this.origin)\n            .normalize();\n        return this;\n    }\n    recast(t) {\n        this.origin.copy(this.at(t));\n        return this;\n    }\n    closestPointToPoint(point) {\n        const result = new Vector3().copy(point).sub(this.origin);\n        const directionDistance = result.dot(this.direction);\n        if (directionDistance < 0) {\n            return result.copy(this.origin);\n        }\n        return result\n            .copy(this.direction)\n            .multiplyScalar(directionDistance)\n            .add(this.origin);\n    }\n    distanceToPoint(point) {\n        return Math.sqrt(this.distanceSquaredToPoint(point));\n    }\n    distanceSquaredToPoint(point) {\n        const directionDistance = new Vector3()\n            .copy(point)\n            .sub(this.origin)\n            .dot(this.direction);\n        // point behind the ray\n        if (directionDistance < 0) {\n            return this.origin.distanceToSquared(point);\n        }\n        return new Vector3()\n            .copy(this.direction)\n            .multiplyScalar(directionDistance)\n            .add(this.origin)\n            .distanceToSquared(point);\n    }\n    distanceSquareToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n        const segCenter = new Vector3();\n        const segDir = new Vector3();\n        const diff = new Vector3();\n        // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n        // It returns the min distance between the ray and the segment\n        // defined by v0 and v1\n        // It can also set two optional targets :\n        // - The closest point on the ray\n        // - The closest point on the segment\n        segCenter\n            .copy(v0)\n            .add(v1)\n            .multiplyScalar(0.5);\n        segDir\n            .copy(v1)\n            .sub(v0)\n            .normalize();\n        diff.copy(this.origin).sub(segCenter);\n        const segExtent = v0.distanceTo(v1) * 0.5;\n        const a01 = -this.direction.dot(segDir);\n        const b0 = diff.dot(this.direction);\n        const b1 = -diff.dot(segDir);\n        const c = diff.lengthSquared();\n        const det = Math.abs(1 - a01 * a01);\n        let s0, s1, sqrDist, extDet;\n        if (det > 0) {\n            // The ray and segment are not parallel.\n            s0 = a01 * b1 - b0;\n            s1 = a01 * b0 - b1;\n            extDet = segExtent * det;\n            if (s0 >= 0) {\n                if (s1 >= -extDet) {\n                    if (s1 <= extDet) {\n                        // region 0\n                        // Minimum at interior points of ray and segment.\n                        const invDet = 1 / det;\n                        s0 *= invDet;\n                        s1 *= invDet;\n                        sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n                    }\n                    else {\n                        // region 1\n                        s1 = segExtent;\n                        s0 = Math.max(0, -(a01 * s1 + b0));\n                        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n                    }\n                }\n                else {\n                    // region 5\n                    s1 = -segExtent;\n                    s0 = Math.max(0, -(a01 * s1 + b0));\n                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n                }\n            }\n            else {\n                if (s1 <= -extDet) {\n                    // region 4\n                    s0 = Math.max(0, -(-a01 * segExtent + b0));\n                    s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n                }\n                else if (s1 <= extDet) {\n                    // region 3\n                    s0 = 0;\n                    s1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n                    sqrDist = s1 * (s1 + 2 * b1) + c;\n                }\n                else {\n                    // region 2\n                    s0 = Math.max(0, -(a01 * segExtent + b0));\n                    s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n                }\n            }\n        }\n        else {\n            // Ray and segment are parallel.\n            s1 = a01 > 0 ? -segExtent : segExtent;\n            s0 = Math.max(0, -(a01 * s1 + b0));\n            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        }\n        if (optionalPointOnRay) {\n            optionalPointOnRay\n                .copy(this.direction)\n                .multiplyScalar(s0)\n                .add(this.origin);\n        }\n        if (optionalPointOnSegment) {\n            optionalPointOnSegment\n                .copy(segDir)\n                .multiplyScalar(s1)\n                .add(segCenter);\n        }\n        return sqrDist;\n    }\n    intersectSphere(sphere) {\n        const vec = new Vector3().copy(sphere.center).sub(this.origin);\n        const tca = vec.dot(this.direction);\n        const d2 = vec.dot(vec) - tca * tca;\n        const radius2 = sphere.radius * sphere.radius;\n        if (d2 > radius2)\n            return null;\n        const thc = Math.sqrt(radius2 - d2);\n        // t0 = first intersect point - entrance on front of sphere\n        const t0 = tca - thc;\n        // t1 = second intersect point - exit point on back of sphere\n        const t1 = tca + thc;\n        // test to see if both t0 and t1 are behind the ray - if so, return null\n        if (t0 < 0 && t1 < 0)\n            return null;\n        // test to see if t0 is behind the ray:\n        // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n        // in order to always return an intersect point that is in front of the ray.\n        if (t0 < 0)\n            return this.at(t1);\n        // else t0 is in front of the ray, so return the first collision point scaled by t0\n        return this.at(t0);\n    }\n    intersectsSphere(sphere) {\n        return this.distanceToPoint(sphere.center) <= sphere.radius;\n    }\n    distanceToPlane(plane) {\n        const denominator = plane.normal.dot(this.direction);\n        if (denominator === 0) {\n            // line is coplanar, return origin\n            if (plane.distanceToPoint(this.origin) === 0) {\n                return 0;\n            }\n            // Null is preferable to undefined since undefined means.... it is undefined\n            return Infinity;\n        }\n        const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;\n        // Return if the ray never intersects the plane\n        return t >= 0 ? t : Infinity;\n    }\n    intersectPlane(plane) {\n        const t = this.distanceToPlane(plane);\n        if (!isFinite(t)) {\n            return null;\n        }\n        return this.at(t);\n    }\n    intersectsPlane(plane) {\n        // check if the ray lies on the plane first\n        const distToPoint = plane.distanceToPoint(this.origin);\n        if (distToPoint === 0) {\n            return true;\n        }\n        const denominator = plane.normal.dot(this.direction);\n        if (denominator * distToPoint < 0) {\n            return true;\n        }\n        // ray origin is behind the plane (and is pointing behind it)\n        return false;\n    }\n    intersectBox(box) {\n        let tmin, tmax, tymin, tymax, tzmin, tzmax;\n        const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;\n        const origin = this.origin;\n        if (invdirx >= 0) {\n            tmin = (box.min.x - origin.x) * invdirx;\n            tmax = (box.max.x - origin.x) * invdirx;\n        }\n        else {\n            tmin = (box.max.x - origin.x) * invdirx;\n            tmax = (box.min.x - origin.x) * invdirx;\n        }\n        if (invdiry >= 0) {\n            tymin = (box.min.y - origin.y) * invdiry;\n            tymax = (box.max.y - origin.y) * invdiry;\n        }\n        else {\n            tymin = (box.max.y - origin.y) * invdiry;\n            tymax = (box.min.y - origin.y) * invdiry;\n        }\n        if (tmin > tymax || tymin > tmax)\n            return null;\n        // These lines also handle the case where tmin or tmax is NaN\n        // (result of 0 * Infinity). x !== x returns true if x is NaN\n        if (tymin > tmin || tmin !== tmin)\n            tmin = tymin;\n        if (tymax < tmax || tmax !== tmax)\n            tmax = tymax;\n        if (invdirz >= 0) {\n            tzmin = (box.min.z - origin.z) * invdirz;\n            tzmax = (box.max.z - origin.z) * invdirz;\n        }\n        else {\n            tzmin = (box.max.z - origin.z) * invdirz;\n            tzmax = (box.min.z - origin.z) * invdirz;\n        }\n        if (tmin > tzmax || tzmin > tmax)\n            return null;\n        if (tzmin > tmin || tmin !== tmin)\n            tmin = tzmin;\n        if (tzmax < tmax || tmax !== tmax)\n            tmax = tzmax;\n        // return point closest to the ray (positive side)\n        if (tmax < 0)\n            return null;\n        return this.at(tmin >= 0 ? tmin : tmax);\n    }\n    intersectsBox(box) {\n        return this.intersectBox(box) !== null;\n    }\n    intersectTriangle(triangle, backFaceCulling = false) {\n        // Compute the offset origin, edges, and normal.\n        const a = triangle.a, b = triangle.b, c = triangle.c;\n        const edge1 = new Vector3().copy(b).sub(a);\n        const edge2 = new Vector3().copy(c).sub(a);\n        const normal = new Vector3().copy(edge1).cross(edge2);\n        // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n        // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n        //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n        //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n        //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n        let DdN = this.direction.dot(normal);\n        let sign;\n        if (DdN > 0) {\n            if (backFaceCulling)\n                return null;\n            sign = 1;\n        }\n        else if (DdN < 0) {\n            sign = -1;\n            DdN = -DdN;\n        }\n        else {\n            return null;\n        }\n        const diff = new Vector3().copy(this.origin).sub(a);\n        const DdQxE2 = sign * this.direction.dot(edge2.copy(diff).cross(edge2));\n        // b1 < 0, no intersection\n        if (DdQxE2 < 0) {\n            return null;\n        }\n        const DdE1xQ = sign * this.direction.dot(edge1.cross(diff));\n        // b2 < 0, no intersection\n        if (DdE1xQ < 0) {\n            return null;\n        }\n        // b1+b2 > 1, no intersection\n        if (DdQxE2 + DdE1xQ > DdN) {\n            return null;\n        }\n        // Line intersects triangle, check if ray does.\n        const QdN = -sign * diff.dot(normal);\n        // t < 0, no intersection\n        if (QdN < 0) {\n            return null;\n        }\n        // Ray intersects triangle.\n        return this.at(QdN / DdN);\n    }\n    intersectsTriangle(triangle) {\n        return this.intersectTriangle(triangle) !== null;\n    }\n    applyMatrix4(matrix4) {\n        this.origin.applyMatrix4(matrix4);\n        this.direction.transformDirection(matrix4);\n        return this;\n    }\n    equals(ray) {\n        return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n    }\n}\n","import { Box3 } from \"./Box3\";\nimport { Vector3 } from \"./Vector3\";\nexport class Sphere {\n    constructor(center = new Vector3(), radius = 0) {\n        this.center = new Vector3();\n        this.radius = 0;\n        this.center = center;\n        this.radius = radius;\n    }\n    set(center, radius) {\n        this.center.copy(center);\n        this.radius = radius;\n        return this;\n    }\n    setFromPoints(points, optionalCenter) {\n        if (optionalCenter !== undefined) {\n            this.center.copy(optionalCenter);\n        }\n        else {\n            this.center = new Box3().setFromPoints(points).getCenter();\n        }\n        let maxRadiusSq = 0;\n        for (let i = 0, il = points.length; i < il; i++) {\n            maxRadiusSq = Math.max(maxRadiusSq, this.center.distanceToSquared(points[i]));\n        }\n        this.radius = Math.sqrt(maxRadiusSq);\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n    copy(sphere) {\n        this.center.copy(sphere.center);\n        this.radius = sphere.radius;\n        return this;\n    }\n    empty() {\n        return this.radius <= 0;\n    }\n    containsPoint(point) {\n        return point.distanceToSquared(this.center) <= this.radius * this.radius;\n    }\n    distanceToPoint(point) {\n        return point.distanceTo(this.center) - this.radius;\n    }\n    intersectsSphere(sphere) {\n        const radiusSum = this.radius + sphere.radius;\n        return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n    }\n    intersectsBox(box) {\n        return box.intersectsSphere(this);\n    }\n    intersectsPlane(plane) {\n        return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n    }\n    clampPoint(point) {\n        const deltaLengthSquared = this.center.distanceToSquared(point);\n        const result = new Vector3().copy(point);\n        if (deltaLengthSquared > this.radius * this.radius) {\n            result.sub(this.center).normalize();\n            result.multiplyScalar(this.radius).add(this.center);\n        }\n        return result;\n    }\n    getBoundingBox() {\n        return new Box3().set(this.center, this.center).expandByScalar(this.radius);\n    }\n    applyMatrix4(matrix) {\n        this.center.applyMatrix4(matrix);\n        this.radius = this.radius * matrix.getMaxScaleOnAxis();\n        return this;\n    }\n    translate(offset) {\n        this.center.add(offset);\n        return this;\n    }\n    equals(sphere) {\n        return sphere.center.equals(this.center) && sphere.radius === this.radius;\n    }\n}\n","import { MathUtil } from \"./Math\";\nexport class Spherical {\n    constructor(radius = 1.0, phi = 0, theta = 0) {\n        this.radius = radius;\n        this.phi = phi;\n        this.theta = theta;\n    }\n    set(radius, phi, theta) {\n        this.radius = radius;\n        this.phi = phi;\n        this.theta = theta;\n        return this;\n    }\n    copy(other) {\n        this.radius = other.radius;\n        this.phi = other.phi;\n        this.theta = other.theta;\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n    // restrict phi to be betwee EPS and PI-EPS\n    makeSafe() {\n        const EPS = 0.000001;\n        this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n        return this;\n    }\n    setFromVector3(vec3) {\n        this.radius = vec3.length();\n        if (this.radius === 0) {\n            this.theta = 0;\n            this.phi = 0;\n        }\n        else {\n            this.theta = Math.atan2(vec3.x, vec3.z); // equator angle around y-up axis\n            this.phi = Math.acos(MathUtil.clamp(vec3.y / this.radius, -1, 1)); // polar angle\n        }\n        return this;\n    }\n}\n","import { Line3 } from \"./Line3\";\nimport { Plane } from \"./Plane\";\nimport { Vector3 } from \"./Vector3\";\nexport class Triangle {\n    constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {\n        this.a = new Vector3();\n        this.b = new Vector3();\n        this.c = new Vector3();\n        this.a = a;\n        this.b = b;\n        this.c = c;\n    }\n    set(a, b, c) {\n        this.a.copy(a);\n        this.b.copy(b);\n        this.c.copy(c);\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n    copy(triangle) {\n        this.a.copy(triangle.a);\n        this.b.copy(triangle.b);\n        this.c.copy(triangle.c);\n        return this;\n    }\n    area() {\n        const v0 = new Vector3().copy(this.c).sub(this.b);\n        const v1 = new Vector3().copy(this.a).sub(this.b);\n        return v0.cross(v1).length() * 0.5;\n    }\n    midpoint() {\n        return new Vector3()\n            .copy(this.a)\n            .add(this.b)\n            .add(this.c)\n            .multiplyScalar(1 / 3);\n    }\n    normal() {\n        const vec = new Vector3().copy(this.a).sub(this.b);\n        const result = new Vector3()\n            .copy(this.c)\n            .sub(this.b)\n            .cross(vec);\n        const resultLengthSquared = result.lengthSquared();\n        if (resultLengthSquared > 0) {\n            return result.multiplyScalar(1 / Math.sqrt(resultLengthSquared));\n        }\n        return result.set(0, 0, 0);\n    }\n    plane() {\n        return new Plane().setFromCoplanarPoints(this.a, this.b, this.c);\n    }\n    /**\n     * based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n     * @param point\n     */\n    barycoordFromPoint(point) {\n        const v0 = new Vector3().copy(this.c).sub(this.a);\n        const v1 = new Vector3().copy(this.b).sub(this.a);\n        const v2 = new Vector3().copy(point).sub(this.a);\n        const dot00 = v0.dot(v0);\n        const dot01 = v0.dot(v1);\n        const dot02 = v0.dot(v2);\n        const dot11 = v1.dot(v1);\n        const dot12 = v1.dot(v2);\n        const denom = dot00 * dot11 - dot01 * dot01;\n        // collinear or singular triangle\n        if (denom === 0) {\n            // arbitrary location outside of triangle?\n            // not sure if this is the best idea, maybe should be returning undefined\n            return new Vector3().set(-2, -1, -1);\n        }\n        const invDenom = 1 / denom;\n        const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n        const v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n        // barycentric coordinates must always sum to 1\n        return new Vector3().set(1 - u - v, v, u);\n    }\n    containsPoint(point) {\n        const result = this.barycoordFromPoint(point);\n        return result.x >= 0 && result.y >= 0 && result.x + result.y <= 1;\n    }\n    closestPointToPoint(point) {\n        // project the point onto the plane of the triangle\n        const plane = new Plane().setFromCoplanarPoints(this.a, this.b, this.c);\n        const projectedPoint = plane.projectPoint(point);\n        // check if the projection lies within the triangle\n        if (this.containsPoint(projectedPoint) === true) {\n            // if so, this is the closest point\n            return new Vector3().copy(projectedPoint);\n        }\n        else {\n            const result = new Vector3();\n            let minDistance = Infinity;\n            // if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n            const edgeList = [new Line3(this.a, this.b), new Line3(this.b, this.c), new Line3(this.c, this.a)];\n            for (let i = 0; i < edgeList.length; i++) {\n                const closestPoint = edgeList[i].closestPointToPoint(projectedPoint, true);\n                const distance = projectedPoint.distanceToSquared(closestPoint);\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    result.copy(closestPoint);\n                }\n            }\n            return result;\n        }\n    }\n    equals(triangle) {\n        return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n    }\n}\n","export class Vector2 {\n    get x() {\n        return this._x;\n    }\n    set x(x) {\n        this._x = x;\n    }\n    get y() {\n        return this._y;\n    }\n    set y(y) {\n        this._y = y;\n    }\n    get width() {\n        return this.x;\n    }\n    set width(width) {\n        this._x = width;\n    }\n    get height() {\n        return this.y;\n    }\n    set height(height) {\n        this._y = height;\n    }\n    constructor(x = 0, y = 0) {\n        this._x = x;\n        this._y = y;\n    }\n    set(x, y) {\n        this._x = x;\n        this._y = y;\n        return this;\n    }\n    setScalar(scalar) {\n        return this.set(scalar, scalar);\n    }\n    copy(v) {\n        return this.set(v.x, v.y);\n    }\n    add(v) {\n        return this.set(this.x + v.x, this.y + v.y);\n    }\n    addScalar(s) {\n        return this.set(this.x + s, this.y + s);\n    }\n    sub(v) {\n        return this.set(this.x - v.x, this.y - v.y);\n    }\n    subScalar(s) {\n        return this.set(this.x - s, this.y - s);\n    }\n    multiply(v) {\n        return this.set(this.x * v.x, this.y * v.y);\n    }\n    multiplyScalar(s) {\n        return this.set(this.x * s, this.y * s);\n    }\n    divide(v) {\n        return this.set(this.x / v.x, this.y / v.y);\n    }\n    divideScalar(s) {\n        return this.set(this.x / s, this.y / s);\n    }\n    applyMatrix3(m) {\n        const x = this.x, y = this.y;\n        const e = m.elements;\n        return this.set(e[0] * x + e[3] * y + e[6], e[1] * x + e[4] * y + e[7]);\n    }\n    min(v) {\n        this.x = Math.min(this.x, v.x);\n        this.y = Math.min(this.y, v.y);\n        return this;\n    }\n    max(v) {\n        this.x = Math.max(this.x, v.x);\n        this.y = Math.max(this.y, v.y);\n        return this;\n    }\n    clamp(min, max) {\n        return this.set(Math.max(min.x, Math.min(max.x, this.x)), Math.max(min.y, Math.min(max.y, this.y)));\n    }\n    negate() {\n        return this.set(-this.x, -this.y);\n    }\n    dot(v) {\n        return this.x * v.x + this.y * v.y;\n    }\n    lengthSquared() {\n        return this.x * this.x + this.y * this.y;\n    }\n    length() {\n        return Math.sqrt(this.lengthSquared());\n    }\n    manhattanLength() {\n        return Math.abs(this.x) + Math.abs(this.y);\n    }\n    normalize() {\n        return this.divideScalar(this.length() || 1);\n    }\n    setLength(length) {\n        return this.normalize().multiplyScalar(length);\n    }\n    lerp(v, alpha) {\n        return this.set(this.x + (v.x - this.x) * alpha, this.y + (v.y - this.y) * alpha);\n    }\n    lerpVectors(v1, v2, alpha) {\n        return this.copy(v2)\n            .sub(v1)\n            .multiplyScalar(alpha)\n            .add(v1);\n    }\n    equals(v) {\n        return v.x === this.x && v.y === this.y;\n    }\n    fromArray(array, offset = 0) {\n        return this.set(array[offset], array[offset + 1]);\n    }\n    toArray(array = [], offset = 0) {\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        return array;\n    }\n    rotateAround(center, angle) {\n        const c = Math.cos(angle), s = Math.sin(angle);\n        const x = this.x - center.x;\n        const y = this.y - center.y;\n        return this.set(x * c - y * s + center.x, x * s + y * c + center.y);\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n","import { MathUtil } from \"./Math\";\nimport { Quaternion } from \"./Quaternion\";\nexport class Vector3 {\n    constructor(x = 0, y = 0, z = 0) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n    }\n    get x() {\n        return this._x;\n    }\n    set x(x) {\n        this._x = x;\n    }\n    get y() {\n        return this._y;\n    }\n    set y(y) {\n        this._y = y;\n    }\n    get z() {\n        return this._z;\n    }\n    set z(z) {\n        this._z = z;\n    }\n    set(x, y, z) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        return this;\n    }\n    setScalar(scalar) {\n        return this.set(scalar, scalar, scalar);\n    }\n    copy(vec) {\n        return this.set(vec.x, vec.y, vec.z);\n    }\n    add(vec) {\n        return this.set(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n    addScalar(scalar) {\n        return this.set(this.x + scalar, this.y + scalar, this.z + scalar);\n    }\n    sub(vec) {\n        return this.set(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n    subScalar(scalar) {\n        return this.set(this.x - scalar, this.y - scalar, this.z - scalar);\n    }\n    multiply(vec) {\n        return this.set(this.x * vec.x, this.y * vec.y, this.z * vec.z);\n    }\n    multiplyScalar(scalar) {\n        return this.set(this.x * scalar, this.y * scalar, this.z * scalar);\n    }\n    divide(vec) {\n        return this.set(this.x / vec.x, this.y / vec.y, this.z / vec.z);\n    }\n    divideScalar(scalar) {\n        return this.set(this.x / scalar, this.y / scalar, this.z / scalar);\n    }\n    applyEuler(euler) {\n        const quaternion = new Quaternion();\n        return this.applyQuaternion(quaternion.setFromEuler(euler));\n    }\n    applyAxisAngle(axis, angle) {\n        const quaternion = new Quaternion();\n        return this.applyQuaternion(quaternion.setFromAxisAngle(axis, angle));\n    }\n    applyMatrix3(m) {\n        const x = this.x, y = this.y, z = this.z;\n        const e = m.elements;\n        return this.set(e[0] * x + e[3] * y + e[6] * z, e[1] * x + e[4] * y + e[7] * z, e[2] * x + e[5] * y + e[8] * z);\n    }\n    applyMatrix4(matrix) {\n        const x = this.x, y = this.y, z = this.z;\n        const e = matrix.elements;\n        const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n        return this.set((e[0] * x + e[4] * y + e[8] * z + e[12]) * w, (e[1] * x + e[5] * y + e[9] * z + e[13]) * w, (e[2] * x + e[6] * y + e[10] * z + e[14]) * w);\n    }\n    applyQuaternion(quaternion) {\n        const x = this.x, y = this.y, z = this.z;\n        const qx = quaternion.x, qy = quaternion.y, qz = quaternion.z, qw = quaternion.w;\n        // calculate quat * vector\n        const ix = qw * x + qy * z - qz * y;\n        const iy = qw * y + qz * x - qx * z;\n        const iz = qw * z + qx * y - qy * x;\n        const iw = -qx * x - qy * y - qz * z;\n        // calculate result * inverse quat\n        return this.set(ix * qw + iw * -qx + iy * -qz - iz * -qy, iy * qw + iw * -qy + iz * -qx - ix * -qz, iz * qw + iw * -qz + ix * -qy - iy * -qx);\n    }\n    transformDirection(mat4) {\n        const x = this.x, y = this.y, z = this.z;\n        const e = mat4.elements;\n        return this.set(e[0] * x + e[4] * y + e[8] * z, e[1] * x + e[5] * y + e[9] * z, e[2] * x + e[6] * y + e[10] * z).normalize();\n    }\n    min(vec) {\n        return this.set(Math.min(this.x, vec.x), Math.min(this.y, vec.y), Math.min(this.z, vec.z));\n    }\n    max(vec) {\n        return this.set(Math.max(this.x, vec.x), Math.max(this.y, vec.y), Math.max(this.z, vec.z));\n    }\n    clamp(min, max) {\n        return this.set(Math.max(min.x, Math.min(max.x, this.x)), Math.max(min.y, Math.min(max.y, this.y)), Math.max(min.z, Math.min(max.z, this.z)));\n    }\n    negate() {\n        return this.set(-this.x, -this.y, -this.z);\n    }\n    dot(v) {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n    lengthSquared() {\n        const x = this.x, y = this.y, z = this.z;\n        return x * x + y * y + z * z;\n    }\n    length() {\n        const x = this.x, y = this.y, z = this.z;\n        return Math.sqrt(x * x + y * y + z * z);\n    }\n    setLength(length) {\n        return this.normalize().multiplyScalar(length);\n    }\n    manhattanLength() {\n        const x = this.x, y = this.y, z = this.z;\n        return Math.abs(x) + Math.abs(y) + Math.abs(z);\n    }\n    normalize() {\n        return this.divideScalar(this.length() || 1);\n    }\n    lerp(vec, alpha) {\n        return this.set((vec.x - this.x) * alpha, (vec.y - this.y) * alpha, (vec.z - this.z) * alpha);\n    }\n    lerpVectors(v1, v2, alpha) {\n        return this.set(v2.x - v1.x, v2.y - v1.y, v2.z - v1.z)\n            .multiplyScalar(alpha)\n            .add(v1);\n    }\n    cross(vec) {\n        const ax = this.x, ay = this.y, az = this.z;\n        const bx = vec.x, by = vec.y, bz = vec.z;\n        return this.set(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx);\n    }\n    projectOnVector(vector) {\n        const scalar = vector.dot(this) / vector.lengthSquared();\n        return this.copy(vector).multiplyScalar(scalar);\n    }\n    projectOnPlane(planeNormal) {\n        const vec = new Vector3();\n        vec.copy(this).projectOnVector(planeNormal);\n        return this.sub(vec);\n    }\n    /**\n     * reflect incident vector off plane orthogonal to normal\n     * normal is assumed to have unit length\n     * @param normal\n     * @returns {Vector3}\n     */\n    reflect(normal) {\n        const vec = new Vector3();\n        return this.sub(vec.copy(normal).multiplyScalar(2 * this.dot(normal)));\n    }\n    angleTo(v) {\n        const theta = this.dot(v) / Math.sqrt(this.lengthSquared() * v.lengthSquared());\n        return Math.acos(MathUtil.clamp(theta, -1, 1));\n    }\n    distanceTo(vec) {\n        return Math.sqrt(this.distanceToSquared(vec));\n    }\n    distanceToSquared(vec) {\n        const dx = this.x - vec.x, dy = this.y - vec.y, dz = this.z - vec.z;\n        return dx * dx + dy * dy + dz * dz;\n    }\n    equals(vec) {\n        return vec.x === this.x && vec.y === this.y && vec.z === this.z;\n    }\n    setFromSpherical(s) {\n        const sinPhiRadius = Math.sin(s.phi) * s.radius;\n        this.x = sinPhiRadius * Math.sin(s.theta);\n        this.y = Math.cos(s.phi) * s.radius;\n        this.z = sinPhiRadius * Math.cos(s.theta);\n        return this;\n    }\n    setFromMatrixPosition(m) {\n        const e = m.elements;\n        return this.set(e[12], e[13], e[14]);\n    }\n    setFromMatrixScale(m) {\n        const sx = this.setFromMatrixColumn(m, 0).length();\n        const sy = this.setFromMatrixColumn(m, 1).length();\n        const sz = this.setFromMatrixColumn(m, 2).length();\n        this.x = sx;\n        this.y = sy;\n        this.z = sz;\n        return this;\n    }\n    setFromMatrixColumn(m, index) {\n        return this.fromArray(m.elements, index * 4);\n    }\n    fromArray(array, offset = 0) {\n        return this.set(array[offset], array[offset + 1], array[offset + 2]);\n    }\n    toArray(array = [], offset = 0) {\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        array[offset + 2] = this.z;\n        return array;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n","export class Vector4 {\n    constructor(x = 0, y = 0, z = 0, w = 0) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._w = w;\n    }\n    get x() {\n        return this._x;\n    }\n    set x(x) {\n        this._x = x;\n    }\n    get y() {\n        return this._y;\n    }\n    set y(y) {\n        this._y = y;\n    }\n    get z() {\n        return this._z;\n    }\n    set z(z) {\n        this._z = z;\n    }\n    get w() {\n        return this._w;\n    }\n    set w(w) {\n        this._w = w;\n    }\n    set(x, y, z, w) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._w = w;\n        return this;\n    }\n    setScalar(scalar) {\n        return this.set(scalar, scalar, scalar, scalar);\n    }\n    copy(v) {\n        return this.set(v.x, v.y, v.z, (v instanceof Vector4 ? v.w : undefined) || 1);\n    }\n    add(v) {\n        return this.set(this.x + v.x, this.y + v.y, this.z + v.z, this.w + v.w);\n    }\n    addScalar(s) {\n        return this.set(this.x + s, this.y + s, this.z + s, this.w + s);\n    }\n    sub(v) {\n        return this.set(this.x - v.x, this.y - v.y, this.z - v.z, this.w - v.w);\n    }\n    subScalar(s) {\n        return this.set(this.x - s, this.y - s, this.z - s, this.w - s);\n    }\n    multiplyScalar(s) {\n        return this.set(this.x * s, this.y * s, this.z * s, this.w * s);\n    }\n    divideScalar(s) {\n        return this.set(this.x / s, this.y / s, this.z / s, this.w / s);\n    }\n    applyMatrix4(m) {\n        const x = this.x, y = this.y, z = this.z, w = this.w;\n        const e = m.elements;\n        return this.set(e[0] * x + e[4] * y + e[8] * z + e[12] * w, e[1] * x + e[5] * y + e[9] * z + e[13] * w, e[2] * x + e[6] * y + e[10] * z + e[14] * w, e[3] * x + e[7] * y + e[11] * z + e[15] * w);\n    }\n    /**\n     * http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n     * q is assumed to be normalized\n     * @param q\n     * @returns {Vector4}\n     */\n    setAxisAngleFromQuaternion(q) {\n        const s = Math.sqrt(1 - q.w * q.w);\n        if (s < 0.0001) {\n            return this.set(1, 0, 0, 2 * Math.acos(q.w));\n        }\n        else {\n            return this.set(q.x / s, q.y / s, q.z / s, 2 * Math.acos(q.w));\n        }\n    }\n    /**\n     * http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n     * @param m\n     * @returns {Vector4}\n     */\n    setAxisAngleFromRotationMatrix(m) {\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n        let angle, x, y, z; // variables for result\n        const epsilon = 0.01, // margin to allow for rounding errors\n        epsilon2 = 0.1, // margin to distinguish between 0 and 180 degrees\n        te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];\n        if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n            // singularity found\n            // first check for identity matrix which must have +1 for all terms\n            // in leading diagonal and zero in other terms\n            if (Math.abs(m12 + m21) < epsilon2 &&\n                Math.abs(m13 + m31) < epsilon2 &&\n                Math.abs(m23 + m32) < epsilon2 &&\n                Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n                // this singularity is identity matrix so angle = 0\n                // zero angle, arbitrary axis\n                return this.set(1, 0, 0, 0);\n            }\n            // otherwise this singularity is angle = 180\n            angle = Math.PI;\n            const xx = (m11 + 1) / 2;\n            const yy = (m22 + 1) / 2;\n            const zz = (m33 + 1) / 2;\n            const xy = (m12 + m21) / 4;\n            const xz = (m13 + m31) / 4;\n            const yz = (m23 + m32) / 4;\n            if (xx > yy && xx > zz) {\n                // m11 is the largest diagonal term\n                if (xx < epsilon) {\n                    x = 0;\n                    y = 0.707106781;\n                    z = 0.707106781;\n                }\n                else {\n                    x = Math.sqrt(xx);\n                    y = xy / x;\n                    z = xz / x;\n                }\n            }\n            else if (yy > zz) {\n                // m22 is the largest diagonal term\n                if (yy < epsilon) {\n                    x = 0.707106781;\n                    y = 0;\n                    z = 0.707106781;\n                }\n                else {\n                    y = Math.sqrt(yy);\n                    x = xy / y;\n                    z = yz / y;\n                }\n            }\n            else {\n                // m33 is the largest diagonal term so base result on this\n                if (zz < epsilon) {\n                    x = 0.707106781;\n                    y = 0.707106781;\n                    z = 0;\n                }\n                else {\n                    z = Math.sqrt(zz);\n                    x = xz / z;\n                    y = yz / z;\n                }\n            }\n            // return 180 deg rotation\n            return this.set(x, y, z, angle);\n        }\n        // as we have reached here there are no singularities so we can handle normally\n        let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n        if (Math.abs(s) < 0.001)\n            s = 1;\n        // prevent divide by zero, should not happen if matrix is orthogonal and should be\n        // caught by singularity test above, but I\"ve left it in just in case\n        return this.set((m32 - m23) / s, (m13 - m31) / s, (m21 - m12) / s, Math.acos((m11 + m22 + m33 - 1) / 2));\n    }\n    min(v) {\n        return this.set(Math.min(this.x, v.x), Math.min(this.y, v.y), Math.min(this.z, v.z), Math.min(this.w, v.w));\n    }\n    max(v) {\n        return this.set(Math.max(this.x, v.x), Math.max(this.y, v.y), Math.max(this.z, v.z), Math.max(this.w, v.w));\n    }\n    clamp(min, max) {\n        return this.set(Math.max(min.x, Math.min(max.x, this.x)), Math.max(min.y, Math.min(max.y, this.y)), Math.max(min.z, Math.min(max.z, this.z)), Math.max(min.w, Math.min(max.w, this.w)));\n    }\n    negate() {\n        return this.set(-this.x, -this.y, -this.z, -this.w);\n    }\n    dot(v) {\n        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n    }\n    lengthSquared() {\n        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n    }\n    length() {\n        return Math.sqrt(this.lengthSquared());\n    }\n    manhattanLength() {\n        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n    }\n    normalize() {\n        return this.divideScalar(this.length() || 1);\n    }\n    setLength(length) {\n        return this.normalize().multiplyScalar(length);\n    }\n    lerp(v, alpha) {\n        return this.set(this.x + (v.x - this.x) * alpha, this.y + (v.y - this.y) * alpha, this.z + (v.z - this.z) * alpha, this.w + (v.w - this.w) * alpha);\n    }\n    lerpVectors(v1, v2, alpha) {\n        return this.copy(v2)\n            .sub(v1)\n            .multiplyScalar(alpha)\n            .add(v1);\n    }\n    equals(v) {\n        return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n    }\n    fromArray(array, offset = 0) {\n        return this.set(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n    }\n    toArray(array = [], offset = 0) {\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        array[offset + 2] = this.z;\n        array[offset + 3] = this.w;\n        return array;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nexport class Bone extends Object3D {\n    constructor() {\n        super(...arguments);\n        this.type = \"Bone\";\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nexport class Group extends Object3D {\n    constructor() {\n        super(...arguments);\n        this.type = \"IGroup\";\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Vector3 } from \"../math/Vector3\";\nexport class LOD extends Object3D {\n    constructor() {\n        super(...arguments);\n        this.type = \"LOD\";\n        this.levels = [];\n    }\n    addLevel(object, distance = 0) {\n        const levels = this.levels;\n        distance = Math.abs(distance);\n        let l = 0;\n        for (; l < levels.length; l++) {\n            if (distance < levels[l].distance) {\n                break;\n            }\n        }\n        levels.splice(l, 0, { distance: distance, object: object });\n        this.add(object);\n        return this;\n    }\n    getObjectForDistance(distance) {\n        const levels = this.levels;\n        let i = 1;\n        for (const l = levels.length; i < l; i++) {\n            if (distance < levels[i].distance) {\n                break;\n            }\n        }\n        return levels[i - 1].object;\n    }\n    raycast(raycaster, intersects = []) {\n        const matrixPosition = new Vector3().setFromMatrixPosition(this.matrixWorld);\n        const distance = raycaster.ray.origin.distanceTo(matrixPosition);\n        this.getObjectForDistance(distance).raycast(raycaster, intersects);\n        return intersects;\n    }\n    update(camera) {\n        const levels = this.levels;\n        if (levels.length > 1) {\n            const v1 = new Vector3().setFromMatrixPosition(camera.matrixWorld);\n            const v2 = new Vector3().setFromMatrixPosition(this.matrixWorld);\n            const distance = v1.distanceTo(v2);\n            levels[0].object.visible = true;\n            let i = 1;\n            const l = levels.length;\n            for (; i < l; i++) {\n                if (distance >= levels[i].distance) {\n                    levels[i - 1].object.visible = false;\n                    levels[i].object.visible = true;\n                }\n                else {\n                    break;\n                }\n            }\n            for (; i < l; i++) {\n                levels[i].object.visible = false;\n            }\n        }\n        return this;\n    }\n    copy(source) {\n        super.copy(source);\n        const levels = source.levels;\n        for (let i = 0, l = levels.length; i < l; i++) {\n            const level = levels[i];\n            this.addLevel(level.object.clone(), level.distance);\n        }\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n","import { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Object3D } from \"../core/Object3D\";\nimport { LineBasicMaterial } from \"../materials/LineBasicMaterial\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Ray } from \"../math/Ray\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Vector3 } from \"../math/Vector3\";\n// import { LineSegments } from \"./LineSegments\";\nexport class Line extends Object3D {\n    constructor(geometry = new BufferGeometry(), material = new LineBasicMaterial({\n        color: Math.random() * 0xffffff,\n    })) {\n        super();\n        this.type = \"Line\";\n        this.geometry = geometry;\n        this.material = material;\n    }\n    raycast(raycaster, intersects) {\n        const precision = raycaster.linePrecision;\n        const precisionSquared = precision * precision;\n        const geometry = this.geometry;\n        const matrixWorld = this.matrixWorld;\n        // Checking boundingSphere distance to ray\n        if (geometry.boundingSphere === null)\n            geometry.computeBoundingSphere();\n        const sphere = new Sphere().copy(geometry.boundingSphere);\n        sphere.applyMatrix4(matrixWorld);\n        if (raycaster.ray.intersectsSphere(sphere) === false)\n            return;\n        const inverseMatrix = new Matrix4().getInverse(matrixWorld);\n        const ray = new Ray();\n        ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n        const vStart = new Vector3();\n        const vEnd = new Vector3();\n        const interSegment = new Vector3();\n        const interRay = new Vector3();\n        //const step: number = this instanceof LineSegments ? 2 : 1;\n        const step = 1;\n        if (geometry instanceof BufferGeometry) {\n            const index = geometry.index;\n            const attributes = geometry.attributes;\n            const positions = attributes.position.array;\n            if (index !== null) {\n                const indices = index.array;\n                for (let i = 0, l = indices.length - 1; i < l; i += step) {\n                    const a = indices[i];\n                    const b = indices[i + 1];\n                    vStart.fromArray(positions, a * 3);\n                    vEnd.fromArray(positions, b * 3);\n                    const distSquared = ray.distanceSquareToSegment(vStart, vEnd, interRay, interSegment);\n                    if (distSquared > precisionSquared)\n                        continue;\n                    interRay.applyMatrix4(this.matrixWorld); // Move back to world space for distance calculation\n                    const distance = raycaster.ray.origin.distanceTo(interRay);\n                    if (distance < raycaster.near || distance > raycaster.far) {\n                        continue;\n                    }\n                    intersects.push({\n                        distance: distance,\n                        index: i,\n                        object: this,\n                        // What do we want? intersection point on the ray or on the segment??\n                        // point: raycaster.ray.at( distance ),\n                        point: interSegment.clone().applyMatrix4(this.matrixWorld),\n                    });\n                }\n            }\n            else {\n                for (let i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                    vStart.fromArray(positions, 3 * i);\n                    vEnd.fromArray(positions, 3 * i + 3);\n                    const distSquared = ray.distanceSquareToSegment(vStart, vEnd, interRay, interSegment);\n                    if (distSquared > precisionSquared)\n                        continue;\n                    interRay.applyMatrix4(this.matrixWorld); // Move back to world space for distance calculation\n                    const distance = raycaster.ray.origin.distanceTo(interRay);\n                    if (distance < raycaster.near || distance > raycaster.far) {\n                        continue;\n                    }\n                    intersects.push({\n                        distance: distance,\n                        face: null,\n                        faceIndex: null,\n                        index: i,\n                        object: this,\n                        // What do we want? intersection point on the ray or on the segment??\n                        // point: raycaster.ray.at( distance ),\n                        point: interSegment.clone().applyMatrix4(this.matrixWorld),\n                    });\n                }\n            }\n        }\n        else if (geometry instanceof Geometry) {\n            const vertices = geometry.vertices;\n            const nbVertices = vertices.length;\n            for (let i = 0; i < nbVertices - 1; i += step) {\n                const distSquared = ray.distanceSquareToSegment(vertices[i], vertices[i + 1], interRay, interSegment);\n                if (distSquared > precisionSquared)\n                    continue;\n                interRay.applyMatrix4(this.matrixWorld); // Move back to world space for distance calculation\n                const distance = raycaster.ray.origin.distanceTo(interRay);\n                if (distance < raycaster.near || distance > raycaster.far) {\n                    continue;\n                }\n                intersects.push({\n                    distance: distance,\n                    face: null,\n                    faceIndex: null,\n                    index: i,\n                    object: this,\n                    // What do we want? intersection point on the ray or on the segment??\n                    // point: raycaster.ray.at( distance ),\n                    point: interSegment.clone().applyMatrix4(this.matrixWorld),\n                });\n            }\n        }\n    }\n    clone() {\n        return new this.constructor(this.geometry, this.material).copy(this);\n    }\n}\n","import { Line } from \"./Line\";\nexport class LineLoop extends Line {\n    constructor() {\n        super(...arguments);\n        this.type = \"LineLoop\";\n    }\n}\n","import { Line } from \"./Line\";\nexport class LineSegments extends Line {\n    constructor() {\n        super(...arguments);\n        this.type = \"LineSegments\";\n    }\n}\n","import { BackSide, DoubleSide, TrianglesDrawMode } from \"../constants\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Face3 } from \"../core/Face3\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Object3D } from \"../core/Object3D\";\nimport { MeshBasicMaterial } from \"../materials/MeshBasicMaterial\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Ray } from \"../math/Ray\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Triangle } from \"../math/Triangle\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { vectorFromBufferAttribute } from \"../utils\";\nexport class Mesh extends Object3D {\n    constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial({\n        color: Math.random() * 0xffffff,\n    })) {\n        super();\n        this.type = \"Mesh\";\n        this.drawMode = TrianglesDrawMode;\n        this.morphTargetInfluences = [];\n        this.morphTargetDictionary = {};\n        this.geometry = geometry;\n        this.material = material;\n        this.updateMorphTargets();\n    }\n    static uvIntersection(point, triangle, uv1, uv2, uv3) {\n        const baryCoord = triangle.barycoordFromPoint(point);\n        uv1.multiplyScalar(baryCoord.x);\n        uv2.multiplyScalar(baryCoord.y);\n        uv3.multiplyScalar(baryCoord.z);\n        uv1.add(uv2).add(uv3);\n        return uv1.clone();\n    }\n    static checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n        let intersect;\n        const intersectionPointWorld = new Vector3();\n        if (material.side === BackSide) {\n            intersect = ray.intersectTriangle(new Triangle(pC, pB, pA), true);\n        }\n        else {\n            intersect = ray.intersectTriangle(new Triangle(pC, pB, pA), material.side !== DoubleSide);\n        }\n        if (intersect === null)\n            return null;\n        point.copy(intersect);\n        intersectionPointWorld.copy(point);\n        intersectionPointWorld.applyMatrix4(object.matrixWorld);\n        const distance = raycaster.ray.origin.distanceTo(intersectionPointWorld);\n        if (distance < raycaster.near || distance > raycaster.far)\n            return null;\n        return {\n            distance: distance,\n            object: object,\n            point: intersectionPointWorld.clone(),\n        };\n    }\n    static checkBufferGeometryIntersection(object, raycaster, ray, position, uv, a, b, c) {\n        const intersectionPoint = new Vector3();\n        const vA = vectorFromBufferAttribute(new Vector3(), position, a);\n        const vB = vectorFromBufferAttribute(new Vector3(), position, b);\n        const vC = vectorFromBufferAttribute(new Vector3(), position, c);\n        const triangle = new Triangle(vectorFromBufferAttribute(new Vector3(), position, a), vectorFromBufferAttribute(new Vector3(), position, b), vectorFromBufferAttribute(new Vector3(), position, c));\n        const intersection = Mesh.checkIntersection(object, object.material, raycaster, ray, vA, vB, vC, intersectionPoint);\n        if (intersection) {\n            if (uv) {\n                const uvA = vectorFromBufferAttribute(new Vector2(), uv, a);\n                const uvB = vectorFromBufferAttribute(new Vector2(), uv, b);\n                const uvC = vectorFromBufferAttribute(new Vector2(), uv, c);\n                intersection.uv = Mesh.uvIntersection(intersectionPoint, triangle, uvA, uvB, uvC);\n            }\n            intersection.face = new Face3(a, b, c, triangle.normal());\n            intersection.faceIndex = a;\n        }\n        return intersection;\n    }\n    setDrawMode(value) {\n        this.drawMode = value;\n        return this;\n    }\n    updateMorphTargets() {\n        const geometry = this.geometry;\n        if (geometry instanceof BufferGeometry) {\n            const morphAttributes = geometry.morphAttributes;\n            const keys = Object.keys(morphAttributes);\n            if (keys.length > 0) {\n                const morphAttribute = morphAttributes[keys[0]];\n                if (morphAttribute !== undefined) {\n                    for (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n                        const name = morphAttribute[m].name || String(m);\n                        this.morphTargetInfluences.push(0);\n                        this.morphTargetDictionary[name] = m;\n                    }\n                }\n            }\n        }\n        else if (geometry instanceof Geometry) {\n            const morphTargets = geometry.morphTargets;\n            if (morphTargets !== undefined && morphTargets.length > 0) {\n                for (let m = 0, ml = morphTargets.length; m < ml; m++) {\n                    const name = morphTargets[m].name || String(m);\n                    this.morphTargetInfluences.push(0);\n                    this.morphTargetDictionary[name] = m;\n                }\n            }\n        }\n        return this;\n    }\n    raycast(raycaster, intersects) {\n        const geometry = this.geometry;\n        const material = this.material;\n        const matrixWorld = this.matrixWorld;\n        if (material === undefined)\n            return;\n        // Checking boundingSphere distance to ray\n        if (geometry.boundingSphere === null)\n            geometry.computeBoundingSphere();\n        const sphere = new Sphere().copy(geometry.boundingSphere).applyMatrix4(matrixWorld);\n        if (raycaster.ray.intersectsSphere(sphere) === false)\n            return;\n        const inverseMatrix = new Matrix4().getInverse(matrixWorld);\n        const ray = new Ray().copy(raycaster.ray).applyMatrix4(inverseMatrix);\n        // Check boundingBox before continuing\n        if (geometry.boundingBox !== null) {\n            if (ray.intersectsBox(geometry.boundingBox) === false)\n                return;\n        }\n        if (geometry instanceof BufferGeometry) {\n            const index = geometry.index;\n            const position = geometry.attributes.position;\n            const uv = geometry.attributes.uv;\n            if (index !== null) {\n                // indexed buffer geometry\n                for (let i = 0, l = index.count; i < l; i += 3) {\n                    const a = index.getProperty(i, \"x\");\n                    const b = index.getProperty(i + 1, \"x\");\n                    const c = index.getProperty(i + 2, \"x\");\n                    const intersection = Mesh.checkBufferGeometryIntersection(this, raycaster, ray, position, uv, a, b, c);\n                    if (intersection) {\n                        intersection.faceIndex = Math.floor(i / 3); // triangle number in indices buffer semantics\n                        intersects.push(intersection);\n                    }\n                }\n            }\n            else if (position !== undefined) {\n                // non-indexed buffer geometry\n                for (let i = 0, l = position.count; i < l; i += 3) {\n                    const a = i;\n                    const b = i + 1;\n                    const c = i + 2;\n                    const intersection = Mesh.checkBufferGeometryIntersection(this, raycaster, ray, position, uv, a, b, c);\n                    if (intersection) {\n                        intersection.index = a; // triangle number in positions buffer semantics\n                        intersects.push(intersection);\n                    }\n                }\n            }\n        }\n        else if (geometry instanceof Geometry) {\n            const vertices = geometry.vertices;\n            const faces = geometry.faces;\n            let uvs;\n            const faceVertexUvs = geometry.faceVertexUvs[0];\n            if (faceVertexUvs.length > 0)\n                uvs = faceVertexUvs;\n            for (let f = 0, fl = faces.length; f < fl; f++) {\n                const face = faces[f];\n                const faceMaterial = Array.isArray(material) ? material[face.materialIndex] : material;\n                if (faceMaterial === undefined)\n                    continue;\n                let fvA = vertices[face.a];\n                let fvB = vertices[face.b];\n                let fvC = vertices[face.c];\n                if (faceMaterial.morphTargets === true) {\n                    const morphTargets = geometry.morphTargets;\n                    const vA = new Vector3(), vB = new Vector3(), vC = new Vector3();\n                    for (let t = 0, tl = morphTargets.length; t < tl; t++) {\n                        const influence = this.morphTargetInfluences[t];\n                        if (influence === 0)\n                            continue;\n                        const targets = morphTargets[t].vertices;\n                        vA.add(new Vector3()\n                            .copy(targets[face.a])\n                            .sub(fvA)\n                            .multiplyScalar(influence));\n                        vB.add(new Vector3()\n                            .copy(targets[face.b])\n                            .sub(fvB)\n                            .multiplyScalar(influence));\n                        vC.add(new Vector3()\n                            .copy(targets[face.c])\n                            .sub(fvC)\n                            .multiplyScalar(influence));\n                    }\n                    vA.add(fvA);\n                    vB.add(fvB);\n                    vC.add(fvC);\n                    fvA = vA;\n                    fvB = vB;\n                    fvC = vC;\n                }\n                const intersectionPoint = new Vector3();\n                const intersection = Mesh.checkIntersection(this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint);\n                if (intersection) {\n                    if (uvs && uvs[f]) {\n                        const uvsF = uvs[f];\n                        const uvA = new Vector2().copy(uvsF[0]);\n                        const uvB = new Vector2().copy(uvsF[1]);\n                        const uvC = new Vector2().copy(uvsF[2]);\n                        intersection.uv = Mesh.uvIntersection(intersectionPoint, new Triangle(fvA, fvB, fvC), uvA, uvB, uvC);\n                    }\n                    intersection.face = face;\n                    intersection.faceIndex = f;\n                    intersects.push(intersection);\n                }\n            }\n        }\n    }\n    clone() {\n        return new this.constructor(this.geometry, this.material).copy(this);\n    }\n}\n","import { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Object3D } from \"../core/Object3D\";\nimport { PointsMaterial } from \"../materials/PointsMaterial\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Ray } from \"../math/Ray\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Vector3 } from \"../math/Vector3\";\nexport class Points extends Object3D {\n    constructor(geometry = new BufferGeometry(), material = new PointsMaterial({\n        color: Math.random() * 0xffffff,\n    })) {\n        super();\n        this.type = \"Points\";\n        this.geometry = geometry;\n        this.material = material;\n    }\n    raycast(raycaster, intersects) {\n        const geometry = this.geometry;\n        const matrixWorld = this.matrixWorld;\n        const threshold = raycaster.params.Points.threshold;\n        // Checking boundingSphere distance to ray\n        if (geometry.boundingSphere === null)\n            geometry.computeBoundingSphere();\n        const sphere = new Sphere().copy(geometry.boundingSphere);\n        sphere.applyMatrix4(matrixWorld);\n        sphere.radius += threshold;\n        if (raycaster.ray.intersectsSphere(sphere) === false)\n            return;\n        const inverseMatrix = new Matrix4().getInverse(matrixWorld);\n        const ray = new Ray().copy(raycaster.ray).applyMatrix4(inverseMatrix);\n        const testPoint = (point, index2) => {\n            const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n            const localThresholdSquare = localThreshold * localThreshold;\n            const rayPointDistanceSquare = ray.distanceSquaredToPoint(point);\n            if (rayPointDistanceSquare < localThresholdSquare) {\n                const intersectPoint = ray.closestPointToPoint(point);\n                intersectPoint.applyMatrix4(matrixWorld);\n                const distance = raycaster.ray.origin.distanceTo(intersectPoint);\n                if (distance < raycaster.near || distance > raycaster.far) {\n                    return;\n                }\n                intersects.push({\n                    distance: distance,\n                    distanceToRay: Math.sqrt(rayPointDistanceSquare),\n                    face: null,\n                    index: index2,\n                    object: this,\n                    point: intersectPoint.clone(),\n                });\n            }\n        };\n        if (geometry instanceof BufferGeometry) {\n            const position = new Vector3();\n            const index = geometry.index;\n            const positions = geometry.attributes.position.array;\n            if (index !== null) {\n                const indices = index.array;\n                for (let i = 0, il = indices.length; i < il; i++) {\n                    const a = indices[i];\n                    position.fromArray(positions, a * 3);\n                    testPoint(position, a);\n                }\n            }\n            else {\n                for (let i = 0, l = positions.length / 3; i < l; i++) {\n                    position.fromArray(positions, i * 3);\n                    testPoint(position, i);\n                }\n            }\n        }\n        else if (geometry instanceof Geometry) {\n            const vertices = geometry.vertices;\n            for (let i = 0, l = vertices.length; i < l; i++) {\n                testPoint(vertices[i], i);\n            }\n        }\n    }\n    clone() {\n        return new this.constructor(this.geometry, this.material).copy(this);\n    }\n}\n","import { Matrix4 } from \"../math/Matrix4\";\nimport { Bone } from \"./Bone\";\nconst offsetMatrix = new Matrix4();\nconst identityMatrix = new Matrix4();\nexport class Skeleton {\n    constructor(bones = [], boneInverses) {\n        this.bones = [];\n        this.boneInverses = [];\n        this.bones = bones.slice(0);\n        this.boneMatrices = new Float32Array(this.bones.length * 16);\n        if (boneInverses === undefined) {\n            this.calculateInverses();\n        }\n        else {\n            if (this.bones.length === boneInverses.length) {\n                this.boneInverses = boneInverses.slice(0);\n            }\n            else {\n                console.warn(\"THREE.Skeleton boneInverses is the wrong length.\");\n                for (let i = 0, il = this.bones.length; i < il; i++) {\n                    this.boneInverses.push(new Matrix4());\n                }\n            }\n        }\n    }\n    calculateInverses() {\n        this.boneInverses = [];\n        for (let i = 0, il = this.bones.length; i < il; i++) {\n            const inverse = new Matrix4();\n            if (this.bones[i]) {\n                inverse.getInverse(this.bones[i].matrixWorld);\n            }\n            this.boneInverses.push(inverse);\n        }\n    }\n    pose() {\n        // recover the bind-time world matrices\n        for (let i = 0, il = this.bones.length; i < il; i++) {\n            const bone = this.bones[i];\n            if (bone) {\n                bone.matrixWorld.getInverse(this.boneInverses[i]);\n            }\n        }\n        // compute the local matrices, positions, rotations and scales\n        for (let i = 0, il = this.bones.length; i < il; i++) {\n            const bone = this.bones[i];\n            if (bone) {\n                if (bone.parent && bone.parent instanceof Bone) {\n                    bone.matrix.getInverse(bone.parent.matrixWorld);\n                    bone.matrix.multiply(bone.matrixWorld);\n                }\n                else {\n                    bone.matrix.copy(bone.matrixWorld);\n                }\n                bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n            }\n        }\n    }\n    update() {\n        const bones = this.bones;\n        const boneInverses = this.boneInverses;\n        const boneMatrices = this.boneMatrices;\n        const boneTexture = this.boneTexture;\n        // flatten bone matrices to array\n        for (let i = 0, il = bones.length; i < il; i++) {\n            // compute the offset between the current and the original transform\n            const matrix = bones[i] ? bones[i].matrixWorld : identityMatrix;\n            offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n            offsetMatrix.toArray(boneMatrices, i * 16);\n        }\n        if (boneTexture !== undefined) {\n            boneTexture.needsUpdate = true;\n        }\n    }\n    getBoneByName(name) {\n        for (let i = 0, il = this.bones.length; i < il; i++) {\n            const bone = this.bones[i];\n            if (bone.name === name) {\n                return bone;\n            }\n        }\n        return undefined;\n    }\n    clone() {\n        return new this.constructor(this.bones, this.boneInverses);\n    }\n}\n","import { Mesh } from \"./Mesh\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Bone } from \"./Bone\";\nimport { Skeleton } from \"./Skeleton\";\nimport { Vector4 } from \"../math/Vector4\";\nexport class SkinnedMesh extends Mesh {\n    /**\n     * skinIndices and skinWeights should be set to true on the Geometry\n     * skinIndex and skinWeights attribute on BufferGeometry\n     * @param geometry\n     * @param material\n     */\n    constructor(geometry, material) {\n        super(geometry, material);\n        this.type = \"SkinnedMesh\";\n        this.bindMode = \"attached\";\n        this.bindMatrix = new Matrix4();\n        this.bindMatrixInverse = new Matrix4();\n        const bones = this.initBones();\n        const skeleton = new Skeleton(bones);\n        this.bind(skeleton, this.matrixWorld);\n        this.normalizeSkinWeights();\n    }\n    initBones() {\n        const bones = [];\n        if (this.geometry && this.geometry instanceof Geometry && this.geometry.bones !== undefined) {\n            // first, create array of 'Bone' objects from geometry data\n            for (let i = 0, il = this.geometry.bones.length; i < il; i++) {\n                const gbone = this.geometry.bones[i];\n                // create new 'Bone' object\n                const bone = new Bone();\n                bones.push(bone);\n                // apply values\n                bone.name = gbone.name;\n                bone.position.fromArray(gbone.pos);\n                bone.quaternion.fromArray(gbone.rotq);\n                if (gbone.scl !== undefined) {\n                    bone.scale.fromArray(gbone.scl);\n                }\n            }\n            // second, create bone hierarchy\n            for (let i = 0, il = this.geometry.bones.length; i < il; i++) {\n                const gbone = this.geometry.bones[i];\n                if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {\n                    // subsequent bones in the hierarchy\n                    bones[gbone.parent].add(bones[i]);\n                }\n                else {\n                    // topmost bone, immediate child of the skinned mesh\n                    this.add(bones[i]);\n                }\n            }\n        }\n        // now the bones are part of the scene graph and children of the skinned mesh.\n        // let's update the corresponding matrices\n        this.updateMatrixWorld(true);\n        return bones;\n    }\n    bind(skeleton, bindMatrix) {\n        this.skeleton = skeleton;\n        if (bindMatrix === undefined) {\n            this.updateMatrixWorld(true);\n            this.skeleton.calculateInverses();\n            bindMatrix = this.matrixWorld;\n        }\n        this.bindMatrix.copy(bindMatrix);\n        this.bindMatrixInverse.getInverse(bindMatrix);\n    }\n    pose() {\n        this.skeleton.pose();\n    }\n    normalizeSkinWeights() {\n        if (this.geometry && this.geometry instanceof Geometry) {\n            for (let i = 0; i < this.geometry.skinWeights.length; i++) {\n                const sw = this.geometry.skinWeights[i];\n                const scale = 1.0 / sw.manhattanLength();\n                if (scale !== Infinity) {\n                    sw.multiplyScalar(scale);\n                }\n                else {\n                    sw.set(1, 0, 0, 0); // do something reasonable\n                }\n            }\n        }\n        else if (this.geometry && this.geometry instanceof BufferGeometry) {\n            const vec = new Vector4();\n            const skinWeight = this.geometry.attributes.skinWeight;\n            for (let i = 0; i < skinWeight.count; i++) {\n                vec.x = skinWeight.getProperty(i, \"x\");\n                vec.y = skinWeight.getProperty(i, \"y\");\n                vec.z = skinWeight.getProperty(i, \"z\");\n                vec.w = skinWeight.getProperty(i, \"w\");\n                const scale = 1.0 / vec.manhattanLength();\n                if (scale !== Infinity) {\n                    vec.multiplyScalar(scale);\n                }\n                else {\n                    vec.set(1, 0, 0, 0); // do something reasonable\n                }\n                skinWeight.setProperty(i, \"xyzw\", vec);\n            }\n        }\n    }\n    updateMatrixWorld(force = false) {\n        super.updateMatrixWorld(force);\n        if (this.bindMode === \"attached\") {\n            this.bindMatrixInverse.getInverse(this.matrixWorld);\n        }\n        else if (this.bindMode === \"detached\") {\n            this.bindMatrixInverse.getInverse(this.bindMatrix);\n        }\n        else {\n            console.warn(\"THREE.SkinnedMesh: Unrecognized bindMode: \" + this.bindMode);\n        }\n        return this;\n    }\n    clone() {\n        return new this.constructor(this.geometry, this.material).copy(this);\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { SpriteMaterial } from \"../materials/Materials\";\nimport { Vector3 } from \"../math/Vector3\";\nexport class Sprite extends Object3D {\n    constructor(material = new SpriteMaterial()) {\n        super();\n        this.type = \"Sprite\";\n        this.material = material;\n    }\n    raycast(raycaster, intersects) {\n        const worldPosition = new Vector3().setFromMatrixPosition(this.matrixWorld);\n        const intersectPoint = raycaster.ray.closestPointToPoint(worldPosition);\n        const worldScale = new Vector3().setFromMatrixScale(this.matrixWorld);\n        const guessSizeSq = worldScale.x * worldScale.y / 4;\n        if (worldPosition.distanceToSquared(intersectPoint) > guessSizeSq) {\n            return;\n        }\n        const distance = raycaster.ray.origin.distanceTo(intersectPoint);\n        if (distance < raycaster.near || distance > raycaster.far) {\n            return;\n        }\n        intersects.push({\n            distance: distance,\n            face: null,\n            point: intersectPoint.clone(),\n            object: this,\n        });\n    }\n    clone() {\n        return new this.constructor(this.material).copy(this);\n    }\n}\n","import { MathUtil } from \"../math/Math\";\nimport { Vector4 } from \"../math/Vector4\";\nimport { LinearFilter } from \"../constants\";\nimport { Texture } from \"../textures/Texture\";\nimport { EventDispatcher } from \"../core/EventDispatcher\";\nexport class WebGLRenderTarget extends EventDispatcher {\n    constructor(width, height, options = {}) {\n        super();\n        this.uuid = MathUtil.generateUUID();\n        this.scissorTest = false;\n        this.width = width;\n        this.height = height;\n        this.scissor = new Vector4(0, 0, width, height);\n        this.viewport = new Vector4(0, 0, width, height);\n        if (options.minFilter === undefined) {\n            options.minFilter = LinearFilter;\n        }\n        this.texture = new Texture(undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n        this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n        this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n        this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n    }\n    setSize(width, height) {\n        if (this.width !== width || this.height !== height) {\n            this.width = width;\n            this.height = height;\n            this.dispose();\n        }\n        this.viewport.set(0, 0, width, height);\n        this.scissor.set(0, 0, width, height);\n    }\n    copy(source) {\n        this.width = source.width;\n        this.height = source.height;\n        this.viewport.copy(source.viewport);\n        this.texture = source.texture.clone();\n        this.depthBuffer = source.depthBuffer;\n        this.stencilBuffer = source.stencilBuffer;\n        this.depthTexture = source.depthTexture;\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n    dispose() {\n        this.dispatchEvent({ type: \"dispose\" });\n    }\n}\n","import { WebGLRenderTarget } from \"./WebGLRenderTarget\";\nexport class WebGLRenderTargetCube extends WebGLRenderTarget {\n    constructor(width, height, options = {}) {\n        super(width, height, options);\n        // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n        this.activeCubeFace = 0;\n        this.activeMipMapLevel = 0;\n    }\n}\n","import { REVISION, RGBAFormat, HalfFloatType, FloatType, UnsignedByteType, FrontFaceDirectionCW, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, NoColors, LinearToneMapping, } from \"../constants\";\nimport { Camera } from \"../cameras/Camera\";\nimport { ArrayCamera } from \"../cameras/ArrayCamera\";\nimport { InstancedBufferGeometry } from \"../core/InstancedBufferGeometry\";\nimport { InstancedInterleavedBufferAttribute } from \"../core/InstancedInterleavedBufferAttribute\";\nimport { InstancedBufferAttribute } from \"../core/InstancedBufferAttribute\";\nimport { Light } from \"../lights/Light\";\nimport { MathUtil } from \"../math/Math\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Vector4 } from \"../math/Vector4\";\nimport { Frustum } from \"../math/Frustum\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { WebGLUniformsWrapper } from \"./webgl/WebGLUniforms\";\nimport { ShaderMaterial, MeshPhongMaterial, MeshStandardMaterial, MeshLambertMaterial, MeshBasicMaterial, MeshToonMaterial, MeshPhysicalMaterial, RawShaderMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshNormalMaterial, LineBasicMaterial, LineDashedMaterial, PointsMaterial, ShadowMaterial, } from \"../materials/Materials\";\nimport { Mesh } from \"../objects/Mesh\";\nimport { Line } from \"../objects/Line\";\nimport { Sprite } from \"../objects/Sprite\";\nimport { LineSegments } from \"../objects/LineSegments\";\nimport { LineLoop } from \"../objects/LineLoop\";\nimport { Points } from \"../objects/Points\";\nimport { SkinnedMesh } from \"../objects/SkinnedMesh\";\nimport { Fog } from \"../scenes/Fog\";\nimport { FogExp2 } from \"../scenes/FogExp2\";\nimport { DataTexture } from \"../textures/DataTexture\";\nimport { CubeTexture } from \"../textures/CubeTexture\";\nimport { ShaderLib } from \"./shaders/ShaderLib\";\nimport { UniformsUtils } from \"./shaders/UniformsUtils\";\nimport { WebGLShadowMap } from \"./webgl/WebGLShadowMap\";\nimport { WebGLState } from \"./webgl/WebGLState\";\nimport { WebGLUtils } from \"./webgl/WebGLUtils\";\nimport { WebGLClipping } from \"./webgl/WebGLClipping\";\nimport { WebGLExtensions } from \"./webgl/WebGLExtensions\";\nimport { WebGLCapabilities } from \"./webgl/WebGLCapabilities\";\nimport { WebGLProperties, } from \"./webgl/WebGLProperties\";\nimport { WebGLTextures } from \"./webgl/WebGLTextures\";\nimport { WebGLAttributes } from \"./webgl/WebGLAttributes\";\nimport { WebGLGeometries } from \"./webgl/WebGLGeometries\";\nimport { WebGLObjects } from \"./webgl/WebGLObjects\";\nimport { WebGLMorphtargets } from \"./webgl/WebGLMorphtargets\";\nimport { WebGLPrograms } from \"./webgl/WebGLPrograms\";\nimport { WebGLLights } from \"./webgl/WebGLLights\";\nimport { WebGLRenderLists } from \"./webgl/WebGLRenderLists\";\nimport { WebGLBufferRenderer } from \"./webgl/WebGLBufferRenderer\";\nimport { WebGLIndexedBufferRenderer } from \"./webgl/WebGLIndexedBufferRenderer\";\nimport { WebGLSpriteRenderer } from \"./webgl/WebGLSpriteRenderer\";\nimport { WebGLBackground } from \"./webgl/WebGLBackground\";\nimport { WebGLRenderTarget } from \"./WebGLRenderTarget\";\nimport { WebGLRenderTargetCube } from \"./WebGLRenderTargetCube\";\nimport { ImmediateRenderObject } from \"../extras/objects/ImmediateRenderObject\";\nexport class WebGLRenderer {\n    constructor(parameters = {}) {\n        this.lightsArray = [];\n        this.shadowsArray = [];\n        this.spritesArray = [];\n        this.currentRendererTarget = null;\n        // clearing\n        this.autoClear = true;\n        this.autoClearColor = true;\n        this.autoClearDepth = true;\n        this.autoClearStencil = true;\n        // scene graph\n        this.sortObjects = true;\n        // user-defined clipping\n        this.clippingPlanes = [];\n        // physical lights\n        this.physicallyCorrectLights = false;\n        // tone mapping\n        this.toneMapping = LinearToneMapping;\n        this.toneMappingExposure = 1.0;\n        this.toneMappingWhitePoint = 1.0;\n        // internal properties\n        this.isContextLost = false;\n        // internal state cache\n        this.currentRenderTarget = null;\n        this.currentFramebuffer = null;\n        this.currentMaterialId = -1;\n        this.currentGeometryProgram = \"\";\n        this.currentCamera = null;\n        this.currentArrayCamera = null;\n        this.currentViewport = new Vector4();\n        this.currentScissor = new Vector4();\n        this.currentScissorTest = null;\n        //\n        this.usedTextureUnits = 0;\n        this.pixelRatio = 1;\n        this.scissorTest = false;\n        // frustum\n        this.frustum = new Frustum();\n        // clipping\n        this.clipping = new WebGLClipping();\n        this.clippingEnabled = false;\n        this.localClippingEnabled = false;\n        // camera matrices cache\n        this.projScreenMatrix = new Matrix4();\n        this.tempVector3 = new Vector3();\n        // info\n        this.infoMemory = {\n            geometries: 0,\n            textures: 0,\n        };\n        this.infoRender = {\n            frame: 0,\n            calls: 0,\n            vertices: 0,\n            faces: 0,\n            points: 0,\n        };\n        this.info = {\n            render: this.infoRender,\n            memory: this.infoMemory,\n            programs: null,\n            autoReset: true,\n            reset: () => {\n                this.infoRender.frame++;\n                this.infoRender.calls = 0;\n                this.infoRender.vertices = 0;\n                this.infoRender.faces = 0;\n                this.infoRender.points = 0;\n            },\n        };\n        this.onContextLost = (event) => {\n            event.preventDefault();\n            console.log(\"THREE.WebGLRenderer: Context Lost.\");\n            this.isContextLost = true;\n        };\n        this.onContextRestore = () => {\n            console.log(\"THREE.WebGLRenderer: Context Restored.\");\n            this.isContextLost = false;\n            this.initGLContext();\n        };\n        this.isAnimating = false;\n        this.onAnimationFrame = null;\n        this.loop = (time) => {\n            if (this.onAnimationFrame !== null)\n                this.onAnimationFrame(time);\n            window.requestAnimationFrame(this.loop);\n        };\n        this.onMaterialDispose = (event) => {\n            const material = event.target;\n            material.removeEventListener(\"dispose\", this.onMaterialDispose);\n            this.deallocateMaterial(material);\n        };\n        this.setTexture2DWarned = false;\n        this.setTextureCubeWarned = false;\n        this.parameters = parameters;\n        console.log(\"THREE.WebGLRenderer\", REVISION);\n        (this.domElement =\n            parameters.canvas !== undefined\n                ? parameters.canvas\n                : document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"canvas\")),\n            (this.context = parameters.context !== undefined ? parameters.context : null),\n            (this.alpha = parameters.alpha !== undefined ? parameters.alpha : false),\n            (this.depth = parameters.depth !== undefined ? parameters.depth : true),\n            (this.stencil = parameters.stencil !== undefined ? parameters.stencil : true),\n            (this.antialias = parameters.antialias !== undefined ? parameters.antialias : false),\n            (this.premultipliedAlpha =\n                parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true),\n            (this.preserveDrawingBuffer =\n                parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false),\n            (this.powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : \"default\");\n        this.width = this.domElement.width;\n        this.height = this.domElement.height;\n        this.viewport = new Vector4(0, 0, this.width, this.height);\n        this.scissor = new Vector4(0, 0, this.width, this.height);\n        try {\n            const contextAttributes = {\n                alpha: this.alpha,\n                depth: this.depth,\n                stencil: this.stencil,\n                antialias: this.antialias,\n                premultipliedAlpha: this.premultipliedAlpha,\n                preserveDrawingBuffer: this.preserveDrawingBuffer,\n                powerPreference: this.powerPreference,\n            };\n            // event listeners must be registered before WebGL context is created, see #12753\n            this.domElement.addEventListener(\"webglcontextlost\", this.onContextLost, false);\n            this.domElement.addEventListener(\"webglcontextrestored\", this.onContextRestore, false);\n            this.context =\n                this.context ||\n                    this.domElement.getContext(\"webgl\", contextAttributes) ||\n                    this.domElement.getContext(\"experimental-webgl\", contextAttributes);\n            if (this.context === null) {\n                if (this.domElement.getContext(\"webgl\") !== null) {\n                    throw new Error(\"Error creating WebGL context with your selected attributes.\");\n                }\n                else {\n                    throw new Error(\"Error creating WebGL context.\");\n                }\n            }\n            // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n            if (this.domElement.getShaderPrecisionFormat === undefined) {\n                this.domElement.getShaderPrecisionFormat = function () {\n                    return { rangeMin: 1, rangeMax: 1, precision: 1 };\n                };\n            }\n        }\n        catch (error) {\n            console.error(\"THREE.WebGLRenderer: \" + error.message);\n        }\n        this.initGLContext();\n        this.shadowMap = new WebGLShadowMap(this, this.objects, this.capabilities.maxTextureSize);\n    }\n    getTargetPixelRatio() {\n        return this.currentRenderTarget === null ? this.pixelRatio : 1;\n    }\n    getContext() {\n        return this.context;\n    }\n    getContextAttributes() {\n        return this.context.getContextAttributes();\n    }\n    forceContextLoss() {\n        const extension = this.extensions.get(\"WEBGL_lose_context\");\n        if (extension)\n            extension.loseContext();\n    }\n    forceContextRestore() {\n        const extension = this.extensions.get(\"WEBGL_lose_context\");\n        if (extension)\n            extension.restoreContext();\n    }\n    getPixelRatio() {\n        return this.pixelRatio;\n    }\n    setPixelRatio(value) {\n        if (value === undefined)\n            return;\n        this.pixelRatio = value;\n        this.setSize(this.width, this.height, false);\n    }\n    getSize() {\n        return {\n            width: this.width,\n            height: this.height,\n        };\n    }\n    setSize(width, height, updateStyle) {\n        this.width = width;\n        this.height = height;\n        this.domElement.width = width * this.pixelRatio;\n        this.domElement.height = height * this.pixelRatio;\n        if (updateStyle !== false) {\n            this.domElement.style.width = width + \"px\";\n            this.domElement.style.height = height + \"px\";\n        }\n        this.setViewport(0, 0, width, height);\n    }\n    getDrawingBufferSize() {\n        return {\n            width: this.width * this.pixelRatio,\n            height: this.height * this.pixelRatio,\n        };\n    }\n    setDrawingBufferSize(width, height, pixelRatio) {\n        this.width = width;\n        this.height = height;\n        this.pixelRatio = pixelRatio;\n        this.domElement.width = width * pixelRatio;\n        this.domElement.height = height * pixelRatio;\n        this.setViewport(0, 0, width, height);\n    }\n    getCurrentViewport() {\n        return this.currentViewport;\n    }\n    setViewport(x, y, width, height) {\n        this.viewport.set(x, this.height - y - height, width, height);\n        this.state.viewport(this.currentViewport.copy(this.viewport).multiplyScalar(this.pixelRatio));\n    }\n    setScissor(x, y, width, height) {\n        this.scissor.set(x, this.height - y - height, width, height);\n        this.state.scissor(this.currentScissor.copy(this.scissor).multiplyScalar(this.pixelRatio));\n    }\n    setScissorTest(value) {\n        this.state.setScissorTest((this.scissorTest = value));\n    }\n    getClearColor() {\n        return this.background.getClearColor();\n    }\n    setClearColor(color, alpha) {\n        this.background.setClearColor(color, alpha);\n    }\n    getClearAlpha() {\n        return this.background.getClearAlpha();\n    }\n    setClearAlpha(alpha) {\n        this.background.setClearAlpha(alpha);\n    }\n    clear(color, depth, stencil) {\n        const gl = this.context;\n        let bits = 0;\n        if (color === undefined || color)\n            bits |= gl.COLOR_BUFFER_BIT;\n        if (depth === undefined || depth)\n            bits |= gl.DEPTH_BUFFER_BIT;\n        if (stencil === undefined || stencil)\n            bits |= gl.STENCIL_BUFFER_BIT;\n        gl.clear(bits);\n    }\n    clearColor() {\n        this.clear(true, false, false);\n    }\n    clearDepth() {\n        this.clear(false, true, false);\n    }\n    clearStencil() {\n        this.clear(false, false, true);\n    }\n    clearTarget(renderTarget, color, depth, stencil) {\n        this.setRenderTarget(renderTarget);\n        this.clear(color, depth, stencil);\n    }\n    dispose() {\n        this.domElement.removeEventListener(\"webglcontextlost\", this.onContextLost, false);\n        this.domElement.removeEventListener(\"webglcontextrestored\", this.onContextRestore, false);\n        this.renderLists.dispose();\n        this.properties.dispose();\n        this.objects.dispose();\n    }\n    initGLContext() {\n        const gl = this.context;\n        const extensions = new WebGLExtensions(gl);\n        extensions.get(\"WEBGL_depth_texture\");\n        extensions.get(\"OES_texture_float\");\n        extensions.get(\"OES_texture_float_linear\");\n        extensions.get(\"OES_texture_half_float\");\n        extensions.get(\"OES_texture_half_float_linear\");\n        extensions.get(\"OES_standard_derivatives\");\n        extensions.get(\"OES_element_index_uint\");\n        extensions.get(\"ANGLE_instanced_arrays\");\n        const utils = new WebGLUtils(gl, extensions);\n        const capabilities = new WebGLCapabilities(gl, extensions, this.parameters);\n        const state = new WebGLState(gl, extensions, utils);\n        state.scissor(this.currentScissor.copy(this.scissor).multiplyScalar(this.pixelRatio));\n        state.viewport(this.currentViewport.copy(this.viewport).multiplyScalar(this.pixelRatio));\n        const properties = new WebGLProperties();\n        const textures = new WebGLTextures(gl, extensions, state, properties, capabilities, utils, this.infoMemory, this.infoRender);\n        const attributes = new WebGLAttributes(gl);\n        const geometries = new WebGLGeometries(gl, attributes, this.infoMemory);\n        const objects = new WebGLObjects(geometries, this.infoRender);\n        const morphtargets = new WebGLMorphtargets(gl);\n        const programCache = new WebGLPrograms(this, extensions, capabilities);\n        const lights = new WebGLLights();\n        const renderLists = new WebGLRenderLists();\n        const background = new WebGLBackground(this, state, geometries, this.premultipliedAlpha);\n        const bufferRenderer = new WebGLBufferRenderer(gl, extensions, this.infoRender);\n        const indexedBufferRenderer = new WebGLIndexedBufferRenderer(gl, extensions, this.infoRender);\n        const spriteRenderer = new WebGLSpriteRenderer(this, state, textures, capabilities);\n        this.info.programs = programCache.programs;\n        this.extensions = extensions;\n        this.utils = utils;\n        this.capabilities = capabilities;\n        this.state = state;\n        this.properties = properties;\n        this.textures = textures;\n        this.attributes = attributes;\n        this.geometries = geometries;\n        this.objects = objects;\n        this.morphtargets = morphtargets;\n        this.programCache = programCache;\n        this.lights = lights;\n        this.renderLists = renderLists;\n        this.background = background;\n        this.bufferRenderer = bufferRenderer;\n        this.indexedBufferRenderer = indexedBufferRenderer;\n        this.spriteRenderer = spriteRenderer;\n    }\n    compile(scene, camera) {\n        this.lightsArray.length = 0;\n        this.shadowsArray.length = 0;\n        scene.traverse((object) => {\n            if (object instanceof Light) {\n                this.lightsArray.push(object);\n                if (object.castShadow) {\n                    this.shadowsArray.push(object);\n                }\n            }\n        });\n        this.lights.setup(this.lightsArray, this.shadowsArray, camera);\n        scene.traverse((obj) => {\n            const object = obj;\n            if (object.material) {\n                if (Array.isArray(object.material)) {\n                    for (let i = 0; i < object.material.length; i++) {\n                        this.initMaterial(object.material[i], scene.fog, object);\n                    }\n                }\n                else {\n                    this.initMaterial(object.material, scene.fog, object);\n                }\n            }\n        });\n    }\n    start() {\n        if (this.isAnimating)\n            return;\n        window.requestAnimationFrame(this.loop);\n        this.isAnimating = true;\n    }\n    animate(callback) {\n        this.onAnimationFrame = callback;\n        this.start();\n    }\n    render(scene, camera, renderTarget, forceClear) {\n        if (!(camera && camera instanceof Camera)) {\n            console.error(\"THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.\");\n            return;\n        }\n        if (this.isContextLost)\n            return;\n        // reset caching for this frame\n        this.currentGeometryProgram = \"\";\n        this.currentMaterialId = -1;\n        this.currentCamera = null;\n        // update scene graph\n        if (scene.autoUpdate === true)\n            scene.updateMatrixWorld();\n        // update camera matrices and frustum\n        if (camera.parent === null)\n            camera.updateMatrixWorld();\n        scene.onBeforeRender(this, scene, camera, renderTarget);\n        this.projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n        this.frustum.setFromMatrix(this.projScreenMatrix);\n        this.lightsArray.length = 0;\n        this.shadowsArray.length = 0;\n        this.spritesArray.length = 0;\n        this.clippingEnabled = this.clipping.init(this.clippingPlanes, this.localClippingEnabled, camera);\n        this.currentRenderList = this.renderLists.get(scene, camera);\n        this.currentRenderList.init();\n        this.projectObject(scene, camera, this.sortObjects);\n        if (this.sortObjects === true) {\n            this.currentRenderList.sort();\n        }\n        //\n        if (this.clippingEnabled)\n            this.clipping.beginShadows();\n        this.shadowMap.render(this.shadowsArray, scene, camera);\n        this.lights.setup(this.lightsArray, this.shadowsArray, camera);\n        if (this.clippingEnabled)\n            this.clipping.endShadows();\n        //\n        if (this.info.autoReset)\n            this.info.reset();\n        if (renderTarget === undefined) {\n            renderTarget = null;\n        }\n        this.setRenderTarget(renderTarget);\n        //\n        this.background.render(this.currentRenderList, scene, camera, forceClear);\n        // render scene\n        const opaqueObjects = this.currentRenderList.opaque;\n        const transparentObjects = this.currentRenderList.transparent;\n        if (scene.overrideMaterial) {\n            const overrideMaterial = scene.overrideMaterial;\n            if (opaqueObjects.length)\n                this.renderObjects(opaqueObjects, scene, camera, overrideMaterial);\n            if (transparentObjects.length)\n                this.renderObjects(transparentObjects, scene, camera, overrideMaterial);\n        }\n        else {\n            // opaque pass (front-to-back order)\n            if (opaqueObjects.length)\n                this.renderObjects(opaqueObjects, scene, camera);\n            // transparent pass (back-to-front order)\n            if (transparentObjects.length)\n                this.renderObjects(transparentObjects, scene, camera);\n        }\n        // custom renderers\n        this.spriteRenderer.render(this.spritesArray, scene, camera);\n        // Generate mipmap if we're using any kind of mipmap filtering\n        if (renderTarget) {\n            this.textures.updateRenderTargetMipmap(renderTarget);\n        }\n        // Ensure depth buffer writing is enabled so it can be cleared on next render\n        const state = this.state;\n        state.buffers.depth.setTest(true);\n        state.buffers.depth.setMask(true);\n        state.buffers.color.setMask(true);\n        state.setPolygonOffset(false);\n        //scene.onAfterRender(this, scene, camera, renderTarget );\n        // _gl.finish();\n    }\n    projectObject(object, camera, sortObjects = false) {\n        if (object.visible === false)\n            return;\n        const visible = object.layers.test(camera.layers);\n        if (visible) {\n            if (object instanceof Light) {\n                this.lightsArray.push(object);\n                if (object.castShadow) {\n                    this.shadowsArray.push(object);\n                }\n            }\n            else if (object instanceof Sprite) {\n                if (!object.frustumCulled || this.frustum.intersectsSprite(object)) {\n                    this.spritesArray.push(object);\n                }\n            }\n            else if (object instanceof ImmediateRenderObject) {\n                if (sortObjects) {\n                    this.tempVector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(this.projScreenMatrix);\n                }\n                this.currentRenderList.push(object, null, object.material, this.tempVector3.z, null);\n            }\n            else if (object instanceof Mesh || object instanceof Line || object instanceof Points) {\n                if (object instanceof SkinnedMesh) {\n                    object.skeleton.update();\n                }\n                if (!object.frustumCulled || this.frustum.intersectsObject(object)) {\n                    if (sortObjects) {\n                        this.tempVector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(this.projScreenMatrix);\n                    }\n                    const geometry = this.objects.update(object);\n                    const material = object.material;\n                    if (Array.isArray(material)) {\n                        const groups = geometry.groups;\n                        for (let i = 0, l = groups.length; i < l; i++) {\n                            const group = groups[i];\n                            const groupMaterial = material[group.materialIndex];\n                            if (groupMaterial && groupMaterial.visible) {\n                                this.currentRenderList.push(object, geometry, groupMaterial, this.tempVector3.z, group);\n                            }\n                        }\n                    }\n                    else if (material.visible) {\n                        this.currentRenderList.push(object, geometry, material, this.tempVector3.z, null);\n                    }\n                }\n            }\n        }\n        const children = object.children;\n        for (let i = 0, l = children.length; i < l; i++) {\n            this.projectObject(children[i], camera, sortObjects);\n        }\n    }\n    renderObjects(renderList, scene, camera, overrideMaterial) {\n        for (let i = 0, l = renderList.length; i < l; i++) {\n            const renderItem = renderList[i];\n            const object = renderItem.object;\n            const geometry = renderItem.geometry;\n            const material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n            const group = renderItem.group;\n            if (camera instanceof ArrayCamera) {\n                this.currentArrayCamera = camera;\n                const cameras = camera.cameras;\n                for (var j = 0, jl = cameras.length; j < jl; j++) {\n                    var camera2 = cameras[j];\n                    if (object.layers.test(camera2.layers)) {\n                        var bounds = camera2.bounds;\n                        var x = bounds.x * this.width;\n                        var y = bounds.y * this.height;\n                        var width = bounds.z * this.width;\n                        var height = bounds.w * this.height;\n                        this.state.viewport(this.currentViewport.set(x, y, width, height).multiplyScalar(this.pixelRatio));\n                        this.renderObject(object, scene, camera2, geometry, material, group);\n                    }\n                }\n            }\n            else {\n                this.currentArrayCamera = null;\n                this.renderObject(object, scene, camera, geometry, material, group);\n            }\n        }\n    }\n    renderObject(object, scene, camera, geometry, material, group) {\n        object.onBeforeRender(this, scene, camera, geometry, material, group);\n        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n        object.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n        if (object instanceof ImmediateRenderObject) {\n            //What???\n            var frontFaceCW = object instanceof Mesh && object.matrixWorld.determinant() < 0;\n            this.state.setMaterial(material, frontFaceCW);\n            var program = this.setProgram(camera, scene.fog, material, object);\n            this.currentGeometryProgram = \"\";\n            this.renderObjectImmediate(object, program, material);\n        }\n        else {\n            this.renderBufferDirect(camera, scene.fog, geometry, material, object, group);\n        }\n        //object.onAfterRender(this, scene, camera, geometry, material, group );\n    }\n    // Buffer rendering\n    // renderObjectImmediate 目前看来很有问题\n    renderObjectImmediate(object, program, material) {\n        object.render(() => {\n            this.renderBufferImmediate(object, program, material);\n        });\n    }\n    renderBufferImmediate(object, program, material) {\n        const state = this.state;\n        const gl = this.context;\n        state.initAttributes();\n        const buffers = this.properties.get(object);\n        if (object.hasPositions && !buffers.position)\n            buffers.position = gl.createBuffer();\n        if (object.hasNormals && !buffers.normal)\n            buffers.normal = gl.createBuffer();\n        if (object.hasUvs && !buffers.uv)\n            buffers.uv = gl.createBuffer();\n        if (object.hasColors && !buffers.color)\n            buffers.color = gl.createBuffer();\n        const programAttributes = program.getAttributes();\n        if (object.hasPositions) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\n            gl.bufferData(gl.ARRAY_BUFFER, object.positionArray, gl.DYNAMIC_DRAW);\n            state.enableAttribute(programAttributes.position);\n            gl.vertexAttribPointer(programAttributes.position, 3, gl.FLOAT, false, 0, 0);\n        }\n        if (object.hasNormals) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffers.normal);\n            if (!(material instanceof MeshPhongMaterial) &&\n                !(material instanceof MeshStandardMaterial) &&\n                !(material instanceof MeshNormalMaterial) &&\n                material.flatShading === true) {\n                for (let i = 0, l = object.count * 3; i < l; i += 9) {\n                    const array = object.normalArray;\n                    const nx = (array[i + 0] + array[i + 3] + array[i + 6]) / 3;\n                    const ny = (array[i + 1] + array[i + 4] + array[i + 7]) / 3;\n                    const nz = (array[i + 2] + array[i + 5] + array[i + 8]) / 3;\n                    array[i + 0] = nx;\n                    array[i + 1] = ny;\n                    array[i + 2] = nz;\n                    array[i + 3] = nx;\n                    array[i + 4] = ny;\n                    array[i + 5] = nz;\n                    array[i + 6] = nx;\n                    array[i + 7] = ny;\n                    array[i + 8] = nz;\n                }\n            }\n            gl.bufferData(gl.ARRAY_BUFFER, object.normalArray, gl.DYNAMIC_DRAW);\n            state.enableAttribute(programAttributes.normal);\n            gl.vertexAttribPointer(programAttributes.normal, 3, gl.FLOAT, false, 0, 0);\n        }\n        if (object.hasUvs && material.map) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffers.uv);\n            gl.bufferData(gl.ARRAY_BUFFER, object.uvArray, gl.DYNAMIC_DRAW);\n            state.enableAttribute(programAttributes.uv);\n            gl.vertexAttribPointer(programAttributes.uv, 2, gl.FLOAT, false, 0, 0);\n        }\n        if (object.hasColors && material.vertexColors !== NoColors) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\n            gl.bufferData(gl.ARRAY_BUFFER, object.colorArray, gl.DYNAMIC_DRAW);\n            state.enableAttribute(programAttributes.color);\n            gl.vertexAttribPointer(programAttributes.color, 3, gl.FLOAT, false, 0, 0);\n        }\n        state.disableUnusedAttributes();\n        gl.drawArrays(gl.TRIANGLES, 0, object.count);\n        object.count = 0;\n    }\n    renderBufferDirect(camera, fog, geometry, material, object, group) {\n        const gl = this.context;\n        const frontFaceCW = object instanceof Mesh && object.matrixWorld.determinant() < 0;\n        this.state.setMaterial(material, frontFaceCW);\n        const program = this.setProgram(camera, fog, material, object);\n        const geometryProgram = geometry.id + \"_\" + program.id + \"_\" + (material.wireframe === true);\n        let updateBuffers = false;\n        if (geometryProgram !== this.currentGeometryProgram) {\n            this.currentGeometryProgram = geometryProgram;\n            updateBuffers = true;\n        }\n        if (object.morphTargetInfluences) {\n            this.morphtargets.update(object, geometry, material, program);\n            updateBuffers = true;\n        }\n        //\n        let index = geometry.index;\n        const position = geometry.attributes.position;\n        let rangeFactor = 1;\n        if (material.wireframe === true) {\n            index = this.geometries.getWireframeAttribute(geometry);\n            rangeFactor = 2;\n        }\n        let attribute;\n        let renderer = this.bufferRenderer;\n        if (index !== null) {\n            attribute = this.attributes.get(index);\n            renderer = this.indexedBufferRenderer;\n            renderer.setIndex(attribute);\n        }\n        if (updateBuffers) {\n            this.setupVertexAttributes(material, program, geometry);\n            if (index !== null) {\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attribute.buffer);\n            }\n        }\n        //\n        let dataCount = 0;\n        if (index !== null) {\n            dataCount = index.count;\n        }\n        else if (position !== undefined) {\n            dataCount = position.count;\n        }\n        const rangeStart = geometry.drawRange.start * rangeFactor;\n        const rangeCount = geometry.drawRange.count * rangeFactor;\n        const groupStart = group !== null ? group.start * rangeFactor : 0;\n        const groupCount = group !== null ? group.count * rangeFactor : Infinity;\n        const drawStart = Math.max(rangeStart, groupStart);\n        const drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n        const drawCount = Math.max(0, drawEnd - drawStart + 1);\n        if (drawCount === 0)\n            return;\n        //\n        if (object instanceof Mesh) {\n            if (material.wireframe === true) {\n                this.state.setLineWidth(material.wireframeLinewidth * this.getTargetPixelRatio());\n                renderer.setMode(gl.LINES);\n            }\n            else {\n                switch (object.drawMode) {\n                    case TrianglesDrawMode:\n                        renderer.setMode(gl.TRIANGLES);\n                        break;\n                    case TriangleStripDrawMode:\n                        renderer.setMode(gl.TRIANGLE_STRIP);\n                        break;\n                    case TriangleFanDrawMode:\n                        renderer.setMode(gl.TRIANGLE_FAN);\n                        break;\n                }\n            }\n        }\n        else if (object instanceof Line) {\n            let lineWidth = material.linewidth;\n            if (lineWidth === undefined)\n                lineWidth = 1; // Not using Line*Material\n            this.state.setLineWidth(lineWidth * this.getTargetPixelRatio());\n            if (object instanceof LineSegments) {\n                renderer.setMode(gl.LINES);\n            }\n            else if (object instanceof LineLoop) {\n                renderer.setMode(gl.LINE_LOOP);\n            }\n            else {\n                renderer.setMode(gl.LINE_STRIP);\n            }\n        }\n        else if (object instanceof Points) {\n            renderer.setMode(gl.POINTS);\n        }\n        if (geometry && geometry instanceof InstancedBufferGeometry) {\n            if (geometry.maxInstancedCount > 0) {\n                renderer.renderInstances(geometry, drawStart, drawCount);\n            }\n        }\n        else {\n            renderer.render(drawStart, drawCount);\n        }\n    }\n    setProgram(camera, fog, material, object) {\n        const gl = this.context;\n        this.usedTextureUnits = 0;\n        const materialProperties = this.properties.get(material);\n        if (this.clippingEnabled) {\n            if (this.localClippingEnabled || camera !== this.currentCamera) {\n                const useCache = camera === this.currentCamera && material.id === this.currentMaterialId;\n                // we might want to call this function with some ClippingGroup\n                // object instead of the material, once it becomes feasible\n                // (#8465, #8379)\n                this.clipping.setState(material.clippingPlanes, material.clipIntersection, material.clipShadows, camera, materialProperties, useCache);\n            }\n        }\n        if (material.needsUpdate === false) {\n            if (materialProperties.program === undefined) {\n                material.needsUpdate = true;\n            }\n            else if (material.fog && materialProperties.fog !== fog) {\n                material.needsUpdate = true;\n            }\n            else if (material.lights && materialProperties.lightsHash !== this.lights.state.hash) {\n                material.needsUpdate = true;\n            }\n            else if (materialProperties.numClippingPlanes !== undefined &&\n                (materialProperties.numClippingPlanes !== this.clipping.numPlanes ||\n                    materialProperties.numIntersection !== this.clipping.numIntersection)) {\n                material.needsUpdate = true;\n            }\n        }\n        if (material.needsUpdate) {\n            this.initMaterial(material, fog, object);\n            material.needsUpdate = false;\n        }\n        let refreshProgram = false;\n        let refreshMaterial = false;\n        let refreshLights = false;\n        const program = materialProperties.program, p_uniforms = program.getUniforms(), m_uniforms = materialProperties.shader.uniforms;\n        if (this.state.useProgram(program.program)) {\n            refreshProgram = true;\n            refreshMaterial = true;\n            refreshLights = true;\n        }\n        if (material.id !== this.currentMaterialId) {\n            this.currentMaterialId = material.id;\n            refreshMaterial = true;\n        }\n        if (refreshProgram || camera !== this.currentCamera) {\n            p_uniforms.setValue(\"projectionMatrix\", camera.projectionMatrix);\n            if (this.capabilities.logarithmicDepthBuffer) {\n                p_uniforms.setValue(\"logDepthBufFC\", 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n            }\n            // Avoid unneeded uniform updates per ArrayCamera's sub-camera\n            if (this.currentCamera !== (this.currentArrayCamera || camera)) {\n                this.currentCamera = this.currentArrayCamera || camera;\n                // lighting uniforms depend on the camera so enforce an update\n                // now, in case this material supports lights - or later, when\n                // the next material that does gets activated:\n                refreshMaterial = true; // set to true on material change\n                refreshLights = true; // remains set until update done\n            }\n            // load material specific uniforms\n            // (shader material also gets them for the sake of genericity)\n            if (material instanceof ShaderMaterial ||\n                material instanceof MeshPhongMaterial ||\n                material instanceof MeshStandardMaterial ||\n                material.envMap) {\n                const uCamPos = p_uniforms.map.cameraPosition;\n                if (uCamPos !== undefined) {\n                    uCamPos.setValue(new Vector3().setFromMatrixPosition(camera.matrixWorld));\n                }\n            }\n            if (material instanceof MeshPhongMaterial ||\n                material instanceof MeshLambertMaterial ||\n                material instanceof MeshBasicMaterial ||\n                material instanceof MeshStandardMaterial ||\n                material instanceof ShaderMaterial ||\n                material.skinning) {\n                p_uniforms.setValue(\"viewMatrix\", camera.matrixWorldInverse);\n            }\n        }\n        // skinning uniforms must be set even if material didn't change\n        // auto-setting of texture unit for bone texture must go before other textures\n        // not sure why, but otherwise weird things happen\n        if (material.skinning) {\n            p_uniforms.setOptional(object, \"bindMatrix\");\n            p_uniforms.setOptional(object, \"bindMatrixInverse\");\n            const skeleton = object.skeleton;\n            if (skeleton) {\n                const bones = skeleton.bones;\n                if (this.capabilities.floatVertexTextures) {\n                    if (skeleton.boneTexture === undefined) {\n                        // layout (1 matrix = 4 pixels)\n                        //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n                        //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n                        //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n                        //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n                        //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n                        let size = Math.sqrt(bones.length * 4); // 4 pixels needed for 1 matrix\n                        size = MathUtil.ceilPowerOfTwo(size);\n                        size = Math.max(size, 4);\n                        const boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n                        boneMatrices.set(skeleton.boneMatrices); // copy current values\n                        const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n                        skeleton.boneMatrices = boneMatrices;\n                        skeleton.boneTexture = boneTexture;\n                        skeleton.boneTextureSize = size;\n                    }\n                    p_uniforms.setValue(\"boneTexture\", skeleton.boneTexture);\n                    p_uniforms.setValue(\"boneTextureSize\", skeleton.boneTextureSize);\n                }\n                else {\n                    p_uniforms.setOptional(skeleton, \"boneMatrices\");\n                }\n            }\n        }\n        if (refreshMaterial) {\n            p_uniforms.setValue(\"toneMappingExposure\", this.toneMappingExposure);\n            p_uniforms.setValue(\"toneMappingWhitePoint\", this.toneMappingWhitePoint);\n            if (material.lights) {\n                // the current material requires lighting info\n                // note: all lighting uniforms are always set correctly\n                // they simply reference the renderer's state for their\n                // values\n                //\n                // use the current material's .needsUpdate flags to set\n                // the GL state when required\n                this.markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n            }\n            // refresh uniforms common to several materials\n            if (fog && material.fog) {\n                this.refreshUniformsFog(m_uniforms, fog);\n            }\n            if (material instanceof MeshBasicMaterial) {\n                this.refreshUniformsCommon(m_uniforms, material);\n            }\n            else if (material instanceof MeshLambertMaterial) {\n                this.refreshUniformsCommon(m_uniforms, material);\n                this.refreshUniformsLambert(m_uniforms, material);\n            }\n            else if (material instanceof MeshPhongMaterial) {\n                this.refreshUniformsCommon(m_uniforms, material);\n                if (material instanceof MeshToonMaterial) {\n                    this.refreshUniformsToon(m_uniforms, material);\n                }\n                else {\n                    this.refreshUniformsPhong(m_uniforms, material);\n                }\n            }\n            else if (material instanceof MeshStandardMaterial) {\n                this.refreshUniformsCommon(m_uniforms, material);\n                if (material instanceof MeshPhysicalMaterial) {\n                    this.refreshUniformsPhysical(m_uniforms, material);\n                }\n                else {\n                    this.refreshUniformsStandard(m_uniforms, material);\n                }\n            }\n            else if (material instanceof MeshDepthMaterial) {\n                this.refreshUniformsCommon(m_uniforms, material);\n                this.refreshUniformsDepth(m_uniforms, material);\n            }\n            else if (material instanceof MeshDistanceMaterial) {\n                this.refreshUniformsCommon(m_uniforms, material);\n                this.refreshUniformsDistance(m_uniforms, material);\n            }\n            else if (material instanceof MeshNormalMaterial) {\n                this.refreshUniformsCommon(m_uniforms, material);\n                this.refreshUniformsNormal(m_uniforms, material);\n            }\n            else if (material instanceof LineBasicMaterial) {\n                this.refreshUniformsLine(m_uniforms, material);\n                if (material instanceof LineDashedMaterial) {\n                    this.refreshUniformsDash(m_uniforms, material);\n                }\n            }\n            else if (material instanceof PointsMaterial) {\n                this.refreshUniformsPoints(m_uniforms, material);\n            }\n            else if (material instanceof ShadowMaterial) {\n                m_uniforms.color.value = material.color;\n                m_uniforms.opacity.value = material.opacity;\n            }\n            // RectAreaLight Texture\n            // TODO (mrdoob): Find a nicer implementation\n            /**\n             * LTC_1? LTC_2?\n             */\n            // if (m_uniforms.ltc_1 !== undefined) m_uniforms.ltc_1.value = UniformsLib.LTC_1;\n            // if (m_uniforms.ltc_2 !== undefined) m_uniforms.ltc_2.value = UniformsLib.LTC_2;\n            WebGLUniformsWrapper.upload(materialProperties.uniformsList, m_uniforms);\n        }\n        // common matrices\n        p_uniforms.setValue(\"modelViewMatrix\", object.modelViewMatrix);\n        p_uniforms.setValue(\"normalMatrix\", object.normalMatrix);\n        p_uniforms.setValue(\"modelMatrix\", object.matrixWorld);\n        return program;\n    }\n    setupVertexAttributes(material, program, geometry, startIndex = 0) {\n        const state = this.state;\n        const gl = this.context;\n        if (geometry && geometry instanceof InstancedBufferGeometry) {\n            if (this.extensions.get(\"ANGLE_instanced_arrays\") === null) {\n                console.error(\"THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");\n                return;\n            }\n        }\n        state.initAttributes();\n        const geometryAttributes = geometry.attributes;\n        const programAttributes = program.getAttributes();\n        // ShaderMaterial\n        const materialDefaultAttributeValues = material.defaultAttributeValues;\n        for (const name in programAttributes) {\n            const programAttribute = programAttributes[name];\n            if (programAttribute >= 0) {\n                const geometryAttribute = geometryAttributes[name];\n                if (geometryAttribute !== undefined) {\n                    const normalized = geometryAttribute.normalized;\n                    const size = geometryAttribute.itemSize;\n                    const attribute = this.attributes.get(geometryAttribute);\n                    // TODO Attribute may not be available on context restore\n                    if (attribute === undefined)\n                        continue;\n                    const buffer = attribute.buffer;\n                    const type = attribute.type;\n                    const bytesPerElement = attribute.bytesPerElement;\n                    if (geometryAttribute instanceof InstancedInterleavedBufferAttribute) {\n                        const stride = geometryAttribute.stride;\n                        const offset = geometryAttribute.offset;\n                        if (geometryAttribute) {\n                            state.enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n                            if (geometry.maxInstancedCount === undefined) {\n                                geometry.maxInstancedCount =\n                                    geometryAttribute.meshPerAttribute * geometryAttribute.count;\n                            }\n                        }\n                        else {\n                            state.enableAttribute(programAttribute);\n                        }\n                        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n                        gl.vertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, (startIndex * stride + offset) * bytesPerElement);\n                    }\n                    else {\n                        if (geometryAttribute instanceof InstancedBufferAttribute) {\n                            state.enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n                            if (geometry.maxInstancedCount === undefined) {\n                                geometry.maxInstancedCount =\n                                    geometryAttribute.meshPerAttribute * geometryAttribute.count;\n                            }\n                        }\n                        else {\n                            state.enableAttribute(programAttribute);\n                        }\n                        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n                        gl.vertexAttribPointer(programAttribute, size, type, normalized, 0, startIndex * size * bytesPerElement);\n                    }\n                }\n                else if (materialDefaultAttributeValues !== undefined) {\n                    const value = materialDefaultAttributeValues[name];\n                    if (value !== undefined) {\n                        switch (value.length) {\n                            case 2:\n                                gl.vertexAttrib2fv(programAttribute, value);\n                                break;\n                            case 3:\n                                gl.vertexAttrib3fv(programAttribute, value);\n                                break;\n                            case 4:\n                                gl.vertexAttrib4fv(programAttribute, value);\n                                break;\n                            default:\n                                gl.vertexAttrib1fv(programAttribute, value);\n                        }\n                    }\n                }\n            }\n        }\n        state.disableUnusedAttributes();\n    }\n    initMaterial(material, fog, object) {\n        const lights = this.lights;\n        const clipping = this.clipping;\n        const materialProperties = this.properties.get(material);\n        const parameters = this.programCache.getParameters(material, this.lights.state, this.shadowsArray, fog, this.clipping.numPlanes, this.clipping.numIntersection, object);\n        const code = this.programCache.getProgramCode(material, parameters);\n        let program = materialProperties.program;\n        let programChange = true;\n        if (program === undefined) {\n            // new material\n            material.addEventListener(\"dispose\", this.onMaterialDispose);\n        }\n        else if (program.code !== code) {\n            // changed glsl or parameters\n            this.releaseMaterialProgramReference(material);\n        }\n        else if (parameters.shaderID !== undefined) {\n            // same glsl and uniform list\n            return;\n        }\n        else {\n            // only rebuild uniform list\n            programChange = false;\n        }\n        if (programChange) {\n            if (parameters.shaderID) {\n                const shader = ShaderLib[parameters.shaderID];\n                materialProperties.shader = {\n                    name: material.type,\n                    uniforms: UniformsUtils.clone(shader.uniforms),\n                    vertexShader: shader.vertexShader,\n                    fragmentShader: shader.fragmentShader,\n                };\n            }\n            else {\n                materialProperties.shader = {\n                    name: material.type,\n                    uniforms: material.uniforms,\n                    vertexShader: material.vertexShader,\n                    fragmentShader: material.fragmentShader,\n                };\n            }\n            material.onBeforeCompile(materialProperties.shader);\n            program = this.programCache.acquireProgram(material, materialProperties.shader, parameters, code);\n            materialProperties.program = program;\n            material.program = program;\n        }\n        const programAttributes = program.getAttributes();\n        if (material.morphTargets) {\n            material.numSupportedMorphTargets = 0;\n            for (let i = 0; i < this.maxMorphTargets; i++) {\n                if (programAttributes[\"morphTarget\" + i] >= 0) {\n                    material.numSupportedMorphTargets++;\n                }\n            }\n        }\n        if (material.morphNormals) {\n            material.numSupportedMorphNormals = 0;\n            for (let i = 0; i < this.maxMorphNormals; i++) {\n                if (programAttributes[\"morphNormal\" + i] >= 0) {\n                    material.numSupportedMorphNormals++;\n                }\n            }\n        }\n        const uniforms = materialProperties.shader.uniforms;\n        if ((!(material instanceof ShaderMaterial) && !(material instanceof RawShaderMaterial)) ||\n            material.clipping === true) {\n            materialProperties.numClippingPlanes = clipping.numPlanes;\n            materialProperties.numIntersection = clipping.numIntersection;\n            uniforms.clippingPlanes = clipping.uniform;\n        }\n        materialProperties.fog = fog;\n        // store the light setup it was created for\n        materialProperties.lightsHash = lights.state.hash;\n        if (material.lights) {\n            // wire up the material to this renderer's lighting state\n            uniforms.ambientLightColor.value = lights.state.ambient;\n            uniforms.directionalLights.value = lights.state.directional;\n            uniforms.spotLights.value = lights.state.spot;\n            uniforms.rectAreaLights.value = lights.state.rectArea;\n            uniforms.pointLights.value = lights.state.point;\n            uniforms.hemisphereLights.value = lights.state.hemi;\n            uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n            uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n            uniforms.spotShadowMap.value = lights.state.spotShadowMap;\n            uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n            uniforms.pointShadowMap.value = lights.state.pointShadowMap;\n            uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n            // TODO (abelnation): add area lights shadow info to uniforms\n        }\n        const progUniforms = materialProperties.program.getUniforms();\n        const uniformsList = WebGLUniformsWrapper.seqWithValue(progUniforms.seq, uniforms);\n        materialProperties.uniformsList = uniformsList;\n    }\n    deallocateMaterial(material) {\n        this.releaseMaterialProgramReference(material);\n        this.properties.remove(material);\n    }\n    releaseMaterialProgramReference(material) {\n        const programInfo = this.properties.get(material).program;\n        material.program = undefined;\n        if (programInfo !== undefined) {\n            this.programCache.releaseProgram(programInfo);\n        }\n    }\n    setFaceCulling(cullFace, frontFaceDirection) {\n        this.state.setCullFace(cullFace);\n        this.state.setFlipSided(frontFaceDirection === FrontFaceDirectionCW);\n    }\n    allocTextureUnit() {\n        const textureUnit = this.usedTextureUnits;\n        if (textureUnit >= this.capabilities.maxTextures) {\n            console.warn(\"THREE.WebGLRenderer: Trying to use \" +\n                textureUnit +\n                \" texture units while this GPU supports only \" +\n                this.capabilities.maxTextures);\n        }\n        this.usedTextureUnits += 1;\n        return textureUnit;\n    }\n    setTexture2D(texture, unit) {\n        if (texture && texture instanceof WebGLRenderTarget) {\n            if (!this.setTexture2DWarned) {\n                console.warn(\"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\");\n                this.setTexture2DWarned = true;\n            }\n            texture = texture.texture;\n        }\n        this.textures.setTexture2D(texture, unit);\n    }\n    setTextureCube(cubeTexture, slot) {\n        let texture = cubeTexture;\n        // backwards compatibility: peel texture.texture\n        if (cubeTexture && cubeTexture instanceof WebGLRenderTargetCube) {\n            if (!this.setTextureCubeWarned) {\n                console.warn(\"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\");\n                this.setTextureCubeWarned = true;\n            }\n            texture = cubeTexture.texture;\n        }\n        // currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n        // TODO: unify these code paths\n        if ((texture && texture instanceof CubeTexture) ||\n            (Array.isArray(texture.image) && texture.image.length === 6)) {\n            // CompressedTexture can have Array in image :/\n            // this function alone should take care of cube textures\n            this.textures.setTextureCube(texture, slot);\n        }\n        else {\n            // assumed: texture property of THREE.WebGLRenderTargetCube\n            this.textures.setTextureCubeDynamic(texture, slot);\n        }\n    }\n    getRenderTarget() {\n        return this.currentRendererTarget;\n    }\n    setRenderTarget(renderTarget) {\n        const properties = this.properties;\n        this.currentRenderTarget = renderTarget;\n        if (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n            this.textures.setupRenderTarget(renderTarget);\n        }\n        let framebuffer = null;\n        let isCube = false;\n        if (renderTarget) {\n            const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n            if (renderTarget instanceof WebGLRenderTargetCube) {\n                framebuffer = __webglFramebuffer[renderTarget.activeCubeFace];\n                isCube = true;\n            }\n            else {\n                framebuffer = __webglFramebuffer;\n            }\n            this.currentViewport.copy(renderTarget.viewport);\n            this.currentScissor.copy(renderTarget.scissor);\n            this.currentScissorTest = renderTarget.scissorTest;\n        }\n        else {\n            this.currentViewport.copy(this.viewport).multiplyScalar(this.pixelRatio);\n            this.currentScissor.copy(this.scissor).multiplyScalar(this.pixelRatio);\n            this.currentScissorTest = this.scissorTest;\n        }\n        const gl = this.context;\n        const state = this.state;\n        if (this.currentFramebuffer !== framebuffer) {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n            this.currentFramebuffer = framebuffer;\n        }\n        state.viewport(this.currentViewport);\n        state.scissor(this.currentScissor);\n        state.setScissorTest(this.currentScissorTest);\n        if (isCube) {\n            const textureProperties = properties.get(renderTarget.texture);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel);\n        }\n    }\n    readRenderTargetPixels(renderTarget, x, y, width, height, buffer) {\n        if (!(renderTarget && renderTarget instanceof WebGLRenderTarget)) {\n            console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.\");\n            return;\n        }\n        const gl = this.context;\n        const utils = this.utils;\n        const extensions = this.extensions;\n        const framebuffer = this.properties.get(renderTarget).__webglFramebuffer;\n        if (framebuffer) {\n            let restore = false;\n            if (framebuffer !== this.currentFramebuffer) {\n                gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n                restore = true;\n            }\n            try {\n                var texture = renderTarget.texture;\n                var textureFormat = texture.format;\n                var textureType = texture.type;\n                if (textureFormat !== RGBAFormat &&\n                    utils.convert(textureFormat) !== gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {\n                    console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.\");\n                    return;\n                }\n                if (textureType !== UnsignedByteType &&\n                    utils.convert(textureType) !== gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE) && // IE11, Edge and Chrome Mac < 52 (#9513)\n                    !(textureType === FloatType &&\n                        (extensions.get(\"OES_texture_float\") || extensions.get(\"WEBGL_color_buffer_float\"))) && // Chrome Mac >= 52 and Firefox\n                    !(textureType === HalfFloatType && extensions.get(\"EXT_color_buffer_half_float\"))) {\n                    console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.\");\n                    return;\n                }\n                if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE) {\n                    // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n                    if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {\n                        gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n                    }\n                }\n                else {\n                    console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.\");\n                }\n            }\n            finally {\n                if (restore) {\n                    gl.bindFramebuffer(gl.FRAMEBUFFER, this.currentFramebuffer);\n                }\n            }\n        }\n    }\n    copyFramebufferToTexture(position, texture, level) {\n        const gl = this.context;\n        const width = texture.image.width;\n        const height = texture.image.height;\n        const internalFormat = this.utils.convert(texture.format);\n        this.setTexture2D(texture, 0);\n        gl.copyTexImage2D(gl.TEXTURE_2D, level || 0, internalFormat, position.x, position.y, width, height, 0);\n    }\n    // Uniforms (refresh uniforms objects)\n    refreshUniformsCommon(uniforms, material) {\n        uniforms.opacity.value = material.opacity;\n        if (material.color) {\n            uniforms.diffuse.value = material.color;\n        }\n        if (material.emissive) {\n            uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n        }\n        if (material.map) {\n            uniforms.map.value = material.map;\n        }\n        if (material.alphaMap) {\n            uniforms.alphaMap.value = material.alphaMap;\n        }\n        if (material.specularMap) {\n            uniforms.specularMap.value = material.specularMap;\n        }\n        if (material.envMap) {\n            uniforms.envMap.value = material.envMap;\n            // don't flip CubeTexture envMaps, flip everything else:\n            //  WebGLRenderTargetCube will be flipped for backwards compatibility\n            //  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n            // this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n            uniforms.flipEnvMap.value = !(material.envMap && material.envMap instanceof CubeTexture) ? 1 : -1;\n            uniforms.reflectivity.value = material.reflectivity;\n            uniforms.refractionRatio.value = material.refractionRatio;\n        }\n        if (material.lightMap) {\n            uniforms.lightMap.value = material.lightMap;\n            uniforms.lightMapIntensity.value = material.lightMapIntensity;\n        }\n        if (material.aoMap) {\n            uniforms.aoMap.value = material.aoMap;\n            uniforms.aoMapIntensity.value = material.aoMapIntensity;\n        }\n        // uv repeat and offset setting priorities\n        // 1. color map\n        // 2. specular map\n        // 3. normal map\n        // 4. bump map\n        // 5. alpha map\n        // 6. emissive map\n        let uvScaleMap;\n        if (material.map) {\n            uvScaleMap = material.map;\n        }\n        else if (material.specularMap) {\n            uvScaleMap = material.specularMap;\n        }\n        else if (material.displacementMap) {\n            uvScaleMap = material.displacementMap;\n        }\n        else if (material.normalMap) {\n            uvScaleMap = material.normalMap;\n        }\n        else if (material.bumpMap) {\n            uvScaleMap = material.bumpMap;\n        }\n        else if (material.roughnessMap) {\n            uvScaleMap = material.roughnessMap;\n        }\n        else if (material.metalnessMap) {\n            uvScaleMap = material.metalnessMap;\n        }\n        else if (material.alphaMap) {\n            uvScaleMap = material.alphaMap;\n        }\n        else if (material.emissiveMap) {\n            uvScaleMap = material.emissiveMap;\n        }\n        if (uvScaleMap !== undefined) {\n            // backwards compatibility\n            if (uvScaleMap instanceof WebGLRenderTarget) {\n                uvScaleMap = uvScaleMap.texture;\n            }\n            if (uvScaleMap.matrixAutoUpdate === true) {\n                const offset = uvScaleMap.offset;\n                const repeat = uvScaleMap.repeat;\n                const rotation = uvScaleMap.rotation;\n                const center = uvScaleMap.center;\n                uvScaleMap.matrix.setUvTransform(offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y);\n            }\n            uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n        }\n    }\n    refreshUniformsLine(uniforms, material) {\n        uniforms.diffuse.value = material.color;\n        uniforms.opacity.value = material.opacity;\n    }\n    refreshUniformsDash(uniforms, material) {\n        uniforms.dashSize.value = material.dashSize;\n        uniforms.totalSize.value = material.dashSize + material.gapSize;\n        uniforms.scale.value = material.scale;\n    }\n    refreshUniformsPoints(uniforms, material) {\n        uniforms.diffuse.value = material.color;\n        uniforms.opacity.value = material.opacity;\n        uniforms.size.value = material.size * this.pixelRatio;\n        uniforms.scale.value = this.height * 0.5;\n        uniforms.map.value = material.map;\n        if (material.map !== null) {\n            if (material.map.matrixAutoUpdate === true) {\n                const offset = material.map.offset;\n                const repeat = material.map.repeat;\n                const rotation = material.map.rotation;\n                const center = material.map.center;\n                material.map.matrix.setUvTransform(offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y);\n            }\n            uniforms.uvTransform.value.copy(material.map.matrix);\n        }\n    }\n    refreshUniformsFog(uniforms, fog) {\n        uniforms.fogColor.value = fog.color;\n        if (fog instanceof Fog) {\n            uniforms.fogNear.value = fog.near;\n            uniforms.fogFar.value = fog.far;\n        }\n        else if (fog instanceof FogExp2) {\n            uniforms.fogDensity.value = fog.density;\n        }\n    }\n    refreshUniformsLambert(uniforms, material) {\n        if (material.emissiveMap) {\n            uniforms.emissiveMap.value = material.emissiveMap;\n        }\n    }\n    refreshUniformsPhong(uniforms, material) {\n        uniforms.specular.value = material.specular;\n        uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n        if (material.emissiveMap) {\n            uniforms.emissiveMap.value = material.emissiveMap;\n        }\n        if (material.bumpMap) {\n            uniforms.bumpMap.value = material.bumpMap;\n            uniforms.bumpScale.value = material.bumpScale;\n        }\n        if (material.normalMap) {\n            uniforms.normalMap.value = material.normalMap;\n            uniforms.normalScale.value.copy(material.normalScale);\n        }\n        if (material.displacementMap) {\n            uniforms.displacementMap.value = material.displacementMap;\n            uniforms.displacementScale.value = material.displacementScale;\n            uniforms.displacementBias.value = material.displacementBias;\n        }\n    }\n    refreshUniformsToon(uniforms, material) {\n        this.refreshUniformsPhong(uniforms, material);\n        if (material.gradientMap) {\n            uniforms.gradientMap.value = material.gradientMap;\n        }\n    }\n    refreshUniformsStandard(uniforms, material) {\n        uniforms.roughness.value = material.roughness;\n        uniforms.metalness.value = material.metalness;\n        if (material.roughnessMap) {\n            uniforms.roughnessMap.value = material.roughnessMap;\n        }\n        if (material.metalnessMap) {\n            uniforms.metalnessMap.value = material.metalnessMap;\n        }\n        if (material.emissiveMap) {\n            uniforms.emissiveMap.value = material.emissiveMap;\n        }\n        if (material.bumpMap) {\n            uniforms.bumpMap.value = material.bumpMap;\n            uniforms.bumpScale.value = material.bumpScale;\n        }\n        if (material.normalMap) {\n            uniforms.normalMap.value = material.normalMap;\n            uniforms.normalScale.value.copy(material.normalScale);\n        }\n        if (material.displacementMap) {\n            uniforms.displacementMap.value = material.displacementMap;\n            uniforms.displacementScale.value = material.displacementScale;\n            uniforms.displacementBias.value = material.displacementBias;\n        }\n        if (material.envMap) {\n            //uniforms.envMap.value = material.envMap; // part of uniforms common\n            uniforms.envMapIntensity.value = material.envMapIntensity;\n        }\n    }\n    refreshUniformsPhysical(uniforms, material) {\n        uniforms.clearCoat.value = material.clearCoat;\n        uniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n        this.refreshUniformsStandard(uniforms, material);\n    }\n    refreshUniformsDepth(uniforms, material) {\n        if (material.displacementMap) {\n            uniforms.displacementMap.value = material.displacementMap;\n            uniforms.displacementScale.value = material.displacementScale;\n            uniforms.displacementBias.value = material.displacementBias;\n        }\n    }\n    refreshUniformsDistance(uniforms, material) {\n        if (material.displacementMap) {\n            uniforms.displacementMap.value = material.displacementMap;\n            uniforms.displacementScale.value = material.displacementScale;\n            uniforms.displacementBias.value = material.displacementBias;\n        }\n        uniforms.referencePosition.value.copy(material.referencePosition);\n        uniforms.nearDistance.value = material.nearDistance;\n        uniforms.farDistance.value = material.farDistance;\n    }\n    refreshUniformsNormal(uniforms, material) {\n        if (material.bumpMap) {\n            uniforms.bumpMap.value = material.bumpMap;\n            uniforms.bumpScale.value = material.bumpScale;\n        }\n        if (material.normalMap) {\n            uniforms.normalMap.value = material.normalMap;\n            uniforms.normalScale.value.copy(material.normalScale);\n        }\n        if (material.displacementMap) {\n            uniforms.displacementMap.value = material.displacementMap;\n            uniforms.displacementScale.value = material.displacementScale;\n            uniforms.displacementBias.value = material.displacementBias;\n        }\n    }\n    // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n    markUniformsLightsNeedsUpdate(uniforms, value) {\n        uniforms.ambientLightColor.needsUpdate = value;\n        uniforms.directionalLights.needsUpdate = value;\n        uniforms.pointLights.needsUpdate = value;\n        uniforms.spotLights.needsUpdate = value;\n        uniforms.rectAreaLights.needsUpdate = value;\n        uniforms.hemisphereLights.needsUpdate = value;\n    }\n}\n","import alphamap_fragment from \"./ShaderChunk/alphamap_fragment.glsl\";\nimport alphamap_pars_fragment from \"./ShaderChunk/alphamap_pars_fragment.glsl\";\nimport alphatest_fragment from \"./ShaderChunk/alphatest_fragment.glsl\";\nimport aomap_fragment from \"./ShaderChunk/aomap_fragment.glsl\";\nimport aomap_pars_fragment from \"./ShaderChunk/aomap_pars_fragment.glsl\";\nimport begin_vertex from \"./ShaderChunk/begin_vertex.glsl\";\nimport beginnormal_vertex from \"./ShaderChunk/beginnormal_vertex.glsl\";\nimport bsdfs from \"./ShaderChunk/bsdfs.glsl\";\nimport bumpmap_pars_fragment from \"./ShaderChunk/bumpmap_pars_fragment.glsl\";\nimport clipping_planes_fragment from \"./ShaderChunk/clipping_planes_fragment.glsl\";\nimport clipping_planes_pars_fragment from \"./ShaderChunk/clipping_planes_pars_fragment.glsl\";\nimport clipping_planes_pars_vertex from \"./ShaderChunk/clipping_planes_pars_vertex.glsl\";\nimport clipping_planes_vertex from \"./ShaderChunk/clipping_planes_vertex.glsl\";\nimport color_fragment from \"./ShaderChunk/color_fragment.glsl\";\nimport color_pars_fragment from \"./ShaderChunk/color_pars_fragment.glsl\";\nimport color_pars_vertex from \"./ShaderChunk/color_pars_vertex.glsl\";\nimport color_vertex from \"./ShaderChunk/color_vertex.glsl\";\nimport common from \"./ShaderChunk/common.glsl\";\nimport cube_uv_reflection_fragment from \"./ShaderChunk/cube_uv_reflection_fragment.glsl\";\nimport defaultnormal_vertex from \"./ShaderChunk/defaultnormal_vertex.glsl\";\nimport displacementmap_pars_vertex from \"./ShaderChunk/displacementmap_pars_vertex.glsl\";\nimport displacementmap_vertex from \"./ShaderChunk/displacementmap_vertex.glsl\";\nimport emissivemap_fragment from \"./ShaderChunk/emissivemap_fragment.glsl\";\nimport emissivemap_pars_fragment from \"./ShaderChunk/emissivemap_pars_fragment.glsl\";\nimport encodings_fragment from \"./ShaderChunk/encodings_fragment.glsl\";\nimport encodings_pars_fragment from \"./ShaderChunk/encodings_pars_fragment.glsl\";\nimport envmap_fragment from \"./ShaderChunk/envmap_fragment.glsl\";\nimport envmap_pars_fragment from \"./ShaderChunk/envmap_pars_fragment.glsl\";\nimport envmap_pars_vertex from \"./ShaderChunk/envmap_pars_vertex.glsl\";\nimport envmap_vertex from \"./ShaderChunk/envmap_vertex.glsl\";\nimport fog_vertex from \"./ShaderChunk/fog_vertex.glsl\";\nimport fog_pars_vertex from \"./ShaderChunk/fog_pars_vertex.glsl\";\nimport fog_fragment from \"./ShaderChunk/fog_fragment.glsl\";\nimport fog_pars_fragment from \"./ShaderChunk/fog_pars_fragment.glsl\";\nimport gradientmap_pars_fragment from \"./ShaderChunk/gradientmap_pars_fragment.glsl\";\nimport lightmap_fragment from \"./ShaderChunk/lightmap_fragment.glsl\";\nimport lightmap_pars_fragment from \"./ShaderChunk/lightmap_pars_fragment.glsl\";\nimport lights_lambert_vertex from \"./ShaderChunk/lights_lambert_vertex.glsl\";\nimport lights_pars from \"./ShaderChunk/lights_pars.glsl\";\nimport lights_phong_fragment from \"./ShaderChunk/lights_phong_fragment.glsl\";\nimport lights_phong_pars_fragment from \"./ShaderChunk/lights_phong_pars_fragment.glsl\";\nimport lights_physical_fragment from \"./ShaderChunk/lights_physical_fragment.glsl\";\nimport lights_physical_pars_fragment from \"./ShaderChunk/lights_physical_pars_fragment.glsl\";\nimport lights_template from \"./ShaderChunk/lights_template.glsl\";\nimport logdepthbuf_fragment from \"./ShaderChunk/logdepthbuf_fragment.glsl\";\nimport logdepthbuf_pars_fragment from \"./ShaderChunk/logdepthbuf_pars_fragment.glsl\";\nimport logdepthbuf_pars_vertex from \"./ShaderChunk/logdepthbuf_pars_vertex.glsl\";\nimport logdepthbuf_vertex from \"./ShaderChunk/logdepthbuf_vertex.glsl\";\nimport map_fragment from \"./ShaderChunk/map_fragment.glsl\";\nimport map_pars_fragment from \"./ShaderChunk/map_pars_fragment.glsl\";\nimport map_particle_fragment from \"./ShaderChunk/map_particle_fragment.glsl\";\nimport map_particle_pars_fragment from \"./ShaderChunk/map_particle_pars_fragment.glsl\";\nimport metalnessmap_fragment from \"./ShaderChunk/metalnessmap_fragment.glsl\";\nimport metalnessmap_pars_fragment from \"./ShaderChunk/metalnessmap_pars_fragment.glsl\";\nimport morphnormal_vertex from \"./ShaderChunk/morphnormal_vertex.glsl\";\nimport morphtarget_pars_vertex from \"./ShaderChunk/morphtarget_pars_vertex.glsl\";\nimport morphtarget_vertex from \"./ShaderChunk/morphtarget_vertex.glsl\";\nimport normal_fragment from \"./ShaderChunk/normal_fragment.glsl\";\nimport normalmap_pars_fragment from \"./ShaderChunk/normalmap_pars_fragment.glsl\";\nimport packing from \"./ShaderChunk/packing.glsl\";\nimport premultiplied_alpha_fragment from \"./ShaderChunk/premultiplied_alpha_fragment.glsl\";\nimport project_vertex from \"./ShaderChunk/project_vertex.glsl\";\nimport dithering_fragment from \"./ShaderChunk/dithering_fragment.glsl\";\nimport dithering_pars_fragment from \"./ShaderChunk/dithering_pars_fragment.glsl\";\nimport roughnessmap_fragment from \"./ShaderChunk/roughnessmap_fragment.glsl\";\nimport roughnessmap_pars_fragment from \"./ShaderChunk/roughnessmap_pars_fragment.glsl\";\nimport shadowmap_pars_fragment from \"./ShaderChunk/shadowmap_pars_fragment.glsl\";\nimport shadowmap_pars_vertex from \"./ShaderChunk/shadowmap_pars_vertex.glsl\";\nimport shadowmap_vertex from \"./ShaderChunk/shadowmap_vertex.glsl\";\nimport shadowmask_pars_fragment from \"./ShaderChunk/shadowmask_pars_fragment.glsl\";\nimport skinbase_vertex from \"./ShaderChunk/skinbase_vertex.glsl\";\nimport skinning_pars_vertex from \"./ShaderChunk/skinning_pars_vertex.glsl\";\nimport skinning_vertex from \"./ShaderChunk/skinning_vertex.glsl\";\nimport skinnormal_vertex from \"./ShaderChunk/skinnormal_vertex.glsl\";\nimport specularmap_fragment from \"./ShaderChunk/specularmap_fragment.glsl\";\nimport specularmap_pars_fragment from \"./ShaderChunk/specularmap_pars_fragment.glsl\";\nimport tonemapping_fragment from \"./ShaderChunk/tonemapping_fragment.glsl\";\nimport tonemapping_pars_fragment from \"./ShaderChunk/tonemapping_pars_fragment.glsl\";\nimport uv_pars_fragment from \"./ShaderChunk/uv_pars_fragment.glsl\";\nimport uv_pars_vertex from \"./ShaderChunk/uv_pars_vertex.glsl\";\nimport uv_vertex from \"./ShaderChunk/uv_vertex.glsl\";\nimport uv2_pars_fragment from \"./ShaderChunk/uv2_pars_fragment.glsl\";\nimport uv2_pars_vertex from \"./ShaderChunk/uv2_pars_vertex.glsl\";\nimport uv2_vertex from \"./ShaderChunk/uv2_vertex.glsl\";\nimport worldpos_vertex from \"./ShaderChunk/worldpos_vertex.glsl\";\nimport cube_frag from \"./ShaderLib/cube_frag.glsl\";\nimport cube_vert from \"./ShaderLib/cube_vert.glsl\";\nimport depth_frag from \"./ShaderLib/depth_frag.glsl\";\nimport depth_vert from \"./ShaderLib/depth_vert.glsl\";\nimport distanceRGBA_frag from \"./ShaderLib/distanceRGBA_frag.glsl\";\nimport distanceRGBA_vert from \"./ShaderLib/distanceRGBA_vert.glsl\";\nimport equirect_frag from \"./ShaderLib/equirect_frag.glsl\";\nimport equirect_vert from \"./ShaderLib/equirect_vert.glsl\";\nimport linedashed_frag from \"./ShaderLib/linedashed_frag.glsl\";\nimport linedashed_vert from \"./ShaderLib/linedashed_vert.glsl\";\nimport meshbasic_frag from \"./ShaderLib/meshbasic_frag.glsl\";\nimport meshbasic_vert from \"./ShaderLib/meshbasic_vert.glsl\";\nimport meshlambert_frag from \"./ShaderLib/meshlambert_frag.glsl\";\nimport meshlambert_vert from \"./ShaderLib/meshlambert_vert.glsl\";\nimport meshphong_frag from \"./ShaderLib/meshphong_frag.glsl\";\nimport meshphong_vert from \"./ShaderLib/meshphong_vert.glsl\";\nimport meshphysical_frag from \"./ShaderLib/meshphysical_frag.glsl\";\nimport meshphysical_vert from \"./ShaderLib/meshphysical_vert.glsl\";\nimport normal_frag from \"./ShaderLib/normal_frag.glsl\";\nimport normal_vert from \"./ShaderLib/normal_vert.glsl\";\nimport points_frag from \"./ShaderLib/points_frag.glsl\";\nimport points_vert from \"./ShaderLib/points_vert.glsl\";\nimport shadow_frag from \"./ShaderLib/shadow_frag.glsl\";\nimport shadow_vert from \"./ShaderLib/shadow_vert.glsl\";\nconst ShaderChunk = {\n    alphamap_fragment: alphamap_fragment,\n    alphamap_pars_fragment: alphamap_pars_fragment,\n    alphatest_fragment: alphatest_fragment,\n    aomap_fragment: aomap_fragment,\n    aomap_pars_fragment: aomap_pars_fragment,\n    begin_vertex: begin_vertex,\n    beginnormal_vertex: beginnormal_vertex,\n    bsdfs: bsdfs,\n    bumpmap_pars_fragment: bumpmap_pars_fragment,\n    clipping_planes_fragment: clipping_planes_fragment,\n    clipping_planes_pars_fragment: clipping_planes_pars_fragment,\n    clipping_planes_pars_vertex: clipping_planes_pars_vertex,\n    clipping_planes_vertex: clipping_planes_vertex,\n    color_fragment: color_fragment,\n    color_pars_fragment: color_pars_fragment,\n    color_pars_vertex: color_pars_vertex,\n    color_vertex: color_vertex,\n    common: common,\n    cube_uv_reflection_fragment: cube_uv_reflection_fragment,\n    defaultnormal_vertex: defaultnormal_vertex,\n    displacementmap_pars_vertex: displacementmap_pars_vertex,\n    displacementmap_vertex: displacementmap_vertex,\n    emissivemap_fragment: emissivemap_fragment,\n    emissivemap_pars_fragment: emissivemap_pars_fragment,\n    encodings_fragment: encodings_fragment,\n    encodings_pars_fragment: encodings_pars_fragment,\n    envmap_fragment: envmap_fragment,\n    envmap_pars_fragment: envmap_pars_fragment,\n    envmap_pars_vertex: envmap_pars_vertex,\n    envmap_vertex: envmap_vertex,\n    fog_vertex: fog_vertex,\n    fog_pars_vertex: fog_pars_vertex,\n    fog_fragment: fog_fragment,\n    fog_pars_fragment: fog_pars_fragment,\n    gradientmap_pars_fragment: gradientmap_pars_fragment,\n    lightmap_fragment: lightmap_fragment,\n    lightmap_pars_fragment: lightmap_pars_fragment,\n    lights_lambert_vertex: lights_lambert_vertex,\n    lights_pars: lights_pars,\n    lights_phong_fragment: lights_phong_fragment,\n    lights_phong_pars_fragment: lights_phong_pars_fragment,\n    lights_physical_fragment: lights_physical_fragment,\n    lights_physical_pars_fragment: lights_physical_pars_fragment,\n    lights_template: lights_template,\n    logdepthbuf_fragment: logdepthbuf_fragment,\n    logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n    logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n    logdepthbuf_vertex: logdepthbuf_vertex,\n    map_fragment: map_fragment,\n    map_pars_fragment: map_pars_fragment,\n    map_particle_fragment: map_particle_fragment,\n    map_particle_pars_fragment: map_particle_pars_fragment,\n    metalnessmap_fragment: metalnessmap_fragment,\n    metalnessmap_pars_fragment: metalnessmap_pars_fragment,\n    morphnormal_vertex: morphnormal_vertex,\n    morphtarget_pars_vertex: morphtarget_pars_vertex,\n    morphtarget_vertex: morphtarget_vertex,\n    normal_fragment: normal_fragment,\n    normalmap_pars_fragment: normalmap_pars_fragment,\n    packing: packing,\n    premultiplied_alpha_fragment: premultiplied_alpha_fragment,\n    project_vertex: project_vertex,\n    dithering_fragment: dithering_fragment,\n    dithering_pars_fragment: dithering_pars_fragment,\n    roughnessmap_fragment: roughnessmap_fragment,\n    roughnessmap_pars_fragment: roughnessmap_pars_fragment,\n    shadowmap_pars_fragment: shadowmap_pars_fragment,\n    shadowmap_pars_vertex: shadowmap_pars_vertex,\n    shadowmap_vertex: shadowmap_vertex,\n    shadowmask_pars_fragment: shadowmask_pars_fragment,\n    skinbase_vertex: skinbase_vertex,\n    skinning_pars_vertex: skinning_pars_vertex,\n    skinning_vertex: skinning_vertex,\n    skinnormal_vertex: skinnormal_vertex,\n    specularmap_fragment: specularmap_fragment,\n    specularmap_pars_fragment: specularmap_pars_fragment,\n    tonemapping_fragment: tonemapping_fragment,\n    tonemapping_pars_fragment: tonemapping_pars_fragment,\n    uv_pars_fragment: uv_pars_fragment,\n    uv_pars_vertex: uv_pars_vertex,\n    uv_vertex: uv_vertex,\n    uv2_pars_fragment: uv2_pars_fragment,\n    uv2_pars_vertex: uv2_pars_vertex,\n    uv2_vertex: uv2_vertex,\n    worldpos_vertex: worldpos_vertex,\n    cube_frag: cube_frag,\n    cube_vert: cube_vert,\n    depth_frag: depth_frag,\n    depth_vert: depth_vert,\n    distanceRGBA_frag: distanceRGBA_frag,\n    distanceRGBA_vert: distanceRGBA_vert,\n    equirect_frag: equirect_frag,\n    equirect_vert: equirect_vert,\n    linedashed_frag: linedashed_frag,\n    linedashed_vert: linedashed_vert,\n    meshbasic_frag: meshbasic_frag,\n    meshbasic_vert: meshbasic_vert,\n    meshlambert_frag: meshlambert_frag,\n    meshlambert_vert: meshlambert_vert,\n    meshphong_frag: meshphong_frag,\n    meshphong_vert: meshphong_vert,\n    meshphysical_frag: meshphysical_frag,\n    meshphysical_vert: meshphysical_vert,\n    normal_frag: normal_frag,\n    normal_vert: normal_vert,\n    points_frag: points_frag,\n    points_vert: points_vert,\n    shadow_frag: shadow_frag,\n    shadow_vert: shadow_vert\n};\nexport { ShaderChunk };\n","export default \"#ifdef USE_ALPHAMAP\\n\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n\\n#endif\\n\";","export default \"#ifdef USE_ALPHAMAP\\n\\n\\tuniform sampler2D alphaMap;\\n\\n#endif\\n\";","export default \"#ifdef ALPHATEST\\n\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n\\n#endif\\n\";","export default \"#ifdef USE_AOMAP\\n\\n\\t// reads channel R, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef USE_AOMAP\\n\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n\\n#endif\";","export default \"\\nvec3 transformed = vec3( position );\\n\";","export default \"\\nvec3 objectNormal = vec3( normal );\\n\";","export default \"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\n\\tif( decayExponent > 0.0 ) {\\n\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\n\\t\\t// based upon Frostbite 3 Moving to Physically-based Rendering\\n\\t\\t// page 32, equation 26: E[window1]\\n\\t\\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\\n\\t\\t// this is intended to be used on spot and point lights who are represented as luminous intensity\\n\\t\\t// but who must be converted to luminous irradiance for surface lighting calculation\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n\\n#else\\n\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\n#endif\\n\\n\\t}\\n\\n\\treturn 1.0;\\n\\n}\\n\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n\\n} // validated\\n\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\n\\t// Original approximation by Christophe Schlick '94\\n\\t// float fresnel = pow( 1.0 - dotLH, 5.0 );\\n\\n\\t// Optimized variant (presented by Epic at SIGGRAPH '13)\\n\\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n\\n} // validated\\n\\n// Microfacet Models for Refraction through Rough Surfaces - equation (34)\\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\\n// alpha is \\\"roughness squared\\\" in Disney’s reparameterization\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\n\\t// geometry term (normalized) = G(l)⋅G(v) / 4(n⋅l)(n⋅v)\\n\\t// also see #12151\\n\\n\\tfloat a2 = pow2( alpha );\\n\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\n\\treturn 1.0 / ( gl * gv );\\n\\n} // validated\\n\\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\n\\tfloat a2 = pow2( alpha );\\n\\n\\t// dotNL and dotNV are explicitly swapped. This is not a mistake.\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n\\n}\\n\\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\\n// alpha is \\\"roughness squared\\\" in Disney’s reparameterization\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\n\\tfloat a2 = pow2( alpha );\\n\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1\\n\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n\\n}\\n\\n// GGX Distribution, Schlick Fresnel, GGX-Smith Visibility\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\n\\tfloat alpha = pow2( roughness ); // UE4's roughness\\n\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\n\\treturn F * ( G * D );\\n\\n} // validated\\n\\n// Rect Area Light\\n\\n// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines\\n// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt\\n// code: https://github.com/selfshadow/ltc_code/\\n\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\n\\t// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\n\\treturn uv;\\n\\n}\\n\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\n\\t// Real-Time Area Lighting: a Journey from Research to Production (p.102)\\n\\t// An approximation of the form factor of a horizon-clipped rectangle.\\n\\n\\tfloat l = length( f );\\n\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n\\n}\\n\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\n\\tfloat x = dot( v1, v2 );\\n\\n\\tfloat y = abs( x );\\n\\n\\t// rational polynomial approximation to theta / sin( theta ) / 2PI\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n\\n}\\n\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\n\\t// bail if point is on back side of plane of light\\n\\t// assumes ccw winding order of light vertices\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\n\\t// construct orthonormal basis around N\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system\\n\\n\\t// compute transform\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\n\\t// transform rect\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\n\\t// project rect onto sphere\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\n\\t// calculate vector form factor\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\n\\t// adjust for horizon clipping\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\n\\n\\n\\treturn vec3( result );\\n\\n}\\n\\n// End Rect Area Light\\n\\n// ref: https://www.unrealengine.com/blog/physically-based-shading-on-mobile - environmentBRDF for GGX on mobile\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\n\\tvec4 r = roughness * c0 + c1;\\n\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\n\\treturn specularColor * AB.x + AB.y;\\n\\n} // validated\\n\\n\\nfloat G_BlinnPhong_Implicit( ) {\\n\\n\\t// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)\\n\\treturn 0.25;\\n\\n}\\n\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n\\n}\\n\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\n\\t//float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\t//float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\n\\treturn F * ( G * D );\\n\\n} // validated\\n\\n// source: http://simonstechblog.blogspot.ca/2011/12/microfacet-brdf.html\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\n\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";","export default \"#ifdef USE_BUMPMAP\\n\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\n\\t// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\\n\\t// http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\\n\\n\\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\\n\\n\\tvec2 dHdxy_fwd() {\\n\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\n\\t\\treturn vec2( dBx, dBy );\\n\\n\\t}\\n\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\n\\t\\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\\n\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\t\\t// normalized\\n\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\n\\t}\\n\\n#endif\\n\";","export default \"#if NUM_CLIPPING_PLANES > 0\\n\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\\n\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\n\\t}\\n\\t\\t\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\n\\t\\tbool clipped = true;\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\n\\t\\tif ( clipped ) discard;\\n\\t\\n\\t#endif\\n\\n#endif\\n\";","export default \"#if NUM_CLIPPING_PLANES > 0\\n\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n\\n#endif\\n\";","export default \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";","export default \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\\n\";","export default \"#ifdef USE_COLOR\\n\\n\\tdiffuseColor.rgb *= vColor;\\n\\n#endif\";","export default \"#ifdef USE_COLOR\\n\\n\\tvarying vec3 vColor;\\n\\n#endif\\n\";","export default \"#ifdef USE_COLOR\\n\\n\\tvarying vec3 vColor;\\n\\n#endif\";","export default \"#ifdef USE_COLOR\\n\\n\\tvColor.xyz = color.xyz;\\n\\n#endif\";","export default \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\n\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\n// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.\\n// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\n\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\n\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\n\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n\\n}\\n\\n// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n\\n}\\n\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\n\\treturn - distance * planeNormal + point;\\n\\n}\\n\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n\\n}\\n\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n\\n}\\n\\nmat3 transposeMat3( const in mat3 m ) {\\n\\n\\tmat3 tmp;\\n\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\n\\treturn tmp;\\n\\n}\\n\\n// https://en.wikipedia.org/wiki/Relative_luminance\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\n\\treturn dot( weights, color.rgb );\\n\\n}\\n\";","export default \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\n#define cubeUV_textureSize (1024.0)\\n\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\n\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\t// Clamp the value to the max mip level counts. hard coded to 6 mips\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\n\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\t// float powScale = exp2(roughnessLevel + mipLevel);\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\t// float scale =  1.0 / exp2(roughnessLevel + 2.0 + mipLevel);\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\t// float mipOffset = 0.75*(1.0 - 1.0/exp2(mipLevel))/exp2(roughnessLevel);\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\n\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\n\\t// round to nearest mipmap if we are not interpolating.\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\n\\t// Tri linear interpolation.\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\n\\tvec4 result = mix(color10, color20, t);\\n\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n\\n#endif\\n\";","export default \"vec3 transformedNormal = normalMatrix * objectNormal;\\n\\n#ifdef FLIP_SIDED\\n\\n\\ttransformedNormal = - transformedNormal;\\n\\n#endif\\n\";","export default \"#ifdef USE_DISPLACEMENTMAP\\n\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n\\n#endif\\n\";","export default \"#ifdef USE_DISPLACEMENTMAP\\n\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n\\n#endif\\n\";","export default \"#if defined( DITHERING )\\n\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n\\n#endif\\n\";","export default \"#if defined( DITHERING )\\n\\n\\t// based on https://www.shadertoy.com/view/MslGR8\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\t//Calculate grid position\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\n\\t\\t//Shift the individual colors differently, thus making it even harder to see the dithering pattern\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\n\\t\\t//modify shift acording to grid position.\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\n\\t\\t//shift the color by dither_shift\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n\\n#endif\\n\";","export default \"#ifdef USE_EMISSIVEMAP\\n\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n\\n#endif\\n\";","export default \"#ifdef USE_EMISSIVEMAP\\n\\n\\tuniform sampler2D emissiveMap;\\n\\n#endif\\n\";","export default \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";","export default \"// For a discussion of what this is, please read this: http://lousodrome.net/blog/light/2013/05/26/gamma-correct-and-hdr-rendering-in-a-32-bits-buffer/\\n\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\n\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\n\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\n\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n//  return vec4( value.brg, ( 3.0 + 128.0 ) / 256.0 );\\n}\\n\\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\n\\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\n\\n// LogLuv reference: http://graphicrants.blogspot.ca/2009/04/rgbm-color-encoding.html\\n\\n// M matrix, for encoding\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract(Le);\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n\\treturn vResult;\\n}\\n\\n// Inverse M matrix, for decoding\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";","export default \"#ifdef USE_ENVMAP\\n\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\n\\t\\t// Transforming Normal Vectors with the Inverse Transformation\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\n\\t\\t#else\\n\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\n\\t\\t#endif\\n\\n\\t#else\\n\\n\\t\\tvec3 reflectVec = vReflect;\\n\\n\\t#endif\\n\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\n\\t\\tvec2 sampleUV;\\n\\n\\t\\treflectVec = normalize( reflectVec );\\n\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\n\\t\\treflectVec = normalize( reflectVec );\\n\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\n\\t#else\\n\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\n\\t#endif\\n\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n\\n#ifdef USE_ENVMAP\\n\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef USE_ENVMAP\\n\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\n\\t#else\\n\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef USE_ENVMAP\\n\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\n\\t#else\\n\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\n\\t\\t#else\\n\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\n\\t\\t#endif\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef USE_FOG\\n\\n\\t#ifdef FOG_EXP2\\n\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\n\\t#else\\n\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\n\\t#endif\\n\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n\\n#endif\\n\";","export default \"#ifdef USE_FOG\\n\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\n\\t#ifdef FOG_EXP2\\n\\n\\t\\tuniform float fogDensity;\\n\\n\\t#else\\n\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef USE_FOG\\n\\n  varying float fogDepth;\\n\\n#endif\\n\";","export default \"\\n#ifdef USE_FOG\\nfogDepth = -mvPosition.z;\\n#endif\";","export default \"#ifdef TOON\\n\\n\\tuniform sampler2D gradientMap;\\n\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\n\\t\\t// dotNL will be from -1.0 to 1.0\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\n\\t\\t#else\\n\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\n\\t\\t#endif\\n\\n\\n\\t}\\n\\n#endif\\n\";","export default \"#ifdef USE_LIGHTMAP\\n\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity; // factor of PI should not be present; included here to prevent breakage\\n\\n#endif\\n\";","export default \"#ifdef USE_LIGHTMAP\\n\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n\\n#endif\";","export default \"vec3 diffuse = vec3( 1.0 );\\n\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\n\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\n\\nvLightFront = vec3( 0.0 );\\n\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\n\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n\\n#if NUM_POINT_LIGHTS > 0\\n\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\n\\t\\t#endif\\n\\n\\t}\\n\\n#endif\\n\\n#if NUM_SPOT_LIGHTS > 0\\n\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\n\\t\\t#endif\\n\\t}\\n\\n#endif\\n\\n\\n\\n#if NUM_DIR_LIGHTS > 0\\n\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\n\\t\\t#endif\\n\\n\\t}\\n\\n#endif\\n\\n#if NUM_HEMI_LIGHTS > 0\\n\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\n\\t\\t#endif\\n\\n\\t}\\n\\n#endif\\n\";","export default \"uniform vec3 ambientLightColor;\\n\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\n\\tvec3 irradiance = ambientLightColor;\\n\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\n\\t\\tirradiance *= PI;\\n\\n\\t#endif\\n\\n\\treturn irradiance;\\n\\n}\\n\\n#if NUM_DIR_LIGHTS > 0\\n\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\n\\t}\\n\\n#endif\\n\\n\\n#if NUM_POINT_LIGHTS > 0\\n\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\n\\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\n\\t\\tfloat lightDistance = length( lVector );\\n\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\n\\t}\\n\\n#endif\\n\\n\\n#if NUM_SPOT_LIGHTS > 0\\n\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\n\\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\n\\t\\t}\\n\\t}\\n\\n#endif\\n\\n\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\n\\t// Pre-computed values of LinearTransformedCosine approximation of BRDF\\n\\t// BRDF approximation Texture is 64x64\\n\\tuniform sampler2D ltc_1; // RGBA Float\\n\\tuniform sampler2D ltc_2; // RGBA Float\\n\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n\\n#endif\\n\\n\\n#if NUM_HEMI_LIGHTS > 0\\n\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\n\\t\\t\\tirradiance *= PI;\\n\\n\\t\\t#endif\\n\\n\\t\\treturn irradiance;\\n\\n\\t}\\n\\n#endif\\n\\n\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\n\\t\\t\\t// TODO: replace with properly filtered cubemaps and access the irradiance LOD level, be it the last LOD level\\n\\t\\t\\t// of a specular cubemap, or just the default level of a specially created irradiance cubemap.\\n\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\n\\t\\t\\t#else\\n\\n\\t\\t\\t\\t// force the bias high to get the last LOD level as it is the most blurred.\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\n\\t\\t#else\\n\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\n\\t\\t#endif\\n\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\n\\t}\\n\\n\\t// taken from here: http://casual-effects.blogspot.ca/2011/08/plausible-environment-lighting-in-two.html\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\n\\t\\t//float envMapWidth = pow( 2.0, maxMIPLevelScalar );\\n\\t\\t//float desiredMIPLevel = log2( envMapWidth * sqrt( 3.0 ) ) - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\n\\t\\t// clamp to allowable LOD ranges.\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\n\\t}\\n\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\n\\t\\t#else\\n\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\n\\t\\t#endif\\n\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\n\\t\\t\\t#else\\n\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\n\\t\\t\\t#else\\n\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\n\\t\\t\\t#else\\n\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\n\\t\\t#endif\\n\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\n\\t}\\n\\n#endif\\n\";","export default \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";","export default \"varying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n\\nstruct BlinnPhongMaterial {\\n\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n\\n};\\n\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\n\\t#ifdef TOON\\n\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\n\\t#else\\n\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\n\\t#endif\\n\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\n\\t\\tirradiance *= PI; // punctual light\\n\\n\\t#endif\\n\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n\\n}\\n\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\n}\\n\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";","export default \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat ); // Burley clearcoat model\\n\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";","export default \"struct PhysicalMaterial {\\n\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n\\n};\\n\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\n\\n// Clear coat directional hemishperical reflectance (this approximation should be improved)\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n\\n}\\n\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight; // counterclockwise\\n\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\n\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\n\\t\\t// LTC Fresnel Approximation by Stephen Hill\\n\\t\\t// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\n\\t}\\n\\n#endif\\n\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\n\\t\\tirradiance *= PI; // punctual light\\n\\n\\t#endif\\n\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\n\\t#ifndef STANDARD\\n\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\n\\t#endif\\n\\n}\\n\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\n}\\n\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\n\\t#ifndef STANDARD\\n\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\n\\t#endif\\n\\n}\\n\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\n\\n// ref: https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n\\n}\\n\";","export default \"\\n\\nGeometricContext geometry;\\n\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\n\\nIncidentLight directLight;\\n\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\n\\tPointLight pointLight;\\n\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\n\\t\\tpointLight = pointLights[ i ];\\n\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\n\\t}\\n\\n#endif\\n\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\n\\tSpotLight spotLight;\\n\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\n\\t\\tspotLight = spotLights[ i ];\\n\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\n\\t}\\n\\n#endif\\n\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\n\\tDirectionalLight directionalLight;\\n\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\n\\t}\\n\\n#endif\\n\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\n\\tRectAreaLight rectAreaLight;\\n\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\n\\t}\\n\\n#endif\\n\\n#if defined( RE_IndirectDiffuse )\\n\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\n\\t#ifdef USE_LIGHTMAP\\n\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\n\\t\\t\\tlightMapIrradiance *= PI; // factor of PI should not be present; included here to prevent breakage\\n\\n\\t\\t#endif\\n\\n\\t\\tirradiance += lightMapIrradiance;\\n\\n\\t#endif\\n\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\n\\t\\t}\\n\\n\\t#endif\\n\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\n\\t\\t// TODO, replace 8 with the real maxMIPLevel\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\n\\t#endif\\n\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n\\n#endif\\n\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\n\\t// TODO, replace 8 with the real maxMIPLevel\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n\\n#endif\\n\";","export default \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\n\\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\\n\\n#endif\";","export default \"#ifdef USE_LOGDEPTHBUF\\n\\n\\tuniform float logDepthBufFC;\\n\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\\t\\tvarying float vFragDepth;\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef USE_LOGDEPTHBUF\\n\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\\t\\tvarying float vFragDepth;\\n\\n\\t#endif\\n\\n\\tuniform float logDepthBufFC;\\n\\n#endif\";","export default \"#ifdef USE_LOGDEPTHBUF\\n\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\n\\t#else\\n\\n\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\n\\t\\tgl_Position.z *= gl_Position.w;\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef USE_MAP\\n\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n\\n#endif\\n\";","export default \"#ifdef USE_MAP\\n\\n\\tuniform sampler2D map;\\n\\n#endif\\n\";","export default \"#ifdef USE_MAP\\n\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n\\n#endif\\n\";","export default \"#ifdef USE_MAP\\n\\n\\tuniform mat3 uvTransform;\\n\\tuniform sampler2D map;\\n\\n#endif\\n\";","export default \"float metalnessFactor = metalness;\\n\\n#ifdef USE_METALNESSMAP\\n\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\n\\t// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\n\\tmetalnessFactor *= texelMetalness.b;\\n\\n#endif\\n\";","export default \"#ifdef USE_METALNESSMAP\\n\\n\\tuniform sampler2D metalnessMap;\\n\\n#endif\";","export default \"#ifdef USE_MORPHNORMALS\\n\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n\\n#endif\\n\";","export default \"#ifdef USE_MORPHTARGETS\\n\\n\\t#ifndef USE_MORPHNORMALS\\n\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\n\\t#else\\n\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\n\\t#endif\\n\\n#endif\";","export default \"#ifdef USE_MORPHTARGETS\\n\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\n\\t#ifndef USE_MORPHNORMALS\\n\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef FLAT_SHADED\\n\\n\\t// Workaround for Adreno/Nexus5 not able able to do dFdx( vViewPosition ) ...\\n\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n\\n#else\\n\\n\\tvec3 normal = normalize( vNormal );\\n\\n\\t#ifdef DOUBLE_SIDED\\n\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\n\\t#endif\\n\\n#endif\\n\\n#ifdef USE_NORMALMAP\\n\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n\\n#elif defined( USE_BUMPMAP )\\n\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n\\n#endif\\n\";","export default \"#ifdef USE_NORMALMAP\\n\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\n\\t// Per-Pixel Tangent Space Normal Mapping\\n\\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\\n\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\n\\t\\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\\n\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\n\\t}\\n\\n#endif\\n\";","export default \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\n\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\n\\nconst float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)\\nconst float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)\\n\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\n\\nconst float ShiftRight8 = 1. / 256.;\\n\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8; // tidy overflow\\n\\treturn r * PackUpscale;\\n}\\n\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\n\\n// NOTE: viewZ/eyeZ is < 0 when in front of the camera per OpenGL conventions\\n\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\n\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";","export default \"#ifdef PREMULTIPLIED_ALPHA\\n\\n\\t// Get get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n\\n#endif\\n\";","export default \"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n\\ngl_Position = projectionMatrix * mvPosition;\\n\";","export default \"float roughnessFactor = roughness;\\n\\n#ifdef USE_ROUGHNESSMAP\\n\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\n\\t// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\n\\troughnessFactor *= texelRoughness.g;\\n\\n#endif\\n\";","export default \"#ifdef USE_ROUGHNESSMAP\\n\\n\\tuniform sampler2D roughnessMap;\\n\\n#endif\";","export default \"#ifdef USE_SHADOWMAP\\n\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\n\\t#endif\\n\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\n\\t#endif\\n\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\n\\t#endif\\n\\n\\t\\n\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\n\\t}\\n\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\n\\t\\treturn c;\\n\\n\\t}\\n\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\n\\t\\tfloat shadow = 1.0;\\n\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\n\\t\\t// if ( something && something ) breaks ATI OpenGL shader compiler\\n\\t\\t// if ( all( something, something ) ) using this instead\\n\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\n\\t\\tif ( frustumTest ) {\\n\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\n\\t\\t#else // no percentage-closer filtering:\\n\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\n\\t\\t#endif\\n\\n\\t\\t}\\n\\n\\t\\treturn shadow;\\n\\n\\t}\\n\\n\\t// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\\n\\t// vector suitable for 2D texture mapping. This code uses the following layout for the\\n\\t// 2D texture:\\n\\t//\\n\\t// xzXZ\\n\\t//  y Y\\n\\t//\\n\\t// Y - Positive y direction\\n\\t// y - Negative y direction\\n\\t// X - Positive x direction\\n\\t// x - Negative x direction\\n\\t// Z - Positive z direction\\n\\t// z - Negative z direction\\n\\t//\\n\\t// Source and test bed:\\n\\t// https://gist.github.com/tschw/da10c43c467ce8afd0c4\\n\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\n\\t\\t// Number of texels to avoid at the edge of each square\\n\\n\\t\\tvec3 absV = abs( v );\\n\\n\\t\\t// Intersect unit cube\\n\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\n\\t\\t// Apply scale to avoid seams\\n\\n\\t\\t// two texels less per square (one texel will do for NEAREST)\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\n\\t\\t// Unwrap\\n\\n\\t\\t// space: -1 ... 1 range for each square\\n\\t\\t//\\n\\t\\t// #X##\\t\\tdim    := ( 4 , 2 )\\n\\t\\t//  # #\\t\\tcenter := ( 1 , 1 )\\n\\n\\t\\tvec2 planar = v.xy;\\n\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\n\\t\\t}\\n\\n\\t\\t// Transform to UV space\\n\\n\\t\\t// scale := 0.5 / dim\\n\\t\\t// translate := ( center + 0.5 ) / dim\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\n\\t}\\n\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\n\\t\\t// for point lights, the uniform @vShadowCoord is re-purposed to hold\\n\\t\\t// the vector from the light to the world-space position of the fragment.\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\n\\t\\t// dp = normalized distance from light to fragment position\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear ); // need to clamp?\\n\\t\\tdp += shadowBias;\\n\\n\\t\\t// bd3D = base direction 3D\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\n\\t\\t#else // no percentage-closer filtering\\n\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\n\\t\\t#endif\\n\\n\\t}\\n\\n#endif\\n\";","export default \"#ifdef USE_SHADOWMAP\\n\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\n\\t#endif\\n\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\n\\t#endif\\n\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\n\\t#endif\\n\\n\\t\\n\\n#endif\\n\";","export default \"#ifdef USE_SHADOWMAP\\n\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\n\\t}\\n\\n\\t#endif\\n\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\n\\t}\\n\\n\\t#endif\\n\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\n\\t}\\n\\n\\t#endif\\n\\n\\t\\n\\n#endif\\n\";","export default \"float getShadowMask() {\\n\\n\\tfloat shadow = 1.0;\\n\\n\\t#ifdef USE_SHADOWMAP\\n\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\n\\tDirectionalLight directionalLight;\\n\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\n\\t}\\n\\n\\t#endif\\n\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\n\\tSpotLight spotLight;\\n\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\n\\t}\\n\\n\\t#endif\\n\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\n\\tPointLight pointLight;\\n\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\n\\t}\\n\\n\\t#endif\\n\\n\\t\\n\\n\\t#endif\\n\\n\\treturn shadow;\\n\\n}\\n\";","export default \"#ifdef USE_SKINNING\\n\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n\\n#endif\";","export default \"#ifdef USE_SKINNING\\n\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\n\\t#ifdef BONE_TEXTURE\\n\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\n\\t\\t\\treturn bone;\\n\\n\\t\\t}\\n\\n\\t#else\\n\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\n\\t\\t}\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef USE_SKINNING\\n\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n\\n#endif\\n\";","export default \"#ifdef USE_SKINNING\\n\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\n#endif\\n\";","export default \"float specularStrength;\\n\\n#ifdef USE_SPECULARMAP\\n\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n\\n#else\\n\\n\\tspecularStrength = 1.0;\\n\\n#endif\";","export default \"#ifdef USE_SPECULARMAP\\n\\n\\tuniform sampler2D specularMap;\\n\\n#endif\";","export default \"#if defined( TONE_MAPPING )\\n\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n\\n#endif\\n\";","export default \"#ifndef saturate\\n\\t#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\n\\n// exposure only\\nvec3 LinearToneMapping( vec3 color ) {\\n\\n\\treturn toneMappingExposure * color;\\n\\n}\\n\\n// source: https://www.cs.utah.edu/~reinhard/cdrom/\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n\\n}\\n\\n// source: http://filmicgames.com/archives/75\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\n\\t// John Hable's filmic operator from Uncharted 2 video game\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n\\n}\\n\\n// source: http://filmicgames.com/archives/75\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\n\\t// optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n\\n}\\n\";","export default \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\n\\tvarying vec2 vUv2;\\n\\n#endif\";","export default \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\n#endif\";","export default \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\n\\tvUv2 = uv2;\\n\\n#endif\";","export default \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\n\\tvarying vec2 vUv;\\n\\n#endif\";","export default \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n\\n#endif\\n\";","export default \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\n#endif\";","export default \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\n#endif\\n\";","import { Color } from \"../../math/Color\";\nimport { Vector3 } from \"../../math/Vector3\";\nimport { ShaderChunk } from \"./ShaderChunk\";\nimport { UniformsLib } from \"./UniformsLib\";\nimport { UniformsUtils } from \"./UniformsUtils\";\nconst ShaderLib = {\n    basic: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.specularmap,\n            UniformsLib.envmap,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.fog,\n        ]),\n        vertexShader: ShaderChunk.meshbasic_vert,\n        fragmentShader: ShaderChunk.meshbasic_frag,\n    },\n    lambert: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.specularmap,\n            UniformsLib.envmap,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.emissivemap,\n            UniformsLib.fog,\n            UniformsLib.lights,\n            {\n                emissive: { value: new Color(0x000000) },\n            },\n        ]),\n        vertexShader: ShaderChunk.meshlambert_vert,\n        fragmentShader: ShaderChunk.meshlambert_frag,\n    },\n    phong: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.specularmap,\n            UniformsLib.envmap,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.emissivemap,\n            UniformsLib.bumpmap,\n            UniformsLib.normalmap,\n            UniformsLib.displacementmap,\n            UniformsLib.gradientmap,\n            UniformsLib.fog,\n            UniformsLib.lights,\n            {\n                emissive: { value: new Color(0x000000) },\n                specular: { value: new Color(0x111111) },\n                shininess: { value: 30 },\n            },\n        ]),\n        vertexShader: ShaderChunk.meshphong_vert,\n        fragmentShader: ShaderChunk.meshphong_frag,\n    },\n    standard: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.envmap,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.emissivemap,\n            UniformsLib.bumpmap,\n            UniformsLib.normalmap,\n            UniformsLib.displacementmap,\n            UniformsLib.roughnessmap,\n            UniformsLib.metalnessmap,\n            UniformsLib.fog,\n            UniformsLib.lights,\n            {\n                emissive: { value: new Color(0x000000) },\n                roughness: { value: 0.5 },\n                metalness: { value: 0.5 },\n                envMapIntensity: { value: 1 },\n            },\n        ]),\n        vertexShader: ShaderChunk.meshphysical_vert,\n        fragmentShader: ShaderChunk.meshphysical_frag,\n    },\n    points: {\n        uniforms: UniformsUtils.merge([UniformsLib.points, UniformsLib.fog]),\n        vertexShader: ShaderChunk.points_vert,\n        fragmentShader: ShaderChunk.points_frag,\n    },\n    dashed: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.fog,\n            {\n                scale: { value: 1 },\n                dashSize: { value: 1 },\n                totalSize: { value: 2 },\n            },\n        ]),\n        vertexShader: ShaderChunk.linedashed_vert,\n        fragmentShader: ShaderChunk.linedashed_frag,\n    },\n    depth: {\n        uniforms: UniformsUtils.merge([UniformsLib.common, UniformsLib.displacementmap]),\n        vertexShader: ShaderChunk.depth_vert,\n        fragmentShader: ShaderChunk.depth_frag,\n    },\n    normal: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.bumpmap,\n            UniformsLib.normalmap,\n            UniformsLib.displacementmap,\n            {\n                opacity: { value: 1.0 },\n            },\n        ]),\n        vertexShader: ShaderChunk.normal_vert,\n        fragmentShader: ShaderChunk.normal_frag,\n    },\n    /* -------------------------------------------------------------------------\n     //\tCube map shader\n     ------------------------------------------------------------------------- */\n    cube: {\n        uniforms: {\n            tCube: { value: null },\n            tFlip: { value: -1 },\n            opacity: { value: 1.0 },\n        },\n        vertexShader: ShaderChunk.cube_vert,\n        fragmentShader: ShaderChunk.cube_frag,\n    },\n    equirect: {\n        uniforms: {\n            tEquirect: { value: null },\n        },\n        vertexShader: ShaderChunk.equirect_vert,\n        fragmentShader: ShaderChunk.equirect_frag,\n    },\n    distanceRGBA: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.displacementmap,\n            {\n                referencePosition: { value: new Vector3() },\n                nearDistance: { value: 1 },\n                farDistance: { value: 1000 },\n            },\n        ]),\n        vertexShader: ShaderChunk.distanceRGBA_vert,\n        fragmentShader: ShaderChunk.distanceRGBA_frag,\n    },\n    shadow: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.lights,\n            UniformsLib.fog,\n            {\n                color: { value: new Color(0x00000) },\n                opacity: { value: 1.0 },\n            },\n        ]),\n        vertexShader: ShaderChunk.shadow_vert,\n        fragmentShader: ShaderChunk.shadow_frag,\n    },\n};\nShaderLib.physical = {\n    uniforms: UniformsUtils.merge([\n        ShaderLib.standard.uniforms,\n        {\n            clearCoat: { value: 0 },\n            clearCoatRoughness: { value: 0 },\n        },\n    ]),\n    vertexShader: ShaderChunk.meshphysical_vert,\n    fragmentShader: ShaderChunk.meshphysical_frag,\n};\nexport { ShaderLib };\n","export default \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\n\\nvarying vec3 vWorldPosition;\\n\\nvoid main() {\\n\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n\\n}\\n\";","export default \"varying vec3 vWorldPosition;\\n\\n#include <common>\\n\\nvoid main() {\\n\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\n\\tgl_Position.z = gl_Position.w; // set z to camera.far\\n\\n}\\n\";","export default \"#if DEPTH_PACKING == 3200\\n\\n\\tuniform float opacity;\\n\\n#endif\\n\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\n\\t#if DEPTH_PACKING == 3200\\n\\n\\t\\tdiffuseColor.a = opacity;\\n\\n\\t#endif\\n\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\n\\t#include <logdepthbuf_fragment>\\n\\n\\t#if DEPTH_PACKING == 3200\\n\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\n\\t#elif DEPTH_PACKING == 3201\\n\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\n\\t#endif\\n\\n}\\n\";","export default \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\n\\t#include <skinbase_vertex>\\n\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\n\\t#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n}\\n\";","export default \"#define DISTANCE\\n\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main () {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist ); // clamp to [ 0, 1 ]\\n\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n\\n}\\n\";","export default \"#define DISTANCE\\n\\nvarying vec3 vWorldPosition;\\n\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\n\\t#include <skinbase_vertex>\\n\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\n\\t#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\tvWorldPosition = worldPosition.xyz;\\n\\n}\\n\";","export default \"uniform sampler2D tEquirect;\\n\\nvarying vec3 vWorldPosition;\\n\\n#include <common>\\n\\nvoid main() {\\n\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\n\\tvec2 sampleUV;\\n\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\n}\\n\";","export default \"varying vec3 vWorldPosition;\\n\\n#include <common>\\n\\nvoid main() {\\n\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\n}\\n\";","export default \"uniform vec3 diffuse;\\nuniform float opacity;\\n\\nuniform float dashSize;\\nuniform float totalSize;\\n\\nvarying float vLineDistance;\\n\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\n\\t\\tdiscard;\\n\\n\\t}\\n\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\n\\toutgoingLight = diffuseColor.rgb; // simple shader\\n\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\n}\\n\";","export default \"uniform float scale;\\nattribute float lineDistance;\\n\\nvarying float vLineDistance;\\n\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <color_vertex>\\n\\n\\tvLineDistance = scale * lineDistance;\\n\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\";","export default \"uniform vec3 diffuse;\\nuniform float opacity;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\n\\t// accumulation (baked indirect lighting only)\\n\\t#ifdef USE_LIGHTMAP\\n\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\n\\t#else\\n\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\n\\t#endif\\n\\n\\t// modulation\\n\\t#include <aomap_fragment>\\n\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\n\\t#include <envmap_fragment>\\n\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\n}\\n\";","export default \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\n\\t#ifdef USE_ENVMAP\\n\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\n\\t#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\";","export default \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n\\nvarying vec3 vLightFront;\\n\\n#ifdef DOUBLE_SIDED\\n\\n\\tvarying vec3 vLightBack;\\n\\n#endif\\n\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\n\\t// accumulation\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\n\\t#include <lightmap_fragment>\\n\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\n\\t#ifdef DOUBLE_SIDED\\n\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\n\\t#else\\n\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\n\\t#endif\\n\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\n\\t// modulation\\n\\t#include <aomap_fragment>\\n\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\n\\t#include <envmap_fragment>\\n\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n\\n}\\n\";","export default \"#define LAMBERT\\n\\nvarying vec3 vLightFront;\\n\\n#ifdef DOUBLE_SIDED\\n\\n\\tvarying vec3 vLightBack;\\n\\n#endif\\n\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\";","export default \"#define PHONG\\n\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\n\\t// accumulation\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\n\\t// modulation\\n\\t#include <aomap_fragment>\\n\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\n\\t#include <envmap_fragment>\\n\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n\\n}\\n\";","export default \"#define PHONG\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\n\\n\\tvNormal = normalize( transformedNormal );\\n\\n#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\tvViewPosition = - mvPosition.xyz;\\n\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\";","export default \"#define PHYSICAL\\n\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\n\\t// accumulation\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\n\\t// modulation\\n\\t#include <aomap_fragment>\\n\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n\\n}\\n\";","export default \"#define PHYSICAL\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\n\\n\\tvNormal = normalize( transformedNormal );\\n\\n#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\tvViewPosition = - mvPosition.xyz;\\n\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\";","export default \"#define NORMAL\\n\\nuniform float opacity;\\n\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\n\\tvarying vec3 vViewPosition;\\n\\n#endif\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment>\\n\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n\\n}\\n\";","export default \"#define NORMAL\\n\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\n\\tvarying vec3 vViewPosition;\\n\\n#endif\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\n\\n\\tvNormal = normalize( transformedNormal );\\n\\n#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\n\\tvViewPosition = - mvPosition.xyz;\\n\\n#endif\\n\\n}\\n\";","export default \"uniform vec3 diffuse;\\nuniform float opacity;\\n\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\n\\toutgoingLight = diffuseColor.rgb;\\n\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\n}\\n\";","export default \"uniform float size;\\nuniform float scale;\\n\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\";","export default \"uniform vec3 color;\\nuniform float opacity;\\n\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n\\nvoid main() {\\n\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\n\\t#include <fog_fragment>\\n\\n}\\n\";","export default \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\";","import { Color } from \"../../math/Color\";\nimport { Vector2 } from \"../../math/Vector2\";\nimport { Matrix3 } from \"../../math/Matrix3\";\n/**\n * Uniforms library for shared webgl shaders\n */\nconst UniformsLib = {\n    common: {\n        diffuse: { value: new Color(0xeeeeee) },\n        opacity: { value: 1.0 },\n        map: { value: null },\n        uvTransform: { value: new Matrix3() },\n        alphaMap: { value: null },\n    },\n    specularmap: {\n        specularMap: { value: null },\n    },\n    envmap: {\n        envMap: { value: null },\n        flipEnvMap: { value: -1 },\n        reflectivity: { value: 1.0 },\n        refractionRatio: { value: 0.98 },\n    },\n    aomap: {\n        aoMap: { value: null },\n        aoMapIntensity: { value: 1 },\n    },\n    lightmap: {\n        lightMap: { value: null },\n        lightMapIntensity: { value: 1 },\n    },\n    emissivemap: {\n        emissiveMap: { value: null },\n    },\n    bumpmap: {\n        bumpMap: { value: null },\n        bumpScale: { value: 1 },\n    },\n    normalmap: {\n        normalMap: { value: null },\n        normalScale: { value: new Vector2(1, 1) },\n    },\n    displacementmap: {\n        displacementMap: { value: null },\n        displacementScale: { value: 1 },\n        displacementBias: { value: 0 },\n    },\n    roughnessmap: {\n        roughnessMap: { value: null },\n    },\n    metalnessmap: {\n        metalnessMap: { value: null },\n    },\n    gradientmap: {\n        gradientMap: { value: null },\n    },\n    fog: {\n        fogDensity: { value: 0.00025 },\n        fogNear: { value: 1 },\n        fogFar: { value: 2000 },\n        fogColor: { value: new Color(0xffffff) },\n    },\n    lights: {\n        ambientLightColor: { value: [] },\n        directionalLights: {\n            value: [],\n            properties: {\n                direction: {},\n                color: {},\n                shadow: {},\n                shadowBias: {},\n                shadowRadius: {},\n                shadowMapSize: {},\n            },\n        },\n        directionalShadowMap: { value: [] },\n        directionalShadowMatrix: { value: [] },\n        spotLights: {\n            value: [],\n            properties: {\n                color: {},\n                position: {},\n                direction: {},\n                distance: {},\n                coneCos: {},\n                penumbraCos: {},\n                decay: {},\n                shadow: {},\n                shadowBias: {},\n                shadowRadius: {},\n                shadowMapSize: {},\n            },\n        },\n        spotShadowMap: { value: [] },\n        spotShadowMatrix: { value: [] },\n        pointLights: {\n            value: [],\n            properties: {\n                color: {},\n                position: {},\n                decay: {},\n                distance: {},\n                shadow: {},\n                shadowBias: {},\n                shadowRadius: {},\n                shadowMapSize: {},\n                shadowCameraNear: {},\n                shadowCameraFar: {},\n            },\n        },\n        pointShadowMap: { value: [] },\n        pointShadowMatrix: { value: [] },\n        hemisphereLights: {\n            value: [],\n            properties: {\n                direction: {},\n                skyColor: {},\n                groundColor: {},\n            },\n        },\n        // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n        rectAreaLights: {\n            value: [],\n            properties: {\n                color: {},\n                position: {},\n                width: {},\n                height: {},\n            },\n        },\n    },\n    points: {\n        diffuse: { value: new Color(0xeeeeee) },\n        opacity: { value: 1.0 },\n        size: { value: 1.0 },\n        scale: { value: 1.0 },\n        map: { value: null },\n        uvTransform: { value: new Matrix3() },\n    },\n};\nexport { UniformsLib };\n","import { Color } from \"../../math/Color\";\nimport { Matrix3 } from \"../../math/Matrix3\";\nimport { Matrix4 } from \"../../math/Matrix4\";\nimport { Vector2 } from \"../../math/Vector2\";\nimport { Vector3 } from \"../../math/Vector3\";\nimport { Vector4 } from \"../../math/Vector4\";\nimport { Texture } from \"../../textures/Texture\";\nexport class UniformsUtils {\n    static merge(uniforms) {\n        const merged = {};\n        for (let u = 0; u < uniforms.length; u++) {\n            const tmp = this.clone(uniforms[u]);\n            for (const p in tmp) {\n                if (tmp.hasOwnProperty(p)) {\n                    merged[p] = tmp[p];\n                }\n            }\n        }\n        return merged;\n    }\n    static clone(uniformsSrc) {\n        const uniformsDst = {};\n        for (const u in uniformsSrc) {\n            if (!uniformsSrc.hasOwnProperty(u))\n                continue;\n            uniformsDst[u] = {};\n            for (const p in uniformsSrc[u]) {\n                if (!uniformsSrc[u].hasOwnProperty(p))\n                    continue;\n                const parameterSrc = uniformsSrc[u][p];\n                if (parameterSrc &&\n                    (parameterSrc instanceof Color ||\n                        parameterSrc instanceof Matrix3 ||\n                        parameterSrc instanceof Matrix4 ||\n                        parameterSrc instanceof Vector2 ||\n                        parameterSrc instanceof Vector3 ||\n                        parameterSrc instanceof Vector4 ||\n                        parameterSrc instanceof Texture)) {\n                    uniformsDst[u][p] = parameterSrc.clone();\n                }\n                else if (Array.isArray(parameterSrc)) {\n                    uniformsDst[u][p] = parameterSrc.slice();\n                }\n                else {\n                    uniformsDst[u][p] = parameterSrc;\n                }\n            }\n        }\n        return uniformsDst;\n    }\n}\n","export class WebGLAttributes {\n    constructor(context) {\n        this.buffers = {};\n        this.context = context;\n    }\n    createBuffer(attribute, bufferType) {\n        const gl = this.context;\n        const array = attribute.array;\n        const usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n        const buffer = gl.createBuffer();\n        gl.bindBuffer(bufferType, buffer);\n        gl.bufferData(bufferType, array, usage);\n        // attribute.onUploadCallback();\n        let type = gl.FLOAT;\n        if (array instanceof Float32Array) {\n            type = gl.FLOAT;\n        }\n        else if (array instanceof Float64Array) {\n            console.warn(`THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.`);\n        }\n        else if (array instanceof Uint16Array) {\n            type = gl.UNSIGNED_SHORT;\n        }\n        else if (array instanceof Int16Array) {\n            type = gl.SHORT;\n        }\n        else if (array instanceof Uint32Array) {\n            type = gl.UNSIGNED_INT;\n        }\n        else if (array instanceof Int32Array) {\n            type = gl.INT;\n        }\n        else if (array instanceof Int8Array) {\n            type = gl.BYTE;\n        }\n        else if (array instanceof Uint8Array) {\n            type = gl.UNSIGNED_BYTE;\n        }\n        return {\n            buffer: buffer,\n            type: type,\n            bytesPerElement: array.BYTES_PER_ELEMENT,\n            version: attribute.version,\n        };\n    }\n    updateBuffer(buffer, attribute, bufferType) {\n        const gl = this.context;\n        const array = attribute.array;\n        const updateRange = attribute.updateRange;\n        gl.bindBuffer(bufferType, buffer);\n        if (attribute.dynamic === false) {\n            gl.bufferData(bufferType, array, gl.STATIC_DRAW);\n        }\n        else if (updateRange.count === -1) {\n            // Not using update ranges\n            gl.bufferSubData(bufferType, 0, array);\n        }\n        else if (updateRange.count === 0) {\n            console.error(`THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.`);\n        }\n        else {\n            gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));\n            updateRange.count = -1; // reset range\n        }\n        return this;\n    }\n    get(attribute) {\n        return this.buffers[attribute.uuid];\n    }\n    remove(attribute) {\n        const data = this.buffers[attribute.uuid];\n        if (data) {\n            const gl = this.context;\n            gl.deleteBuffer(data.buffer);\n            delete this.buffers[attribute.uuid];\n        }\n        return this;\n    }\n    update(attribute, bufferType) {\n        const data = this.buffers[attribute.uuid];\n        if (data === undefined) {\n            this.buffers[attribute.uuid] = this.createBuffer(attribute, bufferType);\n        }\n        else if (data.version < attribute.version) {\n            this.updateBuffer(data.buffer, attribute, bufferType);\n            data.version = attribute.version;\n        }\n        return this;\n    }\n}\n","import { BackSide } from \"../../constants\";\nimport { Color } from \"../../math/Color\";\nimport { Texture } from \"../../textures/Texture\";\nimport { CubeTexture } from \"../../textures/CubeTexture\";\nimport { Mesh } from \"../../objects/Mesh\";\nimport { BoxBufferGeometry } from \"../../geometries/Geometries\";\nimport { ShaderMaterial, MeshBasicMaterial } from \"../../materials/Materials\";\nimport { ShaderLib } from \"../shaders/ShaderLib\";\nimport { OrthographicCamera } from \"../../cameras/OrthographicCamera\";\nimport { PlaneBufferGeometry } from \"../../geometries/PlaneGeometry\";\nexport class WebGLBackground {\n    constructor(renderer, state, geometries, premultipliedAlpha) {\n        this.clearColor = new Color().setHex(0x000000);\n        this.clearAlpha = 0;\n        this.renderer = renderer;\n        this.state = state;\n        this.geometries = geometries;\n        this.premultipliedAlpha = premultipliedAlpha;\n    }\n    getClearColor() {\n        return this.clearColor;\n    }\n    setClearColor(color, alpha) {\n        this.clearColor.copy(color);\n        this.clearAlpha = alpha !== undefined ? alpha : 1;\n        this.setClear(this.clearColor, this.clearAlpha);\n    }\n    getClearAlpha() {\n        return this.clearAlpha;\n    }\n    setClearAlpha(alpha) {\n        this.clearAlpha = alpha;\n        this.setClear(this.clearColor, this.clearAlpha);\n    }\n    setClear(color, alpha) {\n        this.state.buffers.color.setClear(color.r, color.g, color.b, alpha, this.premultipliedAlpha);\n    }\n    render(renderList, scene, camera, forceClear) {\n        const background = scene.background;\n        const renderer = this.renderer;\n        if (background === null) {\n            this.setClear(this.clearColor, this.clearAlpha);\n        }\n        else if (background && background instanceof Color) {\n            this.setClear(background, 1);\n            forceClear = true;\n        }\n        if (this.renderer.autoClear || forceClear) {\n            renderer.clear(this.renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n        }\n        if (background && background instanceof CubeTexture) {\n            if (this.boxMesh === undefined) {\n                this.boxMesh = new Mesh(new BoxBufferGeometry(1, 1, 1), new ShaderMaterial({\n                    uniforms: ShaderLib.cube.uniforms,\n                    vertexShader: ShaderLib.cube.vertexShader,\n                    fragmentShader: ShaderLib.cube.fragmentShader,\n                    side: BackSide,\n                    depthTest: true,\n                    depthWrite: false,\n                    fog: false,\n                }));\n                this.boxMesh.geometry.removeAttribute(\"normal\");\n                this.boxMesh.geometry.removeAttribute(\"uv\");\n                this.boxMesh.onBeforeRender = function (renderer, scene, camera) {\n                    this.matrixWorld.copyPosition(camera.matrixWorld);\n                };\n                this.geometries.update(this.boxMesh.geometry);\n            }\n            this.boxMesh.material.uniforms.tCube.value = background;\n            renderList.push(this.boxMesh, this.boxMesh.geometry, this.boxMesh.material, 0, null);\n        }\n        else if (background && background instanceof Texture) {\n            if (this.planeCamera === undefined) {\n                this.planeCamera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n                this.planeMesh = new Mesh(new PlaneBufferGeometry(2, 2), new MeshBasicMaterial({ depthTest: false, depthWrite: false, fog: false }));\n                this.geometries.update(this.planeMesh.geometry);\n            }\n            this.planeMesh.material.map = background;\n            // TODO Push this to renderList\n            renderer.renderBufferDirect(this.planeCamera, null, this.planeMesh.geometry, this.planeMesh.material, this.planeMesh, null);\n        }\n    }\n}\n","import { InterleavedBufferAttribute } from \"../../core/InterleavedBufferAttribute\";\nexport class WebGLBufferRenderer {\n    constructor(context, extensions, infoRender) {\n        this.mode = 0;\n        this.context = context;\n        this.extensions = extensions;\n        this.infoRender = infoRender;\n    }\n    setMode(value) {\n        this.mode = value;\n        return this;\n    }\n    render(start, count) {\n        const gl = this.context;\n        gl.drawArrays(this.mode, start, count);\n        this.infoRender.calls++;\n        this.infoRender.vertices += count;\n        if (this.mode === gl.TRIANGLES) {\n            this.infoRender.faces += count / 3;\n        }\n        else if (this.mode === gl.POINTS) {\n            this.infoRender.points += count;\n        }\n        return this;\n    }\n    renderInstances(geometry, start, count) {\n        const gl = this.context;\n        const extension = this.extensions.get(\"ANGLE_instanced_arrays\");\n        if (extension === null) {\n            console.error(`THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.`);\n            return this;\n        }\n        const position = geometry.attributes.position;\n        if (position instanceof InterleavedBufferAttribute) {\n            count = position.count;\n            extension.drawArraysInstancedANGLE(this.mode, 0, count, geometry.maxInstancedCount);\n        }\n        else {\n            extension.drawArraysInstancedANGLE(this.mode, start, count, geometry.maxInstancedCount);\n        }\n        this.infoRender.calls++;\n        this.infoRender.vertices += count * geometry.maxInstancedCount;\n        if (this.mode === gl.TRIANGLES) {\n            this.infoRender.faces += geometry.maxInstancedCount * count / 3;\n        }\n        else if (this.mode === gl.POINTS) {\n            this.infoRender.points += geometry.maxInstancedCount * count;\n        }\n        return this;\n    }\n}\n","export class WebGLCapabilities {\n    constructor(context, extensions, parameters) {\n        this.logarithmicDepthBuffer = false;\n        this.maxTextures = 0;\n        this.maxVertexTextures = 0;\n        this.maxTextureSize = 0;\n        this.maxCubemapSize = 0;\n        this.maxAttributes = 0;\n        this.maxVertexUniforms = 0;\n        this.maxVaryings = 0;\n        this.maxFragmentUniforms = 0;\n        this.vertexTextures = false;\n        this.floatFragmentTextures = false;\n        this.floatVertexTextures = false;\n        this.maxAnisotropy = 0;\n        this.context = context;\n        this.extensions = extensions;\n        this.precision = parameters.precision !== undefined ? parameters.precision : \"highp\";\n        this.maxPrecision = this.getMaxPrecision(this.precision);\n        if (this.maxPrecision !== this.precision) {\n            console.warn(`THREE.WebGLRenderer: ${this.precision} not supported, using ${this.maxPrecision} instead.`);\n            this.precision = this.maxPrecision;\n        }\n        this.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n        this.maxTextures = context.getParameter(context.MAX_TEXTURE_IMAGE_UNITS);\n        this.maxVertexTextures = context.getParameter(context.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n        this.maxTextureSize = context.getParameter(context.MAX_TEXTURE_SIZE);\n        this.maxCubemapSize = context.getParameter(context.MAX_CUBE_MAP_TEXTURE_SIZE);\n        this.maxAttributes = context.getParameter(context.MAX_VERTEX_ATTRIBS);\n        this.maxVertexUniforms = context.getParameter(context.MAX_VERTEX_UNIFORM_VECTORS);\n        this.maxVaryings = context.getParameter(context.MAX_VARYING_VECTORS);\n        this.maxFragmentUniforms = context.getParameter(context.MAX_FRAGMENT_UNIFORM_VECTORS);\n        this.vertexTextures = this.maxVertexTextures > 0;\n        this.floatFragmentTextures = !!this.extensions.get(\"OES_texture_float\");\n        this.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\n        this.maxAnisotropy = this.getMaxAnisotropy();\n    }\n    getMaxPrecision(precision) {\n        const context = this.context;\n        if (precision === \"highp\") {\n            if (context.getShaderPrecisionFormat(context.VERTEX_SHADER, context.HIGH_FLOAT).precision > 0 &&\n                context.getShaderPrecisionFormat(context.FRAGMENT_SHADER, context.HIGH_FLOAT).precision > 0) {\n                return \"highp\";\n            }\n            precision = \"mediump\";\n        }\n        if (precision === \"mediump\") {\n            if (context.getShaderPrecisionFormat(context.VERTEX_SHADER, context.MEDIUM_FLOAT).precision > 0 &&\n                context.getShaderPrecisionFormat(context.FRAGMENT_SHADER, context.MEDIUM_FLOAT).precision > 0) {\n                return \"mediump\";\n            }\n        }\n        return \"lowp\";\n    }\n    getMaxAnisotropy() {\n        const extension = this.extensions.get(\"EXT_texture_filter_anisotropic\");\n        if (extension !== null) {\n            return this.context.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n        }\n        else {\n            return 0;\n        }\n    }\n}\n","import { Plane } from \"../../math/Plane\";\nimport { Matrix3 } from \"../../math/Matrix3\";\nexport class WebGLClipping {\n    constructor() {\n        this.globalState = null;\n        this.numGlobalPlanes = 0;\n        this.localClippingEnabled = false;\n        this.renderingShadows = false;\n        this.uniform = {\n            value: null,\n            needsUpdate: false,\n        };\n        this.numPlanes = 0;\n        this.numIntersection = 0;\n    }\n    projectPlanes(planes, camera, dstOffset, skipTransform = false) {\n        const nPlanes = planes !== null ? planes.length : 0;\n        let dstArray = null;\n        if (nPlanes !== 0) {\n            dstArray = this.uniform.value;\n            if (skipTransform !== true || dstArray === null) {\n                const flatSize = dstOffset + nPlanes * 4;\n                const viewMatrix = camera.matrixWorldInverse;\n                const viewNormalMatrix = new Matrix3().getNormalMatrix(viewMatrix);\n                if (dstArray === null || dstArray.length < flatSize) {\n                    dstArray = new Float32Array(flatSize);\n                }\n                for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n                    const plane = new Plane().copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n                    plane.normal.toArray(dstArray, i4);\n                    dstArray[i4 + 3] = plane.constant;\n                }\n            }\n            this.uniform.value = dstArray;\n            this.uniform.needsUpdate = true;\n        }\n        this.numPlanes = nPlanes;\n        return dstArray;\n    }\n    init(planes, enableLocalClipping, camera) {\n        const enabled = planes.length !== 0 ||\n            enableLocalClipping ||\n            // enable state of previous frame - the clipping code has to\n            // run another frame in order to reset the state:\n            this.numGlobalPlanes !== 0 ||\n            this.localClippingEnabled;\n        this.localClippingEnabled = enableLocalClipping;\n        this.globalState = this.projectPlanes(planes, camera, 0);\n        this.numGlobalPlanes = planes.length;\n        return enabled;\n    }\n    beginShadows() {\n        this.renderingShadows = true;\n        this.projectPlanes(null);\n    }\n    endShadows() {\n        this.renderingShadows = false;\n        this.resetGlobalState();\n    }\n    resetGlobalState() {\n        if (this.uniform.value !== this.globalState) {\n            this.uniform.value = this.globalState;\n            this.uniform.needsUpdate = this.numGlobalPlanes > 0;\n        }\n        this.numPlanes = this.numGlobalPlanes;\n        this.numIntersection = 0;\n    }\n    setState(planes, clipIntersection, clipShadows, camera, cache, fromCache) {\n        if (!this.localClippingEnabled ||\n            planes === null ||\n            planes.length === 0 ||\n            (this.renderingShadows && !clipShadows)) {\n            // there's no local clipping\n            if (this.renderingShadows) {\n                // there's no global clipping\n                this.projectPlanes(null);\n            }\n            else {\n                this.resetGlobalState();\n            }\n        }\n        else {\n            const nGlobal = this.renderingShadows ? 0 : this.numGlobalPlanes, lGlobal = nGlobal * 4;\n            let dstArray = cache.clippingState || null;\n            this.uniform.value = dstArray; // ensure unique state\n            dstArray = this.projectPlanes(planes, camera, lGlobal, fromCache);\n            for (let i = 0; i !== lGlobal; ++i) {\n                dstArray[i] = this.globalState[i];\n            }\n            cache.clippingState = dstArray;\n            this.numIntersection = clipIntersection ? this.numPlanes : 0;\n            this.numPlanes += nGlobal;\n        }\n    }\n}\n","export class WebGLExtensions {\n    constructor(context) {\n        this.extensions = {};\n        this.context = context;\n    }\n    get(name) {\n        const gl = this.context;\n        if (this.extensions.hasOwnProperty(name)) {\n            return this.extensions[name];\n        }\n        let extension;\n        switch (name) {\n            case \"WEBGL_depth_texture\":\n                extension =\n                    gl.getExtension(\"WEBGL_depth_texture\") ||\n                        gl.getExtension(\"MOZ_WEBGL_depth_texture\") ||\n                        gl.getExtension(\"WEBKIT_WEBGL_depth_texture\");\n                break;\n            case \"EXT_texture_filter_anisotropic\":\n                extension =\n                    gl.getExtension(\"EXT_texture_filter_anisotropic\") ||\n                        gl.getExtension(\"MOZ_EXT_texture_filter_anisotropic\") ||\n                        gl.getExtension(\"WEBKIT_EXT_texture_filter_anisotropic\");\n                break;\n            case \"WEBGL_compressed_texture_s3tc\":\n                extension =\n                    gl.getExtension(\"WEBGL_compressed_texture_s3tc\") ||\n                        gl.getExtension(\"MOZ_WEBGL_compressed_texture_s3tc\") ||\n                        gl.getExtension(\"WEBKIT_WEBGL_compressed_texture_s3tc\");\n                break;\n            case \"WEBGL_compressed_texture_pvrtc\":\n                extension =\n                    gl.getExtension(\"WEBGL_compressed_texture_pvrtc\") ||\n                        gl.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\");\n                break;\n            case \"WEBGL_compressed_texture_etc1\":\n                extension = gl.getExtension(\"WEBGL_compressed_texture_etc1\");\n                break;\n            default:\n                extension = gl.getExtension(name);\n        }\n        if (extension === null) {\n            console.warn(`THREE.WebGLRenderer: ${name} extension not supported.`);\n        }\n        this.extensions[name] = extension;\n        return extension;\n    }\n}\n","import { Uint16BufferAttribute, Uint32BufferAttribute } from \"../../core/BufferAttribute\";\nimport { BufferGeometry } from \"../../core/BufferGeometry\";\nimport { Geometry } from \"../../core/Geometry\";\nimport { arrayMax } from \"../../utils\";\nexport class WebGLGeometries {\n    constructor(context, attributes, infoMemory) {\n        this.geometries = {};\n        this.wireframeAttributes = {};\n        this.context = context;\n        this.attributes = attributes;\n        this.infoMemory = infoMemory;\n    }\n    onGeometryDispose(event) {\n        const geometry = event.target;\n        const bufferGeometry = this.geometries[geometry.id];\n        if (bufferGeometry.index !== null) {\n            this.attributes.remove(bufferGeometry.index);\n        }\n        for (const name in bufferGeometry.attributes) {\n            if (!bufferGeometry.attributes.hasOwnProperty(name)) {\n                continue;\n            }\n            this.attributes.remove(bufferGeometry.attributes[name]);\n        }\n        geometry.removeEventListener(\"dispose\", this.onGeometryDispose);\n        delete this.geometries[geometry.id];\n        // TODO Remove duplicate code\n        let attribute = this.wireframeAttributes[geometry.id];\n        if (attribute) {\n            this.attributes.remove(attribute);\n            delete this.wireframeAttributes[geometry.id];\n        }\n        attribute = this.wireframeAttributes[bufferGeometry.id];\n        if (attribute) {\n            this.attributes.remove(attribute);\n            delete this.wireframeAttributes[bufferGeometry.id];\n        }\n        this.infoMemory.geometries--;\n    }\n    get(object, geometry) {\n        let bufferGeometry = this.geometries[geometry.id];\n        if (bufferGeometry)\n            return bufferGeometry;\n        geometry.addEventListener(\"dispose\", this.onGeometryDispose);\n        if (geometry instanceof BufferGeometry) {\n            bufferGeometry = geometry;\n        }\n        else if (geometry instanceof Geometry) {\n            if (geometry.bufferGeometry === undefined) {\n                geometry.bufferGeometry = new BufferGeometry().setFromObject(object);\n            }\n            bufferGeometry = geometry.bufferGeometry;\n        }\n        this.geometries[geometry.id] = bufferGeometry;\n        this.infoMemory.geometries++;\n        return bufferGeometry;\n    }\n    update(geometry) {\n        const index = geometry.index;\n        const geometryAttributes = geometry.attributes;\n        if (index !== null) {\n            this.attributes.update(index, this.context.ELEMENT_ARRAY_BUFFER);\n        }\n        for (const name in geometryAttributes) {\n            if (!geometryAttributes.hasOwnProperty(name)) {\n                continue;\n            }\n            this.attributes.update(geometryAttributes[name], this.context.ARRAY_BUFFER);\n        }\n        // morph targets\n        const morphAttributes = geometry.morphAttributes;\n        for (const name in morphAttributes) {\n            if (!morphAttributes.hasOwnProperty(name)) {\n                continue;\n            }\n            const array = morphAttributes[name];\n            for (let i = 0, l = array.length; i < l; i++) {\n                this.attributes.update(array[i], this.context.ARRAY_BUFFER);\n            }\n        }\n        return this;\n    }\n    getWireframeAttribute(geometry) {\n        let attribute = this.wireframeAttributes[geometry.id];\n        if (attribute)\n            return attribute;\n        const indices = [];\n        if (geometry.index !== null) {\n            const array = geometry.index.array;\n            for (let i = 0, l = array.length; i < l; i += 3) {\n                const a = array[i];\n                const b = array[i + 1];\n                const c = array[i + 2];\n                indices.push(a, b, b, c, c, a);\n            }\n        }\n        else {\n            const array = geometry.attributes.position.array;\n            for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {\n                const a = i;\n                const b = i + 1;\n                const c = i + 2;\n                indices.push(a, b, b, c, c, a);\n            }\n        }\n        attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n        this.attributes.update(attribute, this.context.ELEMENT_ARRAY_BUFFER);\n        this.wireframeAttributes[geometry.id] = attribute;\n        return attribute;\n    }\n}\n","export class WebGLIndexedBufferRenderer {\n    constructor(context, extensions, infoRender) {\n        this.mode = 0;\n        this.type = 0;\n        this.bytesPerElement = 0;\n        this.context = context;\n        this.extensions = extensions;\n        this.infoRender = infoRender;\n    }\n    setMode(value) {\n        this.mode = value;\n        return this;\n    }\n    setIndex(value) {\n        this.type = value.type;\n        this.bytesPerElement = value.bytesPerElement;\n        return this;\n    }\n    render(start, count) {\n        const gl = this.context;\n        gl.drawElements(this.mode, count, this.type, start * this.bytesPerElement);\n        this.infoRender.calls++;\n        this.infoRender.vertices += count;\n        if (this.mode === gl.TRIANGLES) {\n            this.infoRender.faces += count / 3;\n        }\n        else if (this.mode === gl.POINTS) {\n            this.infoRender.points += count;\n        }\n        return this;\n    }\n    renderInstances(geometry, start, count) {\n        const gl = this.context;\n        const extension = this.extensions.get(\"ANGLE_instanced_arrays\");\n        if (extension === null) {\n            console.error(`THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.`);\n            return this;\n        }\n        extension.drawElementsInstancedANGLE(this.mode, count, this.type, start * this.bytesPerElement, geometry.maxInstancedCount);\n        this.infoRender.calls++;\n        this.infoRender.vertices += count * geometry.maxInstancedCount;\n        if (this.mode === gl.TRIANGLES) {\n            this.infoRender.faces += geometry.maxInstancedCount * count / 3;\n        }\n        else if (this.mode === gl.POINTS) {\n            this.infoRender.points += geometry.maxInstancedCount * count;\n        }\n        return this;\n    }\n}\n","import { AmbientLight } from \"../../lights/AmbientLight\";\nimport { DirectionalLight } from \"../../lights/DirectionalLight\";\nimport { HemisphereLight } from \"../../lights/HemisphereLight\";\nimport { PointLight } from \"../../lights/PointLight\";\nimport { RectAreaLight } from \"../../lights/RectAreaLight\";\nimport { SpotLight } from \"../../lights/SpotLight\";\nimport { Color } from \"../../math/Color\";\nimport { Matrix4 } from \"../../math/Matrix4\";\nimport { Vector2 } from \"../../math/Vector2\";\nimport { Vector3 } from \"../../math/Vector3\";\nclass LightUniformsCache {\n    constructor() {\n        this.lights = {};\n    }\n    get(light) {\n        if (this.lights[light.id] !== undefined) {\n            return this.lights[light.id];\n        }\n        let uniforms;\n        switch (light.type) {\n            case \"DirectionalLight\":\n                uniforms = {\n                    direction: new Vector3(),\n                    color: new Color(),\n                    shadow: false,\n                    shadowBias: 0,\n                    shadowRadius: 1,\n                    shadowMapSize: new Vector2(),\n                };\n                break;\n            case \"SpotLight\":\n                uniforms = {\n                    position: new Vector3(),\n                    direction: new Vector3(),\n                    color: new Color(),\n                    distance: 0,\n                    coneCos: 0,\n                    penumbraCos: 0,\n                    decay: 0,\n                    shadow: false,\n                    shadowBias: 0,\n                    shadowRadius: 1,\n                    shadowMapSize: new Vector2(),\n                };\n                break;\n            case \"PointLight\":\n                uniforms = {\n                    position: new Vector3(),\n                    color: new Color(),\n                    distance: 0,\n                    decay: 0,\n                    shadow: false,\n                    shadowBias: 0,\n                    shadowRadius: 1,\n                    shadowMapSize: new Vector2(),\n                    shadowCameraNear: 1,\n                    shadowCameraFar: 1000,\n                };\n                break;\n            case \"HemisphereLight\":\n                uniforms = {\n                    direction: new Vector3(),\n                    skyColor: new Color(),\n                    groundColor: new Color(),\n                };\n                break;\n            case \"RectAreaLight\":\n                uniforms = {\n                    color: new Color(),\n                    position: new Vector3(),\n                    halfWidth: new Vector3(),\n                    halfHeight: new Vector3(),\n                };\n                break;\n        }\n        this.lights[light.id] = uniforms;\n        return uniforms;\n    }\n}\nexport class WebGLLights {\n    constructor() {\n        this.cache = new LightUniformsCache();\n        this.state = {\n            hash: \"\",\n            ambient: [0, 0, 0],\n            directional: [],\n            directionalShadowMap: [],\n            directionalShadowMatrix: [],\n            spot: [],\n            spotShadowMap: [],\n            spotShadowMatrix: [],\n            rectArea: [],\n            point: [],\n            pointShadowMap: [],\n            pointShadowMatrix: [],\n            hemi: [],\n        };\n    }\n    setup(lights, shadows, camera) {\n        const vector3 = new Vector3();\n        const matrix4 = new Matrix4();\n        const matrix42 = new Matrix4();\n        let r = 0, g = 0, b = 0;\n        const state = this.state;\n        const cache = this.cache;\n        let directionalLength = 0;\n        let pointLength = 0;\n        let spotLength = 0;\n        let rectAreaLength = 0;\n        let hemisphereLength = 0;\n        const viewMatrix = camera.matrixWorldInverse;\n        for (let i = 0, l = lights.length; i < l; i++) {\n            const light = lights[i];\n            const color = light.color;\n            const intensity = light.intensity;\n            const distance = light.distance;\n            const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n            if (light instanceof AmbientLight) {\n                r += color.r * intensity;\n                g += color.g * intensity;\n                b += color.b * intensity;\n            }\n            else if (light instanceof DirectionalLight) {\n                const uniforms = cache.get(light);\n                uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n                uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n                vector3.setFromMatrixPosition(light.target.matrixWorld);\n                uniforms.direction.sub(vector3);\n                uniforms.direction.transformDirection(viewMatrix);\n                uniforms.shadow = light.castShadow;\n                if (light.castShadow) {\n                    const shadow = light.shadow;\n                    uniforms.shadowBias = shadow.bias;\n                    uniforms.shadowRadius = shadow.radius;\n                    uniforms.shadowMapSize = shadow.mapSize;\n                }\n                state.directionalShadowMap[directionalLength] = shadowMap;\n                state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n                state.directional[directionalLength] = uniforms;\n                directionalLength++;\n            }\n            else if (light instanceof SpotLight) {\n                const uniforms = cache.get(light);\n                uniforms.position.setFromMatrixPosition(light.matrixWorld);\n                uniforms.position.applyMatrix4(viewMatrix);\n                uniforms.color.copy(color).multiplyScalar(intensity);\n                uniforms.distance = distance;\n                uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n                vector3.setFromMatrixPosition(light.target.matrixWorld);\n                uniforms.direction.sub(vector3);\n                uniforms.direction.transformDirection(viewMatrix);\n                uniforms.coneCos = Math.cos(light.angle);\n                uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n                uniforms.decay = light.distance === 0 ? 0.0 : light.decay;\n                uniforms.shadow = light.castShadow;\n                if (light.castShadow) {\n                    const shadow = light.shadow;\n                    uniforms.shadowBias = shadow.bias;\n                    uniforms.shadowRadius = shadow.radius;\n                    uniforms.shadowMapSize = shadow.mapSize;\n                }\n                state.spotShadowMap[spotLength] = shadowMap;\n                state.spotShadowMatrix[spotLength] = light.shadow.matrix;\n                state.spot[spotLength] = uniforms;\n                spotLength++;\n            }\n            else if (light instanceof RectAreaLight) {\n                const uniforms = cache.get(light);\n                // (a) intensity is the total visible light emitted\n                // uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n                // (b) intensity is the brightness of the light\n                uniforms.color.copy(color).multiplyScalar(intensity);\n                uniforms.position.setFromMatrixPosition(light.matrixWorld);\n                uniforms.position.applyMatrix4(viewMatrix);\n                // extract local rotation of light to derive width/height half vectors\n                matrix42.identity();\n                matrix4.copy(light.matrixWorld);\n                matrix4.premultiply(viewMatrix);\n                matrix42.extractRotation(matrix4);\n                uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n                uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n                uniforms.halfWidth.applyMatrix4(matrix42);\n                uniforms.halfHeight.applyMatrix4(matrix42);\n                // TODO (abelnation): RectAreaLight distance?\n                // uniforms.distance = distance;\n                state.rectArea[rectAreaLength] = uniforms;\n                rectAreaLength++;\n            }\n            else if (light instanceof PointLight) {\n                const uniforms = cache.get(light);\n                uniforms.position.setFromMatrixPosition(light.matrixWorld);\n                uniforms.position.applyMatrix4(viewMatrix);\n                uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n                uniforms.distance = light.distance;\n                uniforms.decay = light.distance === 0 ? 0.0 : light.decay;\n                uniforms.shadow = light.castShadow;\n                if (light.castShadow) {\n                    const shadow = light.shadow;\n                    uniforms.shadowBias = shadow.bias;\n                    uniforms.shadowRadius = shadow.radius;\n                    uniforms.shadowMapSize = shadow.mapSize;\n                    uniforms.shadowCameraNear = shadow.camera.near;\n                    uniforms.shadowCameraFar = shadow.camera.far;\n                }\n                state.pointShadowMap[pointLength] = shadowMap;\n                state.pointShadowMatrix[pointLength] = light.shadow.matrix;\n                state.point[pointLength] = uniforms;\n                pointLength++;\n            }\n            else if (light instanceof HemisphereLight) {\n                const uniforms = cache.get(light);\n                uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n                uniforms.direction.transformDirection(viewMatrix);\n                uniforms.direction.normalize();\n                uniforms.skyColor.copy(light.color).multiplyScalar(intensity);\n                uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n                state.hemi[hemisphereLength] = uniforms;\n                hemisphereLength++;\n            }\n        }\n        state.ambient[0] = r;\n        state.ambient[1] = g;\n        state.ambient[2] = b;\n        state.directional.length = directionalLength;\n        state.spot.length = spotLength;\n        state.rectArea.length = rectAreaLength;\n        state.point.length = pointLength;\n        state.hemi.length = hemisphereLength;\n        state.hash = [\n            directionalLength,\n            pointLength,\n            spotLength,\n            rectAreaLength,\n            hemisphereLength,\n            shadows.length,\n        ].join(\",\");\n        return this;\n    }\n}\n","export class WebGLMorphtargets {\n    constructor(context) {\n        this.influencesList = {};\n        this.morphInfluences = new Float32Array(8);\n        this.context = context;\n    }\n    update(object, geometry, material, program) {\n        /**\n         * Another not well designed\n         */\n        const objectInfluences = object.morphTargetInfluences;\n        const length = objectInfluences.length;\n        let influences = this.influencesList[geometry.id];\n        if (influences === undefined) {\n            // initialise list\n            influences = [];\n            for (let i = 0; i < length; i++) {\n                influences[i] = [i, 0];\n            }\n            this.influencesList[geometry.id] = influences;\n        }\n        const morphTargets = material.morphTargets && geometry.morphAttributes.position;\n        const morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n        // Remove current morphAttributes\n        for (let i = 0; i < length; i++) {\n            const influence = influences[i];\n            if (influence[1] !== 0) {\n                if (morphTargets)\n                    geometry.removeAttribute(\"morphTarget\" + i);\n                if (morphNormals)\n                    geometry.removeAttribute(\"morphNormal\" + i);\n            }\n        }\n        // Collect influences\n        for (let i = 0; i < length; i++) {\n            const influence = influences[i];\n            influence[0] = i;\n            influence[1] = objectInfluences[i];\n        }\n        influences.sort((a, b) => {\n            return Math.abs(b[1]) - Math.abs(a[1]);\n        });\n        // Add morphAttributes\n        for (let i = 0; i < 8; i++) {\n            const influence = influences[i];\n            if (influence) {\n                const index = influence[0];\n                const value = influence[1];\n                if (value) {\n                    if (morphTargets)\n                        geometry.addAttribute(\"morphTarget\" + i, morphTargets[index]);\n                    if (morphNormals)\n                        geometry.addAttribute(\"morphNormal\" + i, morphNormals[index]);\n                    this.morphInfluences[i] = value;\n                    continue;\n                }\n            }\n            this.morphInfluences[i] = 0;\n        }\n        program.getUniforms().setValue(\"morphTargetInfluences\", this.morphInfluences);\n    }\n}\n","import { Geometry } from \"../../core/Geometry\";\nexport class WebGLObjects {\n    constructor(geometries, infoRender) {\n        this.updateList = {};\n        this.geometries = geometries;\n        this.infoRender = infoRender;\n    }\n    update(object) {\n        const frame = this.infoRender.frame;\n        const geometry = object.geometry;\n        const bufferGeometry = this.geometries.get(object, geometry);\n        // Update once per frame\n        if (this.updateList[bufferGeometry.id] !== frame) {\n            if (geometry instanceof Geometry) {\n                bufferGeometry.updateFromObject(object);\n            }\n            this.geometries.update(bufferGeometry);\n            this.updateList[bufferGeometry.id] = frame;\n        }\n        return bufferGeometry;\n    }\n    dispose() {\n        this.updateList = {};\n    }\n}\n","import { ShaderChunk } from \"../shaders/ShaderChunk\";\nimport { NoToneMapping, AddOperation, MixOperation, MultiplyOperation, EquirectangularRefractionMapping, CubeRefractionMapping, SphericalReflectionMapping, EquirectangularReflectionMapping, CubeUVRefractionMapping, CubeUVReflectionMapping, CubeReflectionMapping, PCFSoftShadowMap, PCFShadowMap, CineonToneMapping, Uncharted2ToneMapping, ReinhardToneMapping, LinearToneMapping, GammaEncoding, RGBDEncoding, RGBM16Encoding, RGBM7Encoding, RGBEEncoding, sRGBEncoding, LinearEncoding, } from \"../../constants\";\nimport { RawShaderMaterial } from \"../../materials/RawShaderMaterial\";\nimport { WebGLShaderWrapper } from \"./WebGLShader\";\nimport { WebGLUniformsWrapper } from \"./WebGLUniforms\";\nimport { ShaderMaterial } from \"../../materials/Materials\";\nfunction generateDefines(defines) {\n    const chunks = [];\n    for (const name in defines) {\n        if (!defines.hasOwnProperty(name) || defines[name]) {\n            chunks.push(\"#define \" + name + \" \" + defines[name]);\n        }\n    }\n    return chunks.join(\"\\n\");\n}\nfunction generateExtensions(extensions, parameters, rendererExtensions) {\n    extensions = extensions || {};\n    const chunks = [\n        extensions.derivatives ||\n            parameters.envMapCubeUV ||\n            parameters.bumpMap ||\n            parameters.normalMap ||\n            parameters.flatShading\n            ? \"#extension GL_OES_standard_derivatives : enable\"\n            : \"\",\n        (extensions.fragDepth || parameters.logarithmicDepthBuffer) && rendererExtensions.get(\"EXT_frag_depth\")\n            ? \"#extension GL_EXT_frag_depth : enable\"\n            : \"\",\n        extensions.drawBuffers && rendererExtensions.get(\"WEBGL_draw_buffers\")\n            ? \"#extension GL_EXT_draw_buffers : require\"\n            : \"\",\n        (extensions.shaderTextureLOD || parameters.envMap) && rendererExtensions.get(\"EXT_shader_texture_lod\")\n            ? \"#extension GL_EXT_shader_texture_lod : enable\"\n            : \"\",\n    ];\n    return chunks.filter(filterEmptyLine).join(\"\\n\");\n}\nfunction getToneMappingFunction(functionName, toneMapping) {\n    let toneMappingName;\n    switch (toneMapping) {\n        case LinearToneMapping:\n            toneMappingName = \"Linear\";\n            break;\n        case ReinhardToneMapping:\n            toneMappingName = \"Reinhard\";\n            break;\n        case Uncharted2ToneMapping:\n            toneMappingName = \"Uncharted2\";\n            break;\n        case CineonToneMapping:\n            toneMappingName = \"OptimizedCineon\";\n            break;\n        default:\n            throw new Error(\"unsupported toneMapping: \" + toneMapping);\n    }\n    return \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n}\nfunction filterEmptyLine(str) {\n    return str !== \"\";\n}\nfunction getEncodingComponents(encoding) {\n    switch (encoding) {\n        case LinearEncoding:\n            return [\"Linear\", \"( value )\"];\n        case sRGBEncoding:\n            return [\"sRGB\", \"( value )\"];\n        case RGBEEncoding:\n            return [\"RGBE\", \"( value )\"];\n        case RGBM7Encoding:\n            return [\"RGBM\", \"( value, 7.0 )\"];\n        case RGBM16Encoding:\n            return [\"RGBM\", \"( value, 16.0 )\"];\n        case RGBDEncoding:\n            return [\"RGBD\", \"( value, 256.0 )\"];\n        case GammaEncoding:\n            return [\"Gamma\", \"( value, float( GAMMA_FACTOR ) )\"];\n        default:\n            throw new Error(\"unsupported encoding: \" + encoding);\n    }\n}\nfunction getTexelDecodingFunction(functionName, encoding) {\n    const components = getEncodingComponents(encoding);\n    return \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[0] + \"ToLinear\" + components[1] + \"; }\";\n}\nfunction getTexelEncodingFunction(functionName, encoding) {\n    const components = getEncodingComponents(encoding);\n    return \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[0] + components[1] + \"; }\";\n}\nfunction replaceLightNums(str, parameters) {\n    return str\n        .replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights + \"\")\n        .replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights + \"\")\n        .replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights + \"\")\n        .replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights + \"\")\n        .replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights + \"\");\n}\nfunction parseIncludes(str) {\n    return str.replace(/^[ \\t]*#include +<([\\w\\d.]+)>/gm, (match, include) => {\n        const replace = ShaderChunk[include];\n        if (replace === undefined) {\n            throw new Error(\"Can not resolve #include <\" + include + \">\");\n        }\n        return parseIncludes(replace);\n    });\n}\nfunction unrollLoops(str) {\n    const pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n    function replace(match, start, end, snippet) {\n        let unroll = \"\";\n        for (let i = parseInt(start, 10); i < parseInt(end, 10); i++) {\n            unroll += snippet.replace(/\\[ i \\]/g, \"[ \" + i + \" ]\");\n        }\n        return unroll;\n    }\n    return str.replace(pattern, replace);\n}\nfunction fetchAttributeLocations(gl, program) {\n    const attributes = {};\n    const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < n; i++) {\n        const info = gl.getActiveAttrib(program, i);\n        const name = info.name;\n        attributes[name] = gl.getAttribLocation(program, name);\n    }\n    return attributes;\n}\nlet programIdCount = 0;\nexport class WebGLProgramWrapper {\n    constructor(renderer, extensions, code, material, shader, parameters) {\n        this.usedTimes = 1;\n        this.id = programIdCount++;\n        this.renderer = renderer;\n        const gl = renderer.context;\n        const defines = material.defines;\n        let vertexShader = shader.vertexShader;\n        let fragmentShader = shader.fragmentShader;\n        let shadowMapTypeDefine = \"SHADOWMAP_TYPE_BASIC\";\n        if (parameters.shadowMapType === PCFShadowMap) {\n            shadowMapTypeDefine = \"SHADOWMAP_TYPE_PCF\";\n        }\n        else if (parameters.shadowMapType === PCFSoftShadowMap) {\n            shadowMapTypeDefine = \"SHADOWMAP_TYPE_PCF_SOFT\";\n        }\n        let envMapTypeDefine = \"ENVMAP_TYPE_CUBE\";\n        let envMapModeDefine = \"ENVMAP_MODE_REFLECTION\";\n        let envMapBlendingDefine = \"ENVMAP_BLENDING_MULTIPLY\";\n        if (parameters.envMap) {\n            switch (material.envMap.mapping) {\n                case CubeReflectionMapping:\n                case CubeRefractionMapping:\n                    envMapTypeDefine = \"ENVMAP_TYPE_CUBE\";\n                    break;\n                case CubeUVReflectionMapping:\n                case CubeUVRefractionMapping:\n                    envMapTypeDefine = \"ENVMAP_TYPE_CUBE_UV\";\n                    break;\n                case EquirectangularReflectionMapping:\n                case EquirectangularRefractionMapping:\n                    envMapTypeDefine = \"ENVMAP_TYPE_EQUIREC\";\n                    break;\n                case SphericalReflectionMapping:\n                    envMapTypeDefine = \"ENVMAP_TYPE_SPHERE\";\n                    break;\n            }\n            switch (material.envMap.mapping) {\n                case CubeRefractionMapping:\n                case EquirectangularRefractionMapping:\n                    envMapModeDefine = \"ENVMAP_MODE_REFRACTION\";\n                    break;\n            }\n            switch (material.combine) {\n                case MultiplyOperation:\n                    envMapBlendingDefine = \"ENVMAP_BLENDING_MULTIPLY\";\n                    break;\n                case MixOperation:\n                    envMapBlendingDefine = \"ENVMAP_BLENDING_MIX\";\n                    break;\n                case AddOperation:\n                    envMapBlendingDefine = \"ENVMAP_BLENDING_ADD\";\n                    break;\n            }\n        }\n        const gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n        const customExtensions = generateExtensions(material.extensions, parameters, extensions);\n        const customDefines = generateDefines(defines);\n        const program = gl.createProgram();\n        let prefixVertex, prefixFragment;\n        if (material instanceof RawShaderMaterial) {\n            prefixVertex = [customDefines].filter(filterEmptyLine).join(\"\\n\");\n            if (prefixVertex.length > 0) {\n                prefixVertex += \"\\n\";\n            }\n            prefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join(\"\\n\");\n            if (prefixFragment.length > 0) {\n                prefixFragment += \"\\n\";\n            }\n        }\n        else {\n            prefixVertex = [\n                \"precision \" + parameters.precision + \" float;\",\n                \"precision \" + parameters.precision + \" int;\",\n                \"#define SHADER_NAME \" + shader.name,\n                customDefines,\n                parameters.supportsVertexTextures ? \"#define VERTEX_TEXTURES\" : \"\",\n                \"#define GAMMA_FACTOR \" + gammaFactorDefine,\n                \"#define MAX_BONES \" + parameters.maxBones,\n                parameters.useFog && parameters.fog ? \"#define USE_FOG\" : \"\",\n                parameters.useFog && parameters.fogExp ? \"#define FOG_EXP2\" : \"\",\n                parameters.map ? \"#define USE_MAP\" : \"\",\n                parameters.envMap ? \"#define USE_ENVMAP\" : \"\",\n                parameters.envMap ? \"#define \" + envMapModeDefine : \"\",\n                parameters.lightMap ? \"#define USE_LIGHTMAP\" : \"\",\n                parameters.aoMap ? \"#define USE_AOMAP\" : \"\",\n                parameters.emissiveMap ? \"#define USE_EMISSIVEMAP\" : \"\",\n                parameters.bumpMap ? \"#define USE_BUMPMAP\" : \"\",\n                parameters.normalMap ? \"#define USE_NORMALMAP\" : \"\",\n                parameters.displacementMap && parameters.supportsVertexTextures ? \"#define USE_DISPLACEMENTMAP\" : \"\",\n                parameters.specularMap ? \"#define USE_SPECULARMAP\" : \"\",\n                parameters.roughnessMap ? \"#define USE_ROUGHNESSMAP\" : \"\",\n                parameters.metalnessMap ? \"#define USE_METALNESSMAP\" : \"\",\n                parameters.alphaMap ? \"#define USE_ALPHAMAP\" : \"\",\n                parameters.vertexColors ? \"#define USE_COLOR\" : \"\",\n                parameters.flatShading ? \"#define FLAT_SHADED\" : \"\",\n                parameters.skinning ? \"#define USE_SKINNING\" : \"\",\n                parameters.useVertexTexture ? \"#define BONE_TEXTURE\" : \"\",\n                parameters.morphTargets ? \"#define USE_MORPHTARGETS\" : \"\",\n                parameters.morphNormals && parameters.flatShading === false ? \"#define USE_MORPHNORMALS\" : \"\",\n                parameters.doubleSided ? \"#define DOUBLE_SIDED\" : \"\",\n                parameters.flipSided ? \"#define FLIP_SIDED\" : \"\",\n                \"#define NUM_CLIPPING_PLANES \" + parameters.numClippingPlanes,\n                parameters.shadowMapEnabled ? \"#define USE_SHADOWMAP\" : \"\",\n                parameters.shadowMapEnabled ? \"#define \" + shadowMapTypeDefine : \"\",\n                parameters.sizeAttenuation ? \"#define USE_SIZEATTENUATION\" : \"\",\n                parameters.logarithmicDepthBuffer ? \"#define USE_LOGDEPTHBUF\" : \"\",\n                parameters.logarithmicDepthBuffer && extensions.get(\"EXT_frag_depth\")\n                    ? \"#define USE_LOGDEPTHBUF_EXT\"\n                    : \"\",\n                \"uniform mat4 modelMatrix;\",\n                \"uniform mat4 modelViewMatrix;\",\n                \"uniform mat4 projectionMatrix;\",\n                \"uniform mat4 viewMatrix;\",\n                \"uniform mat3 normalMatrix;\",\n                \"uniform vec3 cameraPosition;\",\n                \"attribute vec3 position;\",\n                \"attribute vec3 normal;\",\n                \"attribute vec2 uv;\",\n                \"#ifdef USE_COLOR\",\n                \"\tattribute vec3 color;\",\n                \"#endif\",\n                \"#ifdef USE_MORPHTARGETS\",\n                \"\tattribute vec3 morphTarget0;\",\n                \"\tattribute vec3 morphTarget1;\",\n                \"\tattribute vec3 morphTarget2;\",\n                \"\tattribute vec3 morphTarget3;\",\n                \"\t#ifdef USE_MORPHNORMALS\",\n                \"\t\tattribute vec3 morphNormal0;\",\n                \"\t\tattribute vec3 morphNormal1;\",\n                \"\t\tattribute vec3 morphNormal2;\",\n                \"\t\tattribute vec3 morphNormal3;\",\n                \"\t#else\",\n                \"\t\tattribute vec3 morphTarget4;\",\n                \"\t\tattribute vec3 morphTarget5;\",\n                \"\t\tattribute vec3 morphTarget6;\",\n                \"\t\tattribute vec3 morphTarget7;\",\n                \"\t#endif\",\n                \"#endif\",\n                \"#ifdef USE_SKINNING\",\n                \"\tattribute vec4 skinIndex;\",\n                \"\tattribute vec4 skinWeight;\",\n                \"#endif\",\n                \"\\n\",\n            ]\n                .filter(filterEmptyLine)\n                .join(\"\\n\");\n            prefixFragment = [\n                customExtensions,\n                \"precision \" + parameters.precision + \" float;\",\n                \"precision \" + parameters.precision + \" int;\",\n                \"#define SHADER_NAME \" + shader.name,\n                customDefines,\n                parameters.alphaTest ? \"#define ALPHATEST \" + parameters.alphaTest : \"\",\n                \"#define GAMMA_FACTOR \" + gammaFactorDefine,\n                parameters.useFog && parameters.fog ? \"#define USE_FOG\" : \"\",\n                parameters.useFog && parameters.fogExp ? \"#define FOG_EXP2\" : \"\",\n                parameters.map ? \"#define USE_MAP\" : \"\",\n                parameters.envMap ? \"#define USE_ENVMAP\" : \"\",\n                parameters.envMap ? \"#define \" + envMapTypeDefine : \"\",\n                parameters.envMap ? \"#define \" + envMapModeDefine : \"\",\n                parameters.envMap ? \"#define \" + envMapBlendingDefine : \"\",\n                parameters.lightMap ? \"#define USE_LIGHTMAP\" : \"\",\n                parameters.aoMap ? \"#define USE_AOMAP\" : \"\",\n                parameters.emissiveMap ? \"#define USE_EMISSIVEMAP\" : \"\",\n                parameters.bumpMap ? \"#define USE_BUMPMAP\" : \"\",\n                parameters.normalMap ? \"#define USE_NORMALMAP\" : \"\",\n                parameters.specularMap ? \"#define USE_SPECULARMAP\" : \"\",\n                parameters.roughnessMap ? \"#define USE_ROUGHNESSMAP\" : \"\",\n                parameters.metalnessMap ? \"#define USE_METALNESSMAP\" : \"\",\n                parameters.alphaMap ? \"#define USE_ALPHAMAP\" : \"\",\n                parameters.vertexColors ? \"#define USE_COLOR\" : \"\",\n                parameters.gradientMap ? \"#define USE_GRADIENTMAP\" : \"\",\n                parameters.flatShading ? \"#define FLAT_SHADED\" : \"\",\n                parameters.doubleSided ? \"#define DOUBLE_SIDED\" : \"\",\n                parameters.flipSided ? \"#define FLIP_SIDED\" : \"\",\n                \"#define NUM_CLIPPING_PLANES \" + parameters.numClippingPlanes,\n                \"#define UNION_CLIPPING_PLANES \" + (parameters.numClippingPlanes - parameters.numClipIntersection),\n                parameters.shadowMapEnabled ? \"#define USE_SHADOWMAP\" : \"\",\n                parameters.shadowMapEnabled ? \"#define \" + shadowMapTypeDefine : \"\",\n                parameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : \"\",\n                parameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : \"\",\n                parameters.logarithmicDepthBuffer ? \"#define USE_LOGDEPTHBUF\" : \"\",\n                parameters.logarithmicDepthBuffer && extensions.get(\"EXT_frag_depth\")\n                    ? \"#define USE_LOGDEPTHBUF_EXT\"\n                    : \"\",\n                parameters.envMap && extensions.get(\"EXT_shader_texture_lod\") ? \"#define TEXTURE_LOD_EXT\" : \"\",\n                \"uniform mat4 viewMatrix;\",\n                \"uniform vec3 cameraPosition;\",\n                parameters.toneMapping !== NoToneMapping ? \"#define TONE_MAPPING\" : \"\",\n                parameters.toneMapping !== NoToneMapping ? ShaderChunk[\"tonemapping_pars_fragment\"] : \"\",\n                parameters.toneMapping !== NoToneMapping\n                    ? getToneMappingFunction(\"toneMapping\", parameters.toneMapping)\n                    : \"\",\n                parameters.dithering ? \"#define DITHERING\" : \"\",\n                parameters.outputEncoding ||\n                    parameters.mapEncoding ||\n                    parameters.envMapEncoding ||\n                    parameters.emissiveMapEncoding\n                    ? ShaderChunk[\"encodings_pars_fragment\"]\n                    : \"\",\n                // this code is required here because it is used by the various encoding/decoding function defined below\n                parameters.mapEncoding ? getTexelDecodingFunction(\"mapTexelToLinear\", parameters.mapEncoding) : \"\",\n                parameters.envMapEncoding\n                    ? getTexelDecodingFunction(\"envMapTexelToLinear\", parameters.envMapEncoding)\n                    : \"\",\n                parameters.emissiveMapEncoding\n                    ? getTexelDecodingFunction(\"emissiveMapTexelToLinear\", parameters.emissiveMapEncoding)\n                    : \"\",\n                parameters.outputEncoding\n                    ? getTexelEncodingFunction(\"linearToOutputTexel\", parameters.outputEncoding)\n                    : \"\",\n                parameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : \"\",\n                \"\\n\",\n            ]\n                .filter(filterEmptyLine)\n                .join(\"\\n\");\n        }\n        vertexShader = parseIncludes(vertexShader);\n        vertexShader = replaceLightNums(vertexShader, parameters);\n        fragmentShader = parseIncludes(fragmentShader);\n        fragmentShader = replaceLightNums(fragmentShader, parameters);\n        if (!(material instanceof ShaderMaterial)) {\n            vertexShader = unrollLoops(vertexShader);\n            fragmentShader = unrollLoops(fragmentShader);\n        }\n        const vertexGlsl = prefixVertex + vertexShader;\n        const fragmentGlsl = prefixFragment + fragmentShader;\n        const glVertexShader = new WebGLShaderWrapper(gl, gl.VERTEX_SHADER, vertexGlsl).shader;\n        const glFragmentShader = new WebGLShaderWrapper(gl, gl.FRAGMENT_SHADER, fragmentGlsl).shader;\n        gl.attachShader(program, glVertexShader);\n        gl.attachShader(program, glFragmentShader);\n        // Force a particular attribute to index 0.\n        if (material.index0AttributeName !== undefined) {\n            gl.bindAttribLocation(program, 0, material.index0AttributeName);\n        }\n        else if (parameters.morphTargets === true) {\n            // programs with morphTargets displace position out of attribute 0\n            gl.bindAttribLocation(program, 0, \"position\");\n        }\n        gl.linkProgram(program);\n        const programLog = gl.getProgramInfoLog(program).trim();\n        const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n        const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n        let runnable = true;\n        let haveDiagnostics = true;\n        // console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n        // console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n        if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n            runnable = false;\n            console.error(\"THREE.WebGLProgram: shader error: \", gl.getError(), \"gl.VALIDATE_STATUS\", gl.getProgramParameter(program, gl.VALIDATE_STATUS), \"gl.getProgramInfoLog\", programLog, vertexLog, fragmentLog);\n        }\n        else if (programLog !== \"\") {\n            console.warn(\"THREE.WebGLProgram: gl.getProgramInfoLog()\", programLog);\n        }\n        else if (vertexLog === \"\" || fragmentLog === \"\") {\n            haveDiagnostics = false;\n        }\n        if (haveDiagnostics) {\n            this.diagnostics = {\n                runnable: runnable,\n                material: material,\n                programLog: programLog,\n                vertexShader: {\n                    log: vertexLog,\n                    prefix: prefixVertex,\n                },\n                fragmentShader: {\n                    log: fragmentLog,\n                    prefix: prefixFragment,\n                },\n            };\n        }\n        // clean up\n        gl.deleteShader(glVertexShader);\n        gl.deleteShader(glFragmentShader);\n        this.code = code;\n        this.program = program;\n        this.vertexShader = glVertexShader;\n        this.fragmentShader = glFragmentShader;\n    }\n    getAttributes() {\n        if (this.cachedAttributes === undefined) {\n            this.cachedAttributes = fetchAttributeLocations(this.renderer.context, this.program);\n        }\n        return this.cachedAttributes;\n    }\n    getUniforms() {\n        if (this.cachedUniforms === undefined) {\n            this.cachedUniforms = new WebGLUniformsWrapper(this.renderer, this.program);\n        }\n        return this.cachedUniforms;\n    }\n    // free resource\n    destroy() {\n        this.renderer.context.deleteProgram(this.program);\n        this.program = undefined;\n    }\n}\n","import { BackSide, DoubleSide, CubeUVRefractionMapping, CubeUVReflectionMapping, GammaEncoding, LinearEncoding, } from \"../../constants\";\nimport { SkinnedMesh } from \"../../objects/SkinnedMesh\";\nimport { WebGLRenderTarget } from \"../WebGLRenderTarget\";\nimport { FogExp2 } from \"../../scenes/FogExp2\";\nimport { Texture } from \"../../textures/Texture\";\nimport { WebGLProgramWrapper } from \"./WebGLProgram\";\nfunction getTextureEncodingFromMap(map, gammaOverrideLinear) {\n    let encoding;\n    if (!map) {\n        encoding = LinearEncoding;\n    }\n    else if (map instanceof Texture) {\n        encoding = map.encoding;\n    }\n    else if (map instanceof WebGLRenderTarget) {\n        console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\");\n        encoding = map.texture.encoding;\n    }\n    // add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n    if (encoding === LinearEncoding && gammaOverrideLinear) {\n        encoding = GammaEncoding;\n    }\n    return encoding;\n}\nexport class WebGLPrograms {\n    constructor(renderer, extensions, capabilities) {\n        this.programs = [];\n        this.renderer = renderer;\n        this.extensions = extensions;\n        this.capabilities = capabilities;\n    }\n    allocateBones(object) {\n        const skeleton = object.skeleton;\n        const bones = skeleton.bones;\n        if (this.capabilities.floatVertexTextures) {\n            return 1024;\n        }\n        else {\n            // default for when object is not specified\n            // ( for example when prebuilding shader to be used with multiple objects )\n            //\n            //  - leave some extra space for other uniforms\n            //  - limit here is ANGLE's 254 max uniform vectors\n            //    (up to 54 should be safe)\n            const nVertexUniforms = this.capabilities.maxVertexUniforms;\n            const nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n            const maxBones = Math.min(nVertexMatrices, bones.length);\n            if (maxBones < bones.length) {\n                console.warn(\"THREE.WebGLRenderer: Skeleton has \" + bones.length + \" bones. This GPU supports \" + maxBones + \".\");\n                return 0;\n            }\n            return maxBones;\n        }\n    }\n    getParameters(material, lights, shadows, fog, nClipPlanes, nClipIntersection, object) {\n        const renderer = this.renderer;\n        const capabilities = this.capabilities;\n        const shaderID = WebGLPrograms.shaderIDs[material.type];\n        // heuristics to create shader parameters according to lights in the scene\n        // (not to blow over maxLights budget)\n        const maxBones = object instanceof SkinnedMesh ? this.allocateBones(object) : 0;\n        let precision = capabilities.precision;\n        if (material.precision !== null) {\n            precision = capabilities.getMaxPrecision(material.precision);\n            if (precision !== material.precision) {\n                console.warn(\"THREE.WebGLProgram.getParameters:\", material.precision, \"not supported, using\", precision, \"instead.\");\n            }\n        }\n        const currentRenderTarget = renderer.getRenderTarget();\n        const parameters = {\n            shaderID: shaderID,\n            precision: precision,\n            supportsVertexTextures: capabilities.vertexTextures,\n            outputEncoding: getTextureEncodingFromMap(!currentRenderTarget ? null : currentRenderTarget.texture, renderer.gammaOutput),\n            map: !!material.map,\n            mapEncoding: getTextureEncodingFromMap(material.map, renderer.gammaInput),\n            envMap: !!material.envMap,\n            envMapMode: material.envMap && material.envMap.mapping,\n            envMapEncoding: getTextureEncodingFromMap(material.envMap, renderer.gammaInput),\n            envMapCubeUV: !!material.envMap &&\n                (material.envMap.mapping === CubeUVReflectionMapping ||\n                    material.envMap.mapping === CubeUVRefractionMapping),\n            lightMap: !!material.lightMap,\n            aoMap: !!material.aoMap,\n            emissiveMap: !!material.emissiveMap,\n            emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap, renderer.gammaInput),\n            bumpMap: !!material.bumpMap,\n            normalMap: !!material.normalMap,\n            displacementMap: !!material.displacementMap,\n            roughnessMap: !!material.roughnessMap,\n            metalnessMap: !!material.metalnessMap,\n            specularMap: !!material.specularMap,\n            alphaMap: !!material.alphaMap,\n            gradientMap: !!material.gradientMap,\n            combine: material.combine,\n            vertexColors: material.vertexColors,\n            fog: !!fog,\n            useFog: material.fog,\n            fogExp: fog && fog instanceof FogExp2,\n            flatShading: material.flatShading,\n            sizeAttenuation: material.sizeAttenuation,\n            logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n            skinning: material.skinning && maxBones > 0,\n            maxBones: maxBones,\n            useVertexTexture: capabilities.floatVertexTextures,\n            morphTargets: material.morphTargets,\n            morphNormals: material.morphNormals,\n            maxMorphTargets: renderer.maxMorphTargets,\n            maxMorphNormals: renderer.maxMorphNormals,\n            numDirLights: lights.directional.length,\n            numPointLights: lights.point.length,\n            numSpotLights: lights.spot.length,\n            numRectAreaLights: lights.rectArea.length,\n            numHemiLights: lights.hemi.length,\n            numClippingPlanes: nClipPlanes,\n            numClipIntersection: nClipIntersection,\n            dithering: material.dithering,\n            shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,\n            shadowMapType: renderer.shadowMap.type,\n            toneMapping: renderer.toneMapping,\n            physicallyCorrectLights: renderer.physicallyCorrectLights,\n            premultipliedAlpha: material.premultipliedAlpha,\n            alphaTest: material.alphaTest,\n            doubleSided: material.side === DoubleSide,\n            flipSided: material.side === BackSide,\n            depthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n        };\n        return parameters;\n    }\n    getProgramCode(material, parameters) {\n        const array = [];\n        if (parameters.shaderID) {\n            array.push(parameters.shaderID);\n        }\n        else {\n            array.push(material.fragmentShader);\n            array.push(material.vertexShader);\n        }\n        if (material.defines !== undefined) {\n            for (const name in material.defines) {\n                if (material.defines.hasOwnProperty(name)) {\n                    array.push(name);\n                    array.push(material.defines[name]);\n                }\n            }\n        }\n        for (let i = 0; i < WebGLPrograms.parameterNames.length; i++) {\n            array.push(parameters[WebGLPrograms.parameterNames[i]]);\n        }\n        array.push(material.onBeforeCompile.toString());\n        array.push(this.renderer.gammaOutput);\n        return array.join();\n    }\n    acquireProgram(material, shader, parameters, code) {\n        let program;\n        // Check if code has been already compiled\n        for (let p = 0, pl = this.programs.length; p < pl; p++) {\n            const programInfo = this.programs[p];\n            if (programInfo.code === code) {\n                program = programInfo;\n                ++program.usedTimes;\n                break;\n            }\n        }\n        if (program === undefined) {\n            program = new WebGLProgramWrapper(this.renderer, this.extensions, code, material, shader, parameters);\n            this.programs.push(program);\n        }\n        return program;\n    }\n    releaseProgram(program) {\n        if (--program.usedTimes === 0) {\n            // Remove from unordered set\n            const i = this.programs.indexOf(program);\n            this.programs[i] = this.programs[this.programs.length - 1];\n            this.programs.pop();\n            // Free WebGL resources\n            program.destroy();\n        }\n    }\n}\nWebGLPrograms.shaderIDs = {\n    MeshDepthMaterial: \"depth\",\n    MeshDistanceMaterial: \"distanceRGBA\",\n    MeshNormalMaterial: \"normal\",\n    MeshBasicMaterial: \"basic\",\n    MeshLambertMaterial: \"lambert\",\n    MeshPhongMaterial: \"phong\",\n    MeshToonMaterial: \"phong\",\n    MeshStandardMaterial: \"physical\",\n    MeshPhysicalMaterial: \"physical\",\n    LineBasicMaterial: \"basic\",\n    LineDashedMaterial: \"dashed\",\n    PointsMaterial: \"points\",\n    ShadowMaterial: \"shadow\",\n};\nWebGLPrograms.parameterNames = [\n    \"precision\",\n    \"supportsVertexTextures\",\n    \"map\",\n    \"mapEncoding\",\n    \"envMap\",\n    \"envMapMode\",\n    \"envMapEncoding\",\n    \"lightMap\",\n    \"aoMap\",\n    \"emissiveMap\",\n    \"emissiveMapEncoding\",\n    \"bumpMap\",\n    \"normalMap\",\n    \"displacementMap\",\n    \"specularMap\",\n    \"roughnessMap\",\n    \"metalnessMap\",\n    \"gradientMap\",\n    \"alphaMap\",\n    \"combine\",\n    \"vertexColors\",\n    \"fog\",\n    \"useFog\",\n    \"fogExp\",\n    \"flatShading\",\n    \"sizeAttenuation\",\n    \"logarithmicDepthBuffer\",\n    \"skinning\",\n    \"maxBones\",\n    \"useVertexTexture\",\n    \"morphTargets\",\n    \"morphNormals\",\n    \"maxMorphTargets\",\n    \"maxMorphNormals\",\n    \"premultipliedAlpha\",\n    \"numDirLights\",\n    \"numPointLights\",\n    \"numSpotLights\",\n    \"numHemiLights\",\n    \"numRectAreaLights\",\n    \"shadowMapEnabled\",\n    \"shadowMapType\",\n    \"toneMapping\",\n    \"physicallyCorrectLights\",\n    \"alphaTest\",\n    \"doubleSided\",\n    \"flipSided\",\n    \"numClippingPlanes\",\n    \"numClipIntersection\",\n    \"depthPacking\",\n    \"dithering\",\n];\n","export class WebGLProperties {\n    constructor() {\n        this.properties = {};\n    }\n    get(object) {\n        const uuid = object.uuid;\n        let map = this.properties[uuid];\n        if (map === undefined) {\n            map = {};\n            this.properties[uuid] = map;\n        }\n        return map;\n    }\n    remove(object) {\n        delete this.properties[object.uuid];\n    }\n    dispose() {\n        this.properties = {};\n    }\n}\n","export class WebGLRenderList {\n    constructor() {\n        this.opaque = [];\n        this.transparent = [];\n        this.renderItems = [];\n        this.renderItemsIndex = 0;\n    }\n    init() {\n        this.renderItemsIndex = 0;\n        this.opaque.length = 0;\n        this.transparent.length = 0;\n        return this;\n    }\n    push(object, geometry, material, z, group) {\n        let renderItem = this.renderItems[this.renderItemsIndex];\n        if (renderItem === undefined) {\n            renderItem = {\n                geometry: geometry,\n                group: group,\n                id: object.id,\n                material: material,\n                object: object,\n                program: material.program,\n                renderOrder: object.renderOrder,\n                z: z,\n            };\n            this.renderItems[this.renderItemsIndex] = renderItem;\n        }\n        else {\n            renderItem.id = object.id;\n            renderItem.object = object;\n            renderItem.geometry = geometry;\n            renderItem.material = material;\n            renderItem.program = material.program;\n            renderItem.renderOrder = object.renderOrder;\n            renderItem.z = z;\n            renderItem.group = group;\n        }\n        (material.transparent === true ? this.transparent : this.opaque).push(renderItem);\n        this.renderItemsIndex++;\n    }\n    sort() {\n        if (this.opaque.length > 1) {\n            this.opaque.sort((a, b) => {\n                if (a.renderOrder !== b.renderOrder) {\n                    return a.renderOrder - b.renderOrder;\n                }\n                else if (a.program && b.program && a.program !== b.program) {\n                    return a.program.id - b.program.id;\n                }\n                else if (a.material.id !== b.material.id) {\n                    return a.material.id - b.material.id;\n                }\n                else if (a.z !== b.z) {\n                    return a.z - b.z;\n                }\n                else {\n                    return a.id - b.id;\n                }\n            });\n        }\n        if (this.transparent.length > 1) {\n            this.transparent.sort((a, b) => {\n                if (a.renderOrder !== b.renderOrder) {\n                    return a.renderOrder - b.renderOrder;\n                }\n                if (a.z !== b.z) {\n                    return b.z - a.z;\n                }\n                else {\n                    return a.id - b.id;\n                }\n            });\n        }\n    }\n}\nexport class WebGLRenderLists {\n    constructor() {\n        this.lists = {};\n    }\n    get(scene, camera) {\n        const hash = scene.id + \",\" + camera.id;\n        let list = this.lists[hash];\n        if (list === undefined) {\n            list = new WebGLRenderList();\n            this.lists[hash] = list;\n        }\n        return list;\n    }\n    dispose() {\n        this.lists = {};\n    }\n}\n","function addLineNumbers(str) {\n    const lines = str.split(\"\\n\");\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + \": \" + lines[i];\n    }\n    return lines.join(\"\\n\");\n}\nexport class WebGLShaderWrapper {\n    constructor(gl, type, str) {\n        const shader = gl.createShader(type);\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n        if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n            console.error(`THREE.WebGLShader: Shader couldn't compile.`);\n        }\n        if (gl.getShaderInfoLog(shader) !== \"\") {\n            console.warn(`THREE.WebGLShader: gl.getShaderInfoLog() ${type === gl.VERTEX_SHADER ? \"vertex\" : \"fragment\"} ${gl.getShaderInfoLog(shader)} ${addLineNumbers(str)}`);\n        }\n        this.shader = shader;\n    }\n}\n","import { FrontSide, BackSide, DoubleSide, RGBAFormat, NearestFilter, PCFShadowMap, RGBADepthPacking, } from \"../../constants\";\nimport { Frustum } from \"../../math/Frustum\";\nimport { Matrix4 } from \"../../math/Matrix4\";\nimport { Vector2 } from \"../../math/Vector2\";\nimport { Vector3 } from \"../../math/Vector3\";\nimport { Vector4 } from \"../../math/Vector4\";\nimport { MeshDepthMaterial, MeshDistanceMaterial } from \"../../materials/Materials\";\nimport { PointLight } from \"../../lights/PointLight\";\nimport { WebGLRenderTarget } from \"../WebGLRenderTarget\";\nimport { SpotLightShadow } from \"../../lights/SpotLightShadow\";\nimport { Mesh } from \"../../objects/Mesh\";\nimport { Line } from \"../../objects/Line\";\nimport { Points } from \"../../objects/Points\";\nimport { BufferGeometry } from \"../../core/BufferGeometry\";\nimport { SkinnedMesh } from \"../../objects/SkinnedMesh\";\nimport { Geometry } from \"../../core/Geometry\";\nexport class WebGLShadowMap {\n    constructor(renderer, objects, maxTextureSize) {\n        this.type = PCFShadowMap;\n        this.enabled = false;\n        this.autoUpdate = true;\n        this.needsUpdate = false;\n        this.frustum = new Frustum();\n        this.projScreenMatrix = new Matrix4();\n        this.shadowMapSize = new Vector2();\n        this.lookTarget = new Vector3();\n        this.lightPositionWorld = new Vector3();\n        this.morphingFlag = 1;\n        this.skinningFlag = 2;\n        this.numberOfMaterialVariants = (this.morphingFlag | this.skinningFlag) + 1;\n        this.depthMaterials = new Array(this.numberOfMaterialVariants);\n        this.distanceMaterials = new Array(this.numberOfMaterialVariants);\n        this.materialCache = {};\n        this.renderer = renderer;\n        this.objects = objects;\n        this.maxShadowMapSize = new Vector2(maxTextureSize, maxTextureSize);\n        this.shadowSide = {\n            0: BackSide,\n            1: FrontSide,\n            2: DoubleSide,\n        };\n        this.cubeDirections = [\n            new Vector3(1, 0, 0),\n            new Vector3(-1, 0, 0),\n            new Vector3(0, 0, 1),\n            new Vector3(0, 0, -1),\n            new Vector3(0, 1, 0),\n            new Vector3(0, -1, 0),\n        ];\n        this.cubeUps = [\n            new Vector3(0, 1, 0),\n            new Vector3(0, 1, 0),\n            new Vector3(0, 1, 0),\n            new Vector3(0, 1, 0),\n            new Vector3(0, 0, 1),\n            new Vector3(0, 0, -1),\n        ];\n        this.cube2DViewPorts = [\n            new Vector4(),\n            new Vector4(),\n            new Vector4(),\n            new Vector4(),\n            new Vector4(),\n            new Vector4(),\n        ];\n        // init\n        for (let i = 0; i !== this.numberOfMaterialVariants; i++) {\n            const useMorphing = (i & this.morphingFlag) !== 0;\n            const useSkinning = (i & this.skinningFlag) !== 0;\n            const depthMaterial = new MeshDepthMaterial({\n                depthPacking: RGBADepthPacking,\n                morphTargets: useMorphing,\n                skinning: useSkinning,\n            });\n            this.depthMaterials[i] = depthMaterial;\n            const distanceMaterial = new MeshDistanceMaterial({\n                morphTargets: useMorphing,\n                skinning: useSkinning,\n            });\n            this.distanceMaterials[i] = distanceMaterial;\n        }\n    }\n    getDepthMaterial(object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar) {\n        let result = null;\n        let materialVariants = this.depthMaterials;\n        let customMaterial = object.customDepthMaterial;\n        if (isPointLight) {\n            materialVariants = this.distanceMaterials;\n            customMaterial = object.customDistanceMaterial;\n        }\n        if (!customMaterial) {\n            let useMorphing = false;\n            if (material.morphTargets) {\n                const geometry = object.geometry;\n                if (geometry && geometry instanceof BufferGeometry) {\n                    useMorphing =\n                        geometry.morphAttributes &&\n                            geometry.morphAttributes.position &&\n                            geometry.morphAttributes.position.length > 0;\n                }\n                else if (geometry && geometry instanceof Geometry) {\n                    useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n                }\n            }\n            if (object instanceof SkinnedMesh && material.skinning === false) {\n                console.warn(\"THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:\", object);\n            }\n            const useSkinning = object instanceof SkinnedMesh && material.skinning;\n            let variantIndex = 0;\n            if (useMorphing)\n                variantIndex |= this.morphingFlag;\n            if (useSkinning)\n                variantIndex |= this.skinningFlag;\n            result = materialVariants[variantIndex];\n        }\n        else {\n            result = customMaterial;\n        }\n        if (this.renderer.localClippingEnabled &&\n            material.clipShadows === true &&\n            material.clippingPlanes.length !== 0) {\n            // in this case we need a unique material instance reflecting the\n            // appropriate state\n            const keyA = result.uuid, keyB = material.uuid;\n            let materialsForVariant = this.materialCache[keyA];\n            if (materialsForVariant === undefined) {\n                materialsForVariant = {};\n                this.materialCache[keyA] = materialsForVariant;\n            }\n            let cachedMaterial = materialsForVariant[keyB];\n            if (cachedMaterial === undefined) {\n                cachedMaterial = result.clone();\n                materialsForVariant[keyB] = cachedMaterial;\n            }\n            result = cachedMaterial;\n        }\n        result.visible = material.visible;\n        result.wireframe = material.wireframe;\n        result.side = material.shadowSide !== null ? material.shadowSide : this.shadowSide[material.side];\n        result.clipShadows = material.clipShadows;\n        result.clippingPlanes = material.clippingPlanes;\n        result.clipIntersection = material.clipIntersection;\n        result.wireframeLinewidth = material.wireframeLinewidth;\n        result.linewidth = material.linewidth;\n        if (isPointLight && result instanceof MeshDistanceMaterial) {\n            result.referencePosition.copy(lightPositionWorld);\n            result.nearDistance = shadowCameraNear;\n            result.farDistance = shadowCameraFar;\n        }\n        return result;\n    }\n    /**\n     * Ambient lights cannot cast shadows.\n     * Hemisphere lights cannot cast shadows.\n     * RectAreaLight does not support shadows.\n     */\n    render(lights, scene, camera) {\n        if (this.enabled === false)\n            return;\n        if (this.autoUpdate === false && this.needsUpdate === false)\n            return;\n        if (lights.length === 0)\n            return;\n        // TODO Clean up (needed in case of contextlost)\n        const gl = this.renderer.context;\n        const state = this.renderer.state;\n        // Set GL state for depth map.\n        state.disable(gl.BLEND);\n        state.buffers.color.setClear(1, 1, 1, 1);\n        state.buffers.depth.setTest(true);\n        state.setScissorTest(false);\n        // render depth map\n        let faceCount;\n        for (let i = 0, il = lights.length; i < il; i++) {\n            const light = lights[i];\n            const shadow = light.shadow;\n            const isPointLight = light instanceof PointLight;\n            if (shadow === undefined) {\n                console.warn(\"THREE.WebGLShadowMap:\", light, \"has no shadow.\");\n                continue;\n            }\n            const shadowCamera = shadow.camera;\n            this.shadowMapSize.copy(shadow.mapSize);\n            this.shadowMapSize.min(this.maxShadowMapSize);\n            if (isPointLight) {\n                const vpWidth = this.shadowMapSize.x;\n                const vpHeight = this.shadowMapSize.y;\n                // These viewports map a cube-map onto a 2D texture with the\n                // following orientation:\n                //\n                //  xzXZ\n                //   y Y\n                //\n                // X - Positive x direction\n                // x - Negative x direction\n                // Y - Positive y direction\n                // y - Negative y direction\n                // Z - Positive z direction\n                // z - Negative z direction\n                // positive X\n                this.cube2DViewPorts[0].set(vpWidth * 2, vpHeight, vpWidth, vpHeight);\n                // negative X\n                this.cube2DViewPorts[1].set(0, vpHeight, vpWidth, vpHeight);\n                // positive Z\n                this.cube2DViewPorts[2].set(vpWidth * 3, vpHeight, vpWidth, vpHeight);\n                // negative Z\n                this.cube2DViewPorts[3].set(vpWidth, vpHeight, vpWidth, vpHeight);\n                // positive Y\n                this.cube2DViewPorts[4].set(vpWidth * 3, 0, vpWidth, vpHeight);\n                // negative Y\n                this.cube2DViewPorts[5].set(vpWidth, 0, vpWidth, vpHeight);\n                this.shadowMapSize.x *= 4.0;\n                this.shadowMapSize.y *= 2.0;\n            }\n            if (shadow.map === null) {\n                const pars = {\n                    minFilter: NearestFilter,\n                    magFilter: NearestFilter,\n                    format: RGBAFormat,\n                };\n                shadow.map = new WebGLRenderTarget(this.shadowMapSize.x, this.shadowMapSize.y, pars);\n                shadow.map.texture.name = light.name + \".shadowMap\";\n                shadowCamera.updateProjectionMatrix();\n            }\n            /**\n             * Only SpotLight haa a shadow of SpotLightShadow\n             */\n            if (shadow instanceof SpotLightShadow) {\n                shadow.update(light);\n            }\n            const shadowMap = shadow.map;\n            const shadowMatrix = shadow.matrix;\n            this.lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n            shadowCamera.position.copy(this.lightPositionWorld);\n            if (isPointLight) {\n                faceCount = 6;\n                // for point lights we set the shadow matrix to be a translation-only matrix\n                // equal to inverse of the light's position\n                shadowMatrix.makeTranslation(-this.lightPositionWorld.x, -this.lightPositionWorld.y, -this.lightPositionWorld.z);\n            }\n            else {\n                faceCount = 1;\n                /**\n                 * Not PointLight\n                 */\n                this.lookTarget.setFromMatrixPosition(light.target.matrixWorld);\n                shadowCamera.lookAt(this.lookTarget);\n                shadowCamera.updateMatrixWorld();\n                // compute shadow matrix\n                shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n                shadowMatrix.multiply(shadowCamera.projectionMatrix);\n                shadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n            }\n            this.renderer.setRenderTarget(shadowMap);\n            this.renderer.clear();\n            // render shadow map for each cube face (if omni-directional) or\n            // run a single pass if not\n            for (let face = 0; face < faceCount; face++) {\n                if (isPointLight) {\n                    this.lookTarget.copy(shadowCamera.position);\n                    this.lookTarget.add(this.cubeDirections[face]);\n                    shadowCamera.up.copy(this.cubeUps[face]);\n                    shadowCamera.lookAt(this.lookTarget);\n                    shadowCamera.updateMatrixWorld();\n                    const vpDimensions = this.cube2DViewPorts[face];\n                    state.viewport(vpDimensions);\n                }\n                // update camera matrices and frustum\n                this.projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n                this.frustum.setFromMatrix(this.projScreenMatrix);\n                // set object matrices & frustum culling\n                this.renderObject(scene, camera, shadowCamera, isPointLight);\n            }\n        }\n        this.needsUpdate = false;\n    }\n    renderObject(object, camera, shadowCamera, isPointLight) {\n        if (object.visible === false)\n            return;\n        const visible = object.layers.test(camera.layers);\n        if (visible && (object instanceof Mesh || object instanceof Line || object instanceof Points)) {\n            if (object.castShadow && (!object.frustumCulled || this.frustum.intersectsObject(object))) {\n                object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n                const geometry = this.objects.update(object);\n                const material = object.material;\n                if (Array.isArray(material)) {\n                    const groups = geometry.groups;\n                    for (let k = 0, kl = groups.length; k < kl; k++) {\n                        const group = groups[k];\n                        const groupMaterial = material[group.materialIndex];\n                        if (groupMaterial && groupMaterial.visible) {\n                            const depthMaterial = this.getDepthMaterial(object, groupMaterial, isPointLight, this.lightPositionWorld, shadowCamera.near, shadowCamera.far);\n                            this.renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n                        }\n                    }\n                }\n                else if (material.visible) {\n                    const depthMaterial = this.getDepthMaterial(object, material, isPointLight, this.lightPositionWorld, shadowCamera.near, shadowCamera.far);\n                    this.renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);\n                }\n            }\n        }\n        const children = object.children;\n        for (let i = 0, l = children.length; i < l; i++) {\n            this.renderObject(children[i], camera, shadowCamera, isPointLight);\n        }\n    }\n}\n","import { CanvasTexture } from \"../../textures/CanvasTexture\";\nimport { Vector3, Quaternion, Fog, FogExp2 } from \"../../Three\";\nexport class WebGLSpriteRenderer {\n    constructor(renderer, state, textures, capabilities) {\n        this.renderer = renderer;\n        this.state = state;\n        this.textures = textures;\n        this.capabilities = capabilities;\n    }\n    init() {\n        const gl = this.renderer.context;\n        const program = this.program;\n        const vertices = new Float32Array([\n            -0.5,\n            -0.5,\n            0,\n            0,\n            0.5,\n            -0.5,\n            1,\n            0,\n            0.5,\n            0.5,\n            1,\n            1,\n            -0.5,\n            0.5,\n            0,\n            1,\n        ]);\n        const faces = new Uint16Array([0, 1, 2, 0, 2, 3]);\n        this.vertexBuffer = gl.createBuffer();\n        this.elementBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elementBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW);\n        this.program = this.createProgram();\n        this.attributes = {\n            position: gl.getAttribLocation(program, \"position\"),\n            uv: gl.getAttribLocation(program, \"uv\"),\n        };\n        this.uniforms = {\n            uvOffset: gl.getUniformLocation(program, \"uvOffset\"),\n            uvScale: gl.getUniformLocation(program, \"uvScale\"),\n            rotation: gl.getUniformLocation(program, \"rotation\"),\n            scale: gl.getUniformLocation(program, \"scale\"),\n            color: gl.getUniformLocation(program, \"color\"),\n            map: gl.getUniformLocation(program, \"map\"),\n            opacity: gl.getUniformLocation(program, \"opacity\"),\n            modelViewMatrix: gl.getUniformLocation(program, \"modelViewMatrix\"),\n            projectionMatrix: gl.getUniformLocation(program, \"projectionMatrix\"),\n            fogType: gl.getUniformLocation(program, \"fogType\"),\n            fogDensity: gl.getUniformLocation(program, \"fogDensity\"),\n            fogNear: gl.getUniformLocation(program, \"fogNear\"),\n            fogFar: gl.getUniformLocation(program, \"fogFar\"),\n            fogColor: gl.getUniformLocation(program, \"fogColor\"),\n            fogDepth: gl.getUniformLocation(program, \"fogDepth\"),\n            alphaTest: gl.getUniformLocation(program, \"alphaTest\"),\n        };\n        const canvas = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"canvas\");\n        canvas.width = 8;\n        canvas.height = 8;\n        const context = canvas.getContext(\"2d\");\n        context.fillStyle = \"white\";\n        context.fillRect(0, 0, 8, 8);\n        this.texture = new CanvasTexture(canvas);\n    }\n    createProgram() {\n        const gl = this.renderer.context;\n        const program = gl.createProgram();\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(vertexShader, [\n            \"precision \" + this.capabilities.precision + \" float;\",\n            \"#define SHADER_NAME \" + \"SpriteMaterial\",\n            \"uniform mat4 modelViewMatrix;\",\n            \"uniform mat4 projectionMatrix;\",\n            \"uniform float rotation;\",\n            \"uniform vec2 scale;\",\n            \"uniform vec2 uvOffset;\",\n            \"uniform vec2 uvScale;\",\n            \"attribute vec2 position;\",\n            \"attribute vec2 uv;\",\n            \"varying vec2 vUV;\",\n            \"varying float fogDepth;\",\n            \"void main() {\",\n            \"\tvUV = uvOffset + uv * uvScale;\",\n            \"\tvec2 alignedPosition = position * scale;\",\n            \"\tvec2 rotatedPosition;\",\n            \"\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\",\n            \"\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\",\n            \"\tvec4 mvPosition;\",\n            \"\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\",\n            \"\tmvPosition.xy += rotatedPosition;\",\n            \"\tgl_Position = projectionMatrix * mvPosition;\",\n            \"\tfogDepth = - mvPosition.z;\",\n            \"}\",\n        ].join(\"\\n\"));\n        gl.shaderSource(fragmentShader, [\n            \"precision \" + this.capabilities.precision + \" float;\",\n            \"#define SHADER_NAME \" + \"SpriteMaterial\",\n            \"uniform vec3 color;\",\n            \"uniform sampler2D map;\",\n            \"uniform float opacity;\",\n            \"uniform int fogType;\",\n            \"uniform vec3 fogColor;\",\n            \"uniform float fogDensity;\",\n            \"uniform float fogNear;\",\n            \"uniform float fogFar;\",\n            \"uniform float alphaTest;\",\n            \"varying vec2 vUV;\",\n            \"varying float fogDepth;\",\n            \"void main() {\",\n            \"\tvec4 texture = texture2D( map, vUV );\",\n            \"\tgl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\",\n            \"\tif ( gl_FragColor.a < alphaTest ) discard;\",\n            \"\tif ( fogType > 0 ) {\",\n            \"\t\tfloat fogFactor = 0.0;\",\n            \"\t\tif ( fogType == 1 ) {\",\n            \"\t\t\tfogFactor = smoothstep( fogNear, fogFar, fogDepth );\",\n            \"\t\t} else {\",\n            \"\t\t\tconst float LOG2 = 1.442695;\",\n            \"\t\t\tfogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );\",\n            \"\t\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\",\n            \"\t\t}\",\n            \"\t\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\",\n            \"\t}\",\n            \"}\",\n        ].join(\"\\n\"));\n        gl.compileShader(vertexShader);\n        gl.compileShader(fragmentShader);\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.linkProgram(program);\n        return program;\n    }\n    render(sprites, scene, camera) {\n        const gl = this.renderer.context;\n        const program = gl.createProgram();\n        const attributes = this.attributes;\n        const uniforms = this.uniforms;\n        const state = this.state;\n        if (sprites.length === 0)\n            return;\n        // setup gl\n        if (program === undefined) {\n            this.init();\n        }\n        state.useProgram(program);\n        state.initAttributes();\n        state.enableAttribute(attributes.position);\n        state.enableAttribute(attributes.uv);\n        state.disableUnusedAttributes();\n        state.disable(gl.CULL_FACE);\n        state.enable(gl.BLEND);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n        gl.vertexAttribPointer(attributes.position, 2, gl.FLOAT, false, 2 * 8, 0);\n        gl.vertexAttribPointer(attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elementBuffer);\n        gl.uniformMatrix4fv(uniforms.projectionMatrix, false, camera.projectionMatrix.elements);\n        state.activeTexture(gl.TEXTURE0);\n        gl.uniform1i(uniforms.map, 0);\n        let oldFogType = 0;\n        let sceneFogType = 0;\n        const fog = scene.fog;\n        if (fog) {\n            gl.uniform3f(uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b);\n            if (fog instanceof Fog) {\n                gl.uniform1f(uniforms.fogNear, fog.near);\n                gl.uniform1f(uniforms.fogFar, fog.far);\n                gl.uniform1i(uniforms.fogType, 1);\n                oldFogType = 1;\n                sceneFogType = 1;\n            }\n            else if (fog instanceof FogExp2) {\n                gl.uniform1f(uniforms.fogDensity, fog.density);\n                gl.uniform1i(uniforms.fogType, 2);\n                oldFogType = 2;\n                sceneFogType = 2;\n            }\n        }\n        else {\n            gl.uniform1i(uniforms.fogType, 0);\n            oldFogType = 0;\n            sceneFogType = 0;\n        }\n        // update positions and sort\n        for (let i = 0, l = sprites.length; i < l; i++) {\n            const sprite = sprites[i];\n            sprite.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, sprite.matrixWorld);\n            sprite.z = -sprite.modelViewMatrix.elements[14];\n        }\n        sprites.sort((a, b) => {\n            if (a.renderOrder !== b.renderOrder) {\n                return a.renderOrder - b.renderOrder;\n            }\n            else if (a.z !== b.z) {\n                return b.z - a.z;\n            }\n            else {\n                return b.id - a.id;\n            }\n        });\n        // render all sprites\n        const scale = [];\n        for (let i = 0, l = sprites.length; i < l; i++) {\n            const sprite = sprites[i];\n            const material = sprite.material;\n            if (material.visible === false)\n                continue;\n            //sprite.onBeforeRender(this.renderer, scene, camera, undefined, material, undefined );\n            gl.uniform1f(uniforms.alphaTest, material.alphaTest);\n            gl.uniformMatrix4fv(uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements);\n            const spritePosition = new Vector3();\n            const spriteRotation = new Quaternion();\n            const spriteScale = new Vector3();\n            sprite.matrixWorld.decompose(spritePosition, spriteRotation, spriteScale);\n            scale[0] = spriteScale.x;\n            scale[1] = spriteScale.y;\n            let fogType = 0;\n            if (scene.fog && material.fog) {\n                fogType = sceneFogType;\n            }\n            if (oldFogType !== fogType) {\n                gl.uniform1i(uniforms.fogType, fogType);\n                oldFogType = fogType;\n            }\n            if (material.map !== null) {\n                gl.uniform2f(uniforms.uvOffset, material.map.offset.x, material.map.offset.y);\n                gl.uniform2f(uniforms.uvScale, material.map.repeat.x, material.map.repeat.y);\n            }\n            else {\n                gl.uniform2f(uniforms.uvOffset, 0, 0);\n                gl.uniform2f(uniforms.uvScale, 1, 1);\n            }\n            gl.uniform1f(uniforms.opacity, material.opacity);\n            gl.uniform3f(uniforms.color, material.color.r, material.color.g, material.color.b);\n            gl.uniform1f(uniforms.rotation, material.rotation);\n            gl.uniform2fv(uniforms.scale, scale);\n            state.setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n            state.buffers.depth.setTest(material.depthTest);\n            state.buffers.depth.setMask(material.depthWrite);\n            state.buffers.color.setMask(material.colorWrite);\n            this.textures.setTexture2D(material.map || this.texture, 0);\n            gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n            //sprite.onAfterRender( this.renderer, scene, camera, undefined, material, undefined );\n        }\n        // restore gl\n        state.enable(gl.CULL_FACE);\n        state.reset();\n    }\n}\n","import { AdditiveBlending, AlwaysDepth, BackSide, CullFaceFront, CullFaceBack, CullFaceNone, CustomBlending, DoubleSide, EqualDepth, GreaterDepth, GreaterEqualDepth, LessEqualDepth, LessDepth, MultiplyBlending, NeverDepth, NoBlending, NormalBlending, NotEqualDepth, SubtractiveBlending, } from \"../../constants\";\nimport { Vector4 } from \"../../math/Vector4\";\nexport class ColorBuffer {\n    constructor(context) {\n        this.locked = false;\n        this.color = new Vector4();\n        this.currentColorMask = null;\n        this.currentColorClear = new Vector4(0, 0, 0, 0);\n        this.context = context;\n    }\n    setMask(colorMask) {\n        if (this.currentColorMask !== colorMask && !this.locked) {\n            this.context.colorMask(colorMask, colorMask, colorMask, colorMask);\n            this.currentColorMask = colorMask;\n        }\n        return this;\n    }\n    setLocked(lock) {\n        this.locked = lock;\n        return this;\n    }\n    setClear(r, g, b, a, premultipliedAlpha = false) {\n        if (premultipliedAlpha === true) {\n            r *= a;\n            g *= a;\n            b *= a;\n        }\n        this.color.set(r, g, b, a);\n        if (this.currentColorClear.equals(this.color) === false) {\n            this.context.clearColor(r, g, b, a);\n            this.currentColorClear.copy(this.color);\n        }\n        return this;\n    }\n    reset() {\n        this.locked = false;\n        this.currentColorMask = null;\n        /**\n         * set to invalid state\n         */\n        this.currentColorClear.set(-1, 0, 0, 0);\n        return this;\n    }\n}\nexport class DepthBuffer {\n    constructor(context, capabilities) {\n        this.locked = false;\n        this.currentDepthMask = null;\n        this.currentDepthFunc = null;\n        this.currentDepthClear = null;\n        this.context = context;\n        this.capabilities = capabilities;\n    }\n    setTest(depthTest = false) {\n        if (depthTest) {\n            this.enable(this.context.DEPTH_TEST);\n        }\n        else {\n            this.disable(this.context.DEPTH_TEST);\n        }\n        return this;\n    }\n    setMask(depthMask) {\n        if (this.currentDepthMask !== depthMask && !this.locked) {\n            this.context.depthMask(depthMask);\n            this.currentDepthMask = depthMask;\n        }\n        return this;\n    }\n    /**\n     * 开启深度测试功能后才能设置对应的比较函数\n     * 启用方式gl.enable(gl.DEPTH_TEST)\n     * 用于指定深度缓冲比较值）\n     GL_NEVER,不通过（输入的深度值不取代参考值）\n     GL_LESS,如果输入的深度值小于参考值，则通过\n     GL_EQUAL,如果输入的深度值等于参考值，则通过\n     GL_LEQUAL,如果输入的深度值小于或等于参考值，则通过\n     GL_GREATER,如果输入的深度值大于参考值，则通过\n     GL_NOTEQUAL,如果输入的深度值不等于参考值，则通过\n     GL_GEQUAL,如果输入的深度值大于或等于参考值，则通过\n     GL_ALWAYS,总是通过（输入的深度值取代参考值）\n     * Z Buffer 值为具体的比较对象，在不使用深度测试的时候，\n     * 如果我们先绘制一个距离较近的物体，再绘制距离较远的物体，则距离远的物体因为后绘制，会把距离近的物体覆盖掉，这样的效果并不是我们所希望的。\n     * 而有了深度缓冲以后，绘制物体的顺序就不那么重要了，都能按照远近（Z值）正常显示，这很关键。\n     * 实际上，只要存在深度缓冲区，无论是否启用深度测试，OpenGL在像素被绘制时都会尝试将深度数据写入到缓冲区内，\n     * 除非调用了glDepthMask(GL_FALSE)来禁止写入。这些深度数据除了用于常规的测试外，还可以有一些有趣的用途，比如绘制阴影等等。\n     *\n     * 绘制半透明物体时，需注意：在绘制半透明物体时前，还需要利用glDepthMask(GL_FALSE)将深度缓冲区设置为只读形式，\n     * 否则可能出现画面错误。为什么呢，因为画透明物体时，将使用混色，这时就不能继续使用深度模式，\n     * 而是利用混色函数来进行混合。这一来，就可以使用混合函数绘制半透明物体了。\n     *\n     * @param depthFunc\n     */\n    setFunc(depthFunc) {\n        if (this.currentDepthFunc !== depthFunc) {\n            const gl = this.context;\n            if (depthFunc) {\n                switch (depthFunc) {\n                    case NeverDepth:\n                        gl.depthFunc(gl.NEVER);\n                        break;\n                    case AlwaysDepth:\n                        gl.depthFunc(gl.ALWAYS);\n                        break;\n                    case LessDepth:\n                        gl.depthFunc(gl.LESS);\n                        break;\n                    case LessEqualDepth:\n                        gl.depthFunc(gl.LEQUAL);\n                        break;\n                    case EqualDepth:\n                        gl.depthFunc(gl.EQUAL);\n                        break;\n                    case GreaterEqualDepth:\n                        gl.depthFunc(gl.GEQUAL);\n                        break;\n                    case GreaterDepth:\n                        gl.depthFunc(gl.GREATER);\n                        break;\n                    case NotEqualDepth:\n                        gl.depthFunc(gl.NOTEQUAL);\n                        break;\n                    default:\n                        gl.depthFunc(gl.LEQUAL);\n                }\n            }\n            else {\n                gl.depthFunc(gl.LEQUAL);\n            }\n            this.currentDepthFunc = depthFunc;\n        }\n        return this;\n    }\n    setLocked(lock = false) {\n        this.locked = lock;\n        return this;\n    }\n    setClear(depth) {\n        if (this.currentDepthClear !== depth) {\n            this.context.clearDepth(depth);\n            this.currentDepthClear = depth;\n        }\n        return this;\n    }\n    reset() {\n        this.locked = false;\n        this.currentDepthMask = null;\n        this.currentDepthFunc = null;\n        this.currentDepthClear = null;\n        return this;\n    }\n    enable(id) {\n        if (this.capabilities[id] !== true) {\n            this.context.enable(id);\n            this.capabilities[id] = true;\n        }\n        return this;\n    }\n    disable(id) {\n        if (this.capabilities[id] !== false) {\n            this.context.disable(id);\n            this.capabilities[id] = false;\n        }\n        return this;\n    }\n}\nexport class StencilBuffer {\n    constructor(context, capabilities) {\n        this.locked = false;\n        this.currentStencilMask = null;\n        this.currentStencilFunc = null;\n        this.currentStencilRef = null;\n        this.currentStencilFuncMask = null;\n        this.currentStencilFail = null;\n        this.currentStencilZFail = null;\n        this.currentStencilZPass = null;\n        this.currentStencilClear = null;\n        this.context = context;\n        this.capabilities = capabilities;\n    }\n    setTest(stencilTest) {\n        if (stencilTest) {\n            this.enable(this.context.STENCIL_TEST);\n        }\n        else {\n            this.disable(this.context.STENCIL_TEST);\n        }\n        return this;\n    }\n    setMask(stencilMask) {\n        if (this.currentStencilMask !== stencilMask && !this.locked) {\n            this.context.stencilMask(stencilMask);\n            this.currentStencilMask = stencilMask;\n        }\n        return this;\n    }\n    setFunc(stencilFunc, stencilRef, stencilMask) {\n        if (this.currentStencilFunc !== stencilFunc ||\n            this.currentStencilRef !== stencilRef ||\n            this.currentStencilFuncMask !== stencilMask) {\n            this.context.stencilFunc(stencilFunc, stencilRef, stencilMask);\n            this.currentStencilFunc = stencilFunc;\n            this.currentStencilRef = stencilRef;\n            this.currentStencilFuncMask = stencilMask;\n        }\n        return this;\n    }\n    setOp(stencilFail, stencilZFail, stencilZPass) {\n        if (this.currentStencilFail !== stencilFail ||\n            this.currentStencilZFail !== stencilZFail ||\n            this.currentStencilZPass !== stencilZPass) {\n            this.context.stencilOp(stencilFail, stencilZFail, stencilZPass);\n            this.currentStencilFail = stencilFail;\n            this.currentStencilZFail = stencilZFail;\n            this.currentStencilZPass = stencilZPass;\n        }\n        return this;\n    }\n    setLocked(lock) {\n        this.locked = lock;\n        return this;\n    }\n    setClear(stencil) {\n        if (this.currentStencilClear !== stencil) {\n            this.context.clearStencil(stencil);\n            this.currentStencilClear = stencil;\n        }\n        return this;\n    }\n    reset() {\n        this.locked = false;\n        this.currentStencilMask = null;\n        this.currentStencilFunc = null;\n        this.currentStencilRef = null;\n        this.currentStencilFuncMask = null;\n        this.currentStencilFail = null;\n        this.currentStencilZFail = null;\n        this.currentStencilZPass = null;\n        this.currentStencilClear = null;\n        return this;\n    }\n    enable(id) {\n        if (this.capabilities[id] !== true) {\n            this.context.enable(id);\n            this.capabilities[id] = true;\n        }\n        return this;\n    }\n    disable(id) {\n        if (this.capabilities[id] !== false) {\n            this.context.disable(id);\n            this.capabilities[id] = false;\n        }\n        return this;\n    }\n}\nexport class WebGLState {\n    constructor(context, extensions, utils) {\n        this.capabilities = {};\n        this.buffers = {\n            color: null,\n            depth: null,\n            stencil: null,\n        };\n        this.lineWidthAvailable = false;\n        this.currentScissor = new Vector4();\n        this.currentViewport = new Vector4();\n        this.emptyTextures = {};\n        this.currentFlipSided = null;\n        this.currentCullFace = null;\n        this.currentBlending = null;\n        this.currentPremultipledAlpha = false;\n        this.currentBlendEquation = null;\n        this.currentBlendEquationAlpha = null;\n        this.currentBlendSrc = null;\n        this.currentBlendDst = null;\n        this.currentBlendSrcAlpha = null;\n        this.currentBlendDstAlpha = null;\n        this.compressedTextureFormats = null;\n        this.currentProgram = null;\n        this.currentLineWidth = null;\n        this.currentPolygonOffsetFactor = null;\n        this.currentPolygonOffsetUnits = null;\n        this.currentTextureSlot = null;\n        this.currentBoundTextures = {};\n        this.context = context;\n        this.extensions = extensions;\n        this.utils = utils;\n        this.buffers.color = new ColorBuffer(context);\n        this.buffers.depth = new DepthBuffer(context, this.capabilities);\n        this.buffers.stencil = new StencilBuffer(context, this.capabilities);\n        this.maxVertexAttributes = context.getParameter(context.MAX_VERTEX_ATTRIBS);\n        this.newAttributes = new Uint8Array(this.maxVertexAttributes);\n        this.enabledAttributes = new Uint8Array(this.maxVertexAttributes);\n        this.attributeDivisors = new Uint8Array(this.maxVertexAttributes);\n        this.maxTextures = context.getParameter(context.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.version = parseFloat(/^WebGL\\ ([0-9])/.exec(context.getParameter(context.VERSION))[1]);\n        this.lineWidthAvailable = this.version >= 1.0;\n        this.emptyTextures[context.TEXTURE_2D] = this.createTexture(context.TEXTURE_2D, context.TEXTURE_2D, 1);\n        this.emptyTextures[context.TEXTURE_CUBE_MAP] = this.createTexture(context.TEXTURE_CUBE_MAP, context.TEXTURE_CUBE_MAP_POSITIVE_X, 6);\n        /**\n         * initialize\n         */\n        this.buffers.color.setClear(0, 0, 0, 1);\n        this.buffers.depth.setClear(1);\n        this.buffers.stencil.setClear(0);\n        this.enable(context.DEPTH_TEST);\n        this.buffers.depth.setFunc(LessEqualDepth);\n        this.setFlipSided(false);\n        this.setCullFace(CullFaceBack);\n        this.enable(context.CULL_FACE);\n        this.enable(context.BLEND);\n        this.setBlending(NormalBlending);\n    }\n    enable(id) {\n        if (this.capabilities[id] !== true) {\n            this.context.enable(id);\n            this.capabilities[id] = true;\n        }\n        return this;\n    }\n    disable(id) {\n        if (this.capabilities[id] !== false) {\n            this.context.disable(id);\n            this.capabilities[id] = false;\n        }\n        return this;\n    }\n    /**\n     * 设置多边形的正反面（片元着色器？），这个和多边形的顶点连接顺序有关，CW为顺时针包围部分为正面，而CCW表示逆时针围绕部分为正面。\n     * @param flipSided\n     */\n    setFlipSided(flipSided = false) {\n        const gl = this.context;\n        if (this.currentFlipSided !== flipSided) {\n            if (flipSided) {\n                gl.frontFace(gl.CW);\n            }\n            else {\n                gl.frontFace(gl.CCW);\n            }\n            this.currentFlipSided = flipSided;\n        }\n        return this;\n    }\n    /**\n     * FRONT、BACK两个参数分别表示禁用多边形正面或者背面上的光照、阴影和颜色计算及操作，消除不必要的渲染计算。\n     * 例如某对象无论如何位置变化，我们都只能看到构成其组成的多边形的某一面时，可使用该函数。\n     *\n     * @param cullFace\n     */\n    setCullFace(cullFace) {\n        const gl = this.context;\n        if (cullFace !== CullFaceNone) {\n            this.enable(gl.CULL_FACE);\n            if (cullFace !== this.currentCullFace) {\n                if (cullFace === CullFaceBack) {\n                    gl.cullFace(gl.BACK);\n                }\n                else if (cullFace === CullFaceFront) {\n                    gl.cullFace(gl.FRONT);\n                }\n                else {\n                    gl.cullFace(gl.FRONT_AND_BACK);\n                }\n            }\n        }\n        else {\n            this.disable(gl.CULL_FACE);\n        }\n        this.currentCullFace = cullFace;\n        return this;\n    }\n    /**\n     * 采用标准混合方式时, 将帧缓存中的颜色和输入片元的颜色合并起来, 得到新的帧缓存颜色.\n     * 上面的函数用来指定其他数学运算,以计算帧缓存颜色和片元颜色的差, 它们中的最大值或最小值.\n     * 指定如何混合帧缓存中的颜色和片元颜色.\n     * Cs(Sr, Sg, Sb, Sa)和Cd(Dr,Dg,Db,Da)表示源颜色和目标颜色,\n     * S(Source)和D(Destination)表示函数glBlendFunc()或glBlendFuncSeparate()指定的源混合因子和目标混合因子.\n     *\n     * GL_FUNC_ADD                      CsS + CdD\n     * GL_FUNC_SUBTRACT                 CsS - CdD\n     * GL_FUNC_REVERSE_SUBTRACT        CdD - CsS\n     * GL_MIN                           min(CsS, CdD)\n     * GL_MAX                           max(CsS, CdD)\n     *\n     * 将该四元组的各个分量截取到[0,1].\n     *\n     * 选择源混合因子和目标混合因子的方式:\n     * 第一种方式是调用函数glBlendFunc(),并指定两个混合因子, 其中第一个参数为源RGBA的混合因子, 第二个参数为目标RGBA的混合因子.\n     * void glBlendFunc(GLenum srcfactor, GLenum destfactor);\n     *\n     * 第二种方法是调用glBlendFuncSeparate()并指定4个混合因子, 这样可以用不同的方式来混合RGB和alpha值.\n     * void glBlendFuncSeparate(GLenum srcRGB, GLenum destRGB, GLenum srcalpha, GLenum destalpha);\n     *\n     * 常量:                        RGB混合因子                        alpha混合因子\n     * GL_ZERO:                    (0, 0, 0)                        0\n     * GL_ONE:                    (1, 1, 1)                        1\n     * GL_DST_COLOR:            (Rd, Gd, Bd)\n     * GL_SRC_COLOR:            (Rs, Gs, Bs)                    A\n     * GL_ONE_MINUS_DST_COLOR:    (1, 1, 1) - (Rd, Gd, Bd)\n     * GL_ONE_MINUS_SRC_COLOR:    (1, 1, 1) - (Rs, Gs, Bs)        1 - A\n     * GL_SRC_ALPHA:            (As,As,As,As)\n     * GL_ONE_MINUS_SRC_ALPHA:    (1, 1, 1, 1) - (As,As,As,As)\n     * GL_DST_ALPHA:            (Ad, Ad, Ad, Ad)\n     * GL_ONE_MINUS_DST_ALPHA:    (1, 1, 1, 1) - (Ad, Ad, Ad, Ad)\n     * GL_SRC_ALPHA_STATURATE:    (f, f, f, 1); f = min(As, 1 - Ad)\n     *\n     * @param blending\n     * @param blendEquation\n     * @param blendSrc\n     * @param blendDst\n     * @param blendEquationAlpha\n     * @param blendSrcAlpha\n     * @param blendDstAlpha\n     * @param premultipliedAlpha\n     */\n    setBlending(blending, blendEquation = 0, blendSrc = 0, blendDst = 0, blendEquationAlpha = 0, blendSrcAlpha = 0, blendDstAlpha = 0, premultipliedAlpha = false) {\n        const gl = this.context;\n        if (blending !== NoBlending) {\n            this.enable(gl.BLEND);\n        }\n        else {\n            this.disable(gl.BLEND);\n        }\n        if (blending !== CustomBlending) {\n            if (blending !== this.currentBlending || premultipliedAlpha !== this.currentPremultipledAlpha) {\n                switch (blending) {\n                    case AdditiveBlending:\n                        if (premultipliedAlpha) {\n                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                            gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE);\n                        }\n                        else {\n                            gl.blendEquation(gl.FUNC_ADD);\n                            gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n                        }\n                        break;\n                    case SubtractiveBlending:\n                        if (premultipliedAlpha) {\n                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                            gl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);\n                        }\n                        else {\n                            gl.blendEquation(gl.FUNC_ADD);\n                            gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);\n                        }\n                        break;\n                    case MultiplyBlending:\n                        if (premultipliedAlpha) {\n                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                            gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n                        }\n                        else {\n                            gl.blendEquation(gl.FUNC_ADD);\n                            gl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n                        }\n                        break;\n                    default:\n                        if (premultipliedAlpha) {\n                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                            gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                        }\n                        else {\n                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                            gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                        }\n                }\n            }\n            this.currentBlendEquation = 0;\n            this.currentBlendSrc = 0;\n            this.currentBlendDst = 0;\n            this.currentBlendEquationAlpha = 0;\n            this.currentBlendSrcAlpha = 0;\n            this.currentBlendDstAlpha = 0;\n        }\n        else {\n            blendEquationAlpha = blendEquationAlpha || blendEquation;\n            blendSrcAlpha = blendSrcAlpha || blendSrc;\n            blendDstAlpha = blendDstAlpha || blendDst;\n            if (blendEquation !== this.currentBlendEquation || blendEquationAlpha !== this.currentBlendEquationAlpha) {\n                gl.blendEquationSeparate(this.utils.convert(blendEquation), this.utils.convert(blendEquationAlpha));\n                this.currentBlendEquation = blendEquation;\n                this.currentBlendEquationAlpha = blendEquationAlpha;\n            }\n            if (blendSrc !== this.currentBlendSrc ||\n                blendDst !== this.currentBlendDst ||\n                blendSrcAlpha !== this.currentBlendSrcAlpha ||\n                blendDstAlpha !== this.currentBlendDstAlpha) {\n                gl.blendFuncSeparate(this.utils.convert(blendSrc), this.utils.convert(blendDst), this.utils.convert(blendSrcAlpha), this.utils.convert(blendDstAlpha));\n                this.currentBlendSrc = blendSrc;\n                this.currentBlendDst = blendDst;\n                this.currentBlendSrcAlpha = blendSrcAlpha;\n                this.currentBlendDstAlpha = blendDstAlpha;\n            }\n        }\n        this.currentBlending = blending;\n        this.currentPremultipledAlpha = premultipliedAlpha;\n        return this;\n    }\n    setMaterial(material, frontFaceCW = false) {\n        const gl = this.context;\n        material.side === DoubleSide ? this.disable(gl.CULL_FACE) : this.enable(gl.CULL_FACE);\n        let flipSided = material.side === BackSide;\n        if (frontFaceCW)\n            flipSided = !flipSided;\n        this.setFlipSided(flipSided);\n        material.transparent === true\n            ? this.setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha)\n            : this.setBlending(NoBlending);\n        this.buffers.depth.setFunc(material.depthFunc);\n        this.buffers.depth.setTest(material.depthTest);\n        this.buffers.depth.setMask(material.depthWrite);\n        this.buffers.depth.setMask(material.colorWrite);\n        this.setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n        return this;\n    }\n    initAttributes() {\n        for (let i = 0, l = this.newAttributes.length; i < l; i++) {\n            this.newAttributes[i] = 0;\n        }\n        return this;\n    }\n    enableAttribute(attribute) {\n        return this.enableAttributeAndDivisor(attribute);\n    }\n    disableUnusedAttributes() {\n        const gl = this.context;\n        for (let i = 0, l = this.enabledAttributes.length; i !== l; i++) {\n            if (this.enabledAttributes[i] !== this.newAttributes[i]) {\n                gl.disableVertexAttribArray(i);\n                this.enabledAttributes[i] = 0;\n            }\n        }\n        return this;\n    }\n    /**\n     * @param attribute\n     * @param meshPerAttribute\n     */\n    enableAttributeAndDivisor(attribute, meshPerAttribute = 0) {\n        this.newAttributes[attribute] = 1;\n        if (this.enabledAttributes[attribute] === 0) {\n            /**\n             * 处于性能的考虑默认情况下CPU即使上传数据到GPU，所有顶点着色器的属性（Attribute）变量都是关闭的。\n             * glEnableVertexAttribArray决定了着色器能否读取到数据，由是否启用了对应的属性决定。\n             * glEnableVertexAttribArray与glVertexAttribPointer是VAO（Vertex Array Objects）的处理函数，\n             * glVertexAttribPointer负责告知GPU传入数据（VBO）的类型、大小、单位等信息。\n             * glEnableVertexAttribArray与glVertexAttribPointer的调用顺序并不影响，\n             * 只要在设置完VBO之后和drawCall之前即可。\n             * 参数attribute，代表了需要传入的attribute的location信息。\n             * 所以这里可以看出enabledAttributes顾名思义就是记录着那些location的attribute被启用了。\n             * 而反观newAttributes，只要是使用过某个location的attribute，那么就会被永久占用为1，\n             * 即使是reset也没有用，除非调用initAttributes。\n             * 这么做是有道理的，因为MAX_VERTEX_ATTRIBS决定了系统最大的attribute数目，\n             * 这就意味着attribute的个数不能超过这一数目。\n             * 所以，推测reset的作用只是释放内存，并禁用所有的attribute。\n             * 而每次useProgram之后由于shader的改变，所以都需要调用initAttributes，\n             * 在Three.js的几个Renderer中，WebGLState的用法都是在切换过program之后，\n             * 调用initAttributes，然后使用enableAttribute设置新的attribute，\n             * 最后通过disableUnusedAttributes纠正状态。\n             */\n            this.context.enableVertexAttribArray(attribute);\n            this.enabledAttributes[attribute] = 1;\n        }\n        /**\n         * ANGLE_instanced_arrays是属于 WebGL API 的一个扩展API，\n         * 如果使用它们提供了相同的顶点数据或者是原始的数目和类型的话，\n         * 就可以绘制相同的对象或是被多次使用的相似的对象组。\n         */\n        if (this.attributeDivisors[attribute] !== meshPerAttribute) {\n            const extension = this.extensions.get(\"ANGLE_instanced_arrays\");\n            extension.vertexAttribDivisorANGLE(attribute, meshPerAttribute);\n            this.attributeDivisors[attribute] = meshPerAttribute;\n        }\n        return this;\n    }\n    getCompressedTextureFormats() {\n        if (this.compressedTextureFormats === null) {\n            this.compressedTextureFormats = [];\n            if (this.extensions.get(\"WEBGL_compressed_texture_pvrtc\") ||\n                this.extensions.get(\"WEBGL_compressed_texture_s3tc\") ||\n                this.extensions.get(\"WEBGL_compressed_texture_etc1\") ||\n                this.extensions.get(\"WEBGL_compressed_texture_astc\")) {\n                const formats = this.context.getParameter(this.context.COMPRESSED_TEXTURE_FORMATS);\n                for (let i = 0; i < formats.length; i++) {\n                    this.compressedTextureFormats.push(formats[i]);\n                }\n            }\n        }\n        return this.compressedTextureFormats;\n    }\n    useProgram(program) {\n        if (this.currentProgram !== program) {\n            this.context.useProgram(program);\n            this.currentProgram = program;\n            return true;\n        }\n        return false;\n    }\n    setLineWidth(width) {\n        if (width !== this.currentLineWidth) {\n            if (this.lineWidthAvailable)\n                this.context.lineWidth(width);\n            this.currentLineWidth = width;\n        }\n        return this;\n    }\n    /**\n     * 在OpenGL中，如果想绘制一个多边形同时绘制其边界，可是先使用多边形模式GL_FILL绘制物体，\n     * 然后使用多边形模式GL_LINE和不同的颜色再次绘制这个多边形。\n     * 但是由于直线和多边形的光栅化方式不同，导致位于同一位置的多边形和直线的深度值并不相同，\n     * 进而导致直线有时在多边形的里面，有时在多边形的外面，这种现象就是\"Stiching\"。\n     * 而Z-fighting主要是指当两个面共面时，二者的深度值一样，深度缓冲就不能清楚的将它们两者分离开来，\n     * 位于后面的图元上的一些像素就会被渲染到前面的图元上，最终导致图象在帧与帧之间产生微弱的闪光。\n     * 解决这两个问题的方法就是使用Polygon Offset，当然你也可以使用模板测试，但Polygon Offset的速度会比模板缓存快。\n     * 启用了Polygon Offset，就表示在执行深度测试前多边形的深度值被稍微增加了一点点，\n     * 这需要用glPolygonOffset来指定。glPolygonOffset需要2个参数：GLfloat factor 和GLfloat units。\n     * 每一个Fragment的深度值都会增加如下所示的偏移量：offset = (m * factor) + (r * units)\n     * m是多边形的深度的斜率（在光栅化阶段计算得出）中的最大值。\n     * 这句话难以理解，你只需知道，一个多边形越是与近裁剪面（near clipping plan）平行，m就越接近0。\n     * r是能产生在窗口坐标系的深度值中可分辨的差异的最小值，r是由具体实现OpenGL的平台指定的一个常量。\n     * 一个大于0的offset 会把模型推到离你（摄像机）更远一点的位置，相应地，一个小于0的offset 会把模型拉近。\n     * 如果想要非常好地使用Polygon Offset，你需要做一些数学上的研究。\n     * 不过一般而言，只需把1.0和0.0这样简单的值赋给glPolygonOffset即可满足需要。\n     *\n     * @param polygonOffset\n     * @param factor\n     * @param units\n     */\n    setPolygonOffset(polygonOffset, factor, units) {\n        const gl = this.context;\n        if (polygonOffset) {\n            this.enable(gl.POLYGON_OFFSET_FILL);\n            if (this.currentPolygonOffsetFactor !== factor || this.currentPolygonOffsetUnits !== units) {\n                gl.polygonOffset(factor, units);\n                this.currentPolygonOffsetFactor = factor;\n                this.currentPolygonOffsetUnits = units;\n            }\n        }\n        else {\n            this.disable(gl.POLYGON_OFFSET_FILL);\n        }\n        return this;\n    }\n    setScissorTest(scissorTest) {\n        if (scissorTest) {\n            this.enable(this.context.SCISSOR_TEST);\n        }\n        else {\n            this.disable(this.context.SCISSOR_TEST);\n        }\n        return this;\n    }\n    activeTexture(slot) {\n        const gl = this.context;\n        if (slot === undefined)\n            slot = gl.TEXTURE0 + this.maxTextures - 1;\n        /**\n         * 最后一个贴图空间用来做杂活...\n         */\n        if (this.currentTextureSlot !== slot) {\n            gl.activeTexture(slot);\n            this.currentTextureSlot = slot;\n        }\n        return this;\n    }\n    bindTexture(type, texture) {\n        if (this.currentTextureSlot === null) {\n            this.activeTexture();\n        }\n        let boundTexture = this.currentBoundTextures[this.currentTextureSlot];\n        if (boundTexture === undefined) {\n            boundTexture = { type: undefined, texture: undefined };\n            this.currentBoundTextures[this.currentTextureSlot] = boundTexture;\n        }\n        if (boundTexture.type !== type || boundTexture.texture !== texture) {\n            this.context.bindTexture(type, texture || this.emptyTextures[type]);\n            boundTexture.type = type;\n            boundTexture.texture = texture;\n        }\n        return this;\n    }\n    compressedTexImage2D(target, level, internalformat, width, height, border, data) {\n        /**\n         * 所支持压缩纹理格式数量可以查询GL_NUM_COMPRESSED_TEXTURE_FORMATS值来获取。\n         * 所支持的压缩格式列表可以查询GL_COMPRESSED_TEXTURE_FORMATS值来获取。\n         * getCompressedTextureFormats函数也是相关信息的查询工具\n         */\n        try {\n            this.context.compressedTexImage2D(target, level, internalformat, width, height, border, data);\n        }\n        catch (error) {\n            console.error(`THREE.WebGLState: ${error}`);\n        }\n        return this;\n    }\n    texImage2D(target, level, internalformat, a, b, c, format, type, pixels) {\n        /**\n         * 2D贴图，这里有重载是因为DOM的特殊关系，ImageBitmap | ImageData | HTMLVideoElement | HTMLImageElement | HTMLCanvasElement这些属性都有width，height属性包含在内，\n         * 而border值必须为0 ㄟ( ▔, ▔ )ㄏ\n         * 而且实际上internalformat与format的值必须一致 ㄟ( ▔, ▔ )ㄏ\n         * target的值必须为TEXTURE_2D与TEXTURE_CUBE_MAP_(NEGATIVE|POSITIVE)_(X|Y|Z)—之一\n         *\n         * Mipmap是一个功能强大的纹理技术，它可以提高渲染的性能以及提升场景的视觉质量。它可以用来解决使用一般的纹理贴图会出现的两个常见的问题：\n         *  1. 闪烁，当屏幕上被渲染物体的表面与它所应用的纹理图像相比显得非常小时，就会出现闪烁。尤其当相机和物体在移动的时候，这种负面效果更容易被看到。\n         *  2. 性能问题。加载了大量的纹理数据之后，还要对其进行过滤处理（缩小），在屏幕上显示的只是一小部分。纹理越大，所造成的性能影响就越大。\n         * Mipmap就可以解决上面那两个问题。当加载纹理的时候，不单单是加载一个纹理，而是加载一系列从大到小的纹理当mipmapped纹理状态中。\n         * 然后OpenGl会根据给定的几何图像的大小选择最合适的纹理。Mipmap是把纹理按照2的倍数进行缩放，直到图像为1x1的大小，然后把这些图都存储起来，当要使用的就选择一个合适的图像。\n         * 这会增加一些额外的内存。在正方形的纹理贴图中使用mipmap技术，大概要比原先多出三分之一的内存空间。\n         *\n         * Mipmap的纹理过滤模式如下表：\n         * 常量\t描述\n         * GL_NEAREST\t在mip基层上使用最邻近过滤\n         * GL_LINEAR\t在mip基层上使用线性过滤\n         * GL_NEAREST_MIPMAP_NEAREST\t选择最邻近的mip层，并使用最邻近过滤\n         * GL_NEAREST_MIPMAP_LINEAR\t在mip层之间使用线性插值和最邻近过滤\n         * GL_LINEAR_MIPMAP_NEAREST\t选择最邻近的mip层，使用线性过滤\n         * GL_LINEAR_MIPMAP_LINEAR\t在mip层之间使用线性插值和使用线性过滤，又称三线性mipmap\n         * 如果纹理过滤选择为GL_NEAREST或GL_LINEAR模式，那么只有基层的纹理会被加载，其他的纹理将会被忽略。\n         * 我们必须指定其中一个mipmap过滤器，这样才能使用所有已加载的纹理。\n         * 这个mipmap过滤器的常量是GL_[FILTER]_MIPMAP_[SELECTOR[的形式。\n         * 其中FLILTER指定了过滤模式，SELECTOR指定了如何选择mipmap层。例如GL_NEAREST_MIPMAP_LINEAR模式，\n         * 它的SELECTOR是GL_LINEAR，它会在两个最邻近的mip层中执行线性插值，然后得出的结果又由被选择的过滤器GL_NEAREST进行过滤。\n         *\n         * 其中GL_NEAREST_MIPMAP_NEAAREST具有很好的性能，也能够解决闪烁的问题，但在视觉效果上会比较差。\n         * 其中GL_LINEAR_MIPMAP_NEAREST常用于游戏加速，使用了质量较高的线性过滤，和快速的选择的方式(最邻近方式）。\n         * 使用最邻近的方式作为mipmap选择器的效果依然不能令人满意。从某一个角度去看，常常可以看到物体表面从一个mip层到另一个mip层的转变。\n         * GL_LINEAR_MIPMAP_LINEAR和GL_NEAREST_MIPMAP_LINEAR过滤器在mip层之间执行一些额外的线性插值，以消除不同层之间的变换痕迹，但也需要一些额外的性能开销。\n         * GL_LINEAR_MIPMAP_LINEAR具有最高的精度。\n         *\n         * 所以level参数就是用来指定这是低级级缩略图的，0代表基本，log_{2}(GL_MAX_TEXTURE_SIZE)为最大允许值\n         */\n        try {\n            this.context.texImage2D(target, level, internalformat, a, b, c, format, type, pixels);\n        }\n        catch (error) {\n            console.error(`THREE.WebGLState: ${error}`);\n        }\n        return this;\n    }\n    scissor(scissor) {\n        /**\n         * 对屏幕进行剪裁，x,y为起点，z,w分别表示width和height\n         * 剪裁功能\n         */\n        if (this.currentScissor.equals(scissor) === false) {\n            this.context.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n            this.currentScissor.copy(scissor);\n        }\n        return this;\n    }\n    viewport(viewport) {\n        /**\n         * 打开窗口的整个像素矩形，x,y为起点，z,w分别表示width和height\n         * 缩放功能\n         */\n        if (this.currentViewport.equals(viewport) === false) {\n            this.context.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n            this.currentViewport.copy(viewport);\n        }\n        return this;\n    }\n    reset() {\n        for (let i = 0; i < this.enabledAttributes.length; i++) {\n            if (this.enabledAttributes[i] === 1) {\n                this.context.disableVertexAttribArray(i);\n                this.enabledAttributes[i] = 0;\n            }\n        }\n        this.capabilities = {};\n        this.compressedTextureFormats = null;\n        this.currentTextureSlot = null;\n        this.currentBoundTextures = {};\n        this.currentProgram = null;\n        this.currentBlending = null;\n        this.currentFlipSided = null;\n        this.currentCullFace = null;\n        this.buffers.color.reset();\n        this.buffers.depth.reset();\n        this.buffers.stencil.reset();\n        return this;\n    }\n    createTexture(type, target, count) {\n        const gl = this.context;\n        /**\n         * 4 is required to match default unpack alignment of 4.\n         * @type {Uint8Array}\n         */\n        const data = new Uint8Array(4);\n        const texture = gl.createTexture();\n        gl.bindTexture(type, texture);\n        gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        for (let i = 0; i < count; i++) {\n            gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n        }\n        return texture;\n    }\n}\n","import { LinearFilter, NearestFilter, RGBFormat, RGBAFormat, DepthFormat, DepthStencilFormat, UnsignedShortType, UnsignedIntType, UnsignedInt248Type, FloatType, HalfFloatType, ClampToEdgeWrapping, NearestMipMapLinearFilter, NearestMipMapNearestFilter, } from \"../../constants\";\nimport { MathUtil } from \"../../math/Math\";\nimport { VideoTexture } from \"../../textures/VideoTexture\";\nimport { WebGLRenderTargetCube } from \"../WebGLRenderTargetCube\";\nimport { DepthTexture } from \"../../textures/DepthTexture\";\nimport { DataTexture } from \"../../textures/DataTexture\";\nimport { CompressedTexture } from \"../../textures/CompressedTexture\";\nfunction clampToMaxSize(image, maxSize) {\n    if (image.width > maxSize || image.height > maxSize) {\n        const scale = maxSize / Math.max(image.width, image.height);\n        if (image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap) {\n            // Warning: Scaling through the canvas will only work with images that use\n            // premultiplied alpha.\n            const canvas = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"canvas\");\n            canvas.width = Math.max(Math.floor(image.width * scale), 1);\n            canvas.height = Math.max(Math.floor(image.height * scale), 1);\n            const context = canvas.getContext(\"2d\");\n            context.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n            console.warn(\"THREE.WebGLRenderer: image is too big (\" +\n                image.width +\n                \"x\" +\n                image.height +\n                \"). Resized to \" +\n                canvas.width +\n                \"x\" +\n                canvas.height, image);\n            return canvas;\n        }\n        else {\n            // https://github.com/mrdoob/three.js/issues/13454#issuecomment-369244843\n            const width = Math.max(Math.floor(image.width * scale), 1);\n            const height = Math.max(Math.floor(image.height * scale), 1);\n            console.warn(\"THREE.WebGLRenderer: image is too big (\" + image.width + \"x\" + image.height + \").\", image);\n        }\n    }\n    return image;\n}\nfunction isPowerOfTwo(image) {\n    return MathUtil.isPowerOfTwo(image.width) && MathUtil.isPowerOfTwo(image.height);\n}\nfunction makePowerOfTwo(image) {\n    if (image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap) {\n        const canvas = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"canvas\");\n        canvas.width = MathUtil.floorPowerOfTwo(image.width);\n        canvas.height = MathUtil.floorPowerOfTwo(image.height);\n        const context = canvas.getContext(\"2d\");\n        context.drawImage(image, 0, 0, canvas.width, canvas.height);\n        console.warn(\"THREE.WebGLRenderer: image is not power of two (\" +\n            image.width +\n            \"x\" +\n            image.height +\n            \"). Resized to \" +\n            canvas.width +\n            \"x\" +\n            canvas.height, image);\n        return canvas;\n    }\n    return image;\n}\nfunction textureNeedsPowerOfTwo(texture) {\n    return (texture.wrapS !== ClampToEdgeWrapping ||\n        texture.wrapT !== ClampToEdgeWrapping ||\n        (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter));\n}\nfunction textureNeedsGenerateMipmaps(texture, isPowerOfTwo) {\n    return (texture.generateMipmaps &&\n        isPowerOfTwo &&\n        texture.minFilter !== NearestFilter &&\n        texture.minFilter !== LinearFilter);\n}\nexport class WebGLTextures {\n    constructor(context, extensions, state, properties, capabilities, utils, infoMemory, infoRender) {\n        this.videoTextures = {};\n        this.onTextureDispose = (event) => {\n            const texture = event.target;\n            texture.removeEventListener(\"dispose\", this.onTextureDispose);\n            this.deallocateTexture(texture);\n            if (texture instanceof VideoTexture) {\n                delete this.videoTextures[texture.id];\n            }\n            this.infoMemory.textures--;\n        };\n        this.onRenderTargetDispose = (event) => {\n            const renderTarget = event.target;\n            renderTarget.removeEventListener(\"dispose\", this.onRenderTargetDispose);\n            this.deallocateRenderTarget(renderTarget);\n            this.infoMemory.textures--;\n        };\n        this.context = context;\n        this.extensions = extensions;\n        this.properties = properties;\n        this.capabilities = capabilities;\n        this.utils = utils;\n        this.state = state;\n        this.infoMemory = infoMemory;\n        this.infoRender = infoRender;\n    }\n    filterFallback(f) {\n        if (f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter) {\n            return this.context.NEAREST;\n        }\n        return this.context.LINEAR;\n    }\n    deallocateTexture(texture) {\n        const textureProperties = this.properties.get(texture);\n        if (texture.image && textureProperties.__image__webglTextureCube) {\n            // cube texture\n            this.context.deleteTexture(textureProperties.__image__webglTextureCube);\n        }\n        else {\n            // 2D texture\n            if (textureProperties.__webglInit === undefined)\n                return;\n            this.context.deleteTexture(textureProperties.__webglTexture);\n        }\n        // remove all webgl properties\n        this.properties.remove(texture);\n    }\n    deallocateRenderTarget(renderTarget) {\n        const renderTargetProperties = this.properties.get(renderTarget);\n        const textureProperties = this.properties.get(renderTarget.texture);\n        if (!renderTarget)\n            return;\n        if (textureProperties.__webglTexture !== undefined) {\n            this.context.deleteTexture(textureProperties.__webglTexture);\n        }\n        if (renderTarget.depthTexture) {\n            renderTarget.depthTexture.dispose();\n        }\n        if (renderTarget instanceof WebGLRenderTargetCube) {\n            for (let i = 0; i < 6; i++) {\n                this.context.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n                if (renderTargetProperties.__webglDepthbuffer) {\n                    this.context.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n                }\n            }\n        }\n        else {\n            this.context.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n            if (renderTargetProperties.__webglDepthbuffer) {\n                this.context.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n            }\n        }\n        this.properties.remove(renderTarget.texture);\n        this.properties.remove(renderTarget);\n    }\n    updateVideoTexture(texture) {\n        const id = texture.id;\n        const frame = this.infoRender.frame;\n        // Check the last frame we updated the VideoTexture\n        if (this.videoTextures[id] !== frame) {\n            this.videoTextures[id] = frame;\n            texture.update();\n        }\n    }\n    uploadTexture(textureProperties, texture, slot) {\n        const gl = this.context;\n        const state = this.state;\n        const utils = this.utils;\n        if (textureProperties.__webglInit === undefined) {\n            textureProperties.__webglInit = true;\n            texture.addEventListener(\"dispose\", this.onTextureDispose);\n            textureProperties.__webglTexture = gl.createTexture();\n            this.infoMemory.textures++;\n        }\n        state.activeTexture(gl.TEXTURE0 + slot);\n        state.bindTexture(gl.TEXTURE_2D, textureProperties.__webglTexture);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n        /**\n         * 为什么 texture.image 肯定是 HTMLTextureSource?\n         * Need to be fixed\n         */\n        let image = clampToMaxSize(texture.image, this.capabilities.maxTextureSize);\n        if (textureNeedsPowerOfTwo(texture) && isPowerOfTwo(image) === false) {\n            /**\n             * 为什么这里的 texture.image 肯定是 HTMLTextureSource?\n             * 因为在 WebGLRenderer.setProgram 中 SkinnedMesh 中的 Skeleton 的 boneTexture 被强制调整为2的幂次\n             * 所以这个判断中 DataTexture 永远到不了，只能是 CanvasTexture 或者 VideoTexture\n             *\n             * Edited: 原本是这么认为的，但是不是\n             */\n            image = makePowerOfTwo(image);\n        }\n        const isPowerOfTwoImage = isPowerOfTwo(image);\n        let glFormat = utils.convert(texture.format), glType = utils.convert(texture.type);\n        this.setTextureParameters(gl.TEXTURE_2D, texture, isPowerOfTwoImage);\n        let mipmap, mipmaps = texture.mipmaps;\n        if (texture instanceof DepthTexture) {\n            // populate depth texture with dummy data\n            let internalFormat = gl.DEPTH_COMPONENT;\n            /*\n            if ( texture.type === FloatType ) {\n                if ( ! _isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );\n                internalFormat = gl.DEPTH_COMPONENT32F;\n            } else if ( _isWebGL2 ) {\n                // WebGL 2.0 requires signed internalformat for glTexImage2D\n                internalFormat = gl.DEPTH_COMPONENT16;\n            }\n            */\n            if (texture.format === DepthFormat && internalFormat === gl.DEPTH_COMPONENT) {\n                // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n                // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n                // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n                if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n                    console.warn(\"THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.\");\n                    texture.type = UnsignedShortType;\n                    glType = utils.convert(texture.type);\n                }\n            }\n            // Depth stencil textures need the DEPTH_STENCIL internal format\n            // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n            if (texture.format === DepthStencilFormat) {\n                internalFormat = gl.DEPTH_STENCIL;\n                // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n                // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n                // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n                if (texture.type !== UnsignedInt248Type) {\n                    console.warn(\"THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.\");\n                    texture.type = UnsignedInt248Type;\n                    glType = utils.convert(texture.type);\n                }\n            }\n            state.texImage2D(gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null);\n        }\n        else if (texture instanceof DataTexture) {\n            // use manually created mipmaps if available\n            // if there are no manual mipmaps\n            // set 0 level mipmap and then use GL to generate other mipmap levels\n            if (mipmaps.length > 0 && isPowerOfTwoImage) {\n                for (let i = 0, il = mipmaps.length; i < il; i++) {\n                    mipmap = mipmaps[i];\n                    state.texImage2D(gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n                }\n                texture.generateMipmaps = false;\n            }\n            else {\n                state.texImage2D(gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data);\n            }\n        }\n        else if (texture instanceof CompressedTexture) {\n            for (let i = 0, il = mipmaps.length; i < il; i++) {\n                mipmap = mipmaps[i];\n                if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n                    if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {\n                        state.compressedTexImage2D(gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n                    }\n                    else {\n                        console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\");\n                    }\n                }\n                else {\n                    state.texImage2D(gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n                }\n            }\n        }\n        else {\n            // regular Texture (image, video, canvas)\n            // use manually created mipmaps if available\n            // if there are no manual mipmaps\n            // set 0 level mipmap and then use GL to generate other mipmap levels\n            if (mipmaps.length > 0 && isPowerOfTwoImage) {\n                for (let i = 0, il = mipmaps.length; i < il; i++) {\n                    mipmap = mipmaps[i];\n                    state.texImage2D(gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap);\n                }\n                texture.generateMipmaps = false;\n            }\n            else {\n                /**\n                 * WHY as HTMLTextureSource ????\n                 */\n                state.texImage2D(gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image);\n            }\n        }\n        if (textureNeedsGenerateMipmaps(texture, isPowerOfTwoImage))\n            gl.generateMipmap(gl.TEXTURE_2D);\n        textureProperties.__version = texture.version;\n        //if ( texture.onUpdate ) texture.onUpdate( texture );\n    }\n    setTexture2D(texture, slot) {\n        const textureProperties = this.properties.get(texture);\n        if (texture instanceof VideoTexture) {\n            this.updateVideoTexture(texture);\n        }\n        if (texture.version > 0 && textureProperties.__version !== texture.version) {\n            /**\n             * version > 0 不一样只能是needsUpdate被设为true的Texture\n             * 目前Three.js中只有CanvasTexture、 VideoTexture以及Skeleton.boneTexture（DataTexture）是这样的。\n             * 所以 uploadTexture 的 texture 参数必定是 CanvasTexture| VideoTexture | DataTexture 中的一个\n             */\n            const image = texture.image;\n            if (image === undefined) {\n                console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is undefined\", texture);\n            }\n            else if (image.complete === false) {\n                console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is incomplete\", texture);\n            }\n            else {\n                this.uploadTexture(textureProperties, texture, slot);\n                return;\n            }\n        }\n        this.state.activeTexture(this.context.TEXTURE0 + slot);\n        this.state.bindTexture(this.context.TEXTURE_2D, textureProperties.__webglTexture);\n    }\n    setTextureCube(texture, slot) {\n        const gl = this.context;\n        const state = this.state;\n        const utils = this.utils;\n        const textureProperties = this.properties.get(texture);\n        if (texture.image.length === 6) {\n            if (texture.version > 0 && textureProperties.__version !== texture.version) {\n                if (!textureProperties.__image__webglTextureCube) {\n                    texture.addEventListener(\"dispose\", this.onTextureDispose);\n                    textureProperties.__image__webglTextureCube = gl.createTexture();\n                    this.infoMemory.textures++;\n                }\n                state.activeTexture(gl.TEXTURE0 + slot);\n                state.bindTexture(gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube);\n                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n                const isCompressed = texture && texture instanceof CompressedTexture;\n                const isDataTexture = texture.image[0] && texture.image[0] instanceof DataTexture;\n                const cubeImage = [];\n                for (let i = 0; i < 6; i++) {\n                    if (!isCompressed && !isDataTexture) {\n                        cubeImage[i] = clampToMaxSize(texture.image[i], this.capabilities.maxCubemapSize);\n                    }\n                    else {\n                        // CubeTexture with DataTexture or CompressedTexture\n                        cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n                    }\n                }\n                const image = cubeImage[0], isPowerOfTwoImage = isPowerOfTwo(image), glFormat = utils.convert(texture.format), glType = utils.convert(texture.type);\n                this.setTextureParameters(gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage);\n                for (let i = 0; i < 6; i++) {\n                    if (!isCompressed) {\n                        // CubeTexture\n                        if (isDataTexture) {\n                            state.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n                        }\n                        else {\n                            state.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[i]);\n                        }\n                    }\n                    else {\n                        let mipmap;\n                        // 未能解决的疑惑！！！ as any\n                        const mipmaps = cubeImage[i].mipmaps;\n                        for (let j = 0, jl = mipmaps.length; j < jl; j++) {\n                            mipmap = mipmaps[j];\n                            if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n                                if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {\n                                    state.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n                                }\n                                else {\n                                    console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\");\n                                }\n                            }\n                            else {\n                                state.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n                            }\n                        }\n                    }\n                }\n                if (textureNeedsGenerateMipmaps(texture, isPowerOfTwoImage)) {\n                    gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n                }\n                textureProperties.__version = texture.version;\n                //if ( texture.onUpdate ) texture.onUpdate( texture );\n            }\n            else {\n                state.activeTexture(gl.TEXTURE0 + slot);\n                state.bindTexture(gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube);\n            }\n        }\n    }\n    /**\n     * texture from WebGLRenderTargetCube\n     * @param texture\n     * @param slot\n     */\n    setTextureCubeDynamic(texture, slot) {\n        this.state.activeTexture(this.context.TEXTURE0 + slot);\n        this.state.bindTexture(this.context.TEXTURE_CUBE_MAP, this.properties.get(texture).__webglTexture);\n    }\n    setTextureParameters(textureType, texture, isPowerOfTwoImage) {\n        const gl = this.context;\n        const utils = this.utils;\n        const extensions = this.extensions;\n        const properties = this.properties;\n        let extension;\n        if (isPowerOfTwoImage) {\n            gl.texParameteri(textureType, gl.TEXTURE_WRAP_S, utils.convert(texture.wrapS));\n            gl.texParameteri(textureType, gl.TEXTURE_WRAP_T, utils.convert(texture.wrapT));\n            gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, utils.convert(texture.magFilter));\n            gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, utils.convert(texture.minFilter));\n        }\n        else {\n            gl.texParameteri(textureType, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(textureType, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n                console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.\", texture);\n            }\n            gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, this.filterFallback(texture.magFilter));\n            gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, this.filterFallback(texture.minFilter));\n            if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n                console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.\", texture);\n            }\n        }\n        extension = extensions.get(\"EXT_texture_filter_anisotropic\");\n        if (extension) {\n            if (texture.type === FloatType && extensions.get(\"OES_texture_float_linear\") === null)\n                return;\n            if (texture.type === HalfFloatType && extensions.get(\"OES_texture_half_float_linear\") === null)\n                return;\n            if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n                gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, this.capabilities.getMaxAnisotropy()));\n                properties.get(texture).__currentAnisotropy = texture.anisotropy;\n            }\n        }\n    }\n    /****************************  Render targets ***********************/\n    // Setup storage for target texture and bind it to correct framebuffer\n    setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {\n        const glFormat = this.utils.convert(renderTarget.texture.format);\n        const glType = this.utils.convert(renderTarget.texture.type);\n        this.state.texImage2D(textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n        const gl = this.context;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, textureTarget, this.properties.get(renderTarget.texture).__webglTexture, 0);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n    // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n    setupRenderBufferStorage(renderbuffer, renderTarget) {\n        const gl = this.context;\n        gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\n        if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height);\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\n        }\n        else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\n        }\n        else {\n            // FIXME: We don't support !depth !stencil\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, renderTarget.width, renderTarget.height);\n        }\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    }\n    // Setup resources for a Depth Texture for a FBO (needs an extension)\n    setupDepthTexture(framebuffer, renderTarget) {\n        const gl = this.context;\n        const isCube = renderTarget && renderTarget instanceof WebGLRenderTargetCube;\n        if (isCube) {\n            throw new Error(\"Depth Texture with cube render targets is not supported\");\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        if (!(renderTarget.depthTexture && renderTarget.depthTexture instanceof DepthTexture)) {\n            throw new Error(\"renderTarget.depthTexture must be an instance of THREE.DepthTexture\");\n        }\n        // upload an empty depth texture with framebuffer size\n        if (!this.properties.get(renderTarget.depthTexture).__webglTexture ||\n            renderTarget.depthTexture.image.width !== renderTarget.width ||\n            renderTarget.depthTexture.image.height !== renderTarget.height) {\n            renderTarget.depthTexture.image.width = renderTarget.width;\n            renderTarget.depthTexture.image.height = renderTarget.height;\n            renderTarget.depthTexture.needsUpdate = true;\n        }\n        this.setTexture2D(renderTarget.depthTexture, 0);\n        const webglDepthTexture = this.properties.get(renderTarget.depthTexture).__webglTexture;\n        if (renderTarget.depthTexture.format === DepthFormat) {\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, webglDepthTexture, 0);\n        }\n        else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.TEXTURE_2D, webglDepthTexture, 0);\n        }\n        else {\n            throw new Error(\"Unknown depthTexture format\");\n        }\n    }\n    // Setup GL resources for a non-texture depth buffer\n    setupDepthRenderbuffer(renderTarget) {\n        const gl = this.context;\n        const renderTargetProperties = this.properties.get(renderTarget);\n        const isCube = renderTarget instanceof WebGLRenderTargetCube;\n        if (renderTarget.depthTexture) {\n            if (isCube)\n                throw new Error(\"target.depthTexture not supported in Cube render targets\");\n            this.setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n        }\n        else {\n            if (isCube) {\n                renderTargetProperties.__webglDepthbuffer = [];\n                for (let i = 0; i < 6; i++) {\n                    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n                    renderTargetProperties.__webglDepthbuffer[i] = gl.createRenderbuffer();\n                    this.setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget);\n                }\n            }\n            else {\n                gl.bindFramebuffer(gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n                renderTargetProperties.__webglDepthbuffer = gl.createRenderbuffer();\n                this.setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget);\n            }\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n    // Set up GL resources for the render target\n    setupRenderTarget(renderTarget) {\n        const gl = this.context;\n        const state = this.state;\n        const properties = this.properties;\n        const renderTargetProperties = properties.get(renderTarget);\n        const textureProperties = properties.get(renderTarget.texture);\n        renderTarget.addEventListener(\"dispose\", this.onRenderTargetDispose);\n        textureProperties.__webglTexture = gl.createTexture();\n        this.infoMemory.textures++;\n        const isCube = renderTarget instanceof WebGLRenderTargetCube;\n        const isTargetPowerOfTwo = isPowerOfTwo(renderTarget);\n        // Setup framebuffer\n        if (isCube) {\n            renderTargetProperties.__webglFramebuffer = [];\n            for (let i = 0; i < 6; i++) {\n                renderTargetProperties.__webglFramebuffer[i] = gl.createFramebuffer();\n            }\n        }\n        else {\n            renderTargetProperties.__webglFramebuffer = gl.createFramebuffer();\n        }\n        // Setup color buffer\n        if (isCube) {\n            state.bindTexture(gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n            this.setTextureParameters(gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo);\n            for (let i = 0; i < 6; i++) {\n                this.setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n            }\n            if (textureNeedsGenerateMipmaps(renderTarget.texture, isTargetPowerOfTwo)) {\n                gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n            }\n            state.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n        }\n        else {\n            state.bindTexture(gl.TEXTURE_2D, textureProperties.__webglTexture);\n            this.setTextureParameters(gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo);\n            this.setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D);\n            if (textureNeedsGenerateMipmaps(renderTarget.texture, isTargetPowerOfTwo)) {\n                gl.generateMipmap(gl.TEXTURE_2D);\n            }\n            state.bindTexture(gl.TEXTURE_2D, null);\n        }\n        // Setup depth and stencil buffers\n        if (renderTarget.depthBuffer) {\n            this.setupDepthRenderbuffer(renderTarget);\n        }\n    }\n    updateRenderTargetMipmap(renderTarget) {\n        const gl = this.context;\n        const state = this.state;\n        const properties = this.properties;\n        const texture = renderTarget.texture;\n        const isTargetPowerOfTwo = isPowerOfTwo(renderTarget);\n        if (textureNeedsGenerateMipmaps(texture, isTargetPowerOfTwo)) {\n            const target = renderTarget instanceof WebGLRenderTargetCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\n            const webglTexture = properties.get(texture).__webglTexture;\n            state.bindTexture(target, webglTexture);\n            gl.generateMipmap(target);\n            state.bindTexture(target, null);\n        }\n    }\n}\n","import { CubeTexture } from \"../../textures/CubeTexture\";\nimport { Texture } from \"../../textures/Texture\";\nimport { Vector3 } from \"../../math/Vector3\";\nimport { Matrix2 } from \"../../math/Matrix2\";\nimport { Matrix3 } from \"../../math/Matrix3\";\nimport { Matrix4 } from \"../../math/Matrix4\";\nconst emptyTexture = new Texture();\nconst emptyCubeTexture = new CubeTexture();\nclass UniformSetter {\n    constructor(renderer, id, activeInfo, addr) {\n        this.addr = 0;\n        this.size = 0;\n        this.setValue1f = (v) => {\n            this.context.uniform1f(this.addr, v);\n        };\n        this.setValue1i = (v) => {\n            this.context.uniform1i(this.addr, v);\n        };\n        this.setValue2fv = (v) => {\n            if (v instanceof Float32Array || Array.isArray(v)) {\n                this.context.uniform2fv(this.addr, v);\n            }\n            else {\n                this.context.uniform2f(this.addr, v.x, v.y);\n            }\n        };\n        this.setValue3fv = (v) => {\n            if (v instanceof Float32Array || Array.isArray(v)) {\n                this.context.uniform3fv(this.addr, v);\n            }\n            else if (v instanceof Vector3) {\n                this.context.uniform3f(this.addr, v.x, v.y, v.z);\n            }\n            else {\n                this.context.uniform3f(this.addr, v.r, v.g, v.b);\n            }\n        };\n        this.setValue4fv = (v) => {\n            if (v instanceof Float32Array || Array.isArray(v)) {\n                this.context.uniform4fv(this.addr, v);\n            }\n            else {\n                this.context.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n            }\n        };\n        this.setValue2fm = (v) => {\n            if (v instanceof Matrix2) {\n                UniformSetter.mat2array.set(v.elements);\n                this.context.uniformMatrix2fv(this.addr, false, UniformSetter.mat2array);\n            }\n            else {\n                this.context.uniformMatrix2fv(this.addr, false, v);\n            }\n        };\n        this.setValue3fm = (v) => {\n            if (v instanceof Matrix3) {\n                UniformSetter.mat3array.set(v.elements);\n                this.context.uniformMatrix3fv(this.addr, false, UniformSetter.mat3array);\n            }\n            else {\n                this.context.uniformMatrix3fv(this.addr, false, v);\n            }\n        };\n        this.setValue4fm = (v) => {\n            if (v instanceof Matrix4) {\n                UniformSetter.mat4array.set(v.elements);\n                this.context.uniformMatrix4fv(this.addr, false, UniformSetter.mat4array);\n            }\n            else {\n                this.context.uniformMatrix4fv(this.addr, false, v);\n            }\n        };\n        this.setValueT1 = (v) => {\n            const unit = this.renderer.allocTextureUnit();\n            this.context.uniform1i(this.addr, unit);\n            this.renderer.setTexture2D(v || emptyTexture, unit);\n        };\n        this.setValueT6 = (v) => {\n            const unit = this.renderer.allocTextureUnit();\n            this.context.uniform1i(this.addr, unit);\n            this.renderer.setTextureCube(v || emptyCubeTexture, unit);\n        };\n        this.setValue2iv = (v) => {\n            this.context.uniform2iv(this.addr, v);\n        };\n        this.setValue3iv = (v) => {\n            this.context.uniform3iv(this.addr, v);\n        };\n        this.setValue4iv = (v) => {\n            this.context.uniform4iv(this.addr, v);\n        };\n        this.setValue1fv = (v) => {\n            this.context.uniform1fv(this.addr, v);\n        };\n        this.setValue1iv = (v) => {\n            this.context.uniform1iv(this.addr, v);\n        };\n        this.setValueV2a = (v) => {\n            this.context.uniform2fv(this.addr, UniformSetter.flatten(v, this.size, 2));\n        };\n        this.setValueV3a = (v) => {\n            this.context.uniform3fv(this.addr, UniformSetter.flatten(v, this.size, 3));\n        };\n        this.setValueV4a = (v) => {\n            this.context.uniform4fv(this.addr, UniformSetter.flatten(v, this.size, 4));\n        };\n        this.setValueM2a = (v) => {\n            this.context.uniformMatrix2fv(this.addr, false, UniformSetter.flatten(v, this.size, 4));\n        };\n        this.setValueM3a = (v) => {\n            this.context.uniformMatrix3fv(this.addr, false, UniformSetter.flatten(v, this.size, 9));\n        };\n        this.setValueM4a = (v) => {\n            this.context.uniformMatrix4fv(this.addr, false, UniformSetter.flatten(v, this.size, 16));\n        };\n        this.setValueT1a = (v) => {\n            const n = v.length, units = this.allocTexUnits(n);\n            this.context.uniform1iv(this.addr, units);\n            for (let i = 0; i !== n; i++) {\n                this.renderer.setTexture2D(v[i] || emptyTexture, units[i]);\n            }\n        };\n        this.setValueT6a = (v) => {\n            const n = v.length, units = this.allocTexUnits(n);\n            this.context.uniform1iv(this.addr, units);\n            for (let i = 0; i !== n; i++) {\n                this.renderer.setTextureCube(v[i] || emptyCubeTexture, units[i]);\n            }\n        };\n        this.renderer = renderer;\n        this.context = renderer.context;\n        this.id = id;\n        this.activeInfo = activeInfo;\n        this.addr = addr;\n        this.size = activeInfo.size;\n    }\n    getSingularSetter() {\n        switch (this.activeInfo.type) {\n            case 0x1406:\n                return this.setValue1f; // FLOAT\n            case 0x8b50:\n                return this.setValue2fv; // _VEC2\n            case 0x8b51:\n                return this.setValue3fv; // _VEC3\n            case 0x8b52:\n                return this.setValue4fv; // _VEC4\n            case 0x8b5a:\n                return this.setValue2fm; // _MAT2\n            case 0x8b5b:\n                return this.setValue3fm; // _MAT3\n            case 0x8b5c:\n                return this.setValue4fm; // _MAT4\n            case 0x8b5e:\n            case 0x8d66:\n                return this.setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\n            case 0x8b60:\n                return this.setValueT6; // SAMPLER_CUBE\n            case 0x1404:\n            case 0x8b56:\n                return this.setValue1i; // INT, BOOL\n            case 0x8b53:\n            case 0x8b57:\n                return this.setValue2iv; // _VEC2\n            case 0x8b54:\n            case 0x8b58:\n                return this.setValue3iv; // _VEC3\n            case 0x8b55:\n            case 0x8b59:\n                return this.setValue4iv; // _VEC4\n        }\n        throw new Error(`Unknown type for getSingularSetter: ${this.activeInfo.type}`);\n    }\n    static flatten(array, nBlocks, blockSize) {\n        if (array instanceof Float32Array) {\n            return array;\n        }\n        const n = nBlocks * blockSize;\n        let r = UniformSetter.arrayCacheF32[n];\n        if (r === undefined) {\n            r = new Float32Array(n);\n            UniformSetter.arrayCacheF32[n] = r;\n        }\n        if (nBlocks !== 0) {\n            for (let i = 0, offset = 0; i !== nBlocks; i++) {\n                array[i].toArray(r, offset);\n                offset += blockSize;\n            }\n        }\n        return r;\n    }\n    allocTexUnits(n) {\n        let r = UniformSetter.arrayCacheI32[n];\n        if (r === undefined) {\n            r = new Int32Array(n);\n            UniformSetter.arrayCacheI32[n] = r;\n        }\n        for (let i = 0; i !== n; i++) {\n            r[i] = this.renderer.allocTextureUnit();\n        }\n        return r;\n    }\n    getPureArraySetter() {\n        switch (this.activeInfo.type) {\n            case 0x1406:\n                return this.setValue1fv; // FLOAT\n            case 0x8b50:\n                return this.setValueV2a; // _VEC2\n            case 0x8b51:\n                return this.setValueV3a; // _VEC3\n            case 0x8b52:\n                return this.setValueV4a; // _VEC4\n            case 0x8b5a:\n                return this.setValueM2a; // _MAT2\n            case 0x8b5b:\n                return this.setValueM3a; // _MAT3\n            case 0x8b5c:\n                return this.setValueM4a; // _MAT4\n            case 0x8b5e:\n                return this.setValueT1a; // SAMPLER_2D\n            case 0x8b60:\n                return this.setValueT6a; // SAMPLER_CUBE\n            case 0x1404:\n            case 0x8b56:\n                return this.setValue1iv; // INT, BOOL\n            case 0x8b53:\n            case 0x8b57:\n                return this.setValue2iv; // _VEC2\n            case 0x8b54:\n            case 0x8b58:\n                return this.setValue3iv; // _VEC3\n            case 0x8b55:\n            case 0x8b59:\n                return this.setValue4iv; // _VEC4\n        }\n        throw new Error(`Unknown type for getSingularSetter: ${this.activeInfo.type}`);\n    }\n}\nUniformSetter.mat2array = new Float32Array(4);\nUniformSetter.mat3array = new Float32Array(9);\nUniformSetter.mat4array = new Float32Array(16);\nUniformSetter.arrayCacheF32 = [];\nUniformSetter.arrayCacheI32 = [];\nclass SingleUniformSetter extends UniformSetter {\n    setValue(value) {\n        super.getSingularSetter()(value);\n    }\n}\nclass PureArrayUniformSetter extends UniformSetter {\n    setValue(value) {\n        super.getPureArraySetter()(value);\n    }\n}\nclass UniformContainer {\n    constructor() {\n        this.seq = [];\n        this.map = {};\n    }\n}\nclass StructuredUniformSetter extends UniformContainer {\n    constructor(id) {\n        super();\n        this.id = id;\n    }\n    setValue(value) {\n        // Note: Don't need an extra 'renderer' parameter, since samplers\n        // are not allowed in structured uniforms.\n        for (let i = 0, n = this.seq.length; i !== n; i++) {\n            const u = this.seq[i];\n            const v = value[u.id];\n            /**\n             * Well the following is the actually type logic...\n             * if(u instanceof StructuredUniformSetter) {\n             *     u.setValue(v as {[key: string]: AllUniformType;});\n             * } else {\n             *     u.setValue(v as AllUniformType);\n             * }\n             */\n            u.setValue(v);\n        }\n    }\n}\nconst RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\nexport class WebGLUniformsWrapper extends UniformContainer {\n    constructor(renderer, program) {\n        super();\n        this.renderer = renderer;\n        this.program = program;\n        const gl = this.renderer.context;\n        const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n        for (let i = 0; i < n; ++i) {\n            const info = gl.getActiveUniform(program, i), path = info.name, addr = gl.getUniformLocation(program, path);\n            this.parseUniform(info, addr, this);\n        }\n    }\n    static addUniform(container, uniformObject) {\n        container.seq.push(uniformObject);\n        container.map[uniformObject.id] = uniformObject;\n    }\n    parseUniform(activeInfo, addr, container) {\n        /**\n         * Hard to explain, take an example.\n         * When there is a single basic type uniform the typeInfo will be [\\d\\w_]+\n         * and when there is an array of basic type uniform the typeInfo will be [\\d\\w_]+[0]\n         * So this is how matchEnd + 2 === pathLength works\n         *\n         * when path is \"spotLights[0].direction\"\n         * the first match will get [ \"spotLights[\", \"spotLights\", undefined, \"[\" ] lastIndex == 11\n         * This round the regex first get matchEnd + 2 !== pathLength, then we can get this is a\n         * StructuredUniformSetter, So all the thing dealing in else bracket is about StructuredUniformSetter\n         * The Setter from the map is sure to be StructuredUniformSetter.\n         * So we use as StructuredUniformSetter\n         */\n        const path = activeInfo.name;\n        const pathLength = path.length;\n        // reset RegExp object, because of the early exit of a previous run\n        RePathPart.lastIndex = 0;\n        for (;;) {\n            const match = RePathPart.exec(path);\n            const matchEnd = RePathPart.lastIndex;\n            let id = match[1];\n            const idIsIndex = match[2] === \"]\";\n            const subscript = match[3];\n            if (idIsIndex)\n                id = parseInt(id, 10); // convert to integer\n            if (subscript === undefined || (subscript === \"[\" && matchEnd + 2 === pathLength)) {\n                // bare name or \"pure\" bottom-level array \"[0]\" suffix\n                WebGLUniformsWrapper.addUniform(container, subscript === undefined\n                    ? new SingleUniformSetter(this.renderer, id, activeInfo, addr)\n                    : new PureArrayUniformSetter(this.renderer, id, activeInfo, addr));\n                break;\n            }\n            else {\n                // step into inner node / create it in case it doesn't exist\n                const map = container.map;\n                let next = map[id];\n                if (next === undefined) {\n                    next = new StructuredUniformSetter(id);\n                    WebGLUniformsWrapper.addUniform(container, next);\n                }\n                container = next;\n            }\n        }\n    }\n    setValue(name, value) {\n        const u = this.map[name];\n        if (u !== undefined) {\n            u.setValue(value);\n        }\n    }\n    setOptional(object, name) {\n        const v = object[name];\n        if (v !== undefined) {\n            this.setValue(name, v);\n        }\n    }\n    static upload(seq, values) {\n        for (let i = 0, n = seq.length; i !== n; i++) {\n            const u = seq[i], v = values[u.id];\n            if (v.needsUpdate !== false) {\n                // note: always updating when .needsUpdate is undefined\n                u.setValue(v.value);\n            }\n        }\n    }\n    static seqWithValue(seq, values) {\n        const r = [];\n        for (let i = 0, n = seq.length; i !== n; i++) {\n            const u = seq[i];\n            if (u.id in values)\n                r.push(u);\n        }\n        return r;\n    }\n}\n","import { AddEquation, AlphaFormat, ByteType, ClampToEdgeWrapping, DepthFormat, DepthStencilFormat, DstAlphaFactor, DstColorFactor, FloatType, HalfFloatType, IntType, LinearFilter, LinearMipMapLinearFilter, LinearMipMapNearestFilter, LuminanceAlphaFormat, LuminanceFormat, MaxEquation, MinEquation, MirroredRepeatWrapping, NearestFilter, NearestMipMapLinearFilter, NearestMipMapNearestFilter, OneFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, RGBAFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBFormat, RGB_ETC1_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RepeatWrapping, ReverseSubtractEquation, ShortType, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, SubtractEquation, UnsignedByteType, UnsignedInt248Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShort565Type, UnsignedShortType, ZeroFactor, } from \"../../constants\";\nexport class WebGLUtils {\n    constructor(context, extensions) {\n        this.context = context;\n        this.extensions = extensions;\n    }\n    convert(parameter) {\n        const extensions = this.extensions;\n        const context = this.context;\n        let extension;\n        if (parameter === RepeatWrapping) {\n            return context.REPEAT;\n        }\n        if (parameter === ClampToEdgeWrapping) {\n            return context.CLAMP_TO_EDGE;\n        }\n        if (parameter === MirroredRepeatWrapping) {\n            return context.MIRRORED_REPEAT;\n        }\n        if (parameter === NearestFilter) {\n            return context.NEAREST;\n        }\n        if (parameter === NearestMipMapNearestFilter) {\n            return context.NEAREST_MIPMAP_NEAREST;\n        }\n        if (parameter === NearestMipMapLinearFilter) {\n            return context.NEAREST_MIPMAP_LINEAR;\n        }\n        if (parameter === LinearFilter) {\n            return context.LINEAR;\n        }\n        if (parameter === LinearMipMapNearestFilter) {\n            return context.LINEAR_MIPMAP_NEAREST;\n        }\n        if (parameter === LinearMipMapLinearFilter) {\n            return context.LINEAR_MIPMAP_LINEAR;\n        }\n        if (parameter === UnsignedByteType) {\n            return context.UNSIGNED_BYTE;\n        }\n        if (parameter === UnsignedShort4444Type) {\n            return context.UNSIGNED_SHORT_4_4_4_4;\n        }\n        if (parameter === UnsignedShort5551Type) {\n            return context.UNSIGNED_SHORT_5_5_5_1;\n        }\n        if (parameter === UnsignedShort565Type) {\n            return context.UNSIGNED_SHORT_5_6_5;\n        }\n        if (parameter === ByteType) {\n            return context.BYTE;\n        }\n        if (parameter === ShortType) {\n            return context.SHORT;\n        }\n        if (parameter === UnsignedShortType) {\n            return context.UNSIGNED_SHORT;\n        }\n        if (parameter === IntType) {\n            return context.INT;\n        }\n        if (parameter === UnsignedIntType) {\n            return context.UNSIGNED_INT;\n        }\n        if (parameter === FloatType) {\n            return context.FLOAT;\n        }\n        if (parameter === HalfFloatType) {\n            extension = extensions.get(\"OES_texture_half_float\");\n            if (extension !== null) {\n                return extension.HALF_FLOAT_OES;\n            }\n        }\n        if (parameter === AlphaFormat) {\n            return context.ALPHA;\n        }\n        if (parameter === RGBFormat) {\n            return context.RGB;\n        }\n        if (parameter === RGBAFormat) {\n            return context.RGBA;\n        }\n        if (parameter === LuminanceFormat) {\n            return context.LUMINANCE;\n        }\n        if (parameter === LuminanceAlphaFormat) {\n            return context.LUMINANCE_ALPHA;\n        }\n        if (parameter === DepthFormat) {\n            return context.DEPTH_COMPONENT;\n        }\n        if (parameter === DepthStencilFormat) {\n            return context.DEPTH_STENCIL;\n        }\n        if (parameter === AddEquation) {\n            return context.FUNC_ADD;\n        }\n        if (parameter === SubtractEquation) {\n            return context.FUNC_SUBTRACT;\n        }\n        if (parameter === ReverseSubtractEquation) {\n            return context.FUNC_REVERSE_SUBTRACT;\n        }\n        if (parameter === ZeroFactor) {\n            return context.ZERO;\n        }\n        if (parameter === OneFactor) {\n            return context.ONE;\n        }\n        if (parameter === SrcColorFactor) {\n            return context.SRC_COLOR;\n        }\n        if (parameter === OneMinusSrcColorFactor) {\n            return context.ONE_MINUS_SRC_COLOR;\n        }\n        if (parameter === SrcAlphaFactor) {\n            return context.SRC_ALPHA;\n        }\n        if (parameter === OneMinusSrcAlphaFactor) {\n            return context.ONE_MINUS_SRC_ALPHA;\n        }\n        if (parameter === DstAlphaFactor) {\n            return context.DST_ALPHA;\n        }\n        if (parameter === OneMinusDstAlphaFactor) {\n            return context.ONE_MINUS_DST_ALPHA;\n        }\n        if (parameter === DstColorFactor) {\n            return context.DST_COLOR;\n        }\n        if (parameter === OneMinusDstColorFactor) {\n            return context.ONE_MINUS_DST_COLOR;\n        }\n        if (parameter === SrcAlphaSaturateFactor) {\n            return context.SRC_ALPHA_SATURATE;\n        }\n        if (parameter === RGB_S3TC_DXT1_Format ||\n            parameter === RGBA_S3TC_DXT1_Format ||\n            parameter === RGBA_S3TC_DXT3_Format ||\n            parameter === RGBA_S3TC_DXT5_Format) {\n            extension = extensions.get(\"WEBGL_compressed_texture_s3tc\");\n            if (extension !== null) {\n                if (parameter === RGB_S3TC_DXT1_Format) {\n                    return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n                }\n                if (parameter === RGBA_S3TC_DXT1_Format) {\n                    return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n                }\n                if (parameter === RGBA_S3TC_DXT3_Format) {\n                    return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n                }\n                if (parameter === RGBA_S3TC_DXT5_Format) {\n                    return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n                }\n            }\n        }\n        if (parameter === RGB_PVRTC_4BPPV1_Format ||\n            parameter === RGB_PVRTC_2BPPV1_Format ||\n            parameter === RGBA_PVRTC_4BPPV1_Format ||\n            parameter === RGBA_PVRTC_2BPPV1_Format) {\n            extension = extensions.get(\"WEBGL_compressed_texture_pvrtc\");\n            if (extension !== null) {\n                if (parameter === RGB_PVRTC_4BPPV1_Format) {\n                    return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n                }\n                if (parameter === RGB_PVRTC_2BPPV1_Format) {\n                    return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n                }\n                if (parameter === RGBA_PVRTC_4BPPV1_Format) {\n                    return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n                }\n                if (parameter === RGBA_PVRTC_2BPPV1_Format) {\n                    return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n                }\n            }\n        }\n        if (parameter === RGB_ETC1_Format) {\n            extension = extensions.get(\"WEBGL_compressed_texture_etc1\");\n            if (extension !== null) {\n                return extension.COMPRESSED_RGB_ETC1_WEBGL;\n            }\n        }\n        if (parameter === RGBA_ASTC_4x4_Format ||\n            parameter === RGBA_ASTC_5x4_Format ||\n            parameter === RGBA_ASTC_5x5_Format ||\n            parameter === RGBA_ASTC_6x5_Format ||\n            parameter === RGBA_ASTC_6x6_Format ||\n            parameter === RGBA_ASTC_8x5_Format ||\n            parameter === RGBA_ASTC_8x6_Format ||\n            parameter === RGBA_ASTC_8x8_Format ||\n            parameter === RGBA_ASTC_10x5_Format ||\n            parameter === RGBA_ASTC_10x6_Format ||\n            parameter === RGBA_ASTC_10x8_Format ||\n            parameter === RGBA_ASTC_10x10_Format ||\n            parameter === RGBA_ASTC_12x10_Format ||\n            parameter === RGBA_ASTC_12x12_Format) {\n            extension = extensions.get(\"WEBGL_compressed_texture_astc\");\n            if (extension !== null) {\n                return parameter;\n            }\n        }\n        if (parameter === MinEquation || parameter === MaxEquation) {\n            extension = extensions.get(\"EXT_blend_minmax\");\n            if (extension !== null) {\n                if (parameter === MinEquation) {\n                    return extension.MIN_EXT;\n                }\n                if (parameter === MaxEquation) {\n                    return extension.MAX_EXT;\n                }\n            }\n        }\n        if (parameter === UnsignedInt248Type) {\n            extension = extensions.get(\"WEBGL_depth_texture\");\n            if (extension !== null) {\n                return extension.UNSIGNED_INT_24_8_WEBGL;\n            }\n        }\n        return 0;\n    }\n}\n","import { Color } from \"../math/Color\";\nexport class Fog {\n    constructor(color, near = 1, far = 1000) {\n        this.name = \"\";\n        this.near = 1;\n        this.far = 1000;\n        if (color instanceof Color) {\n            this.color = new Color().copy(color);\n        }\n        else if (typeof color === \"number\") {\n            this.color = new Color().setHex(color);\n        }\n        else if (typeof color === \"string\") {\n            this.color = new Color().setStyle(color);\n        }\n        this.near = near;\n        this.far = far;\n    }\n    copy(source) {\n        this.color.copy(source.color);\n        this.near = source.near;\n        this.far = source.far;\n        return this;\n    }\n    clone() {\n        return new this.constructor(this.color, this.near, this.far).copy(this);\n    }\n}\n","import { Color } from \"../math/Color\";\nexport class FogExp2 {\n    constructor(color, density = 1) {\n        this.name = \"\";\n        this.density = 0.00025;\n        if (color instanceof Color) {\n            this.color = new Color().copy(color);\n        }\n        else if (typeof color === \"number\") {\n            this.color = new Color().setHex(color);\n        }\n        else if (typeof color === \"string\") {\n            this.color = new Color().setStyle(color);\n        }\n        this.density = density;\n    }\n    copy(source) {\n        this.color.copy(source.color);\n        this.density = source.density;\n        return this;\n    }\n    clone() {\n        return new this.constructor(this.color, this.density).copy(this);\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nexport class Scene extends Object3D {\n    constructor() {\n        super(...arguments);\n        this.type = \"Scene\";\n        this.background = null;\n        this.fog = null;\n        this.overrideMaterial = null;\n        this.autoUpdate = true; // checked by the renderer\n    }\n    copy(source) {\n        super.copy(source);\n        if (source.background !== null) {\n            this.background = source.background.clone();\n        }\n        if (source.fog !== null) {\n            this.fog = source.fog.clone();\n        }\n        if (source.overrideMaterial !== null) {\n            this.overrideMaterial = source.overrideMaterial.clone();\n        }\n        this.autoUpdate = source.autoUpdate;\n        // this.matrixAutoUpdate = source.matrixAutoUpdate;\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n}\n","import { Texture } from \"./Texture\";\nexport class CanvasTexture extends Texture {\n    constructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n        super(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n        this.image = Texture.DEFAULT_IMAGE;\n        this.needsUpdate = true;\n    }\n}\n","import { Texture } from \"./Texture\";\nexport class CompressedTexture extends Texture {\n    constructor(mipmaps, width, height, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n        this.image = { width: width, height: height };\n        this.mipmaps = mipmaps;\n        /**\n         * no flipping for cube textures\n         * (also flipping doesn't work for compressed textures )\n         * @type {boolean}\n         */\n        this.flipY = false;\n        /**\n         * can't generate mipmaps for compressed textures\n         * mips must be embedded in DDS files\n         * @type {boolean}\n         */\n        this.generateMipmaps = false;\n    }\n}\n","import { CubeReflectionMapping } from \"../constants\";\nimport { Texture } from \"./Texture\";\nexport class CubeTexture extends Texture {\n    constructor(images = [], mapping = CubeReflectionMapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n        super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n        this.flipY = false;\n    }\n    get images() {\n        return this.image;\n    }\n    set images(images) {\n        this.image = images;\n    }\n}\n","import { NearestFilter } from \"../constants\";\nimport { Texture } from \"./Texture\";\nexport class DataTexture extends Texture {\n    constructor(data, width, height, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n        this.image = { data: data, width: width, height: height };\n        this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n        this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n        this.generateMipmaps = false;\n        this.flipY = false;\n        this.unpackAlignment = 1;\n    }\n}\n","import { DepthFormat, DepthStencilFormat, NearestFilter, UnsignedInt248Type, UnsignedShortType } from \"../constants\";\nimport { Texture } from \"./Texture\";\nexport class DepthTexture extends Texture {\n    constructor(width, height, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n        format = format !== undefined ? format : DepthFormat;\n        if (format !== DepthFormat && format !== DepthStencilFormat) {\n            throw new Error(`DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat`);\n        }\n        if (type === undefined && format === DepthFormat) {\n            type = UnsignedShortType;\n        }\n        if (type === undefined && format === DepthStencilFormat) {\n            type = UnsignedInt248Type;\n        }\n        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n        this.image = { width: width, height: height };\n        this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n        this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n        this.flipY = false;\n        this.generateMipmaps = false;\n    }\n}\n","import { ClampToEdgeWrapping, LinearEncoding, LinearFilter, LinearMipMapLinearFilter, MirroredRepeatWrapping, RepeatWrapping, RGBAFormat, UnsignedByteType, UVMapping, } from \"../constants\";\nimport { EventDispatcher } from \"../core/EventDispatcher\";\nimport { MathUtil } from \"../math/Math\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Vector2 } from \"../math/Vector2\";\nlet textureId = 0;\nexport class Texture extends EventDispatcher {\n    constructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipMapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding) {\n        super();\n        this.id = textureId++;\n        this.uuid = MathUtil.generateUUID();\n        this.name = \"\";\n        this.image = Texture.DEFAULT_IMAGE;\n        this.mipmaps = [];\n        this.mapping = Texture.DEFAULT_MAPPING;\n        this.wrapS = ClampToEdgeWrapping;\n        this.wrapT = ClampToEdgeWrapping;\n        this.magFilter = LinearFilter;\n        this.minFilter = LinearMipMapLinearFilter;\n        this.anisotropy = 1;\n        this.format = RGBAFormat;\n        this.type = UnsignedByteType;\n        this.offset = new Vector2(0, 0);\n        this.repeat = new Vector2(1, 1);\n        this.center = new Vector2(0, 0);\n        this.rotation = 0;\n        this.matrix = new Matrix3();\n        this.matrixAutoUpdate = true;\n        this.generateMipmaps = true;\n        this.premultiplyAlpha = false;\n        this.flipY = true;\n        /**\n         * valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n         * @type {number}\n         */\n        this.unpackAlignment = 4;\n        /**\n         * Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n         * Also changing the encoding after already used by a Material will not automatically make the Material update.\n         * You need to explicitly call Material.needsUpdate to trigger it to recompile.\n         */\n        this.encoding = LinearEncoding;\n        this.version = 0;\n        this.image = image;\n        this.mapping = mapping;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.magFilter = magFilter;\n        this.minFilter = minFilter;\n        this.format = format;\n        this.type = type;\n        this.anisotropy = anisotropy;\n        this.encoding = encoding;\n    }\n    set needsUpdate(value) {\n        if (value === true)\n            this.version++;\n    }\n    dispose() {\n        this.dispatchEvent({ type: \"dispose\" });\n    }\n    transformUv(uv) {\n        if (this.mapping !== UVMapping)\n            return this;\n        uv.applyMatrix3(this.matrix);\n        if (uv.x < 0 || uv.x > 1) {\n            switch (this.wrapS) {\n                case RepeatWrapping:\n                    uv.x = uv.x - Math.floor(uv.x);\n                    break;\n                case ClampToEdgeWrapping:\n                    uv.x = uv.x < 0 ? 0 : 1;\n                    break;\n                case MirroredRepeatWrapping:\n                    if (Math.abs(Math.floor(uv.x) % 2) === 1) {\n                        uv.x = Math.ceil(uv.x) - uv.x;\n                    }\n                    else {\n                        uv.x = uv.x - Math.floor(uv.x);\n                    }\n                    break;\n            }\n        }\n        if (uv.y < 0 || uv.y > 1) {\n            switch (this.wrapT) {\n                case RepeatWrapping:\n                    uv.y = uv.y - Math.floor(uv.y);\n                    break;\n                case ClampToEdgeWrapping:\n                    uv.y = uv.y < 0 ? 0 : 1;\n                    break;\n                case MirroredRepeatWrapping:\n                    if (Math.abs(Math.floor(uv.y) % 2) === 1) {\n                        uv.y = Math.ceil(uv.y) - uv.y;\n                    }\n                    else {\n                        uv.y = uv.y - Math.floor(uv.y);\n                    }\n                    break;\n            }\n        }\n        if (this.flipY) {\n            uv.y = 1 - uv.y;\n        }\n        return this;\n    }\n    clone() {\n        return new this.constructor().copy(this);\n    }\n    copy(source) {\n        this.name = source.name;\n        this.image = source.image;\n        this.mipmaps = source.mipmaps.slice(0);\n        this.mapping = source.mapping;\n        this.wrapS = source.wrapS;\n        this.wrapT = source.wrapT;\n        this.magFilter = source.magFilter;\n        this.minFilter = source.minFilter;\n        this.anisotropy = source.anisotropy;\n        this.format = source.format;\n        this.type = source.type;\n        this.offset.copy(source.offset);\n        this.repeat.copy(source.repeat);\n        this.center.copy(source.center);\n        this.rotation = source.rotation;\n        this.matrixAutoUpdate = source.matrixAutoUpdate;\n        this.matrix.copy(source.matrix);\n        this.generateMipmaps = source.generateMipmaps;\n        this.premultiplyAlpha = source.premultiplyAlpha;\n        this.flipY = source.flipY;\n        this.unpackAlignment = source.unpackAlignment;\n        this.encoding = source.encoding;\n        return this;\n    }\n}\nTexture.DEFAULT_MAPPING = UVMapping;\n","import { Texture } from \"./Texture\";\nexport class VideoTexture extends Texture {\n    constructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n        super(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n        this.image = Texture.DEFAULT_IMAGE;\n        this.generateMipmaps = false;\n    }\n    update() {\n        const video = this.image;\n        if (video.readyState >= video.HAVE_CURRENT_DATA) {\n            this.needsUpdate = true;\n        }\n        return this;\n    }\n}\n","import { Matrix4 } from \"./math/Matrix4\";\nimport { Matrix3 } from \"./math/Matrix3\";\nimport { Vector3 } from \"./math/Vector3\";\nimport { Vector2 } from \"./math/Vector2\";\nimport { Vector4 } from \"./math/Vector4\";\nexport function arrayMin(array) {\n    if (array.length === 0)\n        return Infinity;\n    let min = array[0];\n    for (let i = 1, l = array.length; i < l; ++i) {\n        if (array[i] < min)\n            min = array[i];\n    }\n    return min;\n}\nexport function arrayMax(array) {\n    if (array.length === 0)\n        return -Infinity;\n    let max = array[0];\n    for (let i = 1, l = array.length; i < l; ++i) {\n        if (array[i] > max)\n            max = array[i];\n    }\n    return max;\n}\nexport function applyMatrixToBufferAttribute(matrix, attribute) {\n    const vec = new Vector3();\n    for (let i = 0, l = attribute.count; i < l; i++) {\n        vec.x = attribute.getProperty(i, \"x\");\n        vec.y = attribute.getProperty(i, \"y\");\n        vec.z = attribute.getProperty(i, \"z\");\n        if (matrix instanceof Matrix4) {\n            vec.applyMatrix4(matrix);\n        }\n        else if (matrix instanceof Matrix3) {\n            vec.applyMatrix3(matrix);\n        }\n        attribute.setProperty(i, \"xyz\", vec);\n    }\n    return attribute;\n}\nexport function setBoxFromBufferAttribute(target, attribute) {\n    let minX = +Infinity;\n    let minY = +Infinity;\n    let minZ = +Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    let maxZ = -Infinity;\n    for (let i = 0, l = attribute.count; i < l; i++) {\n        const x = attribute.getProperty(i, \"x\");\n        const y = attribute.getProperty(i, \"y\");\n        const z = attribute.getProperty(i, \"z\");\n        if (x < minX)\n            minX = x;\n        if (y < minY)\n            minY = y;\n        if (z < minZ)\n            minZ = z;\n        if (x > maxX)\n            maxX = x;\n        if (y > maxY)\n            maxY = y;\n        if (z > maxZ)\n            maxZ = z;\n    }\n    target.min.set(minX, minY, minZ);\n    target.max.set(maxX, maxY, maxZ);\n}\nexport function unprojectVector3onCamera(vector, camera) {\n    const matrix = new Matrix4();\n    vector.applyMatrix4(matrix.multiplyMatrices(camera.matrixWorld, matrix.getInverse(camera.projectionMatrix)));\n    return vector;\n}\nexport function vectorFromBufferAttribute(vector, attribute, index = 0) {\n    if (vector instanceof Vector2) {\n        return vector.set(attribute.getProperty(index, \"x\"), attribute.getProperty(index, \"y\"));\n    }\n    else if (vector instanceof Vector3) {\n        return vector.set(attribute.getProperty(index, \"x\"), attribute.getProperty(index, \"y\"), attribute.getProperty(index, \"z\"));\n    }\n    else if (vector instanceof Vector4) {\n        return vector.set(attribute.getProperty(index, \"x\"), attribute.getProperty(index, \"y\"), attribute.getProperty(index, \"z\"), attribute.getProperty(index, \"w\"));\n    }\n    return vector;\n}\n"],"sourceRoot":""}