{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/audio/Audio.ts","webpack:///./src/audio/AudioAnalyser.ts","webpack:///./src/audio/AudioContext.ts","webpack:///./src/audio/AudioListener.ts","webpack:///./src/audio/PositionalAudio.ts","webpack:///./src/cameras/Camera.ts","webpack:///./src/cameras/OrthographicCamera.ts","webpack:///./src/cameras/PerspectiveCamera.ts","webpack:///./src/constants.ts","webpack:///./src/core/BufferAttribute.ts","webpack:///./src/core/BufferGeometry.ts","webpack:///./src/core/Clock.ts","webpack:///./src/core/DirectGeometry.ts","webpack:///./src/core/EventDispatcher.ts","webpack:///./src/core/Face3.ts","webpack:///./src/core/Geometry.ts","webpack:///./src/core/InstancedBufferAttribute.ts","webpack:///./src/core/InstancedBufferGeometry.ts","webpack:///./src/core/InstancedInterleavedBufferAttribute.ts","webpack:///./src/core/InterleavedBufferAttribute.ts","webpack:///./src/core/Layers.ts","webpack:///./src/core/Object3D.ts","webpack:///./src/core/Raycaster.ts","webpack:///./src/geometries/BoxGeometry.ts","webpack:///./src/geometries/CircleGeometry.ts","webpack:///./src/geometries/ConeGeometry.ts","webpack:///./src/geometries/CylinderGeometry.ts","webpack:///./src/geometries/Geometries.ts","webpack:///./src/lights/AmbientLight.ts","webpack:///./src/lights/DirectionalLight.ts","webpack:///./src/lights/DirectionalLightShadow.ts","webpack:///./src/lights/HemisphereLight.ts","webpack:///./src/lights/Light.ts","webpack:///./src/lights/LightShadow.ts","webpack:///./src/lights/PointLight.ts","webpack:///./src/lights/RectAreaLight.ts","webpack:///./src/lights/SpotLight.ts","webpack:///./src/lights/SpotLightShadow.ts","webpack:///./src/materials/LineBasicMaterial.ts","webpack:///./src/materials/LineDashedMaterial.ts","webpack:///./src/materials/Material.ts","webpack:///./src/materials/MeshBasicMaterial.ts","webpack:///./src/materials/MeshDepthMaterial.ts","webpack:///./src/materials/MeshDistanceMaterial.ts","webpack:///./src/materials/MeshLambertMaterial.ts","webpack:///./src/materials/MeshNormalMaterial.ts","webpack:///./src/materials/MeshPhongMaterial.ts","webpack:///./src/materials/MeshPhysicalMaterial.ts","webpack:///./src/materials/MeshStandardMaterial.ts","webpack:///./src/materials/MeshToonMaterial.ts","webpack:///./src/materials/PointsMaterial.ts","webpack:///./src/materials/ShaderMaterial.ts","webpack:///./src/materials/ShadowMaterial.ts","webpack:///./src/materials/SpriteMaterial.ts","webpack:///./src/math/Box3.ts","webpack:///./src/math/Color.ts","webpack:///./src/math/Euler.ts","webpack:///./src/math/Frustum.ts","webpack:///./src/math/Line3.ts","webpack:///./src/math/Math.ts","webpack:///./src/math/Matrix2.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/math/Matrix4.ts","webpack:///./src/math/Plane.ts","webpack:///./src/math/Quaternion.ts","webpack:///./src/math/Ray.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/math/Triangle.ts","webpack:///./src/math/Vector2.ts","webpack:///./src/math/Vector3.ts","webpack:///./src/math/Vector4.ts","webpack:///./src/objects/Bone.ts","webpack:///./src/objects/Group.ts","webpack:///./src/objects/LOD.ts","webpack:///./src/objects/Line.ts","webpack:///./src/objects/LineLoop.ts","webpack:///./src/objects/LineSegments.ts","webpack:///./src/objects/Mesh.ts","webpack:///./src/objects/Points.ts","webpack:///./src/objects/Skeleton.ts","webpack:///./src/objects/SkinnedMesh.ts","webpack:///./src/objects/Sprite.ts","webpack:///./src/renderers/WebGLRenderTarget.ts","webpack:///./src/renderers/WebGLRenderTargetCube.ts","webpack:///./src/renderers/WebGLRenderer.ts","webpack:///./src/renderers/shaders/ShaderChunk.js","webpack:///./src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/aomap_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/begin_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/bsdfs.glsl","webpack:///./src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/clipping_planes_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/clipping_planes_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/clipping_planes_pars_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/clipping_planes_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/color_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/color_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/common.glsl","webpack:///./src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/dithering_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/dithering_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/encodings_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/envmap_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/envmap_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/fog_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/fog_pars_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/fog_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/gradientmap_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/lights_pars.glsl","webpack:///./src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/lights_physical_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/lights_template.glsl","webpack:///./src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/map_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/normal_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/packing.glsl","webpack:///./src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/project_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/skinning_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/uv2_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl","webpack:///./src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/uv_vertex.glsl","webpack:///./src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl","webpack:///./src/renderers/shaders/ShaderLib.ts","webpack:///./src/renderers/shaders/ShaderLib/cube_frag.glsl","webpack:///./src/renderers/shaders/ShaderLib/cube_vert.glsl","webpack:///./src/renderers/shaders/ShaderLib/depth_frag.glsl","webpack:///./src/renderers/shaders/ShaderLib/depth_vert.glsl","webpack:///./src/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl","webpack:///./src/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl","webpack:///./src/renderers/shaders/ShaderLib/equirect_frag.glsl","webpack:///./src/renderers/shaders/ShaderLib/equirect_vert.glsl","webpack:///./src/renderers/shaders/ShaderLib/linedashed_frag.glsl","webpack:///./src/renderers/shaders/ShaderLib/linedashed_vert.glsl","webpack:///./src/renderers/shaders/ShaderLib/meshbasic_frag.glsl","webpack:///./src/renderers/shaders/ShaderLib/meshbasic_vert.glsl","webpack:///./src/renderers/shaders/ShaderLib/meshlambert_frag.glsl","webpack:///./src/renderers/shaders/ShaderLib/meshlambert_vert.glsl","webpack:///./src/renderers/shaders/ShaderLib/meshphong_frag.glsl","webpack:///./src/renderers/shaders/ShaderLib/meshphong_vert.glsl","webpack:///./src/renderers/shaders/ShaderLib/meshphysical_frag.glsl","webpack:///./src/renderers/shaders/ShaderLib/meshphysical_vert.glsl","webpack:///./src/renderers/shaders/ShaderLib/normal_frag.glsl","webpack:///./src/renderers/shaders/ShaderLib/normal_vert.glsl","webpack:///./src/renderers/shaders/ShaderLib/points_frag.glsl","webpack:///./src/renderers/shaders/ShaderLib/points_vert.glsl","webpack:///./src/renderers/shaders/ShaderLib/shadow_frag.glsl","webpack:///./src/renderers/shaders/ShaderLib/shadow_vert.glsl","webpack:///./src/renderers/shaders/UniformsLib.ts","webpack:///./src/renderers/shaders/UniformsUtils.ts","webpack:///./src/renderers/webgl/WebGLUtils.ts","webpack:///./src/scenes/Fog.ts","webpack:///./src/scenes/FogExp2.ts","webpack:///./src/scenes/Scene.ts","webpack:///./src/textures/CanvasTexture.ts","webpack:///./src/textures/CompressedTexture.ts","webpack:///./src/textures/CubeTexture.ts","webpack:///./src/textures/DataTexture.ts","webpack:///./src/textures/DepthTexture.ts","webpack:///./src/textures/Texture.ts","webpack:///./src/textures/VideoTexture.ts","webpack:///./src/utils.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","AudioWrapper","_core_Object3D__WEBPACK_IMPORTED_MODULE_0__","[object Object]","listener","super","this","type","startTime","offset","isPlaying","hasPlaybackControl","source","sourceType","autoplay","buffer","loop","playbackRate","filters","context","gain","createGain","connect","getInput","audioNode","audioBuffer","play","console","warn","createBufferSource","onended","onEnded","bind","setValueAtTime","currentTime","start","stop","length","getOutput","disconnect","getFilters","filter","setFilters","AudioAnalyserWrapper","audio","fftSize","analyser","data","createAnalyser","Uint8Array","frequencyBinCount","getByteFrequencyData","getFrequencyData","AudioContextWrapper","undefined","AudioContext","webkitAudioContext","AudioListenerWrapper","_AudioContext__WEBPACK_IMPORTED_MODULE_3__","getContext","destination","force","updateMatrixWorld","position","_math_Vector3__WEBPACK_IMPORTED_MODULE_2__","quaternion","_math_Quaternion__WEBPACK_IMPORTED_MODULE_1__","scale","orientation","up","matrixWorld","decompose","set","applyQuaternion","positionX","x","positionY","y","positionZ","z","forwardX","forwardY","forwardZ","upX","upY","upZ","setPosition","setOrientation","PositionalAudio","_Audio__WEBPACK_IMPORTED_MODULE_1__","panner","createPanner","refDistance","rolloffFactor","distanceModel","maxDistance","_math_Vector3__WEBPACK_IMPORTED_MODULE_0__","setFromMatrixPosition","Camera","matrixWorldInverse","_math_Matrix4__WEBPACK_IMPORTED_MODULE_1__","projectionMatrix","getInverse","recursive","copy","worldDirection","worldQuaternion","constructor","OrthographicCamera","_Camera__WEBPACK_IMPORTED_MODULE_0__","left","right","top","bottom","near","far","_left","_right","_top","_bottom","_zoom","_near","_far","_view","updateProjectionMatrix","zoom","view","fullWidth","fullHeight","width","height","enabled","offsetX","offsetY","dx","dy","cx","cy","zoomW","zoomH","scaleW","scaleH","makeOrthographic","assign","PerspectiveCamera","_Camera__WEBPACK_IMPORTED_MODULE_1__","fov","aspect","focus","_fov","_aspect","_filmGauge","_filmOffset","filmGauge","filmOffset","focalLength","vExtentSlope","getFilmHeight","_math_Math__WEBPACK_IMPORTED_MODULE_0__","RAD2DEG","Math","atan","tan","DEG2RAD","min","max","skew","getFilmWidth","makePerspective","__webpack_exports__","RGBADepthPacking","REVISION","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","BufferAttribute","array","itemSize","normalized","uuid","_math_Math__WEBPACK_IMPORTED_MODULE_1__","generateUUID","count","dynamic","updateRange","version","needsUpdate","slice","index1","attribute","index2","colors","color","_math_Color__WEBPACK_IMPORTED_MODULE_0__","g","b","vectors","vector","_math_Vector2__WEBPACK_IMPORTED_MODULE_2__","_math_Vector3__WEBPACK_IMPORTED_MODULE_3__","_math_Vector4__WEBPACK_IMPORTED_MODULE_4__","w","index","toLowerCase","replace","offsetMap","charAt","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","bufferGeometryId","BufferGeometry","_EventDispatcher__WEBPACK_IMPORTED_MODULE_9__","id","attributes","morphAttributes","groups","boundingBox","boundingSphere","drawRange","Infinity","Array","isArray","_utils__WEBPACK_IMPORTED_MODULE_6__","_BufferAttribute__WEBPACK_IMPORTED_MODULE_7__","setIndex","materialIndex","push","matrix","normal","normalMatrix","_math_Matrix3__WEBPACK_IMPORTED_MODULE_2__","getNormalMatrix","computeBoundingBox","computeBoundingSphere","angle","applyMatrix","_math_Matrix4__WEBPACK_IMPORTED_MODULE_3__","makeRotationX","makeRotationY","makeRotationZ","makeTranslation","makeScale","obj","_Object3D__WEBPACK_IMPORTED_MODULE_11__","lookAt","updateMatrix","getCenter","negate","translate","geometry","_objects_Points__WEBPACK_IMPORTED_MODULE_14__","_objects_Line__WEBPACK_IMPORTED_MODULE_13__","positions","vertices","addAttribute","copyVector3sArray","copyColorsArray","lineDistances","copyArray","clone","_objects_Mesh__WEBPACK_IMPORTED_MODULE_12__","fromGeometry","points","point","direct","directGeometry","elementsNeedUpdate","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","_DirectGeometry__WEBPACK_IMPORTED_MODULE_8__","normals","uv","copyVector2sArray","uvs","_Geometry__WEBPACK_IMPORTED_MODULE_10__","lineDistancesNeedUpdate","lineDistance","computeGroups","fromDirectGeometry","uvs2","morphTargets","morphTarget","skinIndices","copyVector4sArray","skinWeights","_math_Box3__WEBPACK_IMPORTED_MODULE_0__","makeEmpty","isNaN","error","_math_Sphere__WEBPACK_IMPORTED_MODULE_4__","box","center","maxRadiusSquare","il","_math_Vector3__WEBPACK_IMPORTED_MODULE_5__","getProperty","distanceToSquared","radius","sqrt","vA","vB","vC","pA","pB","pC","cb","ab","indices","addGroup","j","jl","group","fromArray","sub","cross","normalizeNormals","normalize","setProperty","geometry2","array2","morphAttribute","dispatchEvent","Clock","autoStart","oldTime","elapsedTime","running","performance","Date","now","getElapsedTime","getDelta","diff","newTime","DirectGeometry","faces","face","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphNormals","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexNormals","vertexColors","vertexUvs","_math_Vector2__WEBPACK_IMPORTED_MODULE_0__","morphNormal","EventDispatcher","_listeners","listeners","indexOf","listenerArray","splice","event","target","Face3","_math_Vector3__WEBPACK_IMPORTED_MODULE_1__","GeometryFace","_Face3__WEBPACK_IMPORTED_MODULE_10__","geometryId","Geometry","bufferGeometry","_math_Math__WEBPACK_IMPORTED_MODULE_2__","_math_Matrix3__WEBPACK_IMPORTED_MODULE_3__","applyMatrix4","applyMatrix3","_math_Matrix4__WEBPACK_IMPORTED_MODULE_4__","uv2","tempNormals","tempUVs","tempUVs2","_math_Vector3__WEBPACK_IMPORTED_MODULE_8__","_math_Color__WEBPACK_IMPORTED_MODULE_1__","_math_Vector2__WEBPACK_IMPORTED_MODULE_7__","addFace","computeFaceNormals","f","fl","areaWeighted","v","vl","add","originalFaceNormal","originalVertexNormals","tmpGeo","faceNormals","_math_Triangle__WEBPACK_IMPORTED_MODULE_6__","computeVertexNormals","faceNormal","distanceTo","setFromPoints","_math_Sphere__WEBPACK_IMPORTED_MODULE_5__","materialIndexOffset","vertexOffset","thisVertices","thatVertices","thisFaces","thatFaces","thisUvs","thatUvs","thisColors","thatColors","vertexCopy","faceVertexNormals","faceVertexColors","faceCopy","uvCopy","mesh","matrixAutoUpdate","merge","verticesMap","unique","changes","precisionPoints","precision","pow","key","round","join","faceIndicesToRemove","idx","sort","uvs1","newUvs1","newUvs2","uvsCopy","k","kl","InstancedBufferAttribute","_BufferAttribute__WEBPACK_IMPORTED_MODULE_0__","meshPerAttribute","InstancedBufferGeometry","_BufferGeometry__WEBPACK_IMPORTED_MODULE_0__","maxInstancedCount","InstancedInterleavedBufferAttribute","_InterleavedBufferAttribute__WEBPACK_IMPORTED_MODULE_0__","stride","InterleavedBufferAttribute","_math_Vector2__WEBPACK_IMPORTED_MODULE_1__","_math_Vector4__WEBPACK_IMPORTED_MODULE_3__","Layers","mask","channel","layers","object3DId","Object3D","_EventDispatcher__WEBPACK_IMPORTED_MODULE_6__","parent","children","DefaultUp","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","_Layers__WEBPACK_IMPORTED_MODULE_7__","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","rotation","_math_Euler__WEBPACK_IMPORTED_MODULE_1__","_math_Quaternion__WEBPACK_IMPORTED_MODULE_4__","modelViewMatrix","compose","multiplyMatrices","raycaster","intersections","q","premultiply","axis","setFromAxisAngle","euler","setFromEuler","setFromRotationMatrix","multiply","rotateOnAxis","distance","vec","multiplyScalar","translateOnAxis","mat","_cameras_Camera__WEBPACK_IMPORTED_MODULE_0__","objects","remove","worldPosition","result","worldRotation","setFromQuaternion","order","worldScale","callback","traverse","traverseVisible","traverseAncestors","JSON","parse","stringify","intersectObject","intersects","raycast","Raycaster","origin","direction","params","LOD","Line","Mesh","Points","threshold","Sprite","ray","linePrecision","_math_Ray__WEBPACK_IMPORTED_MODULE_2__","coords","camera","_cameras_PerspectiveCamera__WEBPACK_IMPORTED_MODULE_1__","_utils__WEBPACK_IMPORTED_MODULE_3__","_cameras_OrthographicCamera__WEBPACK_IMPORTED_MODULE_0__","transformDirection","BoxGeometry","_core_Geometry__WEBPACK_IMPORTED_MODULE_2__","depth","widthSegments","heightSegments","depthSegments","parameters","BoxBufferGeometry","_core_BufferGeometry__WEBPACK_IMPORTED_MODULE_1__","floor","numberOfVertices","groupStart","buildPlane","u","uDir","vDir","width2","height2","depth2","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","iy","ix","_core_BufferAttribute__WEBPACK_IMPORTED_MODULE_0__","CircleGeometry","segments","thetaStart","thetaLength","fromBufferGeometry","CircleBufferGeometry","mergeVertices","PI","segment","cos","sin","ConeGeometry","_core_Geometry__WEBPACK_IMPORTED_MODULE_1__","radialSegments","openEnded","_CylinderGeometry__WEBPACK_IMPORTED_MODULE_2__","ConeBufferGeometry","_core_BufferGeometry__WEBPACK_IMPORTED_MODULE_0__","CylinderGeometry","radiusTop","radiusBottom","CylinderBufferGeometry","indexArray","halfHeight","generateCap","centerIndexStart","centerIndexEnd","sign","theta","cosTheta","sinTheta","generateTorso","slope","indexRow","_BoxGeometry__WEBPACK_IMPORTED_MODULE_3__","AmbientLight","_Light__WEBPACK_IMPORTED_MODULE_0__","intensity","DirectionalLight","_Light__WEBPACK_IMPORTED_MODULE_2__","shadow","_DirectionalLightShadow__WEBPACK_IMPORTED_MODULE_1__","DirectionalLightShadow","_LightShadow__WEBPACK_IMPORTED_MODULE_1__","HemisphereLight","_Light__WEBPACK_IMPORTED_MODULE_1__","skyColor","groundColor","Light","LightShadow","bias","mapSize","map","_math_Matrix4__WEBPACK_IMPORTED_MODULE_0__","PointLight","decay","_LightShadow__WEBPACK_IMPORTED_MODULE_2__","_cameras_PerspectiveCamera__WEBPACK_IMPORTED_MODULE_0__","power","RectAreaLight","SpotLight","penumbra","_SpotLightShadow__WEBPACK_IMPORTED_MODULE_2__","SpotLightShadow","light","LineBasicMaterial","_Material__WEBPACK_IMPORTED_MODULE_1__","setHex","lights","linecap","linejoin","linewidth","setValues","LineDashedMaterial","_LineBasicMaterial__WEBPACK_IMPORTED_MODULE_0__","dashSize","gapSize","materialId","Material","_core_EventDispatcher__WEBPACK_IMPORTED_MODULE_1__","_math_Math__WEBPACK_IMPORTED_MODULE_3__","alphaTest","blending","_constants__WEBPACK_IMPORTED_MODULE_0__","blendDst","blendDstAlpha","blendEquation","blendEquationAlpha","blendSrc","blendSrcAlpha","clipIntersection","clippingPlanes","clipShadows","colorWrite","depthFunc","depthTest","depthWrite","dithering","flatShading","fog","opacity","overdraw","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","program","shadowSide","side","transparent","values","newValue","currentValue","_math_Color__WEBPACK_IMPORTED_MODULE_2__","setStyle","_math_Vector3__WEBPACK_IMPORTED_MODULE_4__","Number","srcPlanes","dstPlanes","MeshBasicMaterial","_Material__WEBPACK_IMPORTED_MODULE_2__","alphaMap","aoMap","aoMapIntensity","combine","envMap","lightMap","lightMapIntensity","reflectivity","refractionRatio","skinning","specularMap","wireframe","wireframeLinecap","wireframeLinejoin","wireframeLinewidth","MeshDepthMaterial","depthPacking","displacementMap","displacementScale","displacementBias","MeshDistanceMaterial","farDistance","nearDistance","referencePosition","MeshLambertMaterial","emissive","emissiveIntensity","emissiveMap","MeshNormalMaterial","paramenters","bumpMap","bumpScale","normalMap","normalScale","MeshPhongMaterial","_Material__WEBPACK_IMPORTED_MODULE_3__","shininess","specular","MeshPhysicalMaterial","_Material__WEBPACK_IMPORTED_MODULE_0__","clearCoat","clearCoatRoughness","defines","PHYSICAL","MeshStandardMaterial","STANDARD","envMapIntensity","metalness","metalnessMap","roughness","roughnessMap","MeshToonMaterial","_MeshPhongMaterial__WEBPACK_IMPORTED_MODULE_0__","TOON","gradientMap","PointsMaterial","size","sizeAttenuation","ShaderMaterial","uniforms","vertexShader","fragmentShader","clipping","extensions","derivatives","drawBuffers","fragDepth","shaderTextureLOD","defaultAttributeValues","index0AttributeName","_renderers_shaders_UniformsUtils__WEBPACK_IMPORTED_MODULE_0__","ShadowMaterial","SpriteMaterial","Box3","_Vector3__WEBPACK_IMPORTED_MODULE_1__","minX","minY","minZ","maxX","maxY","maxZ","expandByPoint","halfSize","expandByObject","isEmpty","scalar","addScalar","node","_core_Geometry__WEBPACK_IMPORTED_MODULE_4__","v1","_core_BufferGeometry__WEBPACK_IMPORTED_MODULE_3__","_utils__WEBPACK_IMPORTED_MODULE_2__","sphere","closestPoint","clampPoint","plane","constant","clamp","clampedPoint","_Sphere__WEBPACK_IMPORTED_MODULE_0__","getSize","equals","HUE_TO_RGB","t","Color","setRGB","hex","h","_Math__WEBPACK_IMPORTED_MODULE_0__","euclideanModulo","style","matches","exec","components","parseInt","parseFloat","setHSL","ColorKeywords","gammaFactor","safeInverse","getHex","toString","hsl","hue","saturation","lightness","delta","getHSL","alpha","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","EulerOrder","Euler","_order","DefaultOrder","_x","_y","_z","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","XYZ","asin","abs","atan2","YXZ","ZXY","ZYX","YZX","XZY","_Matrix4__WEBPACK_IMPORTED_MODULE_1__","makeRotationFromQuaternion","newOrder","_Quaternion__WEBPACK_IMPORTED_MODULE_2__","Frustum","p0","_Plane__WEBPACK_IMPORTED_MODULE_0__","p1","p2","p3","p4","p5","planes","frustum","me","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setPlane","_Sphere__WEBPACK_IMPORTED_MODULE_1__","intersectsSphere","sprite","negRadius","distanceToPoint","_Vector3__WEBPACK_IMPORTED_MODULE_2__","d1","d2","Line3","end","line","clampToLine","startP","startEnd","startEnd2","dot","startEndStartP","closestPointToPointParameter","MathUtil","lut","toUpperCase","d0","random","d3","a1","a2","b1","b2","low","high","range","degrees","radians","ceil","log","LN2","Matrix2","n11","n12","n21","n22","mat2","ae","be","a11","a12","a21","a22","b11","b12","b21","b22","tmp","Matrix3","n13","n23","n31","n32","n33","mat3","mat4","a13","a23","a31","a32","a33","b13","b23","b31","b32","b33","e","throwOnDegenerate","t11","t12","t13","det","msg","Error","identity","detInv","matrix4","setFromMatrix4","transpose","tx","ty","sx","sy","Matrix4","n14","n24","n34","n41","n42","n43","n44","xAxis","yAxis","zAxis","scaleX","scaleY","scaleZ","_Euler__WEBPACK_IMPORTED_MODULE_0__","af","bf","ce","cf","de","df","ac","ad","bc","bd","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","eye","lengthSquared","matA","matB","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","t14","scaleXSq","scaleYSq","scaleZSq","sz","determinant","invSX","invSY","invSZ","Plane","v2","setFromNormalAndCoplanarPoint","inverseNormalLength","denominator","startSign","endSign","intersectsPlane","_Matrix3__WEBPACK_IMPORTED_MODULE_0__","referencePoint","coplanarPoint","Quaternion","_w","c1","c2","c3","s1","s2","s3","halfAngle","trace","vFrom","vTo","EPS","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","qb","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","Ray","_Vector3__WEBPACK_IMPORTED_MODULE_0__","at","directionDistance","distanceSquaredToPoint","v0","optionalPointOnRay","optionalPointOnSegment","segCenter","segDir","segExtent","a01","b0","s0","sqrDist","extDet","invDet","tca","radius2","thc","t0","t1","distanceToPlane","isFinite","distToPoint","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectBox","triangle","backFaceCulling","edge1","edge2","DdN","DdQxE2","DdE1xQ","QdN","intersectTriangle","Sphere","optionalCenter","_Box3__WEBPACK_IMPORTED_MODULE_0__","maxRadiusSq","radiusSum","deltaLengthSquared","expandByScalar","getMaxScaleOnAxis","Triangle","resultLengthSquared","_Plane__WEBPACK_IMPORTED_MODULE_1__","setFromCoplanarPoints","dot00","dot01","dot02","dot11","dot12","denom","invDenom","barycoordFromPoint","projectedPoint","projectPoint","containsPoint","minDistance","edgeList","_Line3__WEBPACK_IMPORTED_MODULE_0__","closestPointToPoint","Vector2","divideScalar","Vector3","_Quaternion__WEBPACK_IMPORTED_MODULE_1__","qx","qy","qz","qw","iz","iw","ax","ay","az","bx","by","bz","planeNormal","projectOnVector","acos","dz","setFromMatrixColumn","Vector4","epsilon","epsilon2","Bone","Group","levels","matrixPosition","getObjectForDistance","level","addLevel","_core_Object3D__WEBPACK_IMPORTED_MODULE_2__","material","_materials_LineBasicMaterial__WEBPACK_IMPORTED_MODULE_3__","precisionSquared","_math_Sphere__WEBPACK_IMPORTED_MODULE_6__","inverseMatrix","_math_Ray__WEBPACK_IMPORTED_MODULE_5__","vStart","_math_Vector3__WEBPACK_IMPORTED_MODULE_7__","vEnd","interSegment","interRay","step","_LineSegments__WEBPACK_IMPORTED_MODULE_8__","distSquared","distanceSqToSegment","nbVertices","LineLoop","_Line__WEBPACK_IMPORTED_MODULE_0__","LineSegments","_core_Object3D__WEBPACK_IMPORTED_MODULE_4__","_materials_MeshBasicMaterial__WEBPACK_IMPORTED_MODULE_5__","drawMode","morphTargetInfluences","morphTargetDictionary","updateMorphTargets","uv1","uv3","baryCoord","intersect","intersectionPointWorld","_math_Vector3__WEBPACK_IMPORTED_MODULE_11__","_math_Triangle__WEBPACK_IMPORTED_MODULE_9__","intersectionPoint","_utils__WEBPACK_IMPORTED_MODULE_12__","intersection","checkIntersection","uvA","_math_Vector2__WEBPACK_IMPORTED_MODULE_10__","uvB","uvC","uvIntersection","_core_Face3__WEBPACK_IMPORTED_MODULE_2__","faceIndex","keys","ml","String","_core_Geometry__WEBPACK_IMPORTED_MODULE_3__","_math_Sphere__WEBPACK_IMPORTED_MODULE_8__","_math_Matrix4__WEBPACK_IMPORTED_MODULE_6__","_math_Ray__WEBPACK_IMPORTED_MODULE_7__","intersectsBox","checkBufferGeometryIntersection","faceMaterial","fvA","fvB","fvC","tl","influence","targets","uvsF","_materials_PointsMaterial__WEBPACK_IMPORTED_MODULE_3__","testPoint","localThreshold","localThresholdSquare","rayPointDistanceSquare","intersectPoint","distanceToRay","offsetMatrix","identityMatrix","Skeleton","bones","boneInverses","boneMatrices","boneTexture","calculateInverses","inverse","bone","_Bone__WEBPACK_IMPORTED_MODULE_1__","toArray","SkinnedMesh","_Mesh__WEBPACK_IMPORTED_MODULE_0__","bindMode","bindMatrix","bindMatrixInverse","skeleton","initBones","_Skeleton__WEBPACK_IMPORTED_MODULE_5__","normalizeSkinWeights","gbone","_Bone__WEBPACK_IMPORTED_MODULE_4__","pos","rotq","scl","pose","sw","manhattanLength","_math_Vector4__WEBPACK_IMPORTED_MODULE_6__","skinWeight","_materials_Materials__WEBPACK_IMPORTED_MODULE_1__","setFromMatrixScale","guessSizeSq","WebGLRenderTarget","_core_EventDispatcher__WEBPACK_IMPORTED_MODULE_4__","options","scissorTest","texture","scissor","_math_Vector4__WEBPACK_IMPORTED_MODULE_1__","viewport","minFilter","_constants__WEBPACK_IMPORTED_MODULE_2__","_textures_Texture__WEBPACK_IMPORTED_MODULE_3__","wrapS","wrapT","magFilter","format","anisotropy","encoding","depthBuffer","stencilBuffer","depthTexture","dispose","WebGLRenderTargetCube","_WebGLRenderTarget__WEBPACK_IMPORTED_MODULE_0__","activeCubeFace","activeMipMapLevel","WebGLRenderer","localClippingEnabled","physicallyCorrectLights","toneMapping","unit","cubeTexture","currentRendererTarget","ShaderChunk","alphamap_fragment","_ShaderChunk_alphamap_fragment_glsl__WEBPACK_IMPORTED_MODULE_0__","alphamap_pars_fragment","_ShaderChunk_alphamap_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_1__","alphatest_fragment","_ShaderChunk_alphatest_fragment_glsl__WEBPACK_IMPORTED_MODULE_2__","aomap_fragment","_ShaderChunk_aomap_fragment_glsl__WEBPACK_IMPORTED_MODULE_3__","aomap_pars_fragment","_ShaderChunk_aomap_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_4__","begin_vertex","_ShaderChunk_begin_vertex_glsl__WEBPACK_IMPORTED_MODULE_5__","beginnormal_vertex","_ShaderChunk_beginnormal_vertex_glsl__WEBPACK_IMPORTED_MODULE_6__","bsdfs","_ShaderChunk_bsdfs_glsl__WEBPACK_IMPORTED_MODULE_7__","bumpmap_pars_fragment","_ShaderChunk_bumpmap_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_8__","clipping_planes_fragment","_ShaderChunk_clipping_planes_fragment_glsl__WEBPACK_IMPORTED_MODULE_9__","clipping_planes_pars_fragment","_ShaderChunk_clipping_planes_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_10__","clipping_planes_pars_vertex","_ShaderChunk_clipping_planes_pars_vertex_glsl__WEBPACK_IMPORTED_MODULE_11__","clipping_planes_vertex","_ShaderChunk_clipping_planes_vertex_glsl__WEBPACK_IMPORTED_MODULE_12__","color_fragment","_ShaderChunk_color_fragment_glsl__WEBPACK_IMPORTED_MODULE_13__","color_pars_fragment","_ShaderChunk_color_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_14__","color_pars_vertex","_ShaderChunk_color_pars_vertex_glsl__WEBPACK_IMPORTED_MODULE_15__","color_vertex","_ShaderChunk_color_vertex_glsl__WEBPACK_IMPORTED_MODULE_16__","common","_ShaderChunk_common_glsl__WEBPACK_IMPORTED_MODULE_17__","cube_uv_reflection_fragment","_ShaderChunk_cube_uv_reflection_fragment_glsl__WEBPACK_IMPORTED_MODULE_18__","defaultnormal_vertex","_ShaderChunk_defaultnormal_vertex_glsl__WEBPACK_IMPORTED_MODULE_19__","displacementmap_pars_vertex","_ShaderChunk_displacementmap_pars_vertex_glsl__WEBPACK_IMPORTED_MODULE_20__","displacementmap_vertex","_ShaderChunk_displacementmap_vertex_glsl__WEBPACK_IMPORTED_MODULE_21__","emissivemap_fragment","_ShaderChunk_emissivemap_fragment_glsl__WEBPACK_IMPORTED_MODULE_22__","emissivemap_pars_fragment","_ShaderChunk_emissivemap_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_23__","encodings_fragment","_ShaderChunk_encodings_fragment_glsl__WEBPACK_IMPORTED_MODULE_24__","encodings_pars_fragment","_ShaderChunk_encodings_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_25__","envmap_fragment","_ShaderChunk_envmap_fragment_glsl__WEBPACK_IMPORTED_MODULE_26__","envmap_pars_fragment","_ShaderChunk_envmap_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_27__","envmap_pars_vertex","_ShaderChunk_envmap_pars_vertex_glsl__WEBPACK_IMPORTED_MODULE_28__","envmap_vertex","_ShaderChunk_envmap_vertex_glsl__WEBPACK_IMPORTED_MODULE_29__","fog_vertex","_ShaderChunk_fog_vertex_glsl__WEBPACK_IMPORTED_MODULE_30__","fog_pars_vertex","_ShaderChunk_fog_pars_vertex_glsl__WEBPACK_IMPORTED_MODULE_31__","fog_fragment","_ShaderChunk_fog_fragment_glsl__WEBPACK_IMPORTED_MODULE_32__","fog_pars_fragment","_ShaderChunk_fog_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_33__","gradientmap_pars_fragment","_ShaderChunk_gradientmap_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_34__","lightmap_fragment","_ShaderChunk_lightmap_fragment_glsl__WEBPACK_IMPORTED_MODULE_35__","lightmap_pars_fragment","_ShaderChunk_lightmap_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_36__","lights_lambert_vertex","_ShaderChunk_lights_lambert_vertex_glsl__WEBPACK_IMPORTED_MODULE_37__","lights_pars","_ShaderChunk_lights_pars_glsl__WEBPACK_IMPORTED_MODULE_38__","lights_phong_fragment","_ShaderChunk_lights_phong_fragment_glsl__WEBPACK_IMPORTED_MODULE_39__","lights_phong_pars_fragment","_ShaderChunk_lights_phong_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_40__","lights_physical_fragment","_ShaderChunk_lights_physical_fragment_glsl__WEBPACK_IMPORTED_MODULE_41__","lights_physical_pars_fragment","_ShaderChunk_lights_physical_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_42__","lights_template","_ShaderChunk_lights_template_glsl__WEBPACK_IMPORTED_MODULE_43__","logdepthbuf_fragment","_ShaderChunk_logdepthbuf_fragment_glsl__WEBPACK_IMPORTED_MODULE_44__","logdepthbuf_pars_fragment","_ShaderChunk_logdepthbuf_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_45__","logdepthbuf_pars_vertex","_ShaderChunk_logdepthbuf_pars_vertex_glsl__WEBPACK_IMPORTED_MODULE_46__","logdepthbuf_vertex","_ShaderChunk_logdepthbuf_vertex_glsl__WEBPACK_IMPORTED_MODULE_47__","map_fragment","_ShaderChunk_map_fragment_glsl__WEBPACK_IMPORTED_MODULE_48__","map_pars_fragment","_ShaderChunk_map_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_49__","map_particle_fragment","_ShaderChunk_map_particle_fragment_glsl__WEBPACK_IMPORTED_MODULE_50__","map_particle_pars_fragment","_ShaderChunk_map_particle_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_51__","metalnessmap_fragment","_ShaderChunk_metalnessmap_fragment_glsl__WEBPACK_IMPORTED_MODULE_52__","metalnessmap_pars_fragment","_ShaderChunk_metalnessmap_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_53__","morphnormal_vertex","_ShaderChunk_morphnormal_vertex_glsl__WEBPACK_IMPORTED_MODULE_54__","morphtarget_pars_vertex","_ShaderChunk_morphtarget_pars_vertex_glsl__WEBPACK_IMPORTED_MODULE_55__","morphtarget_vertex","_ShaderChunk_morphtarget_vertex_glsl__WEBPACK_IMPORTED_MODULE_56__","normal_fragment","_ShaderChunk_normal_fragment_glsl__WEBPACK_IMPORTED_MODULE_57__","normalmap_pars_fragment","_ShaderChunk_normalmap_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_58__","packing","_ShaderChunk_packing_glsl__WEBPACK_IMPORTED_MODULE_59__","premultiplied_alpha_fragment","_ShaderChunk_premultiplied_alpha_fragment_glsl__WEBPACK_IMPORTED_MODULE_60__","project_vertex","_ShaderChunk_project_vertex_glsl__WEBPACK_IMPORTED_MODULE_61__","dithering_fragment","_ShaderChunk_dithering_fragment_glsl__WEBPACK_IMPORTED_MODULE_62__","dithering_pars_fragment","_ShaderChunk_dithering_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_63__","roughnessmap_fragment","_ShaderChunk_roughnessmap_fragment_glsl__WEBPACK_IMPORTED_MODULE_64__","roughnessmap_pars_fragment","_ShaderChunk_roughnessmap_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_65__","shadowmap_pars_fragment","_ShaderChunk_shadowmap_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_66__","shadowmap_pars_vertex","_ShaderChunk_shadowmap_pars_vertex_glsl__WEBPACK_IMPORTED_MODULE_67__","shadowmap_vertex","_ShaderChunk_shadowmap_vertex_glsl__WEBPACK_IMPORTED_MODULE_68__","shadowmask_pars_fragment","_ShaderChunk_shadowmask_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_69__","skinbase_vertex","_ShaderChunk_skinbase_vertex_glsl__WEBPACK_IMPORTED_MODULE_70__","skinning_pars_vertex","_ShaderChunk_skinning_pars_vertex_glsl__WEBPACK_IMPORTED_MODULE_71__","skinning_vertex","_ShaderChunk_skinning_vertex_glsl__WEBPACK_IMPORTED_MODULE_72__","skinnormal_vertex","_ShaderChunk_skinnormal_vertex_glsl__WEBPACK_IMPORTED_MODULE_73__","specularmap_fragment","_ShaderChunk_specularmap_fragment_glsl__WEBPACK_IMPORTED_MODULE_74__","specularmap_pars_fragment","_ShaderChunk_specularmap_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_75__","tonemapping_fragment","_ShaderChunk_tonemapping_fragment_glsl__WEBPACK_IMPORTED_MODULE_76__","tonemapping_pars_fragment","_ShaderChunk_tonemapping_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_77__","uv_pars_fragment","_ShaderChunk_uv_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_78__","uv_pars_vertex","_ShaderChunk_uv_pars_vertex_glsl__WEBPACK_IMPORTED_MODULE_79__","uv_vertex","_ShaderChunk_uv_vertex_glsl__WEBPACK_IMPORTED_MODULE_80__","uv2_pars_fragment","_ShaderChunk_uv2_pars_fragment_glsl__WEBPACK_IMPORTED_MODULE_81__","uv2_pars_vertex","_ShaderChunk_uv2_pars_vertex_glsl__WEBPACK_IMPORTED_MODULE_82__","uv2_vertex","_ShaderChunk_uv2_vertex_glsl__WEBPACK_IMPORTED_MODULE_83__","worldpos_vertex","_ShaderChunk_worldpos_vertex_glsl__WEBPACK_IMPORTED_MODULE_84__","cube_frag","_ShaderLib_cube_frag_glsl__WEBPACK_IMPORTED_MODULE_85__","cube_vert","_ShaderLib_cube_vert_glsl__WEBPACK_IMPORTED_MODULE_86__","depth_frag","_ShaderLib_depth_frag_glsl__WEBPACK_IMPORTED_MODULE_87__","depth_vert","_ShaderLib_depth_vert_glsl__WEBPACK_IMPORTED_MODULE_88__","distanceRGBA_frag","_ShaderLib_distanceRGBA_frag_glsl__WEBPACK_IMPORTED_MODULE_89__","distanceRGBA_vert","_ShaderLib_distanceRGBA_vert_glsl__WEBPACK_IMPORTED_MODULE_90__","equirect_frag","_ShaderLib_equirect_frag_glsl__WEBPACK_IMPORTED_MODULE_91__","equirect_vert","_ShaderLib_equirect_vert_glsl__WEBPACK_IMPORTED_MODULE_92__","linedashed_frag","_ShaderLib_linedashed_frag_glsl__WEBPACK_IMPORTED_MODULE_93__","linedashed_vert","_ShaderLib_linedashed_vert_glsl__WEBPACK_IMPORTED_MODULE_94__","meshbasic_frag","_ShaderLib_meshbasic_frag_glsl__WEBPACK_IMPORTED_MODULE_95__","meshbasic_vert","_ShaderLib_meshbasic_vert_glsl__WEBPACK_IMPORTED_MODULE_96__","meshlambert_frag","_ShaderLib_meshlambert_frag_glsl__WEBPACK_IMPORTED_MODULE_97__","meshlambert_vert","_ShaderLib_meshlambert_vert_glsl__WEBPACK_IMPORTED_MODULE_98__","meshphong_frag","_ShaderLib_meshphong_frag_glsl__WEBPACK_IMPORTED_MODULE_99__","meshphong_vert","_ShaderLib_meshphong_vert_glsl__WEBPACK_IMPORTED_MODULE_100__","meshphysical_frag","_ShaderLib_meshphysical_frag_glsl__WEBPACK_IMPORTED_MODULE_101__","meshphysical_vert","_ShaderLib_meshphysical_vert_glsl__WEBPACK_IMPORTED_MODULE_102__","normal_frag","_ShaderLib_normal_frag_glsl__WEBPACK_IMPORTED_MODULE_103__","normal_vert","_ShaderLib_normal_vert_glsl__WEBPACK_IMPORTED_MODULE_104__","points_frag","_ShaderLib_points_frag_glsl__WEBPACK_IMPORTED_MODULE_105__","points_vert","_ShaderLib_points_vert_glsl__WEBPACK_IMPORTED_MODULE_106__","shadow_frag","_ShaderLib_shadow_frag_glsl__WEBPACK_IMPORTED_MODULE_107__","shadow_vert","_ShaderLib_shadow_vert_glsl__WEBPACK_IMPORTED_MODULE_108__","ShaderLib","basic","_UniformsUtils__WEBPACK_IMPORTED_MODULE_4__","_UniformsLib__WEBPACK_IMPORTED_MODULE_3__","specularmap","envmap","aomap","lightmap","_ShaderChunk__WEBPACK_IMPORTED_MODULE_2__","lambert","emissivemap","phong","bumpmap","normalmap","displacementmap","gradientmap","standard","roughnessmap","metalnessmap","dashed","totalSize","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","physical","UniformsLib","diffuse","uvTransform","flipEnvMap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","directionalLights","properties","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","spotShadowMap","spotShadowMatrix","pointLights","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","rectAreaLights","UniformsUtils","merged","uniformsSrc","uniformsDst","parameterSrc","_math_Matrix3__WEBPACK_IMPORTED_MODULE_1__","_math_Matrix4__WEBPACK_IMPORTED_MODULE_2__","_math_Vector2__WEBPACK_IMPORTED_MODULE_3__","_math_Vector4__WEBPACK_IMPORTED_MODULE_5__","_textures_Texture__WEBPACK_IMPORTED_MODULE_6__","WebGLUtils","parameter","extension","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","NEAREST","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_BYTE","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","HALF_FLOAT_OES","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","DEPTH_COMPONENT","DEPTH_STENCIL","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","MIN_EXT","MAX_EXT","UNSIGNED_INT_24_8_WEBGL","Fog","FogExp2","density","Scene","background","overrideMaterial","autoUpdate","CanvasTexture","_Texture__WEBPACK_IMPORTED_MODULE_0__","canvas","mapping","CompressedTexture","mipmaps","image","flipY","generateMipmaps","CubeTexture","_Texture__WEBPACK_IMPORTED_MODULE_1__","images","DataTexture","unpackAlignment","DepthTexture","textureId","Texture","DEFAULT_IMAGE","DEFAULT_MAPPING","_math_Vector2__WEBPACK_IMPORTED_MODULE_4__","repeat","premultiplyAlpha","VideoTexture","video","readyState","HAVE_CURRENT_DATA","arrayMin","arrayMax","applyMatrixToBufferAttribute","setBoxFromBufferAttribute","unprojectVector3onCamera","vectorFromBufferAttribute"],"mappings":"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","file":"Three.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/Three.ts\");\n","import { Object3D } from \"../core/Object3D\";\nimport { AudioListenerWrapper } from \"./AudioListener\";\n\nexport class AudioWrapper extends Object3D {\n    public type: string = \"Audio\";\n    public context: AudioContext;\n    public startTime: number = 0;\n    public offset: number = 0;\n    public isPlaying: boolean = false;\n    public hasPlaybackControl: boolean = true;\n    public source: AudioBufferSourceNode = null;\n    public sourceType: string = \"empty\";\n    public autoplay: boolean = false;\n\n    protected buffer: AudioBuffer = null;\n    protected gain: GainNode;\n    protected loop: boolean = false;\n    protected playbackRate: number = 1;\n    protected filters: AudioNode[] = [];\n\n    constructor(listener: AudioListenerWrapper) {\n        super();\n        this.context = listener.context;\n        this.gain = this.context.createGain();\n        this.gain.connect(listener.getInput());\n    }\n\n    public getOutput(): AudioNode {\n        return this.gain as AudioNode;\n    }\n\n    public setNodeSource(audioNode: AudioBufferSourceNode): this {\n        this.hasPlaybackControl = false;\n        this.source = audioNode;\n        this.sourceType = \"audioNode\";\n        this.connect();\n        return this;\n    }\n\n    public setBuffer(audioBuffer: AudioBuffer): this {\n        this.buffer = audioBuffer;\n        this.sourceType = \"buffer\";\n        if (this.autoplay) this.play();\n        return this;\n    }\n\n    public play(): this {\n        if (this.isPlaying === true) {\n            console.warn(`THREE.Audio: Audio is already playing.`);\n            return this;\n        }\n\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return this;\n        }\n\n        const source = this.context.createBufferSource();\n\n        source.buffer = this.buffer;\n        source.loop = this.loop;\n        source.onended = this.onEnded.bind(this);\n        source.playbackRate.setValueAtTime(this.playbackRate, this.startTime);\n        this.startTime = this.context.currentTime;\n        source.start(this.startTime, this.offset);\n        this.isPlaying = true;\n        this.source = source;\n        return this.connect();\n    }\n\n    public pause(): this {\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return this;\n        }\n        if (this.isPlaying === true) {\n            this.source.stop();\n            this.offset +=\n                (this.context.currentTime - this.startTime) * this.playbackRate;\n            this.isPlaying = false;\n        }\n        return this;\n    }\n\n    public stop(): this {\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return this;\n        }\n        this.source.stop();\n        this.offset = 0;\n        this.isPlaying = false;\n        return this;\n    }\n\n    public connect(): this {\n        if (this.filters.length > 0) {\n            this.source.connect(this.filters[0]);\n            for (\n                let i: number = 1, l: number = this.filters.length;\n                i < l;\n                i++\n            ) {\n                this.filters[i - 1].connect(this.filters[i]);\n            }\n            this.filters[this.filters.length - 1].connect(this.getOutput());\n        } else {\n            this.source.connect(this.getOutput());\n        }\n        return this;\n    }\n\n    public disconnect(): this {\n        if (this.filters.length > 0) {\n            this.source.disconnect(this.filters[0]);\n            for (\n                let i: number = 1, l: number = this.filters.length;\n                i < l;\n                i++\n            ) {\n                this.filters[i - 1].disconnect(this.filters[i]);\n            }\n            this.filters[this.filters.length - 1].disconnect(this.getOutput());\n        } else {\n            this.source.disconnect(this.getOutput());\n        }\n        return this;\n    }\n\n    public getFilters(): AudioNode[] {\n        return this.filters;\n    }\n\n    public setFilters(value: AudioNode[] = []): this {\n        if (this.isPlaying === true) {\n            this.disconnect();\n            this.filters = value;\n            this.connect();\n        } else {\n            this.filters = value;\n        }\n        return this;\n    }\n\n    public getFilter(): AudioNode {\n        return this.getFilters()[0];\n    }\n\n    public setFilter(filter: AudioNode): this {\n        return this.setFilters(filter ? [filter] : []);\n    }\n\n    public setPlaybackRate(value: number): this {\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return this;\n        }\n        this.playbackRate = value;\n        if (this.isPlaying === true) {\n            this.source.playbackRate.setValueAtTime(\n                this.playbackRate,\n                this.context.currentTime,\n            );\n        }\n        return this;\n    }\n\n    public getPlaybackRate(): number {\n        return this.playbackRate;\n    }\n\n    public onEnded(): void {\n        this.isPlaying = false;\n    }\n\n    public getLoop(): boolean {\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return false;\n        }\n        return this.loop;\n    }\n\n    public setLoop(value: boolean): this {\n        if (this.hasPlaybackControl === false) {\n            console.warn(`THREE.Audio: this Audio has no playback control.`);\n            return this;\n        }\n        this.loop = value;\n        if (this.isPlaying === true) {\n            this.source.loop = this.loop;\n        }\n        return this;\n    }\n\n    public getVolume(): number {\n        return this.gain.gain.value;\n    }\n\n    public setVolume(value: number): this {\n        this.gain.gain.value = value;\n        return this;\n    }\n}\n","import { AudioWrapper } from \"./Audio\";\n\nexport class AudioAnalyserWrapper {\n    public analyser: AnalyserNode = null;\n    public data: Uint8Array = null;\n\n    constructor(audio: AudioWrapper, fftSize: number = 2048) {\n        this.analyser = audio.context.createAnalyser();\n        this.analyser.fftSize = fftSize;\n        this.data = new Uint8Array(this.analyser.frequencyBinCount);\n        audio.getOutput().connect(this.analyser);\n    }\n\n    public getFrequencyData(): Uint8Array {\n        this.analyser.getByteFrequencyData(this.data);\n        return this.data;\n    }\n\n    public getAverageFrequency(): number {\n        let value: number = 0;\n        const data: Uint8Array = this.getFrequencyData();\n        for (let i: number = 0; i < data.length; i++) {\n            value += data[i];\n        }\n        return value / data.length;\n    }\n}\n","export class AudioContextWrapper {\n    public static context: AudioContext | undefined = undefined;\n\n    public static getContext(): AudioContext {\n        if (AudioContextWrapper.context === undefined) {\n            AudioContextWrapper.context = new ((window as any).AudioContext ||\n                (window as any).webkitAudioContext)() as AudioContext;\n        }\n        return AudioContextWrapper.context;\n    }\n\n    public static setContext(value: AudioContext) {\n        AudioContextWrapper.context = value;\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { AudioContextWrapper } from \"./AudioContext\";\n\nexport class AudioListenerWrapper extends Object3D {\n    public type: string = \"AudioListener\";\n    public context: AudioContext = AudioContextWrapper.getContext();\n    public gain: GainNode = null;\n\n    protected filter: AudioNode = null;\n\n    constructor() {\n        super();\n        this.gain = this.context.createGain();\n        this.gain.connect(this.context.destination);\n    }\n\n    public getInput(): GainNode {\n        return this.gain;\n    }\n\n    public removeFilter() {\n        if (this.filter !== null) {\n            this.gain.disconnect(this.filter);\n            this.filter.disconnect(this.context.destination);\n            this.gain.connect(this.context.destination);\n            this.filter = null;\n        }\n    }\n\n    public getFilter() {\n        return this.filter;\n    }\n\n    public setFilter(value: AudioNode): this {\n        if (this.filter !== null) {\n            this.gain.disconnect(this.filter);\n            this.filter.disconnect(this.context.destination);\n        } else {\n            this.gain.disconnect(this.context.destination);\n        }\n        this.filter = value;\n        this.gain.connect(this.filter);\n        this.filter.connect(this.context.destination);\n        return this;\n    }\n\n    public getMasterVolume(): number {\n        return this.gain.gain.value;\n    }\n\n    public setMasterVolume(value: number): this {\n        this.gain.gain.value = value;\n        return this;\n    }\n\n    public updateMatrixWorld(force: boolean = false): this {\n        super.updateMatrixWorld(force);\n        const position: Vector3 = new Vector3();\n        const quaternion: Quaternion = new Quaternion();\n        const scale: Vector3 = new Vector3();\n        const orientation: Vector3 = new Vector3();\n\n        const listener: any = this.context.listener;\n        const up: Vector3 = this.up;\n        this.matrixWorld.decompose(position, quaternion, scale);\n        orientation.set(0, 0, -1).applyQuaternion(quaternion);\n\n        if (listener.positionX) {\n            listener.positionX.setValueAtTime(\n                position.x,\n                this.context.currentTime,\n            );\n            listener.positionY.setValueAtTime(\n                position.y,\n                this.context.currentTime,\n            );\n            listener.positionZ.setValueAtTime(\n                position.z,\n                this.context.currentTime,\n            );\n            listener.forwardX.setValueAtTime(\n                orientation.x,\n                this.context.currentTime,\n            );\n            listener.forwardY.setValueAtTime(\n                orientation.y,\n                this.context.currentTime,\n            );\n            listener.forwardZ.setValueAtTime(\n                orientation.z,\n                this.context.currentTime,\n            );\n            listener.upX.setValueAtTime(up.x, this.context.currentTime);\n            listener.upY.setValueAtTime(up.y, this.context.currentTime);\n            listener.upZ.setValueAtTime(up.z, this.context.currentTime);\n        } else {\n            listener.setPosition(position.x, position.y, position.z);\n            listener.setOrientation(\n                orientation.x,\n                orientation.y,\n                orientation.z,\n                up.x,\n                up.y,\n                up.z,\n            );\n        }\n        return this;\n    }\n}\n","import { Vector3 } from \"../math/Vector3\";\nimport { AudioWrapper } from \"./Audio\";\nimport { AudioListenerWrapper } from \"./AudioListener\";\n\nexport class PositionalAudio extends AudioWrapper {\n    public panner: PannerNode = null;\n\n    constructor(listener: AudioListenerWrapper) {\n        super(listener);\n        this.panner = this.context.createPanner();\n        this.panner.connect(this.gain);\n    }\n\n    public getOutput(): AudioNode {\n        return this.panner as AudioNode;\n    }\n\n    public getRefDistance(): number {\n        return this.panner.refDistance;\n    }\n\n    public setRefDistance(value: number): void {\n        this.panner.refDistance = value;\n    }\n\n    public getRolloffFactor(): number {\n        return this.panner.rolloffFactor;\n    }\n\n    public setRolloffFactor(value: number): void {\n        this.panner.rolloffFactor = value;\n    }\n\n    public getDistanceModel(): DistanceModelType {\n        return this.panner.distanceModel;\n    }\n\n    public setDistanceModel(value: DistanceModelType): void {\n        this.panner.distanceModel = value;\n    }\n\n    public getMaxDistance(): number {\n        return this.panner.maxDistance;\n    }\n\n    public setMaxDistance(value: number): void {\n        this.panner.maxDistance = value;\n    }\n\n    public updateMatrixWorld(force: boolean = false): this {\n        super.updateMatrixWorld(force);\n        const position = new Vector3();\n        position.setFromMatrixPosition(this.matrixWorld);\n        this.panner.setPosition(position.x, position.y, position.z);\n        return this;\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Vector3 } from \"../math/Vector3\";\n\nexport class Camera extends Object3D {\n    public readonly type: string = \"Camera\";\n\n    public matrixWorldInverse: Matrix4 = new Matrix4();\n    public projectionMatrix: Matrix4 = new Matrix4();\n\n    constructor() {\n        super();\n    }\n\n    public updateMatrixWorld(force: boolean = false): this {\n        super.updateMatrixWorld(force);\n        this.matrixWorldInverse.getInverse(this.matrixWorld);\n        return this;\n    }\n\n    public copy(source: Camera, recursive: boolean = true): this {\n        super.copy(source, recursive);\n        this.matrixWorldInverse.copy(source.matrixWorldInverse);\n        this.projectionMatrix.copy(source.projectionMatrix);\n        return this;\n    }\n\n    get worldDirection(): Vector3 {\n        return new Vector3()\n            .set(0, 0, -1)\n            .applyQuaternion(this.worldQuaternion);\n    }\n\n    public clone(): Camera {\n        return new (this.constructor as new () => Camera)().copy(this);\n    }\n}\n\nexport interface IFrustumView {\n    fullWidth: number;\n    fullHeight: number;\n    offsetX: number;\n    offsetY: number;\n    width: number;\n    height: number;\n    enabled: boolean;\n}\n","import { Camera, IFrustumView } from \"./Camera\";\n\nexport class OrthographicCamera extends Camera {\n    public readonly type: string = \"OrthographicCamera\";\n\n    protected _left: number = 0;\n    protected _right: number = 0;\n    protected _top: number = 0;\n    protected _bottom: number = 0;\n    protected _zoom: number = 1;\n    protected _near: number = 0.1;\n    protected _far: number = 2000;\n    protected _view: IFrustumView = null;\n\n    constructor(\n        left: number = 0,\n        right: number = 0,\n        top: number = 0,\n        bottom: number = 0,\n        near: number = 0.1,\n        far: number = 2000,\n    ) {\n        super();\n\n        this._left = left;\n        this._right = right;\n        this._top = top;\n        this._bottom = bottom;\n\n        this._near = near;\n        this._far = far;\n\n        this.updateProjectionMatrix();\n    }\n\n    get zoom(): number {\n        return this._zoom;\n    }\n\n    set zoom(_zoom: number) {\n        this._zoom = _zoom;\n        this.updateProjectionMatrix();\n    }\n\n    get near(): number {\n        return this._near;\n    }\n\n    set near(_near: number) {\n        this._near = _near;\n        this.updateProjectionMatrix();\n    }\n\n    get far(): number {\n        return this._far;\n    }\n\n    set far(_far: number) {\n        this._far = _far;\n        this.updateProjectionMatrix();\n    }\n\n    get left(): number {\n        return this._left;\n    }\n\n    set left(_left: number) {\n        this._left = _left;\n        this.updateProjectionMatrix();\n    }\n\n    get right(): number {\n        return this._right;\n    }\n\n    set right(_right: number) {\n        this._right = _right;\n        this.updateProjectionMatrix();\n    }\n\n    get top(): number {\n        return this._top;\n    }\n\n    set top(_top: number) {\n        this._top = _top;\n        this.updateProjectionMatrix();\n    }\n\n    get bottom(): number {\n        return this._bottom;\n    }\n\n    set bottom(_bottom: number) {\n        this._bottom = _bottom;\n        this.updateProjectionMatrix();\n    }\n\n    get view(): IFrustumView {\n        return this._view;\n    }\n\n    public setViewOffset(\n        fullWidth: number,\n        fullHeight: number,\n        x: number,\n        y: number,\n        width: number,\n        height: number,\n    ): this {\n        this._view = {\n            enabled: true,\n            fullHeight: fullHeight,\n            fullWidth: fullWidth,\n            height: height,\n            offsetX: x,\n            offsetY: y,\n            width: width,\n        };\n        return this.updateProjectionMatrix();\n    }\n\n    public clearViewOffset(): this {\n        if (this.view !== null) {\n            this.view.enabled = false;\n        }\n        return this.updateProjectionMatrix();\n    }\n\n    public updateProjectionMatrix(): this {\n        const dx = (this.right - this.left) / (2 * this.zoom);\n        const dy = (this.top - this.bottom) / (2 * this.zoom);\n        const cx = (this.right + this.left) / 2;\n        const cy = (this.top + this.bottom) / 2;\n\n        let left = cx - dx;\n        let right = cx + dx;\n        let top = cy + dy;\n        let bottom = cy - dy;\n\n        if (this.view !== null && this.view.enabled) {\n            const zoomW = this.zoom / (this.view.width / this.view.fullWidth);\n            const zoomH = this.zoom / (this.view.height / this.view.fullHeight);\n            const scaleW = (this.right - this.left) / this._view.width;\n            const scaleH = (this.top - this.bottom) / this._view.height;\n            left += scaleW * (this.view.offsetX / zoomW);\n            right = left + scaleW * (this.view.width / zoomW);\n            top -= scaleH * (this.view.offsetY / zoomH);\n            bottom = top - scaleH * (this.view.height / zoomH);\n        }\n\n        this.projectionMatrix.makeOrthographic(\n            left,\n            right,\n            top,\n            bottom,\n            this.near,\n            this.far,\n        );\n        return this;\n    }\n\n    public copy(source: OrthographicCamera): this {\n        super.copy(source);\n        this._top = source.top;\n        this._bottom = source.bottom;\n        this._left = source.left;\n        this._right = source.right;\n        this._zoom = source.zoom;\n\n        this._near = source.near;\n        this._far = source.far;\n\n        this._view = source.view === null ? null : { ...source.view };\n\n        return this.updateProjectionMatrix();\n    }\n\n    public clone(): OrthographicCamera {\n        return new (this.constructor as new () => OrthographicCamera)().copy(\n            this,\n        );\n    }\n}\n","import { MathUtil } from \"../math/Math\";\nimport { Camera, IFrustumView } from \"./Camera\";\n\nexport class PerspectiveCamera extends Camera {\n    public readonly type: string = \"PerspectiveCamera\";\n    public focus: number = 10;\n\n    protected _fov: number = 50;\n    protected _zoom: number = 1;\n    protected _near: number = 0.1;\n    protected _far: number = 2000;\n    protected _aspect: number = 1;\n    protected _view: IFrustumView = null;\n\n    /**\n     * width of the film (default in millimeters)\n     * @type {number}\n     */\n    protected _filmGauge: number = 35;\n\n    /**\n     * horizontal film offset (same unit as gauge)\n     * @type {number}\n     */\n    protected _filmOffset: number = 0;\n\n    get fov(): number {\n        return this._fov;\n    }\n\n    set fov(_fov: number) {\n        this._fov = _fov;\n        this.updateProjectionMatrix();\n    }\n\n    get zoom(): number {\n        return this._zoom;\n    }\n\n    set zoom(_zoom: number) {\n        this._zoom = _zoom;\n        this.updateProjectionMatrix();\n    }\n\n    get near(): number {\n        return this._near;\n    }\n\n    set near(_near: number) {\n        this._near = _near;\n        this.updateProjectionMatrix();\n    }\n\n    get far(): number {\n        return this._far;\n    }\n\n    set far(_far: number) {\n        this._far = _far;\n        this.updateProjectionMatrix();\n    }\n\n    get aspect(): number {\n        return this._aspect;\n    }\n\n    set aspect(_aspect: number) {\n        this._aspect = _aspect;\n        this.updateProjectionMatrix();\n    }\n\n    get view(): IFrustumView {\n        return this._view;\n    }\n\n    get filmGauge(): number {\n        return this._filmGauge;\n    }\n\n    set filmGauge(_filmGauge: number) {\n        this._filmGauge = _filmGauge;\n        this.updateProjectionMatrix();\n    }\n\n    get filmOffset(): number {\n        return this._filmOffset;\n    }\n\n    set filmOffset(_filmOffset: number) {\n        this._filmOffset = _filmOffset;\n        this.updateProjectionMatrix();\n    }\n\n    constructor(\n        fov: number = 50,\n        aspect: number = 1,\n        near: number = 0.1,\n        far: number = 2000,\n    ) {\n        super();\n        this._fov = fov;\n        this._aspect = aspect;\n        this._near = near;\n        this._far = far;\n        this.updateProjectionMatrix();\n    }\n\n    /**\n     * see http://www.bobatkins.com/photography/technical/field_of_view.html\n     * Sets the FOV by focal length in respect to the current .filmGauge.\n     *\n     * The default film gauge is 35, so that the focal length can be specified for\n     * a 35mm (full frame) camera.\n     *\n     * Values for focal length and film gauge must have the same unit.\n     * @param focalLength\n     * @returns {PerspectiveCamera}\n     */\n    public setFocalLength(focalLength: number): this {\n        const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n        this._fov = MathUtil.RAD2DEG * 2 * Math.atan(vExtentSlope);\n        return this.updateProjectionMatrix();\n    }\n\n    public getFocalLength(): number {\n        const vExtentSlope = Math.tan(MathUtil.DEG2RAD * 0.5 * this.fov);\n        return 0.5 * this.getFilmHeight() / vExtentSlope;\n    }\n\n    public getEffectiveFOV(): number {\n        return (\n            MathUtil.RAD2DEG *\n            2 *\n            Math.atan(Math.tan(MathUtil.DEG2RAD * 0.5 * this.fov) / this.zoom)\n        );\n    }\n\n    /**\n     * film not completely covered in portrait format (aspect < 1)\n     * @returns {number}\n     */\n    public getFilmWidth(): number {\n        return this.filmGauge * Math.min(this.aspect, 1);\n    }\n\n    /**\n     * film not completely covered in landscape format (aspect > 1)\n     * @returns {number}\n     */\n    public getFilmHeight(): number {\n        return this.filmGauge / Math.max(this.aspect, 1);\n    }\n\n    /**\n     * Sets an offset in a larger frustum. This is useful for multi-window or\n     * multi-monitor/multi-machine setups.\n     *\n     * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n     * the monitors are in grid like this\n     *\n     *   +---+---+---+\n     *   | A | B | C |\n     *   +---+---+---+\n     *   | D | E | F |\n     *   +---+---+---+\n     *\n     * then for each monitor you would call it like this\n     *\n     *   var w = 1920;\n     *   var h = 1080;\n     *   var fullWidth = w * 3;\n     *   var fullHeight = h * 2;\n     *\n     *   --A--\n     *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n     *   --B--\n     *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n     *   --C--\n     *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n     *   --D--\n     *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n     *   --E--\n     *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n     *   --F--\n     *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n     *\n     *   Note there is no reason monitors have to be the same size or in a grid.\n     */\n    public setViewOffset(\n        fullWidth: number,\n        fullHeight: number,\n        x: number,\n        y: number,\n        width: number,\n        height: number,\n    ): this {\n        this._view = {\n            enabled: true,\n            fullHeight: fullHeight,\n            fullWidth: fullWidth,\n            height: height,\n            offsetX: x,\n            offsetY: y,\n            width: width,\n        };\n        return this.updateProjectionMatrix();\n    }\n\n    public clearViewOffset(): this {\n        if (this.view !== null) {\n            this.view.enabled = false;\n        }\n        return this.updateProjectionMatrix();\n    }\n\n    public updateProjectionMatrix(): this {\n        const near: number = this.near;\n        let top: number =\n            near * Math.tan(MathUtil.DEG2RAD * 0.5 * this.fov) / this.zoom;\n        let height: number = 2 * top;\n        let width: number = this.aspect * height;\n        let left: number = -0.5 * width;\n        const view: IFrustumView = this.view;\n        if (this.view !== null && this.view.enabled) {\n            const fullWidth: number = view.fullWidth,\n                fullHeight: number = view.fullHeight;\n            left += view.offsetX * width / fullWidth;\n            top -= view.offsetY * height / fullHeight;\n            width *= view.width / fullWidth;\n            height *= view.height / fullHeight;\n        }\n        const skew: number = this.filmOffset;\n        if (skew !== 0) left += near * skew / this.getFilmWidth();\n        this.projectionMatrix.makePerspective(\n            left,\n            left + width,\n            top,\n            top - height,\n            near,\n            this.far,\n        );\n        return this;\n    }\n\n    public copy(source: PerspectiveCamera): this {\n        super.copy(source);\n        this._fov = source.fov;\n        this._zoom = source.zoom;\n\n        this._near = source.near;\n        this._far = source.far;\n        this.focus = source.focus;\n\n        this._aspect = source.aspect;\n        this._view = source.view === null ? null : { ...source.view };\n\n        this._filmGauge = source.filmGauge;\n        this._filmOffset = source.filmOffset;\n        return this.updateProjectionMatrix();\n    }\n\n    public clone(): PerspectiveCamera {\n        return new (this.constructor as new () => PerspectiveCamera)().copy(\n            this,\n        );\n    }\n}\n","/* tslint:disable */\nexport const REVISION: string = \"90dev\";\nexport const MOUSE: any = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\nexport const CullFaceNone: number = 0;\nexport const CullFaceBack: number = 1;\nexport const CullFaceFront: number = 2;\nexport const CullFaceFrontBack: number = 3;\nexport const FrontFaceDirectionCW: number = 0;\nexport const FrontFaceDirectionCCW: number = 1;\nexport const BasicShadowMap: number = 0;\nexport const PCFShadowMap: number = 1;\nexport const PCFSoftShadowMap: number = 2;\nexport const FrontSide: number = 0;\nexport const BackSide: number = 1;\nexport const DoubleSide: number = 2;\nexport const FlatShading: number = 1;\nexport const SmoothShading: number = 2;\nexport const NoColors: number = 0;\nexport const FaceColors: number = 1;\nexport const VertexColors: number = 2;\nexport const NoBlending: number = 0;\nexport const NormalBlending: number = 1;\nexport const AdditiveBlending: number = 2;\nexport const SubtractiveBlending: number = 3;\nexport const MultiplyBlending: number = 4;\nexport const CustomBlending: number = 5;\nexport const AddEquation: number = 100;\nexport const SubtractEquation: number = 101;\nexport const ReverseSubtractEquation: number = 102;\nexport const MinEquation: number = 103;\nexport const MaxEquation: number = 104;\nexport const ZeroFactor: number = 200;\nexport const OneFactor: number = 201;\nexport const SrcColorFactor: number = 202;\nexport const OneMinusSrcColorFactor: number = 203;\nexport const SrcAlphaFactor: number = 204;\nexport const OneMinusSrcAlphaFactor: number = 205;\nexport const DstAlphaFactor: number = 206;\nexport const OneMinusDstAlphaFactor: number = 207;\nexport const DstColorFactor: number = 208;\nexport const OneMinusDstColorFactor: number = 209;\nexport const SrcAlphaSaturateFactor: number = 210;\nexport const NeverDepth: number = 0;\nexport const AlwaysDepth: number = 1;\nexport const LessDepth: number = 2;\nexport const LessEqualDepth: number = 3;\nexport const EqualDepth: number = 4;\nexport const GreaterEqualDepth: number = 5;\nexport const GreaterDepth: number = 6;\nexport const NotEqualDepth: number = 7;\nexport const MultiplyOperation: number = 0;\nexport const MixOperation: number = 1;\nexport const AddOperation: number = 2;\nexport const NoToneMapping: number = 0;\nexport const LinearToneMapping: number = 1;\nexport const ReinhardToneMapping: number = 2;\nexport const Uncharted2ToneMapping: number = 3;\nexport const CineonToneMapping: number = 4;\nexport const UVMapping: number = 300;\nexport const CubeReflectionMapping: number = 301;\nexport const CubeRefractionMapping: number = 302;\nexport const EquirectangularReflectionMapping: number = 303;\nexport const EquirectangularRefractionMapping: number = 304;\nexport const SphericalReflectionMapping: number = 305;\nexport const CubeUVReflectionMapping: number = 306;\nexport const CubeUVRefractionMapping: number = 307;\nexport const RepeatWrapping: number = 1000;\nexport const ClampToEdgeWrapping: number = 1001;\nexport const MirroredRepeatWrapping: number = 1002;\nexport const NearestFilter: number = 1003;\nexport const NearestMipMapNearestFilter: number = 1004;\nexport const NearestMipMapLinearFilter: number = 1005;\nexport const LinearFilter: number = 1006;\nexport const LinearMipMapNearestFilter: number = 1007;\nexport const LinearMipMapLinearFilter: number = 1008;\nexport const UnsignedByteType: number = 1009;\nexport const ByteType: number = 1010;\nexport const ShortType: number = 1011;\nexport const UnsignedShortType: number = 1012;\nexport const IntType: number = 1013;\nexport const UnsignedIntType: number = 1014;\nexport const FloatType: number = 1015;\nexport const HalfFloatType: number = 1016;\nexport const UnsignedShort4444Type: number = 1017;\nexport const UnsignedShort5551Type: number = 1018;\nexport const UnsignedShort565Type: number = 1019;\nexport const UnsignedInt248Type: number = 1020;\nexport const AlphaFormat: number = 1021;\nexport const RGBFormat: number = 1022;\nexport const RGBAFormat: number = 1023;\nexport const LuminanceFormat: number = 1024;\nexport const LuminanceAlphaFormat: number = 1025;\nexport const RGBEFormat: number = RGBAFormat;\nexport const DepthFormat: number = 1026;\nexport const DepthStencilFormat: number = 1027;\nexport const RGB_S3TC_DXT1_Format: number = 33776;\nexport const RGBA_S3TC_DXT1_Format: number = 33777;\nexport const RGBA_S3TC_DXT3_Format: number = 33778;\nexport const RGBA_S3TC_DXT5_Format: number = 33779;\nexport const RGB_PVRTC_4BPPV1_Format: number = 35840;\nexport const RGB_PVRTC_2BPPV1_Format: number = 35841;\nexport const RGBA_PVRTC_4BPPV1_Format: number = 35842;\nexport const RGBA_PVRTC_2BPPV1_Format: number = 35843;\nexport const RGB_ETC1_Format: number = 36196;\nexport const RGBA_ASTC_4x4_Format: number = 37808;\nexport const RGBA_ASTC_5x4_Format: number = 37809;\nexport const RGBA_ASTC_5x5_Format: number = 37810;\nexport const RGBA_ASTC_6x5_Format: number = 37811;\nexport const RGBA_ASTC_6x6_Format: number = 37812;\nexport const RGBA_ASTC_8x5_Format: number = 37813;\nexport const RGBA_ASTC_8x6_Format: number = 37814;\nexport const RGBA_ASTC_8x8_Format: number = 37815;\nexport const RGBA_ASTC_10x5_Format: number = 37816;\nexport const RGBA_ASTC_10x6_Format: number = 37817;\nexport const RGBA_ASTC_10x8_Format: number = 37818;\nexport const RGBA_ASTC_10x10_Format: number = 37819;\nexport const RGBA_ASTC_12x10_Format: number = 37820;\nexport const RGBA_ASTC_12x12_Format: number = 37821;\nexport const LoopOnce: number = 2200;\nexport const LoopRepeat: number = 2201;\nexport const LoopPingPong: number = 2202;\nexport const InterpolateDiscrete: number = 2300;\nexport const InterpolateLinear: number = 2301;\nexport const InterpolateSmooth: number = 2302;\nexport const ZeroCurvatureEnding: number = 2400;\nexport const ZeroSlopeEnding: number = 2401;\nexport const WrapAroundEnding: number = 2402;\nexport const TrianglesDrawMode: number = 0;\nexport const TriangleStripDrawMode: number = 1;\nexport const TriangleFanDrawMode: number = 2;\nexport const LinearEncoding: number = 3000;\nexport const sRGBEncoding: number = 3001;\nexport const GammaEncoding: number = 3007;\nexport const RGBEEncoding: number = 3002;\nexport const LogLuvEncoding: number = 3003;\nexport const RGBM7Encoding: number = 3004;\nexport const RGBM16Encoding: number = 3005;\nexport const RGBDEncoding: number = 3006;\nexport const BasicDepthPacking: number = 3200;\nexport const RGBADepthPacking: number = 3201;\n","import { Color } from \"../math/Color\";\nimport { MathUtil } from \"../math/Math\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Vector4 } from \"../math/Vector4\";\n\nexport interface IBufferRange {\n    offset: number;\n    count: number;\n}\n\nexport type TypedArray =\n    | Int8Array\n    | Uint8Array\n    | Uint8ClampedArray\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Float32Array\n    | Float64Array;\n\nexport class BufferAttribute {\n    public readonly uuid: string = MathUtil.generateUUID();\n    public name: string = \"\";\n    public array: TypedArray | undefined = undefined;\n    public itemSize: number = 1;\n    public count: number = 0;\n    public normalized: boolean = false;\n    public dynamic: boolean = false;\n    public updateRange: IBufferRange = { offset: 0, count: -1 };\n    public version: number = 0;\n\n    constructor(\n        array: TypedArray | undefined,\n        itemSize: number = 0,\n        normalized: boolean = false,\n    ) {\n        this.array = array;\n        this.itemSize = itemSize;\n        this.count = array !== undefined ? array.length / itemSize : 0;\n        this.normalized = normalized;\n    }\n\n    set needsUpdate(value: boolean) {\n        if (value === true) this.version++;\n    }\n\n    public setArray(array: TypedArray): this {\n        this.count = array !== undefined ? array.length / this.itemSize : 0;\n        this.array = array;\n        return this;\n    }\n\n    public setDynamic(value: boolean): this {\n        this.dynamic = value;\n        return this;\n    }\n\n    public copy(source: BufferAttribute): this {\n        this.array = new (source.array as any).constructor() as TypedArray;\n        this.itemSize = source.itemSize;\n        this.count = source.count;\n        this.normalized = source.normalized;\n        this.dynamic = source.dynamic;\n        return this;\n    }\n\n    public set(value: TypedArray | number[], offset: number = 0): this {\n        this.array.set(value, offset);\n        return this;\n    }\n\n    public get(offset: number = 0, length: number = 1): TypedArray {\n        return this.array.slice(offset, length);\n    }\n\n    public copyAt(\n        index1: number,\n        attribute: BufferAttribute,\n        index2: number,\n    ): this {\n        index1 *= this.itemSize;\n        index2 *= attribute.itemSize;\n        for (let i: number = 0, l: number = this.itemSize; i < l; i++) {\n            this.array[index1 + i] = attribute.array[index2 + i];\n        }\n        return this;\n    }\n\n    public copyArray(array: number[]): this {\n        this.array.set(array);\n        return this;\n    }\n\n    public copyColorsArray(colors: Color[]): this {\n        const array: TypedArray = this.array;\n        let offset: number = 0;\n        for (let i: number = 0, l: number = colors.length; i < l; i++) {\n            const color: Color = colors[i] || new Color();\n            array[offset++] = color.r;\n            array[offset++] = color.g;\n            array[offset++] = color.b;\n        }\n        return this;\n    }\n\n    /**\n     * TODO question https://discourse.threejs.org/t/question-about-fromdirectgeometry-function-of-buffergeometry/1890/2\n     * @param indices\n     * @returns {BufferAttribute}\n     public copyIndicesArray(indices: Face3[]): BufferAttribute {\n        const array: TypedArray = this.array;\n        let offset: number = 0;\n        for (let i: number = 0, l: number = indices.length; i < l; i++) {\n            const index = indices[i];\n            array[offset++] = index.a;\n            array[offset++] = index.b;\n            array[offset++] = index.c;\n        }\n        return this;\n    }\n     */\n\n    public copyVector2sArray(vectors: Vector2[]): this {\n        const array: TypedArray = this.array;\n        let offset: number = 0;\n        for (let i: number = 0, l: number = vectors.length; i < l; i++) {\n            const vector: Vector2 = vectors[i] || new Vector2();\n            array[offset++] = vector.x;\n            array[offset++] = vector.y;\n        }\n        return this;\n    }\n\n    public copyVector3sArray(vectors: Vector3[]): this {\n        const array: TypedArray = this.array;\n        let offset: number = 0;\n        for (let i: number = 0, l: number = vectors.length; i < l; i++) {\n            const vector: Vector3 = vectors[i] || new Vector3();\n            array[offset++] = vector.x;\n            array[offset++] = vector.y;\n            array[offset++] = vector.z;\n        }\n        return this;\n    }\n\n    public copyVector4sArray(vectors: Vector4[]): this {\n        const array: TypedArray = this.array;\n        let offset: number = 0;\n        for (let i: number = 0, l: number = vectors.length; i < l; i++) {\n            const vector: Vector4 = vectors[i] || new Vector4();\n            array[offset++] = vector.x;\n            array[offset++] = vector.y;\n            array[offset++] = vector.z;\n            array[offset++] = vector.w;\n        }\n        return this;\n    }\n\n    public setProperty(\n        index: number,\n        property: string,\n        value: Vector2 | Vector3 | Vector4 | number,\n    ): this {\n        property = property.toLowerCase();\n        if (\n            property &&\n            property.length <= 4 &&\n            property.replace(/[xyzw]/g, \"\").length === 0\n        ) {\n            const offsetMap = { x: 0, y: 1, z: 2 };\n            if (property.length === 1 && typeof value === \"number\") {\n                this.array[\n                    index * this.itemSize + offsetMap[property.charAt(0)]\n                ] = value;\n            } else if (property.length === 2 && value instanceof Vector2) {\n                this.array[\n                    index * this.itemSize + offsetMap[property.charAt(0)]\n                ] =\n                    value.x;\n                this.array[\n                    index * this.itemSize + offsetMap[property.charAt(1)]\n                ] =\n                    value.y;\n            } else if (property.length === 3 && value instanceof Vector3) {\n                this.array[\n                    index * this.itemSize + offsetMap[property.charAt(0)]\n                ] =\n                    value.x;\n                this.array[\n                    index * this.itemSize + offsetMap[property.charAt(1)]\n                ] =\n                    value.y;\n                this.array[\n                    index * this.itemSize + offsetMap[property.charAt(2)]\n                ] =\n                    value.z;\n            } else if (property.length === 4 && value instanceof Vector4) {\n                this.array[\n                    index * this.itemSize + offsetMap[property.charAt(0)]\n                ] =\n                    value.x;\n                this.array[\n                    index * this.itemSize + offsetMap[property.charAt(1)]\n                ] =\n                    value.y;\n                this.array[\n                    index * this.itemSize + offsetMap[property.charAt(2)]\n                ] =\n                    value.z;\n                this.array[\n                    index * this.itemSize + offsetMap[property.charAt(3)]\n                ] =\n                    value.w;\n            }\n        }\n        return this;\n    }\n\n    public getProperty(\n        index: number,\n        property: string,\n    ): Vector2 | Vector3 | Vector4 | number {\n        property = property.toLowerCase();\n        if (\n            property &&\n            property.length <= 4 &&\n            property.replace(/[xyzw]/g, \"\").length === 0\n        ) {\n            const offsetMap = { x: 0, y: 1, z: 2 };\n            if (property.length === 1) {\n                return this.array[\n                    index * this.itemSize + offsetMap[property.charAt(0)]\n                ];\n            } else if (property.length === 2) {\n                return new Vector2(\n                    this.array[\n                        index * this.itemSize + offsetMap[property.charAt(0)]\n                    ],\n                    this.array[\n                        index * this.itemSize + offsetMap[property.charAt(1)]\n                    ],\n                );\n            } else if (property.length === 3) {\n                return new Vector3(\n                    this.array[\n                        index * this.itemSize + offsetMap[property.charAt(0)]\n                    ],\n                    this.array[\n                        index * this.itemSize + offsetMap[property.charAt(1)]\n                    ],\n                    this.array[\n                        index * this.itemSize + offsetMap[property.charAt(2)]\n                    ],\n                );\n            } else if (property.length === 4) {\n                return new Vector4(\n                    this.array[\n                        index * this.itemSize + offsetMap[property.charAt(0)]\n                    ],\n                    this.array[\n                        index * this.itemSize + offsetMap[property.charAt(1)]\n                    ],\n                    this.array[\n                        index * this.itemSize + offsetMap[property.charAt(2)]\n                    ],\n                    this.array[\n                        index * this.itemSize + offsetMap[property.charAt(3)]\n                    ],\n                );\n            }\n        }\n        return null;\n    }\n\n    public clone(): BufferAttribute {\n        return new (this.constructor as new (\n            array: TypedArray,\n            itemSize: number,\n            normalized: boolean,\n        ) => BufferAttribute)(this.array, this.itemSize, true).copy(this);\n    }\n}\n\nexport class Int8BufferAttribute extends BufferAttribute {\n    constructor(\n        array: number | ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(\n        array: ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Int8Array(array as ArrayBufferLike), itemSize, normalized);\n    }\n}\n\nexport class Uint8BufferAttribute extends BufferAttribute {\n    constructor(\n        array: number | ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(\n        array: ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Uint8Array(array as ArrayBufferLike), itemSize, normalized);\n    }\n}\n\nexport class Uint8ClampedBufferAttribute extends BufferAttribute {\n    constructor(\n        array: number | ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(\n        array: ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(\n            new Uint8ClampedArray(array as ArrayBufferLike),\n            itemSize,\n            normalized,\n        );\n    }\n}\n\nexport class Int16BufferAttribute extends BufferAttribute {\n    constructor(\n        array: number | ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(\n        array: ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Int16Array(array as ArrayBufferLike), itemSize, normalized);\n    }\n}\n\nexport class Uint16BufferAttribute extends BufferAttribute {\n    constructor(\n        array: number | ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(\n        array: ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Uint16Array(array as ArrayBufferLike), itemSize, normalized);\n    }\n}\n\nexport class Int32BufferAttribute extends BufferAttribute {\n    constructor(\n        array: number | ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(\n        array: ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Int32Array(array as ArrayBufferLike), itemSize, normalized);\n    }\n}\n\nexport class Uint32BufferAttribute extends BufferAttribute {\n    constructor(\n        array: number | ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(\n        array: ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Uint32Array(array as ArrayBufferLike), itemSize, normalized);\n    }\n}\n\nexport class Float32BufferAttribute extends BufferAttribute {\n    constructor(array: number, itemSize: number, normalized?: boolean);\n    constructor(\n        array: ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Float32Array(array), itemSize, normalized);\n    }\n}\n\nexport class Float64BufferAttribute extends BufferAttribute {\n    constructor(\n        array: number | ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(\n        array: ArrayBufferLike | ArrayLike<number>,\n        itemSize: number,\n        normalized?: boolean,\n    );\n    constructor(array: any, itemSize: number, normalized?: boolean) {\n        super(new Float64Array(array as ArrayBufferLike), itemSize, normalized);\n    }\n}\n\nexport type TypedBufferAttribute =\n    | Int8BufferAttribute\n    | Uint8BufferAttribute\n    | Uint8ClampedBufferAttribute\n    | Int16BufferAttribute\n    | Uint16BufferAttribute\n    | Int32BufferAttribute\n    | Uint32BufferAttribute\n    | Float32BufferAttribute\n    | Float64BufferAttribute;\n","import { Box3, ObjectWithGeometry } from \"../math/Box3\";\nimport { MathUtil } from \"../math/Math\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Vector3 } from \"../math/Vector3\";\nimport {\n    applyMatrixToBufferAttribute,\n    arrayMax,\n    setBoxFromBufferAttribute,\n} from \"../utils\";\nimport {\n    BufferAttribute,\n    Float32BufferAttribute,\n    TypedArray,\n    Uint16BufferAttribute,\n    Uint32BufferAttribute,\n} from \"./BufferAttribute\";\nimport { DirectGeometry, IGroup } from \"./DirectGeometry\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport { Geometry } from \"./Geometry\";\nimport { Object3D } from \"./Object3D\";\nimport { Mesh } from \"../objects/Mesh\";\nimport { Line } from \"../objects/Line\";\nimport { Points } from \"../objects/Points\";\n\nexport interface IDrawRange {\n    start: number;\n    count: number;\n}\n\nlet bufferGeometryId: number = 1;\nexport class BufferGeometry extends EventDispatcher {\n    public readonly id: number = (bufferGeometryId += 2);\n    public readonly uuid: string = MathUtil.generateUUID();\n    public name: string = \"\";\n    public readonly type: string = \"BufferGeometry\";\n\n    public index: BufferAttribute = null;\n    public attributes: { [key: string]: BufferAttribute } = {};\n\n    public morphAttributes: { [key: string]: BufferAttribute[] } = {};\n\n    public groups: IGroup[] = [];\n\n    public boundingBox: Box3 = null;\n    public boundingSphere: Sphere = null;\n\n    public drawRange: IDrawRange = { start: 0, count: Infinity };\n\n    public setIndex(index: number[] | BufferAttribute): this {\n        if (Array.isArray(index)) {\n            this.index = new (arrayMax(index) > 65535\n                ? Uint32BufferAttribute\n                : Uint16BufferAttribute)(index, 1);\n        } else {\n            this.index = index;\n        }\n        return this;\n    }\n\n    public addAttribute(name: string, attribute: BufferAttribute): this {\n        if (name === \"index\") {\n            this.setIndex(attribute);\n            return this;\n        }\n        this.attributes[name] = attribute;\n        return this;\n    }\n\n    public getAttribute(name: string): BufferAttribute {\n        return this.attributes[name];\n    }\n\n    public removeAttribute(name: string): this {\n        delete this.attributes[name];\n        return this;\n    }\n\n    public addGroup(\n        start: number,\n        count: number,\n        materialIndex: number = 0,\n    ): this {\n        this.groups.push({\n            count: count,\n            materialIndex: materialIndex,\n            start: start,\n        });\n        return this;\n    }\n\n    public clearGroups(): this {\n        this.groups = [];\n        return this;\n    }\n\n    public setDrawRange(start: number, count: number): this {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n        return this;\n    }\n\n    public applyMatrix(matrix: Matrix4): this {\n        const position: BufferAttribute = this.attributes.position;\n        if (position !== undefined) {\n            applyMatrixToBufferAttribute(matrix, position);\n            position.needsUpdate = true;\n        }\n        const normal: BufferAttribute = this.attributes.normal;\n        if (normal !== undefined) {\n            const normalMatrix: Matrix3 = new Matrix3().getNormalMatrix(matrix);\n            applyMatrixToBufferAttribute(normalMatrix, normal);\n            normal.needsUpdate = true;\n        }\n        if (this.boundingBox !== null) {\n            this.computeBoundingBox();\n        }\n        if (this.boundingSphere !== null) {\n            this.computeBoundingSphere();\n        }\n        return this;\n    }\n\n    public rotateX(angle: number): this {\n        return this.applyMatrix(new Matrix4().makeRotationX(angle));\n    }\n\n    public rotateY(angle: number): this {\n        return this.applyMatrix(new Matrix4().makeRotationY(angle));\n    }\n\n    public rotateZ(angle: number): this {\n        return this.applyMatrix(new Matrix4().makeRotationZ(angle));\n    }\n\n    public translate(x: number, y: number, z: number): this {\n        return this.applyMatrix(new Matrix4().makeTranslation(x, y, z));\n    }\n\n    public scale(x: number, y: number, z: number): this {\n        return this.applyMatrix(new Matrix4().makeScale(x, y, z));\n    }\n\n    public lookAt(vector: Vector3): this {\n        const obj: Object3D = new Object3D().lookAt(vector);\n        obj.updateMatrix();\n        return this.applyMatrix(obj.matrix);\n    }\n\n    public center(): Vector3 {\n        this.computeBoundingBox();\n        const offset: Vector3 = this.boundingBox.getCenter().negate();\n        this.translate(offset.x, offset.y, offset.z);\n        return offset;\n    }\n\n    /**\n     * Same as updateFromObject\n     * @param object\n     */\n    public setFromObject(object: ObjectWithGeometry): this {\n        const geometry: Geometry = object.geometry as Geometry;\n        if (object instanceof Points || object instanceof Line) {\n            const positions: Float32BufferAttribute = new Float32BufferAttribute(\n                geometry.vertices.length * 3,\n                3,\n            );\n            const colors: Float32BufferAttribute = new Float32BufferAttribute(\n                geometry.colors.length * 3,\n                3,\n            );\n            this.addAttribute(\n                \"position\",\n                positions.copyVector3sArray(geometry.vertices),\n            );\n            this.addAttribute(\"color\", colors.copyColorsArray(geometry.colors));\n            if (\n                geometry.lineDistances &&\n                geometry.lineDistances.length === geometry.vertices.length\n            ) {\n                const lineDistances: Float32BufferAttribute = new Float32BufferAttribute(\n                    geometry.lineDistances.length,\n                    1,\n                );\n                this.addAttribute(\n                    \"lineDistance\",\n                    lineDistances.copyArray(geometry.lineDistances),\n                );\n            }\n            if (geometry.boundingSphere !== null) {\n                this.boundingSphere = geometry.boundingSphere.clone();\n            }\n            if (geometry.boundingBox !== null) {\n                this.boundingBox = geometry.boundingBox.clone();\n            }\n        } else if (object instanceof Mesh) {\n            this.fromGeometry(geometry);\n        }\n        return this;\n    }\n\n    public setFromPoints(points: Vector3[]): this {\n        const position: number[] = [];\n        for (let i: number = 0, l: number = points.length; i < l; i++) {\n            const point: Vector3 = points[i];\n            position.push(point.x, point.y, point.z || 0);\n        }\n        this.addAttribute(\"position\", new Float32BufferAttribute(position, 3));\n        return this;\n    }\n\n    /**\n     * This function is a mess.\n     * The argument has implicit requirement for arg `object`\n     * Since the only use of this function is in `WebGLObjects`,\n     * and it requires the object's `geometry` property should be a `Geometry` instance,\n     * So we can/must assert the object.geometry as type `Geometry`.\n     * So the whole function is dealing with no BufferGeometry instance,\n     * which may be the reason why BufferGeometry is faster.\n     *\n     * @param object\n     * @returns {BufferGeometry}\n     */\n    public updateFromObject(object: ObjectWithGeometry): this {\n        let geometry: Geometry | DirectGeometry = object.geometry as Geometry;\n        if (object instanceof Mesh) {\n            let direct: DirectGeometry = geometry.directGeometry;\n            if (geometry.elementsNeedUpdate === true) {\n                direct = undefined;\n                geometry.elementsNeedUpdate = false;\n            }\n            if (direct === undefined) {\n                // Geometry -> DirectGeometry -> BufferGeometry\n                return this.fromGeometry(geometry);\n            }\n            direct.verticesNeedUpdate = geometry.verticesNeedUpdate;\n            direct.normalsNeedUpdate = geometry.normalsNeedUpdate;\n            direct.colorsNeedUpdate = geometry.colorsNeedUpdate;\n            direct.uvsNeedUpdate = geometry.uvsNeedUpdate;\n            direct.groupsNeedUpdate = geometry.groupsNeedUpdate;\n            geometry.verticesNeedUpdate = false;\n            geometry.normalsNeedUpdate = false;\n            geometry.colorsNeedUpdate = false;\n            geometry.uvsNeedUpdate = false;\n            geometry.groupsNeedUpdate = false;\n            geometry = direct;\n        }\n\n        // Used by both Geometry and DirectGeometry\n        if (geometry.verticesNeedUpdate === true) {\n            const attribute: BufferAttribute = this.attributes.position;\n            if (attribute !== undefined) {\n                attribute.copyVector3sArray(geometry.vertices);\n                attribute.needsUpdate = true;\n            }\n            geometry.verticesNeedUpdate = false;\n        }\n\n        // Used only by DirectGeometry\n        if (\n            geometry instanceof DirectGeometry &&\n            geometry.normalsNeedUpdate === true\n        ) {\n            const attribute: BufferAttribute = this.attributes.normal;\n            if (attribute !== undefined) {\n                attribute.copyVector3sArray(geometry.normals);\n                attribute.needsUpdate = true;\n            }\n            geometry.normalsNeedUpdate = false;\n        }\n\n        // Used by both Geometry and DirectGeometry\n        if (geometry.colorsNeedUpdate === true) {\n            const attribute: BufferAttribute = this.attributes.color;\n            if (attribute !== undefined) {\n                attribute.copyColorsArray(geometry.colors);\n                attribute.needsUpdate = true;\n            }\n            geometry.colorsNeedUpdate = false;\n        }\n\n        // Used only by DirectGeometry\n        if (geometry instanceof DirectGeometry && geometry.uvsNeedUpdate) {\n            const attribute: BufferAttribute = this.attributes.uv;\n            if (attribute !== undefined) {\n                attribute.copyVector2sArray(geometry.uvs);\n                attribute.needsUpdate = true;\n            }\n            geometry.uvsNeedUpdate = false;\n        }\n\n        // Used only by Geometry\n        if (geometry instanceof Geometry && geometry.lineDistancesNeedUpdate) {\n            const attribute: BufferAttribute = this.attributes.lineDistance;\n            if (attribute !== undefined) {\n                attribute.copyArray(geometry.lineDistances);\n                attribute.needsUpdate = true;\n            }\n            geometry.lineDistancesNeedUpdate = false;\n        }\n\n        // Used only by DirectGeometry\n        if (geometry instanceof DirectGeometry && geometry.groupsNeedUpdate) {\n            geometry.computeGroups(object.geometry as Geometry);\n            this.groups = geometry.groups;\n            geometry.groupsNeedUpdate = false;\n        }\n\n        // Well, IMO!!\n        return this;\n    }\n\n    /**\n     * Geometry of a Mesh\n     * @param geometry\n     */\n    public fromGeometry(geometry: Geometry): this {\n        geometry.directGeometry = new DirectGeometry().fromGeometry(geometry);\n        return this.fromDirectGeometry(geometry.directGeometry);\n    }\n\n    public fromDirectGeometry(geometry: DirectGeometry): this {\n        const positions: Float32Array = new Float32Array(\n            geometry.vertices.length * 3,\n        );\n        this.addAttribute(\n            \"position\",\n            new BufferAttribute(positions, 3).copyVector3sArray(\n                geometry.vertices,\n            ),\n        );\n        if (geometry.normals.length > 0) {\n            const normals: Float32Array = new Float32Array(\n                geometry.normals.length * 3,\n            );\n            this.addAttribute(\n                \"normal\",\n                new BufferAttribute(normals, 3).copyVector3sArray(\n                    geometry.normals,\n                ),\n            );\n        }\n        if (geometry.colors.length > 0) {\n            const colors: Float32Array = new Float32Array(\n                geometry.colors.length * 3,\n            );\n            this.addAttribute(\n                \"color\",\n                new BufferAttribute(colors, 3).copyColorsArray(geometry.colors),\n            );\n        }\n        if (geometry.uvs.length > 0) {\n            const uvs: Float32Array = new Float32Array(geometry.uvs.length * 2);\n            this.addAttribute(\n                \"uv\",\n                new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs),\n            );\n        }\n        if (geometry.uvs2.length > 0) {\n            const uvs2: Float32Array = new Float32Array(\n                geometry.uvs2.length * 2,\n            );\n            this.addAttribute(\n                \"uv2\",\n                new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2),\n            );\n        }\n        /**\n         * TODO question https://discourse.threejs.org/t/question-about-fromdirectgeometry-function-of-buffergeometry/1890/2\n         if (geometry.indices.length > 0) {\n            const indices: Uint32Array | Uint16Array = new (arrayMax(geometry.indices) > 65535 ? Uint32Array : Uint16Array)(geometry.indices.length * 3);\n            this.setIndex(new BufferAttribute(indices, 1).copyIndicesArray(geometry.indices));\n        }\n         */\n        // groups\n        this.groups = geometry.groups;\n        // morphs\n        for (const name in geometry.morphTargets) {\n            if (!geometry.morphTargets.hasOwnProperty(name)) continue;\n            const array: Float32BufferAttribute[] = [];\n            const morphTargets: Vector3[][] = geometry.morphTargets[name];\n            for (\n                let i: number = 0, l: number = morphTargets.length;\n                i < l;\n                i++\n            ) {\n                const morphTarget: Vector3[] = morphTargets[i];\n                const attribute: Float32BufferAttribute = new Float32BufferAttribute(\n                    new Array(morphTarget.length * 3),\n                    3,\n                );\n                array.push(attribute.copyVector3sArray(morphTarget));\n            }\n            this.morphAttributes[name] = array;\n        }\n        // skinning\n        if (geometry.skinIndices.length > 0) {\n            const skinIndices: Float32BufferAttribute = new Float32BufferAttribute(\n                new Array(geometry.skinIndices.length * 4),\n                4,\n            );\n            this.addAttribute(\n                \"skinIndex\",\n                skinIndices.copyVector4sArray(geometry.skinIndices),\n            );\n        }\n        if (geometry.skinWeights.length > 0) {\n            const skinWeights: Float32BufferAttribute = new Float32BufferAttribute(\n                new Array(geometry.skinWeights.length * 4),\n                4,\n            );\n            this.addAttribute(\n                \"skinWeight\",\n                skinWeights.copyVector4sArray(geometry.skinWeights),\n            );\n        }\n\n        if (geometry.boundingSphere !== null) {\n            this.boundingSphere = geometry.boundingSphere.clone();\n        }\n        if (geometry.boundingBox !== null) {\n            this.boundingBox = geometry.boundingBox.clone();\n        }\n\n        return this;\n    }\n\n    public computeBoundingBox(): void {\n        if (this.boundingBox === null) {\n            this.boundingBox = new Box3();\n        }\n        const position: BufferAttribute = this.attributes.position;\n        if (position !== undefined) {\n            setBoxFromBufferAttribute(this.boundingBox, position);\n        } else {\n            this.boundingBox.makeEmpty();\n        }\n        if (\n            isNaN(this.boundingBox.min.x) ||\n            isNaN(this.boundingBox.min.y) ||\n            isNaN(this.boundingBox.min.z)\n        ) {\n            console.error(\n                `THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.`,\n                this,\n            );\n        }\n    }\n\n    public computeBoundingSphere(): void {\n        if (this.boundingSphere === null) {\n            this.boundingSphere = new Sphere();\n        }\n        const position: BufferAttribute = this.attributes.position;\n        if (position) {\n            const box: Box3 = new Box3();\n            setBoxFromBufferAttribute(box, position);\n            const center: Vector3 = box.getCenter();\n            // hoping to find a boundingSphere with a radius smaller than the\n            // boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n            let maxRadiusSquare: number = 0;\n            for (let i: number = 0, il: number = position.count; i < il; i++) {\n                const vector: Vector3 = new Vector3();\n                vector.x = position.getProperty(i, \"x\") as number;\n                vector.y = position.getProperty(i, \"y\") as number;\n                vector.z = position.getProperty(i, \"z\") as number;\n                maxRadiusSquare = Math.max(\n                    maxRadiusSquare,\n                    center.distanceToSquared(vector),\n                );\n            }\n            this.boundingSphere.radius = Math.sqrt(maxRadiusSquare);\n            if (isNaN(this.boundingSphere.radius)) {\n                console.error(\n                    `THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.`,\n                    this,\n                );\n            }\n        }\n    }\n\n    public computeVertexNormals(): void {\n        const index: BufferAttribute = this.index;\n        const attributes: { [key: string]: BufferAttribute } = this.attributes;\n        const groups: IGroup[] = this.groups;\n        if (attributes.position) {\n            const positions: TypedArray = attributes.position.array;\n            if (attributes.normal === undefined) {\n                this.addAttribute(\n                    \"normal\",\n                    new BufferAttribute(new Float32Array(positions.length), 3),\n                );\n            } else {\n                // reset existing normals to zero\n                const array: TypedArray = attributes.normal.array;\n                for (\n                    let i: number = 0, il: number = array.length;\n                    i < il;\n                    i++\n                ) {\n                    array[i] = 0;\n                }\n            }\n            const normals: TypedArray = attributes.normal.array;\n\n            let vA: number, vB: number, vC: number;\n            const pA: Vector3 = new Vector3(),\n                pB: Vector3 = new Vector3(),\n                pC: Vector3 = new Vector3();\n            const cb: Vector3 = new Vector3(),\n                ab: Vector3 = new Vector3();\n            // indexed elements\n            if (index) {\n                const indices: TypedArray = index.array;\n                if (groups.length === 0) {\n                    this.addGroup(0, indices.length);\n                }\n                for (\n                    let j: number = 0, jl: number = groups.length;\n                    j < jl;\n                    ++j\n                ) {\n                    const group: IGroup = groups[j];\n                    const start: number = group.start;\n                    const count: number = group.count;\n                    for (\n                        let i: number = start, il: number = start + count;\n                        i < il;\n                        i += 3\n                    ) {\n                        vA = indices[i] * 3;\n                        vB = indices[i + 1] * 3;\n                        vC = indices[i + 2] * 3;\n                        pA.fromArray(positions, vA);\n                        pB.fromArray(positions, vB);\n                        pC.fromArray(positions, vC);\n                        cb.copy(pC).sub(pB);\n                        ab.copy(pA).sub(pB);\n                        cb.cross(ab);\n                        normals[vA] += cb.x;\n                        normals[vA + 1] += cb.y;\n                        normals[vA + 2] += cb.z;\n                        normals[vB] += cb.x;\n                        normals[vB + 1] += cb.y;\n                        normals[vB + 2] += cb.z;\n                        normals[vC] += cb.x;\n                        normals[vC + 1] += cb.y;\n                        normals[vC + 2] += cb.z;\n                    }\n                }\n            } else {\n                // non-indexed elements (unconnected triangle soup)\n                for (\n                    let i: number = 0, il: number = positions.length;\n                    i < il;\n                    i += 9\n                ) {\n                    pA.fromArray(positions, i);\n                    pB.fromArray(positions, i + 3);\n                    pC.fromArray(positions, i + 6);\n                    cb.copy(pC).sub(pB);\n                    ab.copy(pA).sub(pB);\n                    cb.cross(ab);\n                    normals[i] = cb.x;\n                    normals[i + 1] = cb.y;\n                    normals[i + 2] = cb.z;\n                    normals[i + 3] = cb.x;\n                    normals[i + 4] = cb.y;\n                    normals[i + 5] = cb.z;\n                    normals[i + 6] = cb.x;\n                    normals[i + 7] = cb.y;\n                    normals[i + 8] = cb.z;\n                }\n            }\n            this.normalizeNormals();\n            attributes.normal.needsUpdate = true;\n        }\n    }\n\n    public normalizeNormals(): void {\n        const vector: Vector3 = new Vector3();\n        const normals: BufferAttribute = this.attributes.normal;\n        for (let i: number = 0, il: number = normals.count; i < il; i++) {\n            vector.x = normals.getProperty(i, \"x\") as number;\n            vector.y = normals.getProperty(i, \"y\") as number;\n            vector.z = normals.getProperty(i, \"z\") as number;\n            vector.normalize();\n            normals.setProperty(i, \"xyz\", vector);\n        }\n    }\n\n    public toNonIndexed(): BufferGeometry {\n        if (this.index === null) {\n            console.warn(\n                `THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.`,\n            );\n            return this;\n        }\n        const geometry2: BufferGeometry = new BufferGeometry();\n        const indices: TypedArray = this.index.array;\n        const attributes: { [key: string]: BufferAttribute } = this.attributes;\n        for (const name in attributes) {\n            if (!attributes.hasOwnProperty(name)) continue;\n            const attribute: BufferAttribute = attributes[name];\n            const array: TypedArray = attribute.array;\n            const itemSize: number = attribute.itemSize;\n            const array2: TypedArray = new (array.constructor as new (\n                length: number,\n            ) => TypedArray)(indices.length * itemSize);\n            let index: number = 0,\n                index2: number = 0;\n            for (let i: number = 0, l: number = indices.length; i < l; i++) {\n                index = indices[i] * itemSize;\n                for (let j: number = 0; j < itemSize; j++) {\n                    array2[index2++] = array[index++];\n                }\n            }\n            geometry2.addAttribute(name, new BufferAttribute(array2, itemSize));\n        }\n\n        return geometry2;\n    }\n\n    public clone(): BufferGeometry {\n        return new (this.constructor as new () => BufferGeometry)().copy(this);\n    }\n\n    public copy(source: BufferGeometry): this {\n        // reset\n        this.index = null;\n        this.attributes = {};\n        this.morphAttributes = {};\n        this.groups = [];\n        this.boundingBox = null;\n        this.boundingSphere = null;\n        // name\n        this.name = source.name;\n        // index\n        const index: BufferAttribute = source.index;\n        if (index !== null) {\n            this.setIndex(index.clone());\n        }\n        // attributes\n        const attributes: { [key: string]: BufferAttribute } =\n            source.attributes;\n        for (const name in attributes) {\n            if (!attributes.hasOwnProperty(name)) continue;\n            const attribute: BufferAttribute = attributes[name];\n            this.addAttribute(name, attribute.clone());\n        }\n        // morph attributes\n        const morphAttributes: { [key: string]: BufferAttribute[] } =\n            source.morphAttributes;\n        for (const name in morphAttributes) {\n            if (!attributes.hasOwnProperty(name)) continue;\n            const array: BufferAttribute[] = [];\n            const morphAttribute: BufferAttribute[] = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n            for (\n                let i: number = 0, l: number = morphAttribute.length;\n                i < l;\n                i++\n            ) {\n                array.push(morphAttribute[i].clone());\n            }\n            this.morphAttributes[name] = array;\n        }\n        // groups\n        const groups: IGroup[] = source.groups;\n        for (let i: number = 0, l: number = groups.length; i < l; i++) {\n            const group: IGroup = groups[i];\n            this.addGroup(group.start, group.count, group.materialIndex);\n        }\n        // bounding box\n        const boundingBox: Box3 = source.boundingBox;\n        if (boundingBox !== null) {\n            this.boundingBox = boundingBox.clone();\n        }\n        // bounding sphere\n        const boundingSphere: Sphere = source.boundingSphere;\n        if (boundingSphere !== null) {\n            this.boundingSphere = boundingSphere.clone();\n        }\n        // draw range\n        this.drawRange.start = source.drawRange.start;\n        this.drawRange.count = source.drawRange.count;\n        return this;\n    }\n\n    public dispose(): void {\n        this.dispatchEvent({ type: \"dispose\" });\n    }\n}\n","export class Clock {\n    public autoStart: boolean = false;\n    protected startTime: number = 0;\n    protected oldTime: number = 0;\n    protected elapsedTime: number = 0;\n    protected running: boolean = false;\n\n    constructor(autoStart: boolean = false) {\n        this.autoStart = autoStart;\n    }\n\n    public start(): void {\n        this.startTime = (typeof performance === \"undefined\"\n            ? Date\n            : performance\n        ).now(); // see #10732\n        this.oldTime = this.startTime;\n        this.elapsedTime = 0;\n        this.running = true;\n    }\n\n    public stop(): void {\n        this.getElapsedTime();\n        this.running = false;\n        this.autoStart = false;\n    }\n\n    public getElapsedTime(): number {\n        this.getDelta();\n        return this.elapsedTime;\n    }\n\n    public getDelta(): number {\n        let diff: number = 0;\n        if (this.autoStart && !this.running) {\n            this.start();\n            return 0;\n        }\n        if (this.running) {\n            const newTime: number = (typeof performance === \"undefined\"\n                ? Date\n                : performance\n            ).now();\n            diff = (newTime - this.oldTime) / 1000;\n            this.oldTime = newTime;\n            this.elapsedTime += diff;\n        }\n        return diff;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Triangle } from \"../math/Triangle\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Vector4 } from \"../math/Vector4\";\nimport { Geometry, GeometryFace, IMorphNormal, IMorphTarget } from \"./Geometry\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Box3 } from \"../math/Box3\";\n\nexport interface IGroup {\n    start: number;\n    materialIndex: number;\n    count?: number;\n}\n\nexport class DirectGeometry {\n    public vertices: Vector3[] = [];\n    public normals: Vector3[] = [];\n    public colors: Color[] = [];\n    public uvs: Vector2[] = [];\n    public uvs2: Vector2[] = [];\n\n    public groups: IGroup[] = [];\n\n    public morphTargets: {\n        position?: Vector3[][];\n        normal?: Vector3[][];\n    } = {};\n\n    public skinWeights: Vector4[] = [];\n    public skinIndices: Vector4[] = [];\n\n    public boundingSphere: Sphere = null;\n    public boundingBox: Box3 = null;\n\n    public verticesNeedUpdate: boolean = false;\n    public uvsNeedUpdate: boolean = false;\n    public normalsNeedUpdate: boolean = false;\n    public colorsNeedUpdate: boolean = false;\n    public groupsNeedUpdate: boolean = false;\n\n    public computeGroups(geometry: Geometry): void {\n        let group: IGroup;\n        const groups: IGroup[] = [];\n        let materialIndex: number;\n        const faces: GeometryFace[] = geometry.faces;\n        let i: number = 0;\n        for (; i < faces.length; i++) {\n            const face: GeometryFace = faces[i];\n            // materials\n            if (face.materialIndex !== materialIndex) {\n                materialIndex = face.materialIndex;\n                if (group !== undefined) {\n                    group.count = i * 3 - group.start;\n                    groups.push(group);\n                }\n                group = {\n                    materialIndex: materialIndex,\n                    start: i * 3,\n                };\n            }\n        }\n        if (group !== undefined) {\n            group.count = i * 3 - group.start;\n            groups.push(group);\n        }\n        this.groups = groups;\n    }\n\n    public fromGeometry(geometry: Geometry): this {\n        const faces: GeometryFace[] = geometry.faces;\n        const vertices: Vector3[] = geometry.vertices;\n        const faceVertexUvs: Vector2[][][] = geometry.faceVertexUvs;\n\n        const hasFaceVertexUv: boolean =\n            faceVertexUvs[0] && faceVertexUvs[0].length > 0;\n        const hasFaceVertexUv2: boolean =\n            faceVertexUvs[1] && faceVertexUvs[1].length > 0;\n\n        // morphs\n        const morphTargets: IMorphTarget[] = geometry.morphTargets;\n        const morphTargetsLength: number = morphTargets.length;\n        if (morphTargetsLength > 0) {\n            this.morphTargets.position = [];\n            for (let i: number = 0; i < morphTargetsLength; i++) {\n                this.morphTargets.position[i] = [];\n            }\n        }\n        const morphNormals: IMorphNormal[] = geometry.morphNormals;\n        const morphNormalsLength: number = morphNormals.length;\n        if (morphNormalsLength > 0) {\n            this.morphTargets.normal = [];\n            for (let i: number = 0; i < morphNormalsLength; i++) {\n                this.morphTargets.normal[i] = [];\n            }\n        }\n        // skins\n        const skinIndices: Vector4[] = geometry.skinIndices;\n        const skinWeights: Vector4[] = geometry.skinWeights;\n        const hasSkinIndices: boolean = skinIndices.length === vertices.length;\n        const hasSkinWeights: boolean = skinWeights.length === vertices.length;\n        for (let i: number = 0; i < faces.length; i++) {\n            const face: GeometryFace = faces[i];\n            this.vertices.push(\n                vertices[face.a],\n                vertices[face.b],\n                vertices[face.c],\n            );\n            const vertexNormals: Vector3[] = face.vertexNormals;\n            if (vertexNormals.length === 3) {\n                this.normals.push(\n                    vertexNormals[0],\n                    vertexNormals[1],\n                    vertexNormals[2],\n                );\n            } else {\n                const normal: Vector3 = face.normal;\n                this.normals.push(normal, normal, normal);\n            }\n            const vertexColors: Color[] = face.vertexColors;\n            if (vertexColors.length === 3) {\n                this.colors.push(\n                    vertexColors[0],\n                    vertexColors[1],\n                    vertexColors[2],\n                );\n            } else {\n                const color: Color = face.color;\n                this.colors.push(color, color, color);\n            }\n            if (hasFaceVertexUv === true) {\n                const vertexUvs: Vector2[] = faceVertexUvs[0][i];\n                if (vertexUvs !== undefined) {\n                    this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n                } else {\n                    console.warn(\n                        `THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ${i}`,\n                    );\n                    this.uvs.push(new Vector2(), new Vector2(), new Vector2());\n                }\n            }\n            if (hasFaceVertexUv2 === true) {\n                const vertexUvs: Vector2[] = faceVertexUvs[1][i];\n                if (vertexUvs !== undefined) {\n                    this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n                } else {\n                    console.warn(\n                        `THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ${i}`,\n                    );\n                    this.uvs2.push(new Vector2(), new Vector2(), new Vector2());\n                }\n            }\n            // morphs\n            for (let j: number = 0; j < morphTargetsLength; j++) {\n                const morphTarget: Vector3[] = morphTargets[j].vertices;\n                this.morphTargets.position[j].push(\n                    morphTarget[face.a],\n                    morphTarget[face.b],\n                    morphTarget[face.c],\n                );\n            }\n            for (let j: number = 0; j < morphNormalsLength; j++) {\n                const morphNormal: Triangle = morphNormals[j].vertexNormals[i];\n                this.morphTargets.normal[j].push(\n                    morphNormal.a,\n                    morphNormal.b,\n                    morphNormal.c,\n                );\n            }\n            // skins\n            if (hasSkinIndices) {\n                this.skinIndices.push(\n                    skinIndices[face.a],\n                    skinIndices[face.b],\n                    skinIndices[face.c],\n                );\n            }\n            if (hasSkinWeights) {\n                this.skinWeights.push(\n                    skinWeights[face.a],\n                    skinWeights[face.b],\n                    skinWeights[face.c],\n                );\n            }\n        }\n\n        if (geometry.boundingSphere !== null) {\n            this.boundingSphere = geometry.boundingSphere.clone();\n        }\n        if (geometry.boundingBox !== null) {\n            this.boundingBox = geometry.boundingBox.clone();\n        }\n\n        this.computeGroups(geometry);\n        this.verticesNeedUpdate = geometry.verticesNeedUpdate;\n        this.normalsNeedUpdate = geometry.normalsNeedUpdate;\n        this.colorsNeedUpdate = geometry.colorsNeedUpdate;\n        this.uvsNeedUpdate = geometry.uvsNeedUpdate;\n        this.groupsNeedUpdate = geometry.groupsNeedUpdate;\n        return this;\n    }\n}\n","export interface IEventObject {\n    target?: EventDispatcher;\n    type?: string;\n}\n\nexport class EventDispatcher {\n    protected _listeners: { [key: string]: Array<(args: any) => any> } = {};\n\n    public addEventListener(type: string, listener: (args: any) => any): void {\n        const listeners: { [key: string]: Array<(args: any) => any> } = this\n            ._listeners;\n        if (listeners[type] === undefined) {\n            listeners[type] = [];\n        }\n        if (listeners[type].indexOf(listener) === -1) {\n            listeners[type].push(listener);\n        }\n    }\n\n    public hasEventListener(\n        type: string,\n        listener: (args: any) => any,\n    ): boolean {\n        if (this._listeners === undefined) return false;\n        const listeners: { [key: string]: Array<(args: any) => any> } = this\n            ._listeners;\n        return (\n            listeners[type] !== undefined &&\n            listeners[type].indexOf(listener) !== -1\n        );\n    }\n\n    public removeEventListener(type: string, listener: (args: any) => any) {\n        if (this._listeners === undefined) return;\n        const listeners: { [key: string]: Array<(args: any) => any> } = this\n            ._listeners;\n        const listenerArray: Array<(args: any) => any> = listeners[type];\n        if (listenerArray !== undefined) {\n            const index = listenerArray.indexOf(listener);\n            if (index !== -1) {\n                listenerArray.splice(index, 1);\n            }\n        }\n    }\n\n    public dispatchEvent(event: IEventObject = {}) {\n        if (this._listeners === undefined) return;\n        const listeners: { [key: string]: Array<(args: any) => any> } = this\n            ._listeners;\n        const listenerArray: Array<(args: any) => any> = listeners[event.type];\n        if (listenerArray !== undefined) {\n            event.target = this;\n            const array: Array<(args: any) => any> = listenerArray.slice(0);\n            for (let i = 0, l = array.length; i < l; i++) {\n                array[i].call(this, event);\n            }\n        }\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Vector3 } from \"../math/Vector3\";\n\nexport class Face3 {\n    public a: number = 0;\n    public b: number = 0;\n    public c: number = 0;\n\n    public normal: Vector3 = new Vector3();\n    public vertexNormals: Vector3[] = [];\n    public color: Color = new Color();\n    public vertexColors: Color[] = [];\n    public materialIndex: number = 0;\n\n    constructor(\n        a: number = 0,\n        b: number = 0,\n        c: number = 0,\n        normal: Vector3 | Vector3[] = new Vector3(),\n        color: Color | Color[] = new Color(),\n        materialIndex: number = 0,\n    ) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n\n        if (normal instanceof Vector3) this.normal = normal;\n        if (Array.isArray(normal)) this.vertexNormals = normal;\n\n        if (color instanceof Color) this.color = color;\n        if (Array.isArray(color)) this.vertexColors = color;\n\n        this.materialIndex = materialIndex;\n    }\n\n    public copy(source: Face3): this {\n        this.a = source.a;\n        this.b = source.b;\n        this.c = source.c;\n        this.normal.copy(source.normal);\n        this.color.copy(source.color);\n        this.materialIndex = source.materialIndex;\n        for (\n            let i: number = 0, il: number = source.vertexNormals.length;\n            i < il;\n            i++\n        ) {\n            this.vertexNormals[i] = source.vertexNormals[i].clone();\n        }\n        for (\n            let i: number = 0, il: number = source.vertexColors.length;\n            i < il;\n            i++\n        ) {\n            this.vertexColors[i] = source.vertexColors[i].clone();\n        }\n        return this;\n    }\n\n    public clone(): Face3 {\n        return new (this.constructor as new () => Face3)().copy(this);\n    }\n}\n","import { Box3 } from \"../math/Box3\";\nimport { Color } from \"../math/Color\";\nimport { MathUtil } from \"../math/Math\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Triangle } from \"../math/Triangle\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Vector4 } from \"../math/Vector4\";\nimport { Mesh } from \"../objects/Mesh\";\nimport { BufferAttribute, TypedArray } from \"./BufferAttribute\";\nimport { BufferGeometry } from \"./BufferGeometry\";\nimport { DirectGeometry, IGroup } from \"./DirectGeometry\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport { Face3 } from \"./Face3\";\nimport { Object3D } from \"./Object3D\";\nimport { IGeometeryBone } from \"../objects/SkinnedMesh\";\n\nexport class GeometryFace extends Face3 {\n    public id?: number;\n    public originalFaceNormal?: Vector3;\n    public originalVertexNormals?: Vector3[];\n}\n\nexport interface IMorphNormal {\n    faceNormals?: Vector3[];\n    vertexNormals?: Triangle[];\n}\n\nexport interface IMorphTarget {\n    name: string;\n    vertices?: Vector3[];\n    normals?: Vector3[];\n}\n\nlet geometryId: number = 0;\n\nexport class Geometry extends EventDispatcher {\n    /**\n     * Used in WebGLGeometries\n     * @type {BufferGeometry}\n     */\n    public bufferGeometry?: BufferGeometry = null;\n\n    public readonly id: number = (geometryId += 2);\n    public readonly uuid: string = MathUtil.generateUUID();\n    public name: string = \"\";\n    public readonly type: string = \"Geometry\";\n\n    public vertices: Vector3[] = [];\n    public colors: Color[] = [];\n    public faces: GeometryFace[] = [];\n    public faceVertexUvs: Vector2[][][] = [[]];\n\n    public morphTargets: IMorphTarget[] = [];\n    public morphNormals: IMorphNormal[] = [];\n\n    public skinWeights: Vector4[] = [];\n    public skinIndices: Vector4[] = [];\n\n    public lineDistances: number[] = [];\n\n    public boundingBox: Box3 = null;\n    public boundingSphere: Sphere = null;\n\n    public elementsNeedUpdate: boolean = false;\n    public verticesNeedUpdate: boolean = false;\n    public uvsNeedUpdate: boolean = false;\n    public normalsNeedUpdate: boolean = false;\n    public colorsNeedUpdate: boolean = false;\n    public lineDistancesNeedUpdate: boolean = false;\n    public groupsNeedUpdate: boolean = false;\n\n    // used for internal transform\n    public directGeometry?: DirectGeometry;\n    // for SkinnedMesh SkeletonHelper Loaded Object from JSONLoader and etc\n    public bones?: IGeometeryBone[];\n\n    public applyMatrix(matrix: Matrix4): this {\n        const normalMatrix: Matrix3 = new Matrix3().getNormalMatrix(matrix);\n        for (\n            let i: number = 0, il: number = this.vertices.length;\n            i < il;\n            i++\n        ) {\n            this.vertices[i].applyMatrix4(matrix);\n        }\n        for (let i: number = 0, il: number = this.faces.length; i < il; i++) {\n            const face: GeometryFace = this.faces[i];\n            face.normal.applyMatrix3(normalMatrix).normalize();\n            for (\n                let j: number = 0, jl: number = face.vertexNormals.length;\n                j < jl;\n                j++\n            ) {\n                face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();\n            }\n        }\n        if (this.boundingBox !== null) {\n            this.computeBoundingBox();\n        }\n        if (this.boundingSphere !== null) {\n            this.computeBoundingSphere();\n        }\n        this.verticesNeedUpdate = true;\n        this.normalsNeedUpdate = true;\n        return this;\n    }\n\n    public rotateX(angle: number): this {\n        return this.applyMatrix(new Matrix4().makeRotationX(angle));\n    }\n\n    public rotateY(angle: number): this {\n        return this.applyMatrix(new Matrix4().makeRotationY(angle));\n    }\n\n    public rotateZ(angle: number): this {\n        return this.applyMatrix(new Matrix4().makeRotationZ(angle));\n    }\n\n    public translate(x: number, y: number, z: number): this {\n        return this.applyMatrix(new Matrix4().makeTranslation(x, y, z));\n    }\n\n    public scale(x: number, y: number, z: number): this {\n        return this.applyMatrix(new Matrix4().makeScale(x, y, z));\n    }\n\n    public lookAt(vector: Vector3): this {\n        const obj: Object3D = new Object3D().lookAt(vector);\n        obj.updateMatrix();\n        return this.applyMatrix(obj.matrix);\n    }\n\n    public fromBufferGeometry(geometry: BufferGeometry): this {\n        const indices: TypedArray =\n            geometry.index !== null ? geometry.index.array : undefined;\n        const attributes: { [key: string]: BufferAttribute } =\n            geometry.attributes;\n        const positions: TypedArray = attributes.position.array;\n        const normals: TypedArray =\n            attributes.normal !== undefined\n                ? attributes.normal.array\n                : undefined;\n        const colors: TypedArray =\n            attributes.color !== undefined ? attributes.color.array : undefined;\n        const uvs: TypedArray =\n            attributes.uv !== undefined ? attributes.uv.array : undefined;\n        const uvs2: TypedArray =\n            attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n        if (uvs2 !== undefined) this.faceVertexUvs[1] = [];\n        const tempNormals: Vector3[] = [];\n        const tempUVs: Vector2[] = [];\n        const tempUVs2: Vector2[] = [];\n\n        for (\n            let i: number = 0, j: number = 0;\n            i < positions.length;\n            i += 3, j += 2\n        ) {\n            this.vertices.push(\n                new Vector3(positions[i], positions[i + 1], positions[i + 2]),\n            );\n            if (normals !== undefined) {\n                tempNormals.push(\n                    new Vector3(normals[i], normals[i + 1], normals[i + 2]),\n                );\n            }\n            if (colors !== undefined) {\n                this.colors.push(\n                    new Color(colors[i], colors[i + 1], colors[i + 2]),\n                );\n            }\n            if (uvs !== undefined) {\n                tempUVs.push(new Vector2(uvs[j], uvs[j + 1]));\n            }\n            if (uvs2 !== undefined) {\n                tempUVs2.push(new Vector2(uvs2[j], uvs2[j + 1]));\n            }\n        }\n        const addFace = (\n            a: number,\n            b: number,\n            c: number,\n            materialIndex?: number,\n        ): void => {\n            const vertexNormals: Vector3[] =\n                normals !== undefined\n                    ? [\n                          tempNormals[a].clone(),\n                          tempNormals[b].clone(),\n                          tempNormals[c].clone(),\n                      ]\n                    : [];\n            const vertexColors: Color[] =\n                colors !== undefined\n                    ? [\n                          this.colors[a].clone(),\n                          this.colors[b].clone(),\n                          this.colors[c].clone(),\n                      ]\n                    : [];\n            const face: Face3 = new Face3(\n                a,\n                b,\n                c,\n                vertexNormals,\n                vertexColors,\n                materialIndex,\n            );\n            this.faces.push(face);\n            if (uvs !== undefined) {\n                this.faceVertexUvs[0].push([\n                    tempUVs[a].clone(),\n                    tempUVs[b].clone(),\n                    tempUVs[c].clone(),\n                ]);\n            }\n            if (uvs2 !== undefined) {\n                this.faceVertexUvs[1].push([\n                    tempUVs2[a].clone(),\n                    tempUVs2[b].clone(),\n                    tempUVs2[c].clone(),\n                ]);\n            }\n        };\n\n        const groups: IGroup[] = geometry.groups;\n        if (groups.length > 0) {\n            for (let i: number = 0; i < groups.length; i++) {\n                const group: IGroup = groups[i];\n                const start: number = group.start;\n                const count: number = group.count;\n                for (\n                    let j: number = start, jl: number = start + count;\n                    j < jl;\n                    j += 3\n                ) {\n                    if (indices !== undefined) {\n                        addFace(\n                            indices[j],\n                            indices[j + 1],\n                            indices[j + 2],\n                            group.materialIndex,\n                        );\n                    } else {\n                        addFace(j, j + 1, j + 2, group.materialIndex);\n                    }\n                }\n            }\n        } else {\n            if (indices !== undefined) {\n                for (let i: number = 0; i < indices.length; i += 3) {\n                    addFace(indices[i], indices[i + 1], indices[i + 2]);\n                }\n            } else {\n                for (let i: number = 0; i < positions.length / 3; i += 3) {\n                    addFace(i, i + 1, i + 2);\n                }\n            }\n        }\n        this.computeFaceNormals();\n        if (geometry.boundingBox !== null) {\n            this.boundingBox = geometry.boundingBox.clone();\n        }\n        if (geometry.boundingSphere !== null) {\n            this.boundingSphere = geometry.boundingSphere.clone();\n        }\n        return this;\n    }\n\n    public center(): Vector3 {\n        this.computeBoundingBox();\n        const offset: Vector3 = this.boundingBox.getCenter().negate();\n        this.translate(offset.x, offset.y, offset.z);\n        return offset;\n    }\n\n    public normalize(): this {\n        this.computeBoundingSphere();\n        const center: Vector3 = this.boundingSphere.center;\n        const radius: number = this.boundingSphere.radius;\n        const s: number = radius === 0 ? 1 : 1.0 / radius;\n        const matrix: Matrix4 = new Matrix4();\n        matrix.set(\n            s,\n            0,\n            0,\n            -s * center.x,\n            0,\n            s,\n            0,\n            -s * center.y,\n            0,\n            0,\n            s,\n            -s * center.z,\n            0,\n            0,\n            0,\n            1,\n        );\n        return this.applyMatrix(matrix);\n    }\n\n    public computeFaceNormals(): this {\n        const cb: Vector3 = new Vector3(),\n            ab: Vector3 = new Vector3();\n        for (let f: number = 0, fl: number = this.faces.length; f < fl; f++) {\n            const face: GeometryFace = this.faces[f];\n            const vA: Vector3 = this.vertices[face.a];\n            const vB: Vector3 = this.vertices[face.b];\n            const vC: Vector3 = this.vertices[face.c];\n            cb.copy(vC).sub(vB);\n            ab.copy(vA).sub(vB);\n            cb.cross(ab);\n            cb.normalize();\n            face.normal.copy(cb);\n        }\n        return this;\n    }\n\n    public computeVertexNormals(areaWeighted: boolean = true): this {\n        const vertices: Vector3[] = new Array(this.vertices.length);\n        for (\n            let v: number = 0, vl: number = this.vertices.length;\n            v < vl;\n            v++\n        ) {\n            vertices[v] = new Vector3();\n        }\n        if (areaWeighted) {\n            // vertex normals weighted by triangle areas\n            // http://www.iquilezles.org/www/articles/normals/normals.htm\n            for (\n                let f: number = 0, fl: number = this.faces.length;\n                f < fl;\n                f++\n            ) {\n                const face: GeometryFace = this.faces[f];\n                const vA: Vector3 = this.vertices[face.a];\n                const vB: Vector3 = this.vertices[face.b];\n                const vC: Vector3 = this.vertices[face.c];\n                const cb: Vector3 = new Vector3().copy(vC).sub(vB);\n                const ab: Vector3 = new Vector3().copy(vA).sub(vB);\n                cb.cross(ab);\n                vertices[face.a].add(cb);\n                vertices[face.b].add(cb);\n                vertices[face.c].add(cb);\n            }\n        } else {\n            this.computeFaceNormals();\n            for (\n                let f: number = 0, fl: number = this.faces.length;\n                f < fl;\n                f++\n            ) {\n                const face: GeometryFace = this.faces[f];\n                vertices[face.a].add(face.normal);\n                vertices[face.b].add(face.normal);\n                vertices[face.c].add(face.normal);\n            }\n        }\n        for (\n            let v: number = 0, vl: number = this.vertices.length;\n            v < vl;\n            v++\n        ) {\n            vertices[v].normalize();\n        }\n        for (let f: number = 0, fl: number = this.faces.length; f < fl; f++) {\n            const face: GeometryFace = this.faces[f];\n            const vertexNormals: Vector3[] = face.vertexNormals;\n            if (vertexNormals.length === 3) {\n                vertexNormals[0].copy(vertices[face.a]);\n                vertexNormals[1].copy(vertices[face.b]);\n                vertexNormals[2].copy(vertices[face.c]);\n            } else {\n                vertexNormals[0] = vertices[face.a].clone();\n                vertexNormals[1] = vertices[face.b].clone();\n                vertexNormals[2] = vertices[face.c].clone();\n            }\n        }\n        if (this.faces.length > 0) {\n            this.normalsNeedUpdate = true;\n        }\n        return this;\n    }\n\n    public computeFlatVertexNormals(): this {\n        this.computeFaceNormals();\n        for (let f: number = 0, fl: number = this.faces.length; f < fl; f++) {\n            const face: GeometryFace = this.faces[f];\n            const vertexNormals: Vector3[] = face.vertexNormals;\n            if (vertexNormals.length === 3) {\n                vertexNormals[0].copy(face.normal);\n                vertexNormals[1].copy(face.normal);\n                vertexNormals[2].copy(face.normal);\n            } else {\n                vertexNormals[0] = face.normal.clone();\n                vertexNormals[1] = face.normal.clone();\n                vertexNormals[2] = face.normal.clone();\n            }\n        }\n        if (this.faces.length > 0) {\n            this.normalsNeedUpdate = true;\n        }\n        return this;\n    }\n\n    public computeMorphNormals(): this {\n        // save original normals\n        // - create temp variables on first access\n        //   otherwise just copy (for faster repeated calls)\n\n        for (let f: number = 0, fl: number = this.faces.length; f < fl; f++) {\n            const face = this.faces[f];\n            if (!face.originalFaceNormal) {\n                face.originalFaceNormal = face.normal.clone();\n            } else {\n                face.originalFaceNormal.copy(face.normal);\n            }\n            if (!face.originalVertexNormals) face.originalVertexNormals = [];\n            for (\n                let i: number = 0, il: number = face.vertexNormals.length;\n                i < il;\n                i++\n            ) {\n                if (!face.originalVertexNormals[i]) {\n                    face.originalVertexNormals[i] = face.vertexNormals[\n                        i\n                    ].clone();\n                } else {\n                    face.originalVertexNormals[i].copy(face.vertexNormals[i]);\n                }\n            }\n        }\n\n        // use temp geometry to compute face and vertex normals for each morph\n\n        const tmpGeo: Geometry = new Geometry();\n        tmpGeo.faces = this.faces;\n\n        for (\n            let i: number = 0, il: number = this.morphTargets.length;\n            i < il;\n            i++\n        ) {\n            // create on first access\n            if (!this.morphNormals[i]) {\n                this.morphNormals[i] = {\n                    faceNormals: [],\n                    vertexNormals: [],\n                };\n                for (\n                    let f: number = 0, fl: number = this.faces.length;\n                    f < fl;\n                    f++\n                ) {\n                    this.morphNormals[i].faceNormals.push(new Vector3());\n                    this.morphNormals[i].vertexNormals.push(new Triangle());\n                }\n            }\n            const morphNormals: IMorphNormal = this.morphNormals[i];\n            // set vertices to morph target\n            tmpGeo.vertices = this.morphTargets[i].vertices;\n            // compute morph normals\n            tmpGeo.computeFaceNormals();\n            tmpGeo.computeVertexNormals();\n            // store morph normals\n            for (\n                let f: number = 0, fl: number = this.faces.length;\n                f < fl;\n                f++\n            ) {\n                const face: GeometryFace = this.faces[f];\n                const faceNormal = morphNormals.faceNormals[f];\n                const vertexNormals = morphNormals.vertexNormals[f];\n                faceNormal.copy(face.normal);\n                vertexNormals.a.copy(face.vertexNormals[0]);\n                vertexNormals.b.copy(face.vertexNormals[1]);\n                vertexNormals.c.copy(face.vertexNormals[2]);\n            }\n        }\n\n        // restore original normals\n        for (let f: number = 0, fl: number = this.faces.length; f < fl; f++) {\n            const face: GeometryFace = this.faces[f];\n            face.normal = face.originalFaceNormal;\n            face.vertexNormals = face.originalVertexNormals;\n        }\n        return this;\n    }\n\n    public computeLineDistances(): this {\n        let d: number = 0;\n        const vertices: Vector3[] = this.vertices;\n        for (let i: number = 0, il: number = vertices.length; i < il; i++) {\n            if (i > 0) {\n                d += vertices[i].distanceTo(vertices[i - 1]);\n            }\n            this.lineDistances[i] = d;\n        }\n        return this;\n    }\n\n    public computeBoundingBox(): this {\n        if (this.boundingBox === null) {\n            this.boundingBox = new Box3();\n        }\n        this.boundingBox.setFromPoints(this.vertices);\n        return this;\n    }\n\n    public computeBoundingSphere(): this {\n        if (this.boundingSphere === null) {\n            this.boundingSphere = new Sphere();\n        }\n        this.boundingSphere.setFromPoints(this.vertices);\n        return this;\n    }\n\n    public merge(\n        geometry: Geometry,\n        matrix?: Matrix4,\n        materialIndexOffset: number = 0,\n    ): this {\n        let normalMatrix: Matrix3;\n        const vertexOffset: number = this.vertices.length,\n            thisVertices: Vector3[] = this.vertices,\n            thatVertices: Vector3[] = geometry.vertices,\n            thisFaces: GeometryFace[] = this.faces,\n            thatFaces: GeometryFace[] = geometry.faces,\n            thisUvs: Vector2[][] = this.faceVertexUvs[0],\n            thatUvs: Vector2[][] = geometry.faceVertexUvs[0],\n            thisColors: Color[] = this.colors,\n            thatColors: Color[] = geometry.colors;\n        if (matrix !== undefined) {\n            normalMatrix = new Matrix3().getNormalMatrix(matrix);\n        }\n        // vertices\n        for (let i: number = 0, il: number = thatVertices.length; i < il; i++) {\n            const vertexCopy: Vector3 = thatVertices[i].clone();\n            if (matrix !== undefined) vertexCopy.applyMatrix4(matrix);\n            thisVertices.push(vertexCopy);\n        }\n        // colors\n        for (let i: number = 0, il: number = thatColors.length; i < il; i++) {\n            thisColors.push(thatColors[i].clone());\n        }\n        // faces\n        for (let i: number = 0, il: number = thatFaces.length; i < il; i++) {\n            const face: GeometryFace = thatFaces[i],\n                faceVertexNormals: Vector3[] = face.vertexNormals,\n                faceVertexColors: Color[] = face.vertexColors;\n            const faceCopy: GeometryFace = new GeometryFace(\n                face.a + vertexOffset,\n                face.b + vertexOffset,\n                face.c + vertexOffset,\n            );\n            faceCopy.normal.copy(face.normal);\n            if (normalMatrix !== undefined) {\n                faceCopy.normal.applyMatrix3(normalMatrix).normalize();\n            }\n            for (\n                let j: number = 0, jl: number = faceVertexNormals.length;\n                j < jl;\n                j++\n            ) {\n                const normal: Vector3 = faceVertexNormals[j].clone();\n                if (normalMatrix !== undefined) {\n                    normal.applyMatrix3(normalMatrix).normalize();\n                }\n                faceCopy.vertexNormals.push(normal);\n            }\n            faceCopy.color.copy(face.color);\n            for (let j: number = 0, jl = faceVertexColors.length; j < jl; j++) {\n                const color: Color = faceVertexColors[j];\n                faceCopy.vertexColors.push(color.clone());\n            }\n            faceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n            thisFaces.push(faceCopy);\n        }\n        // uvs\n        for (let i: number = 0, il: number = thatUvs.length; i < il; i++) {\n            const uv: Vector2[] = thatUvs[i],\n                uvCopy: Vector2[] = [];\n            if (uv === undefined) {\n                continue;\n            }\n            for (let j: number = 0, jl: number = uv.length; j < jl; j++) {\n                uvCopy.push(uv[j].clone());\n            }\n            thisUvs.push(uvCopy);\n        }\n        return this;\n    }\n\n    public mergeMesh(mesh: Mesh): void {\n        if (mesh.geometry instanceof Geometry) {\n            if (mesh.matrixAutoUpdate) {\n                mesh.updateMatrix();\n            }\n            this.merge(mesh.geometry, mesh.matrix);\n        } else {\n            console.error(\n                `THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.`,\n                mesh.geometry,\n            );\n        }\n    }\n\n    /**\n     * Checks for duplicate vertices with hashmap.\n     * Duplicated vertices are removed\n     * and faces' vertices are updated.\n     * @returns {number}\n     */\n    public mergeVertices(): number {\n        /**\n         * Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n         * @type {{}}\n         */\n        const verticesMap: { [key: string]: number } = {};\n        const unique: Vector3[] = [],\n            changes: number[] = [];\n\n        /**\n         * number of decimal points, e.g. 4 for epsilon of 0.0001\n         * @type {number}\n         */\n        const precisionPoints: number = 4;\n        const precision: number = Math.pow(10, precisionPoints);\n\n        for (\n            let i: number = 0, il: number = this.vertices.length;\n            i < il;\n            i++\n        ) {\n            const v = this.vertices[i];\n            const key: string = [\n                Math.round(v.x * precision),\n                Math.round(v.y * precision),\n                Math.round(v.z * precision),\n            ].join(\"_\");\n\n            if (verticesMap[key] === undefined) {\n                verticesMap[key] = i;\n                unique.push(this.vertices[i]);\n                changes[i] = unique.length - 1;\n            } else {\n                // console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n                changes[i] = changes[verticesMap[key]];\n            }\n        }\n\n        // if faces are completely degenerate after merging vertices, we\n        // have to remove them from the geometry.\n        const faceIndicesToRemove: number[] = [];\n        for (let i: number = 0, il: number = this.faces.length; i < il; i++) {\n            const face: GeometryFace = this.faces[i];\n            face.a = changes[face.a];\n            face.b = changes[face.b];\n            face.c = changes[face.c];\n            const indices = [face.a, face.b, face.c];\n            // if any duplicate vertices are found in a Face3\n            // we have to remove the face as nothing can be saved\n            for (let n: number = 0; n < 3; n++) {\n                if (indices[n] === indices[(n + 1) % 3]) {\n                    faceIndicesToRemove.push(i);\n                    break;\n                }\n            }\n        }\n        for (let i: number = faceIndicesToRemove.length - 1; i >= 0; i--) {\n            const idx: number = faceIndicesToRemove[i];\n            this.faces.splice(idx, 1);\n            for (\n                let j: number = 0, jl: number = this.faceVertexUvs.length;\n                j < jl;\n                j++\n            ) {\n                this.faceVertexUvs[j].splice(idx, 1);\n            }\n        }\n        // Use unique set of vertices\n        const diff: number = this.vertices.length - unique.length;\n        this.vertices = unique;\n        return diff;\n    }\n\n    public setFromPoints(points: Vector3[]): this {\n        this.vertices = [];\n        for (let i: number = 0, l: number = points.length; i < l; i++) {\n            const point: Vector3 = points[i];\n            this.vertices.push(new Vector3(point.x, point.y, point.z || 0));\n        }\n        return this;\n    }\n\n    public sortFacesByMaterialIndex(): this {\n        const faces: GeometryFace[] = this.faces;\n        const length: number = faces.length;\n        // tag faces\n        for (let i: number = 0; i < length; i++) {\n            faces[i].id = i;\n        }\n        // sort faces\n        faces.sort((a: GeometryFace, b: GeometryFace): number => {\n            return a.materialIndex - b.materialIndex;\n        });\n        // sort uvs\n        const uvs1: Vector2[][] = this.faceVertexUvs[0];\n        const uvs2: Vector2[][] = this.faceVertexUvs[1];\n\n        let newUvs1: Vector2[][], newUvs2: Vector2[][];\n        if (uvs1 && uvs1.length === length) newUvs1 = [];\n        if (uvs2 && uvs2.length === length) newUvs2 = [];\n        for (let i: number = 0; i < length; i++) {\n            const id: number = faces[i].id;\n            if (newUvs1) newUvs1.push(uvs1[id]);\n            if (newUvs2) newUvs2.push(uvs2[id]);\n        }\n        if (newUvs1) this.faceVertexUvs[0] = newUvs1;\n        if (newUvs2) this.faceVertexUvs[1] = newUvs2;\n        return this;\n    }\n\n    public copy(source: Geometry): this {\n        // reset\n        this.vertices = [];\n        this.colors = [];\n        this.faces = [];\n        this.faceVertexUvs = [[]];\n        this.morphTargets = [];\n        this.morphNormals = [];\n        this.skinWeights = [];\n        this.skinIndices = [];\n        this.lineDistances = [];\n        this.boundingBox = null;\n        this.boundingSphere = null;\n        // name\n        this.name = source.name;\n        // vertices\n        const vertices: Vector3[] = source.vertices;\n        for (let i: number = 0, il: number = vertices.length; i < il; i++) {\n            this.vertices.push(vertices[i].clone());\n        }\n        // colors\n        const colors: Color[] = source.colors;\n        for (let i: number = 0, il: number = colors.length; i < il; i++) {\n            this.colors.push(colors[i].clone());\n        }\n        // faces\n        const faces: GeometryFace[] = source.faces;\n        for (let i: number = 0, il: number = faces.length; i < il; i++) {\n            this.faces.push(faces[i].clone() as GeometryFace);\n        }\n        // face vertex uvs\n        for (\n            let i: number = 0, il: number = source.faceVertexUvs.length;\n            i < il;\n            i++\n        ) {\n            const faceVertexUvs: Vector2[][] = source.faceVertexUvs[i];\n            if (this.faceVertexUvs[i] === undefined) {\n                this.faceVertexUvs[i] = [];\n            }\n            for (\n                let j: number = 0, jl: number = faceVertexUvs.length;\n                j < jl;\n                j++\n            ) {\n                const uvs: Vector2[] = faceVertexUvs[j];\n                const uvsCopy: Vector2[] = [];\n                for (let k: number = 0, kl: number = uvs.length; k < kl; k++) {\n                    uvsCopy.push(uvs[k].clone());\n                }\n                this.faceVertexUvs[i].push(uvsCopy);\n            }\n        }\n\n        // morph targets\n        const morphTargets: IMorphTarget[] = source.morphTargets;\n        for (let i: number = 0, il: number = morphTargets.length; i < il; i++) {\n            const morphTarget: IMorphTarget = { name: morphTargets[i].name };\n            // vertices\n            if (morphTargets[i].vertices !== undefined) {\n                morphTarget.vertices = [];\n                for (\n                    let j: number = 0,\n                        jl: number = morphTargets[i].vertices.length;\n                    j < jl;\n                    j++\n                ) {\n                    morphTarget.vertices.push(\n                        morphTargets[i].vertices[j].clone(),\n                    );\n                }\n            }\n            // normals\n            if (morphTargets[i].normals !== undefined) {\n                morphTarget.normals = [];\n                for (\n                    let j: number = 0,\n                        jl: number = morphTargets[i].normals.length;\n                    j < jl;\n                    j++\n                ) {\n                    morphTarget.normals.push(\n                        morphTargets[i].normals[j].clone(),\n                    );\n                }\n            }\n            this.morphTargets.push(morphTarget);\n        }\n        // morph normals\n        const morphNormals: IMorphNormal[] = source.morphNormals;\n        for (let i: number = 0, il: number = morphNormals.length; i < il; i++) {\n            const morphNormal: IMorphNormal = {};\n            // vertex normals\n            if (morphNormals[i].vertexNormals !== undefined) {\n                morphNormal.vertexNormals = [];\n                for (\n                    let j: number = 0,\n                        jl: number = morphNormals[i].vertexNormals.length;\n                    j < jl;\n                    j++\n                ) {\n                    morphNormal.vertexNormals.push(\n                        morphNormals[i].vertexNormals[j].clone(),\n                    );\n                }\n            }\n            // face normals\n            if (morphNormals[i].faceNormals !== undefined) {\n                morphNormal.faceNormals = [];\n                for (\n                    let j: number = 0,\n                        jl: number = morphNormals[i].faceNormals.length;\n                    j < jl;\n                    j++\n                ) {\n                    morphNormal.faceNormals.push(\n                        morphNormals[i].faceNormals[j].clone(),\n                    );\n                }\n            }\n            this.morphNormals.push(morphNormal);\n        }\n        // skin weights\n        const skinWeights: Vector4[] = source.skinWeights;\n        for (let i: number = 0, il: number = skinWeights.length; i < il; i++) {\n            this.skinWeights.push(skinWeights[i].clone());\n        }\n        // skin indices\n        const skinIndices: Vector4[] = source.skinIndices;\n        for (let i: number = 0, il: number = skinIndices.length; i < il; i++) {\n            this.skinIndices.push(skinIndices[i].clone());\n        }\n        // line distances\n        const lineDistances: number[] = source.lineDistances;\n        for (\n            let i: number = 0, il: number = lineDistances.length;\n            i < il;\n            i++\n        ) {\n            this.lineDistances.push(lineDistances[i]);\n        }\n        // bounding box\n        const boundingBox = source.boundingBox;\n        if (boundingBox !== null) {\n            this.boundingBox = boundingBox.clone();\n        }\n        // bounding sphere\n        const boundingSphere = source.boundingSphere;\n        if (boundingSphere !== null) {\n            this.boundingSphere = boundingSphere.clone();\n        }\n        // update flags\n        this.elementsNeedUpdate = source.elementsNeedUpdate;\n        this.verticesNeedUpdate = source.verticesNeedUpdate;\n        this.uvsNeedUpdate = source.uvsNeedUpdate;\n        this.normalsNeedUpdate = source.normalsNeedUpdate;\n        this.colorsNeedUpdate = source.colorsNeedUpdate;\n        this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n        this.groupsNeedUpdate = source.groupsNeedUpdate;\n        return this;\n    }\n\n    public clone(): Geometry {\n        return new (this.constructor as new () => Geometry)().copy(this);\n    }\n}\n","import { BufferAttribute, TypedArray } from \"./BufferAttribute\";\n\nexport class InstancedBufferAttribute extends BufferAttribute {\n    public meshPerAttribute: number = 1;\n\n    constructor(\n        array: TypedArray,\n        itemSize: number,\n        normalized: boolean = false,\n        meshPerAttribute: number = 1,\n    ) {\n        super(array, itemSize, normalized);\n        this.meshPerAttribute = meshPerAttribute;\n    }\n\n    public copy(source: InstancedBufferAttribute): this {\n        super.copy(source);\n        this.meshPerAttribute = source.meshPerAttribute;\n        return this;\n    }\n}\n","import { BufferGeometry } from \"./BufferGeometry\";\nexport class InstancedBufferGeometry extends BufferGeometry {\n    public readonly type: string = \"InstancedBufferGeometry\";\n    public maxInstancedCount: number;\n\n    public copy(source: InstancedBufferGeometry): this {\n        super.copy(source);\n        this.maxInstancedCount = source.maxInstancedCount;\n        return this;\n    }\n\n    public clone(): InstancedBufferGeometry {\n        return new (this\n            .constructor as new () => InstancedBufferGeometry)().copy(this);\n    }\n}\n","import { TypedArray } from \"./BufferAttribute\";\nimport { InterleavedBufferAttribute } from \"./InterleavedBufferAttribute\";\n\nexport class InstancedInterleavedBufferAttribute extends InterleavedBufferAttribute {\n    public meshPerAttribute: number = 1;\n\n    constructor(\n        array: TypedArray,\n        stride: number,\n        itemSize: number,\n        offset: number,\n        normalized: boolean = false,\n        meshPerAttribute: number = 1,\n    ) {\n        super(array, stride, itemSize, offset, normalized);\n        this.meshPerAttribute = meshPerAttribute;\n    }\n\n    public copy(source: InstancedInterleavedBufferAttribute): this {\n        super.copy(source);\n        this.meshPerAttribute = source.meshPerAttribute;\n        return this;\n    }\n}\n","import { MathUtil } from \"../math/Math\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Vector4 } from \"../math/Vector4\";\nimport { IBufferRange, TypedArray } from \"./BufferAttribute\";\n\nexport class InterleavedBufferAttribute {\n    public readonly uuid: string = MathUtil.generateUUID();\n\n    public array: TypedArray = undefined;\n    public stride: number = 1;\n    public count: number = 0;\n    public dynamic: boolean = false;\n    public updateRange: IBufferRange = { offset: 0, count: -1 };\n    public version: number = 0;\n\n    public itemSize: number;\n    public offset: number;\n    public normalized: boolean = false;\n\n    constructor(\n        array: TypedArray,\n        stride: number,\n        itemSize: number,\n        offset: number,\n        normalized: boolean = false,\n    ) {\n        this.array = array;\n        this.stride = stride;\n        this.count = array !== undefined ? array.length / stride : 0;\n        this.itemSize = itemSize;\n        this.offset = offset;\n        this.normalized = normalized;\n    }\n\n    set needsUpdate(value: boolean) {\n        if (value === true) this.version++;\n    }\n\n    public setArray(array: TypedArray): this {\n        this.count = array !== undefined ? array.length / this.stride : 0;\n        this.array = array;\n        return this;\n    }\n\n    public setDynamic(value: boolean): this {\n        this.dynamic = value;\n        return this;\n    }\n\n    public copy(source: InterleavedBufferAttribute): this {\n        this.array = new ((source.array as any).constructor as new (\n            arg: TypedArray,\n        ) => TypedArray)(source.array);\n        this.stride = source.stride;\n        this.count = source.count;\n        this.dynamic = source.dynamic;\n        return this;\n    }\n\n    public set(value: TypedArray | number[], offset: number = 0): this {\n        this.array.set(value, offset);\n        return this;\n    }\n\n    public get(offset: number = 0, length: number = 1): TypedArray {\n        return this.array.slice(offset, length);\n    }\n\n    public copyAt(\n        index1: number,\n        attribute: InterleavedBufferAttribute,\n        index2: number,\n    ): this {\n        index1 *= this.stride;\n        index2 *= attribute.stride;\n        for (let i: number = 0, l: number = this.stride; i < l; i++) {\n            this.array[index1 + i] = attribute.array[index2 + i];\n        }\n        return this;\n    }\n\n    public clone(): InterleavedBufferAttribute {\n        return new (this.constructor as new (\n            array: TypedArray,\n            itemSize: number,\n        ) => InterleavedBufferAttribute)(this.array, this.stride).copy(this);\n    }\n\n    public setProperty(\n        index: number,\n        property: string,\n        value: Vector2 | Vector3 | Vector4 | number,\n    ): this {\n        property = property.toLowerCase();\n        if (\n            property &&\n            property.length <= 4 &&\n            property.replace(/[xyzw]/g, \"\").length === 0\n        ) {\n            const offsetMap = { x: 0, y: 1, z: 2 };\n            if (property.length === 1 && typeof value === \"number\") {\n                this.array[\n                    index * this.stride +\n                        this.offset +\n                        offsetMap[property.charAt(0)]\n                ] = value;\n            } else if (property.length === 2 && value instanceof Vector2) {\n                this.array[\n                    index * this.stride +\n                        this.offset +\n                        offsetMap[property.charAt(0)]\n                ] =\n                    value.x;\n                this.array[\n                    index * this.stride +\n                        this.offset +\n                        offsetMap[property.charAt(1)]\n                ] =\n                    value.y;\n            } else if (property.length === 3 && value instanceof Vector3) {\n                this.array[\n                    index * this.stride +\n                        this.offset +\n                        offsetMap[property.charAt(0)]\n                ] =\n                    value.x;\n                this.array[\n                    index * this.stride +\n                        this.offset +\n                        offsetMap[property.charAt(1)]\n                ] =\n                    value.y;\n                this.array[\n                    index * this.stride +\n                        this.offset +\n                        offsetMap[property.charAt(2)]\n                ] =\n                    value.z;\n            } else if (property.length === 4 && value instanceof Vector4) {\n                this.array[\n                    index * this.stride +\n                        this.offset +\n                        offsetMap[property.charAt(0)]\n                ] =\n                    value.x;\n                this.array[\n                    index * this.stride +\n                        this.offset +\n                        offsetMap[property.charAt(1)]\n                ] =\n                    value.y;\n                this.array[\n                    index * this.stride +\n                        this.offset +\n                        offsetMap[property.charAt(2)]\n                ] =\n                    value.z;\n                this.array[\n                    index * this.stride +\n                        this.offset +\n                        offsetMap[property.charAt(3)]\n                ] =\n                    value.w;\n            }\n        }\n        return this;\n    }\n\n    public getProperty(\n        index: number,\n        property: string,\n    ): Vector2 | Vector3 | Vector4 | number {\n        property = property.toLowerCase();\n        if (\n            property &&\n            property.length <= 4 &&\n            property.replace(/[xyzw]/g, \"\").length === 0\n        ) {\n            const offsetMap = { x: 0, y: 1, z: 2 };\n            if (property.length === 1) {\n                return this.array[\n                    index * this.stride +\n                        this.offset +\n                        offsetMap[property.charAt(0)]\n                ];\n            } else if (property.length === 2) {\n                return new Vector2(\n                    this.array[\n                        index * this.stride +\n                            this.offset +\n                            offsetMap[property.charAt(0)]\n                    ],\n                    this.array[\n                        index * this.stride +\n                            this.offset +\n                            offsetMap[property.charAt(1)]\n                    ],\n                );\n            } else if (property.length === 3) {\n                return new Vector3(\n                    this.array[\n                        index * this.stride +\n                            this.offset +\n                            offsetMap[property.charAt(0)]\n                    ],\n                    this.array[\n                        index * this.stride +\n                            this.offset +\n                            offsetMap[property.charAt(1)]\n                    ],\n                    this.array[\n                        index * this.stride +\n                            this.offset +\n                            offsetMap[property.charAt(2)]\n                    ],\n                );\n            } else if (property.length === 4) {\n                return new Vector4(\n                    this.array[\n                        index * this.stride +\n                            this.offset +\n                            offsetMap[property.charAt(0)]\n                    ],\n                    this.array[\n                        index * this.stride +\n                            this.offset +\n                            offsetMap[property.charAt(1)]\n                    ],\n                    this.array[\n                        index * this.stride +\n                            this.offset +\n                            offsetMap[property.charAt(2)]\n                    ],\n                    this.array[\n                        index * this.stride +\n                            this.offset +\n                            offsetMap[property.charAt(3)]\n                    ],\n                );\n            }\n        }\n        return null;\n    }\n}\n","export class Layers {\n    public mask: number = 1 | 0;\n\n    public set(channel: number): void {\n        this.mask = (1 << channel) | 0;\n    }\n\n    public enable(channel: number): void {\n        this.mask |= (1 << channel) | 0;\n    }\n\n    public toggle(channel: number): void {\n        this.mask ^= (1 << channel) | 0;\n    }\n\n    public disable(channel: number): void {\n        this.mask &= ~((1 << channel) | 0);\n    }\n\n    public test(layers: Layers): boolean {\n        return (this.mask & layers.mask) !== 0;\n    }\n}\n","import { Camera } from \"../cameras/Camera\";\nimport { Euler } from \"../math/Euler\";\nimport { MathUtil } from \"../math/Math\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Vector4 } from \"../math/Vector4\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport { Layers } from \"./Layers\";\nimport { IIntersection, Raycaster } from \"./Raycaster\";\nimport {\n    MeshDepthMaterial,\n    MeshDistanceMaterial,\n} from \"../materials/Materials\";\n\nlet object3DId: number = 0;\n\nexport class Object3D extends EventDispatcher {\n    public static DefaultUp = new Vector3(0, 1, 0);\n    public static DefaultMatrixAutoUpdate: boolean = true;\n\n    public readonly id: number = object3DId++;\n    public readonly uuid: string = MathUtil.generateUUID();\n    public name: string = \"\";\n    public readonly type: string = \"Object3D\";\n    public parent: Object3D | null = null;\n    public children: Object3D[] = [];\n    public up: Vector3 = new Vector3().copy(Object3D.DefaultUp);\n    public matrix: Matrix4 = new Matrix4();\n    public matrixWorld: Matrix4 = new Matrix4();\n    public matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n    public matrixWorldNeedsUpdate: boolean = false;\n    public layers: Layers = new Layers();\n    public visible: boolean = true;\n    public castShadow: boolean = false;\n    public receiveShadow: boolean = false;\n    public frustumCulled: boolean = true;\n    public renderOrder: number = 0;\n    public userData: any = {};\n\n    public position: Vector3 = new Vector3();\n    public rotation: Euler = new Euler();\n    public quaternion: Quaternion = new Quaternion();\n    public scale: Vector3 = new Vector3(1, 1, 1);\n    public modelViewMatrix: Matrix4 = new Matrix4();\n    public normalMatrix: Matrix4 = new Matrix4();\n\n    public customDepthMaterial?: MeshDepthMaterial;\n    public customDistanceMaterial?: MeshDistanceMaterial;\n\n    public updateMatrix(): this {\n        this.matrix.compose(this.position, this.quaternion, this.scale);\n        this.matrixWorldNeedsUpdate = true;\n        return this;\n    }\n\n    public updateMatrixWorld(force: boolean = false): this {\n        if (this.matrixAutoUpdate) {\n            return this.updateMatrix();\n        }\n        if (this.matrixWorldNeedsUpdate || force) {\n            if (this.parent === null) {\n                this.matrixWorld.copy(this.matrix);\n            } else {\n                this.matrixWorld.multiplyMatrices(\n                    this.parent.matrixWorld,\n                    this.matrix,\n                );\n            }\n            this.matrixWorldNeedsUpdate = false;\n            force = true;\n        }\n        // update children\n        const children: Object3D[] = this.children;\n        for (let i: number = 0, l: number = children.length; i < l; i++) {\n            children[i].updateMatrixWorld(force);\n        }\n        return this;\n    }\n\n    public raycast(\n        raycaster: Raycaster,\n        intersections: IIntersection[] = [],\n    ): IIntersection[] {\n        return intersections;\n    }\n\n    public applyMatrix(matrix: Matrix4): this {\n        this.matrix.multiplyMatrices(matrix, this.matrix);\n        this.matrix.decompose(this.position, this.quaternion, this.scale);\n        return this;\n    }\n\n    public applyQuaternion(q: Quaternion): this {\n        this.quaternion.premultiply(q);\n        return this;\n    }\n\n    /**\n     * assumes axis is normalized\n     * @param axis\n     * @param angle\n     * @returns {Object3D}\n     */\n    public setRotationFromAxisAngle(axis: Vector3, angle: number): this {\n        this.quaternion.setFromAxisAngle(axis, angle);\n        return this;\n    }\n\n    public setRotationFromEuler(euler: Euler): this {\n        this.quaternion.setFromEuler(euler);\n        return this;\n    }\n\n    /**\n     * assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n     * @param m\n     * @returns {Object3D}\n     */\n    public setRotationFromMatrix(m: Matrix4): this {\n        this.quaternion.setFromRotationMatrix(m);\n        return this;\n    }\n\n    /**\n     * assumes q is normalized\n     * @param q\n     * @returns {Object3D}\n     */\n    public setRotationFromQuaternion(q: Quaternion): this {\n        this.quaternion.copy(q);\n        return this;\n    }\n\n    public rotateOnAxis(axis: Vector3, angle: number): this {\n        const q: Quaternion = new Quaternion();\n        q.setFromAxisAngle(axis, angle);\n        this.quaternion.multiply(q);\n        return this;\n    }\n\n    /**\n     * rotate object on axis in world space\n     * axis is assumed to be normalized\n     * method assumes no rotated parent\n     * @param axis\n     * @param angle\n     * @returns {Object3D}\n     */\n    public rotateOnWorldAxis(axis: Vector3, angle: number): this {\n        const q = new Quaternion();\n        q.setFromAxisAngle(axis, angle);\n        this.quaternion.premultiply(q);\n        return this;\n    }\n\n    public rotateX(angle: number): this {\n        return this.rotateOnAxis(new Vector3(1, 0, 0), angle);\n    }\n\n    public rotateY(angle: number): this {\n        return this.rotateOnAxis(new Vector3(0, 1, 0), angle);\n    }\n\n    public rotateZ(angle: number): this {\n        return this.rotateOnAxis(new Vector3(0, 0, 1), angle);\n    }\n\n    /**\n     * translate object by distance along axis in object space\n     * axis is assumed to be normalized\n     * @param axis\n     * @param distance\n     * @returns {Object3D}\n     */\n    public translateOnAxis(axis: Vector3, distance: number): this {\n        const vec = new Vector3();\n        vec.copy(axis).applyQuaternion(this.quaternion);\n        this.position.add(vec.multiplyScalar(distance));\n        return this;\n    }\n\n    public translateX(distance: number): this {\n        return this.translateOnAxis(new Vector3(1, 0, 0), distance);\n    }\n\n    public translateY(distance: number): this {\n        return this.translateOnAxis(new Vector3(0, 1, 0), distance);\n    }\n\n    public translateZ(distance: number): this {\n        return this.translateOnAxis(new Vector3(0, 0, 1), distance);\n    }\n\n    public localToWorld(vector: Vector3 | Vector4): Vector3 | Vector4 {\n        return vector.applyMatrix4(this.matrixWorld);\n    }\n\n    public worldToLocal(vector: Vector3 | Vector4): Vector3 | Vector4 {\n        return vector.applyMatrix4(new Matrix4().getInverse(this.matrixWorld));\n    }\n\n    public lookAt(vec: Vector3): this {\n        const mat: Matrix4 = new Matrix4();\n        const vector: Vector3 = new Vector3();\n        if (this instanceof Camera) {\n            mat.lookAt(this.position, vector, this.up);\n        } else {\n            mat.lookAt(vector, this.position, this.up);\n        }\n        this.quaternion.setFromRotationMatrix(mat);\n        return this;\n    }\n\n    public add(object: Object3D, ...objects: Object3D[]): this {\n        if (objects.length > 1) {\n            for (let i: number = 0; i < objects.length; i++) {\n                this.add(objects[i]);\n            }\n            return this;\n        }\n        if (object === this) {\n            console.error(\n                `THREE.Object3D.add: object can't be added as a child of itself. ${object}`,\n            );\n            return this;\n        }\n        if (object.parent !== null) {\n            object.parent.remove(object);\n        }\n        object.parent = this;\n        object.dispatchEvent({ type: \"added\" });\n        this.children.push(object);\n        return this;\n    }\n\n    public remove(object: Object3D, ...objects: Object3D[]): this {\n        if (objects.length > 1) {\n            for (let i: number = 0; i < objects.length; i++) {\n                this.remove(objects[i]);\n            }\n            return this;\n        }\n        const index = this.children.indexOf(object);\n        if (index !== -1) {\n            object.parent = null;\n            object.dispatchEvent({ type: \"removed\" });\n            this.children.splice(index, 1);\n        }\n        return this;\n    }\n\n    get worldPosition(): Vector3 {\n        this.updateMatrixWorld(true);\n        return new Vector3().setFromMatrixPosition(this.matrixWorld);\n    }\n\n    get worldQuaternion(): Quaternion {\n        const position: Vector3 = new Vector3();\n        const scale: Vector3 = new Vector3();\n        const result: Quaternion = new Quaternion();\n        this.updateMatrixWorld(true);\n        this.matrixWorld.decompose(position, result, scale);\n        return result;\n    }\n\n    get worldRotation(): Euler {\n        return new Euler().setFromQuaternion(\n            this.worldQuaternion,\n            this.rotation.order,\n        );\n    }\n\n    get worldScale(): Vector3 {\n        const position: Vector3 = new Vector3();\n        const quaternion: Quaternion = new Quaternion();\n        const result: Vector3 = new Vector3();\n        this.updateMatrixWorld(true);\n        this.matrixWorld.decompose(position, quaternion, result);\n        return result;\n    }\n\n    get worldDirection(): Vector3 {\n        return new Vector3().set(0, 0, 1).applyQuaternion(this.worldQuaternion);\n    }\n\n    public traverse(callback: (object: Object3D) => any): void {\n        callback(this);\n        for (let i: number = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverse(callback);\n        }\n    }\n\n    public traverseVisible(callback: (object: Object3D) => any): void {\n        if (this.visible === false) return;\n        callback(this);\n        for (let i: number = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverseVisible(callback);\n        }\n    }\n\n    public traverseAncestors(callback: (object: Object3D) => any): void {\n        if (this.parent !== null) {\n            callback(this.parent);\n            this.parent.traverseAncestors(callback);\n        }\n    }\n\n    public clone(recursive: boolean = false) {\n        return new (this.constructor as new () => Object3D)().copy(\n            this,\n            recursive,\n        );\n    }\n\n    public copy(source: Object3D, recursive: boolean = true): this {\n        this.name = source.name;\n        this.up.copy(source.up);\n        this.position.copy(source.position);\n        this.quaternion.copy(source.quaternion);\n        this.scale.copy(source.scale);\n        this.matrix.copy(source.matrix);\n        this.matrixWorld.copy(source.matrixWorld);\n        this.matrixAutoUpdate = source.matrixAutoUpdate;\n        this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n        this.layers.mask = source.layers.mask;\n        this.visible = source.visible;\n        this.castShadow = source.castShadow;\n        this.receiveShadow = source.receiveShadow;\n        this.frustumCulled = source.frustumCulled;\n        this.renderOrder = source.renderOrder;\n        this.userData = JSON.parse(JSON.stringify(source.userData));\n        if (recursive === true) {\n            for (let i: number = 0; i < source.children.length; i++) {\n                this.add(source.children[i].clone());\n            }\n        }\n        return this;\n    }\n}\n","import { Camera } from \"../cameras/Camera\";\nimport { OrthographicCamera } from \"../cameras/OrthographicCamera\";\nimport { PerspectiveCamera } from \"../cameras/PerspectiveCamera\";\nimport { Ray } from \"../math/Ray\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { unprojectVector3onCamera } from \"../utils\";\nimport { Face3 } from \"./Face3\";\nimport { Object3D } from \"./Object3D\";\n\nexport interface IIntersection {\n    index?: number;\n    distanceToRay?: number;\n    face?: Face3;\n    faceIndex?: number;\n    uv?: Vector2;\n    distance: number;\n    point: Vector3;\n    object: Object3D;\n}\n\nfunction intersectObject(\n    object: Object3D,\n    raycaster: Raycaster,\n    intersects: IIntersection[],\n    recursive: boolean = false,\n) {\n    if (object.visible === false) return;\n    object.raycast(raycaster, intersects);\n    if (recursive === true) {\n        const children: Object3D[] = object.children;\n        for (let i: number = 0, l: number = children.length; i < l; i++) {\n            intersectObject(children[i], raycaster, intersects, true);\n        }\n    }\n}\n\nexport class Raycaster {\n    public params: any = {\n        LOD: {},\n        Line: {},\n        Mesh: {},\n        Points: { threshold: 1 },\n        Sprite: {},\n    };\n\n    public near: number = 0;\n    public far: number = Infinity;\n    public ray: Ray = null;\n    public linePrecision: number = 1;\n\n    constructor(\n        origin: Vector3,\n        direction: Vector3,\n        near: number = 0,\n        far: number = Infinity,\n    ) {\n        this.ray = new Ray(origin, direction);\n        this.near = near;\n        this.far = far;\n    }\n\n    public set(origin: Vector3, direction: Vector3): this {\n        this.ray.set(origin, direction);\n        return this;\n    }\n\n    public setFromCamera(coords: Vector2, camera: Camera): this {\n        if (camera && camera instanceof PerspectiveCamera) {\n            this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n            this.ray.direction.set(coords.x, coords.y, 0.5);\n            unprojectVector3onCamera(this.ray.direction, camera);\n            this.ray.direction.sub(this.ray.origin).normalize();\n        } else if (camera && camera instanceof OrthographicCamera) {\n            this.ray.origin.set(\n                coords.x,\n                coords.y,\n                (camera.near + camera.far) / (camera.near - camera.far),\n            );\n            unprojectVector3onCamera(this.ray.origin, camera); // set origin in plane of camera\n            this.ray.direction\n                .set(0, 0, -1)\n                .transformDirection(camera.matrixWorld);\n        } else {\n            console.error(`THREE.Raycaster: Unsupported camera type.`);\n        }\n        return this;\n    }\n\n    public intersectObject(\n        object: Object3D,\n        recursive: boolean = false,\n    ): IIntersection[] {\n        const intersects: IIntersection[] = [];\n        intersectObject(object, this, intersects, recursive);\n        intersects.sort(\n            (a: IIntersection, b: IIntersection) => a.distance - b.distance,\n        );\n        return intersects;\n    }\n\n    public intersectObjects(\n        objects: Object3D[],\n        recursive: boolean = false,\n    ): IIntersection[] {\n        const intersects: IIntersection[] = [];\n        for (let i: number = 0, l: number = objects.length; i < l; i++) {\n            intersectObject(objects[i], this, intersects, recursive);\n        }\n        intersects.sort(\n            (a: IIntersection, b: IIntersection) => a.distance - b.distance,\n        );\n        return intersects;\n    }\n}\n","import { Float32BufferAttribute } from \"../core/BufferAttribute\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Vector3 } from \"../math/Vector3\";\n\nexport interface IBoxGeometryParameters {\n    width: number;\n    height: number;\n    depth: number;\n    widthSegments: number;\n    heightSegments: number;\n    depthSegments: number;\n}\n\nexport class BoxGeometry extends Geometry {\n    public readonly type: string = \"BoxGeometry\";\n    public parameters: IBoxGeometryParameters;\n\n    constructor(\n        width?: number,\n        height?: number,\n        depth?: number,\n        widthSegments?: number,\n        heightSegments?: number,\n        depthSegments?: number,\n    ) {\n        super();\n        this.parameters = {\n            depth: depth,\n            depthSegments: depthSegments,\n            height: height,\n            heightSegments: heightSegments,\n            width: width,\n            widthSegments: widthSegments,\n        };\n    }\n}\n\nexport class BoxBufferGeometry extends BufferGeometry {\n    public readonly type: string = \"BoxBufferGeometry\";\n    public parameters: IBoxGeometryParameters;\n\n    constructor(\n        width: number = 1,\n        height: number = 1,\n        depth: number = 1,\n        widthSegments: number = 1,\n        heightSegments: number = 1,\n        depthSegments: number = 1,\n    ) {\n        super();\n        this.parameters = {\n            depth: depth,\n            depthSegments: depthSegments,\n            height: height,\n            heightSegments: heightSegments,\n            width: width,\n            widthSegments: widthSegments,\n        };\n\n        widthSegments = Math.floor(widthSegments);\n        heightSegments = Math.floor(heightSegments);\n        depthSegments = Math.floor(depthSegments);\n\n        // buffers\n\n        const indices: number[] = [];\n        const vertices: number[] = [];\n        const normals: number[] = [];\n        const uvs: number[] = [];\n\n        // helper variables\n\n        let numberOfVertices: number = 0;\n        let groupStart: number = 0;\n\n        const buildPlane = (\n            u: string,\n            v: string,\n            w: string,\n            uDir: number,\n            vDir: number,\n            width2: number,\n            height2: number,\n            depth2: number,\n            gridX: number,\n            gridY: number,\n            materialIndex: number,\n        ): void => {\n            const segmentWidth: number = width2 / gridX;\n            const segmentHeight: number = height2 / gridY;\n\n            const widthHalf: number = width2 / 2;\n            const heightHalf: number = height2 / 2;\n            const depthHalf: number = depth2 / 2;\n\n            const gridX1: number = gridX + 1;\n            const gridY1: number = gridY + 1;\n\n            let vertexCounter: number = 0;\n            let groupCount: number = 0;\n\n            // generate vertices, normals and uvs\n\n            for (let iy: number = 0; iy < gridY1; iy++) {\n                const y: number = iy * segmentHeight - heightHalf;\n\n                for (let ix: number = 0; ix < gridX1; ix++) {\n                    const x: number = ix * segmentWidth - widthHalf;\n                    const vector: Vector3 = new Vector3();\n                    // set values to correct vector component\n                    vector[u] = x * uDir;\n                    vector[v] = y * vDir;\n                    vector[w] = depthHalf;\n                    // now apply vector to vertex buffer\n                    vertices.push(vector.x, vector.y, vector.z);\n                    // set values to correct vector component\n                    vector[u] = 0;\n                    vector[v] = 0;\n                    vector[w] = depth2 > 0 ? 1 : -1;\n                    // now apply vector to normal buffer\n                    normals.push(vector.x, vector.y, vector.z);\n                    // uvs\n                    uvs.push(ix / gridX);\n                    uvs.push(1 - iy / gridY);\n                    // counters\n                    vertexCounter += 1;\n                }\n            }\n            // indices\n            // 1. you need three indices to draw a single face\n            // 2. a single segment consists of two faces\n            // 3. so we need to generate six (2*3) indices per segment\n            for (let iy: number = 0; iy < gridY; iy++) {\n                for (let ix: number = 0; ix < gridX; ix++) {\n                    const a: number = numberOfVertices + ix + gridX1 * iy;\n                    const b: number = numberOfVertices + ix + gridX1 * (iy + 1);\n                    const c: number =\n                        numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n                    const d: number = numberOfVertices + (ix + 1) + gridX1 * iy;\n                    // faces\n                    indices.push(a, b, d);\n                    indices.push(b, c, d);\n                    // increase counter\n                    groupCount += 6;\n                }\n            }\n            // add a group to the geometry. this will ensure multi material support\n            this.addGroup(groupStart, groupCount, materialIndex);\n            // calculate new start value for groups\n            groupStart += groupCount;\n            // update total number of vertices\n            numberOfVertices += vertexCounter;\n        };\n\n        // build each side of the box geometry\n        buildPlane(\n            \"z\",\n            \"y\",\n            \"x\",\n            -1,\n            -1,\n            depth,\n            height,\n            width,\n            depthSegments,\n            heightSegments,\n            0,\n        ); // px\n        buildPlane(\n            \"z\",\n            \"y\",\n            \"x\",\n            1,\n            -1,\n            depth,\n            height,\n            -width,\n            depthSegments,\n            heightSegments,\n            1,\n        ); // nx\n        buildPlane(\n            \"x\",\n            \"z\",\n            \"y\",\n            1,\n            1,\n            width,\n            depth,\n            height,\n            widthSegments,\n            depthSegments,\n            2,\n        ); // py\n        buildPlane(\n            \"x\",\n            \"z\",\n            \"y\",\n            1,\n            -1,\n            width,\n            depth,\n            -height,\n            widthSegments,\n            depthSegments,\n            3,\n        ); // ny\n        buildPlane(\n            \"x\",\n            \"y\",\n            \"z\",\n            1,\n            -1,\n            width,\n            height,\n            depth,\n            widthSegments,\n            heightSegments,\n            4,\n        ); // pz\n        buildPlane(\n            \"x\",\n            \"y\",\n            \"z\",\n            -1,\n            -1,\n            width,\n            height,\n            -depth,\n            widthSegments,\n            heightSegments,\n            5,\n        ); // nz\n\n        // build geometry\n        this.setIndex(indices);\n        this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n        this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    }\n}\n","import { Float32BufferAttribute } from \"../core/BufferAttribute\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\n\nexport interface ICircleGeometryParameters {\n    radius: number;\n    segments: number;\n    thetaStart: number;\n    thetaLength: number;\n}\n\nexport class CircleGeometry extends Geometry {\n    public readonly type: string = \"CircleGeometry\";\n    public parameters: ICircleGeometryParameters;\n\n    constructor(\n        radius?: number,\n        segments?: number,\n        thetaStart?: number,\n        thetaLength?: number,\n    ) {\n        super();\n        this.parameters = {\n            radius: radius,\n            segments: segments,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n        this.fromBufferGeometry(\n            new CircleBufferGeometry(radius, segments, thetaStart, thetaLength),\n        );\n        this.mergeVertices();\n    }\n}\n\nexport class CircleBufferGeometry extends BufferGeometry {\n    public readonly type: string = \"CircleBufferGeometry\";\n    public parameters: ICircleGeometryParameters;\n\n    constructor(\n        radius: number = 1,\n        segments: number | undefined,\n        thetaStart: number = 0,\n        thetaLength: number = Math.PI * 2,\n    ) {\n        super();\n        this.parameters = {\n            radius: radius,\n            segments: segments,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n        segments = segments !== undefined ? Math.max(3, segments) : 8;\n        // buffers\n        const indices: number[] = [];\n        const vertices: number[] = [];\n        const normals: number[] = [];\n        const uvs: number[] = [];\n        // center point\n        vertices.push(0, 0, 0);\n        normals.push(0, 0, 1);\n        uvs.push(0.5, 0.5);\n        for (let s: number = 0, i: number = 3; s <= segments; s++, i += 3) {\n            const segment: number = thetaStart + s / segments * thetaLength;\n            // vertex\n            vertices.push(\n                radius * Math.cos(segment),\n                radius * Math.sin(segment),\n                0,\n            );\n            // normal\n            normals.push(0, 0, 1);\n            // uvs\n            uvs.push(\n                (vertices[i] / radius + 1) / 2,\n                (vertices[i + 1] / radius + 1) / 2,\n            );\n        }\n        // indices\n        for (let i: number = 1; i <= segments; i++) {\n            indices.push(i, i + 1, 0);\n        }\n        // build geometry\n        this.setIndex(indices);\n        this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n        this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    }\n}\n","import { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { CylinderBufferGeometry, CylinderGeometry } from \"./CylinderGeometry\";\n\nexport interface IConeGeometryParameters {\n    radius: number;\n    height: number;\n    radialSegments: number;\n    heightSegments: number;\n    openEnded: boolean;\n    thetaStart: number;\n    thetaLength: number;\n}\n\nexport class ConeGeometry extends Geometry {\n    public readonly type: string = \"ConeGeometry\";\n    public parameters: IConeGeometryParameters;\n\n    constructor(\n        radius?: number,\n        height?: number,\n        radialSegments?: number,\n        heightSegments?: number,\n        openEnded?: boolean,\n        thetaStart?: number,\n        thetaLength?: number,\n    ) {\n        super();\n        CylinderGeometry.call(\n            this,\n            0,\n            radius,\n            height,\n            radialSegments,\n            heightSegments,\n            openEnded,\n            thetaStart,\n            thetaLength,\n        );\n        this.parameters = {\n            height: height,\n            heightSegments: heightSegments,\n            openEnded: openEnded,\n            radialSegments: radialSegments,\n            radius: radius,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n    }\n}\n\nexport class ConeBufferGeometry extends BufferGeometry {\n    public readonly type: string = \"ConeBufferGeometry\";\n    public parameters: IConeGeometryParameters;\n\n    constructor(\n        radius?: number,\n        height?: number,\n        radialSegments?: number,\n        heightSegments?: number,\n        openEnded?: boolean,\n        thetaStart?: number,\n        thetaLength?: number,\n    ) {\n        super();\n        CylinderBufferGeometry.call(\n            this,\n            0,\n            radius,\n            height,\n            radialSegments,\n            heightSegments,\n            openEnded,\n            thetaStart,\n            thetaLength,\n        );\n        this.parameters = {\n            height: height,\n            heightSegments: heightSegments,\n            openEnded: openEnded,\n            radialSegments: radialSegments,\n            radius: radius,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n    }\n}\n","import { Float32BufferAttribute } from \"../core/BufferAttribute\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Vector3 } from \"../math/Vector3\";\n\nexport interface ICylinderGeometryParameters {\n    radiusTop: number;\n    radiusBottom: number;\n    height: number;\n    radialSegments: number;\n    heightSegments: number;\n    openEnded: boolean;\n    thetaStart: number;\n    thetaLength: number;\n}\n\nexport class CylinderGeometry extends Geometry {\n    public readonly type: string = \"CylinderGeometry\";\n    public parameters: ICylinderGeometryParameters;\n\n    constructor(\n        radiusTop?: number,\n        radiusBottom?: number,\n        height?: number,\n        radialSegments?: number,\n        heightSegments?: number,\n        openEnded?: boolean,\n        thetaStart?: number,\n        thetaLength?: number,\n    ) {\n        super();\n        this.parameters = {\n            height: height,\n            heightSegments: heightSegments,\n            openEnded: openEnded,\n            radialSegments: radialSegments,\n            radiusBottom: radiusBottom,\n            radiusTop: radiusTop,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n        this.fromBufferGeometry(\n            new CylinderBufferGeometry(\n                radiusTop,\n                radiusBottom,\n                height,\n                radialSegments,\n                heightSegments,\n                openEnded,\n                thetaStart,\n                thetaLength,\n            ),\n        );\n        this.mergeVertices();\n    }\n}\n\nexport class CylinderBufferGeometry extends BufferGeometry {\n    public readonly type: string = \"CylinderBufferGeometry\";\n    public parameters: ICylinderGeometryParameters;\n\n    constructor(\n        radiusTop: number = 1,\n        radiusBottom: number = 1,\n        height: number = 1,\n        radialSegments: number = 9,\n        heightSegments: number = 1,\n        openEnded: boolean = false,\n        thetaStart: number = 0,\n        thetaLength: number = Math.PI * 2,\n    ) {\n        super();\n        this.parameters = {\n            height: height,\n            heightSegments: heightSegments,\n            openEnded: openEnded,\n            radialSegments: radialSegments,\n            radiusBottom: radiusBottom,\n            radiusTop: radiusTop,\n            thetaLength: thetaLength,\n            thetaStart: thetaStart,\n        };\n        radialSegments = Math.floor(radialSegments);\n        heightSegments = Math.floor(heightSegments);\n\n        // buffers\n        const indices: number[] = [];\n        const vertices: number[] = [];\n        const normals: number[] = [];\n        const uvs: number[] = [];\n\n        // helper variables\n        let index: number = 0;\n        const indexArray: number[][] = [];\n        const halfHeight: number = height / 2;\n        let groupStart: number = 0;\n\n        const generateCap = (top: boolean): void => {\n            let centerIndexStart: number, centerIndexEnd: number;\n            let groupCount: number = 0;\n            const radius: number = top ? radiusTop : radiusBottom;\n            const sign: number = top ? 1 : -1;\n            // save the index of the first center vertex\n            centerIndexStart = index;\n            // first we generate the center vertex data of the cap.\n            // because the geometry needs one set of uvs per face,\n            // we must generate a center vertex per face/segment\n            for (let x: number = 1; x <= radialSegments; x++) {\n                // vertex\n                vertices.push(0, halfHeight * sign, 0);\n                // normal\n                normals.push(0, sign, 0);\n                // uv\n                uvs.push(0.5, 0.5);\n                // increase index\n                index++;\n            }\n            // save the index of the last center vertex\n            centerIndexEnd = index;\n            // now we generate the surrounding vertices, normals and uvs\n            for (let x: number = 0; x <= radialSegments; x++) {\n                const u: number = x / radialSegments;\n                const theta: number = u * thetaLength + thetaStart;\n                const cosTheta: number = Math.cos(theta);\n                const sinTheta: number = Math.sin(theta);\n                // vertex\n\n                vertices.push(\n                    radius * sinTheta,\n                    halfHeight * sign,\n                    radius * cosTheta,\n                );\n                // normal\n                normals.push(0, sign, 0);\n                // uv\n                uvs.push(cosTheta * 0.5 + 0.5, sinTheta * 0.5 * sign + 0.5);\n                // increase index\n                index++;\n            }\n            // generate indices\n            for (let x: number = 0; x < radialSegments; x++) {\n                const c: number = centerIndexStart + x;\n                const i: number = centerIndexEnd + x;\n                if (top) {\n                    // face top\n                    indices.push(i, i + 1, c);\n                } else {\n                    // face bottom\n                    indices.push(i + 1, i, c);\n                }\n                groupCount += 3;\n            }\n            // add a group to the geometry. this will ensure multi material support\n            this.addGroup(groupStart, groupCount, top === true ? 1 : 2);\n            // calculate new start value for groups\n            groupStart += groupCount;\n        };\n\n        const generateTorso = (): void => {\n            let groupCount: number = 0;\n            // this will be used to calculate the normal\n            const slope: number = (radiusBottom - radiusTop) / height;\n            // generate vertices, normals and uvs\n            for (let y: number = 0; y <= heightSegments; y++) {\n                const indexRow: number[] = [];\n                const v: number = y / heightSegments;\n                // calculate the radius of the current row\n                const radius: number =\n                    v * (radiusBottom - radiusTop) + radiusTop;\n                for (let x: number = 0; x <= radialSegments; x++) {\n                    const u: number = x / radialSegments;\n                    const theta: number = u * thetaLength + thetaStart;\n                    const sinTheta: number = Math.sin(theta);\n                    const cosTheta: number = Math.cos(theta);\n                    // vertex\n                    vertices.push(\n                        radius * sinTheta,\n                        -v * height + halfHeight,\n                        radius * cosTheta,\n                    );\n                    // normal\n                    const normal: Vector3 = new Vector3();\n                    normal.set(sinTheta, slope, cosTheta).normalize();\n                    normals.push(normal.x, normal.y, normal.z);\n                    // uv\n                    uvs.push(u, 1 - v);\n                    // save index of vertex in respective row\n                    indexRow.push(index++);\n                }\n                // now save vertices of the row in our index array\n                indexArray.push(indexRow);\n            }\n            // generate indices\n            for (let x: number = 0; x < radialSegments; x++) {\n                for (let y: number = 0; y < heightSegments; y++) {\n                    // we use the index array to access the correct indices\n                    const a: number = indexArray[y][x];\n                    const b: number = indexArray[y + 1][x];\n                    const c: number = indexArray[y + 1][x + 1];\n                    const d: number = indexArray[y][x + 1];\n                    // faces\n                    indices.push(a, b, d);\n                    indices.push(b, c, d);\n                    // update group counter\n                    groupCount += 6;\n                }\n            }\n            // add a group to the geometry. this will ensure multi material support\n            this.addGroup(groupStart, groupCount, 0);\n            // calculate new start value for groups\n            groupStart += groupCount;\n        };\n        // generate geometry\n        generateTorso();\n        if (openEnded === false) {\n            if (radiusTop > 0) generateCap(true);\n            if (radiusBottom > 0) generateCap(false);\n        }\n        // build geometry\n        this.setIndex(indices);\n        this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n        this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    }\n}\n","/*\nexport { WireframeGeometry } from './WireframeGeometry';\nexport { ParametricGeometry, ParametricBufferGeometry } from './ParametricGeometry';\nexport { TetrahedronGeometry, TetrahedronBufferGeometry } from './TetrahedronGeometry';\nexport { OctahedronGeometry, OctahedronBufferGeometry } from './OctahedronGeometry';\nexport { IcosahedronGeometry, IcosahedronBufferGeometry } from './IcosahedronGeometry';\nexport { DodecahedronGeometry, DodecahedronBufferGeometry } from './DodecahedronGeometry';\nexport { PolyhedronGeometry, PolyhedronBufferGeometry } from './PolyhedronGeometry';\nexport { TubeGeometry, TubeBufferGeometry } from './TubeGeometry';\nexport { TorusKnotGeometry, TorusKnotBufferGeometry } from './TorusKnotGeometry';\nexport { TorusGeometry, TorusBufferGeometry } from './TorusGeometry';\nexport { TextGeometry, TextBufferGeometry } from './TextGeometry';\nexport { SphereGeometry, SphereBufferGeometry } from './SphereGeometry';\nexport { RingGeometry, RingBufferGeometry } from './RingGeometry';\nexport { PlaneGeometry, PlaneBufferGeometry } from './PlaneGeometry';\nexport { LatheGeometry, LatheBufferGeometry } from './LatheGeometry';\nexport { ShapeGeometry, ShapeBufferGeometry } from './ShapeGeometry';\nexport { ExtrudeGeometry, ExtrudeBufferGeometry } from './ExtrudeGeometry';\nexport { EdgesGeometry } from './EdgesGeometry';\n*/\nexport { ConeGeometry, ConeBufferGeometry } from './ConeGeometry';\nexport { CylinderGeometry, CylinderBufferGeometry } from './CylinderGeometry';\nexport { CircleGeometry, CircleBufferGeometry } from './CircleGeometry';\nexport { BoxGeometry, BoxBufferGeometry } from './BoxGeometry';\n","import { Color } from \"../math/Color\";\nimport { Light } from \"./Light\";\n\nexport class AmbientLight extends Light {\n    public readonly type: string = \"AmbientLight\";\n    public castShadow: boolean = false;\n\n    constructor(color: Color, intensity: number) {\n        super(color, intensity);\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Color } from \"../math/Color\";\nimport { DirectionalLightShadow } from \"./DirectionalLightShadow\";\nimport { Light } from \"./Light\";\n\nexport class DirectionalLight extends Light {\n    public readonly type: string = \"DirectionalLight\";\n    public target: Object3D = new Object3D();\n    public shadow: DirectionalLightShadow = new DirectionalLightShadow();\n\n    constructor(color: Color, intensity: number) {\n        super(color, intensity);\n        this.position = Object3D.DefaultUp.clone();\n        this.updateMatrix();\n    }\n\n    public copy(source: DirectionalLight): this {\n        super.copy(source);\n        this.target = source.target.clone();\n        this.shadow = source.shadow.clone();\n        return this;\n    }\n}\n","import { OrthographicCamera } from \"../cameras/OrthographicCamera\";\nimport { LightShadow } from \"./LightShadow\";\n\nexport class DirectionalLightShadow extends LightShadow {\n    constructor() {\n        super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Color } from \"../math/Color\";\nimport { Light } from \"./Light\";\n\nexport class HemisphereLight extends Light {\n    public readonly type: string = \"HemisphereLight\";\n    public castShadow: boolean = false;\n    public groundColor: Color = null;\n\n    constructor(skyColor: Color, groundColor: Color, intensity: number) {\n        super(skyColor, intensity);\n        this.groundColor = groundColor;\n        this.position = Object3D.DefaultUp.clone();\n        this.updateMatrix();\n    }\n\n    public copy(source: HemisphereLight): this {\n        super.copy(source);\n        this.groundColor.copy(source.groundColor);\n        return this;\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Color } from \"../math/Color\";\nimport { LightShadow } from \"./LightShadow\";\n\nexport class Light extends Object3D {\n    public readonly type: string = \"Light\";\n\n    public color: Color = null;\n    public intensity: number = 1;\n    public receiveShadow: boolean = false;\n    public shadow?: LightShadow;\n    public distance?: number;\n\n    constructor(color: Color = new Color(), intensity: number = 1) {\n        super();\n        this.color = color;\n        this.intensity = intensity;\n    }\n\n    public copy(source: Light): this {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.intensity = source.intensity;\n        return this;\n    }\n}\n","import { Matrix4 } from \"../math/Matrix4\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { WebGLRenderTarget } from \"../renderers/WebGLRenderTarget\";\nimport { PerspectiveCamera } from \"../cameras/PerspectiveCamera\";\nimport { OrthographicCamera } from \"../cameras/OrthographicCamera\";\n\n/**\n * updateMatrixWorld\n * near\n * far\n * Above properties and method is needed in WebGLShadowMap.render\n */\nexport type LightShadowCamera = PerspectiveCamera | OrthographicCamera;\n\nexport class LightShadow {\n    public camera: LightShadowCamera = null;\n    public bias: number = 0;\n    public radius: number = 1;\n    public mapSize: Vector2 = new Vector2(512, 512);\n    public map: WebGLRenderTarget = null;\n    public matrix: Matrix4 = new Matrix4();\n\n    constructor(camera: LightShadowCamera) {\n        this.camera = camera;\n    }\n\n    public copy(source: LightShadow): this {\n        this.camera = source.camera.clone();\n        this.bias = source.bias;\n        this.radius = source.radius;\n        this.mapSize.copy(source.mapSize);\n        return this;\n    }\n\n    public clone(): LightShadow {\n        return new (this.constructor as new () => LightShadow)().copy(this);\n    }\n}\n","import { PerspectiveCamera } from \"../cameras/PerspectiveCamera\";\nimport { Color } from \"../math/Color\";\nimport { Light } from \"./Light\";\nimport { LightShadow } from \"./LightShadow\";\n\nexport class PointLight extends Light {\n    public readonly type: string = \"PointLight\";\n    public distance: number = 0;\n    public decay: number = 1;\n    public shadow: LightShadow = null;\n\n    constructor(\n        color: Color,\n        intensity: number,\n        distance: number = 0,\n        decay: number = 1,\n    ) {\n        super(color, intensity);\n        this.distance = distance;\n        this.decay = decay;\n        this.shadow = new LightShadow(new PerspectiveCamera(90, 1, 0.5, 500));\n    }\n\n    /**\n     * ntensity = power per solid angle.\n     * ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n     * @returns {number}\n     */\n    get power(): number {\n        return this.intensity * 4 * Math.PI;\n    }\n\n    set power(power: number) {\n        this.intensity = power / (4 * Math.PI);\n    }\n\n    public copy(source: PointLight): this {\n        super.copy(source);\n        this.distance = source.distance;\n        this.decay = source.decay;\n        this.shadow = source.shadow.clone();\n        return this;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Light } from \"./Light\";\n\nexport class RectAreaLight extends Light {\n    public readonly type: string = \"RectAreaLight\";\n    public width: number = 10;\n    public height: number = 10;\n\n    constructor(\n        color: Color,\n        intensity: number,\n        width: number = 10,\n        height: number = 10,\n    ) {\n        super(color, intensity);\n        this.width = width;\n        this.height = height;\n    }\n\n    public copy(source: RectAreaLight): this {\n        super.copy(source);\n        this.width = source.width;\n        this.height = source.height;\n        return this;\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Color } from \"../math/Color\";\nimport { Light } from \"./Light\";\nimport { SpotLightShadow } from \"./SpotLightShadow\";\n\nexport class SpotLight extends Light {\n    public readonly type: string = \"SpotLight\";\n    public target: Object3D = new Object3D();\n    public distance: number = 0;\n    public angle: number = Math.PI / 3;\n    public penumbra: number = 0;\n    public decay: number = 0;\n    public shadow: SpotLightShadow = null;\n\n    constructor(\n        color: Color,\n        intensity: number,\n        distance: number = 0,\n        angle: number = Math.PI / 3,\n        penumbra: number = 0,\n        decay: number = 1,\n    ) {\n        super(color, intensity);\n        this.position = Object3D.DefaultUp.clone();\n        this.updateMatrix();\n        this.distance = distance;\n        this.angle = angle;\n        this.penumbra = penumbra;\n        this.decay = decay;\n        this.shadow = new SpotLightShadow();\n    }\n\n    get power(): number {\n        return this.intensity * Math.PI;\n    }\n\n    set power(power: number) {\n        this.intensity = power / Math.PI;\n    }\n\n    public copy(source: SpotLight): this {\n        super.copy(source);\n        this.distance = source.distance;\n        this.angle = source.angle;\n        this.penumbra = source.penumbra;\n        this.decay = source.decay;\n        this.target = source.target.clone();\n        this.shadow = source.shadow.clone();\n        return this;\n    }\n}\n","import { PerspectiveCamera } from \"../cameras/PerspectiveCamera\";\nimport { MathUtil } from \"../math/Math\";\nimport { LightShadow } from \"./LightShadow\";\nimport { SpotLight } from \"./SpotLight\";\n\nexport class SpotLightShadow extends LightShadow {\n    constructor() {\n        super(new PerspectiveCamera(50, 1, 0.5, 500));\n    }\n\n    public update(light: SpotLight): this {\n        const camera: PerspectiveCamera = this.camera as PerspectiveCamera;\n        const fov: number = MathUtil.RAD2DEG * 2 * light.angle;\n        const aspect: number = this.mapSize.width / this.mapSize.height;\n        const far: number = light.distance || camera.far;\n        if (\n            fov !== camera.fov ||\n            aspect !== camera.aspect ||\n            far !== camera.far\n        ) {\n            camera.fov = fov;\n            camera.aspect = aspect;\n            camera.far = far;\n        }\n        return this;\n    }\n\n    public clone(): SpotLightShadow {\n        return super.clone() as SpotLightShadow;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface ILineBasicMaterialParameters extends IMaterialParameters {\n    color?: Color | number | string;\n    linewidth?: number;\n    linecap?: string;\n    linejoin?: string;\n}\n\nexport class LineBasicMaterial extends Material {\n    public readonly type: string = \"LineBasicMaterial\";\n\n    public color: Color = new Color().setHex(0xffffff);\n    public lights: boolean = false;\n    public linecap: string = \"round\";\n    public linejoin: string = \"round\";\n    public linewidth: number = 1;\n\n    constructor(parameters: ILineBasicMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: LineBasicMaterial): this {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.linewidth = source.linewidth;\n        this.linecap = source.linecap;\n        this.linejoin = source.linejoin;\n        return this;\n    }\n}\n","import {\n    ILineBasicMaterialParameters,\n    LineBasicMaterial,\n} from \"./LineBasicMaterial\";\n\nexport interface ILineDashedMaterialParameters\n    extends ILineBasicMaterialParameters {\n    dashSize?: number;\n    gapSize?: number;\n    scale?: number;\n}\n\nexport class LineDashedMaterial extends LineBasicMaterial {\n    public readonly type: string = \"LineDashedMaterial\";\n\n    public dashSize: number = 3;\n    public gapSize: number = 1;\n    public scale: number = 1;\n\n    constructor(parameters: ILineDashedMaterialParameters) {\n        super(parameters);\n        this.setValues(parameters);\n    }\n\n    public copy(source: LineDashedMaterial): this {\n        this.scale = source.scale;\n        this.dashSize = source.dashSize;\n        this.gapSize = source.gapSize;\n        return this;\n    }\n}\n","import {\n    AddEquation,\n    FlatShading,\n    FrontSide,\n    LessEqualDepth,\n    NoColors,\n    NormalBlending,\n    OneMinusSrcAlphaFactor,\n    SrcAlphaFactor,\n} from \"../constants\";\nimport { EventDispatcher } from \"../core/EventDispatcher\";\nimport { Color } from \"../math/Color\";\nimport { MathUtil } from \"../math/Math\";\nimport { Plane } from \"../math/Plane\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { CubeTexture } from \"../textures/CubeTexture\";\nimport { Texture } from \"../textures/Texture\";\n\nlet materialId: number = 0;\n\nexport interface IMaterialParameters {\n    alphaTest?: number;\n    blending?: number;\n    blendDst?: number;\n    blendDstAlpha?: number;\n    blendEquation?: number;\n    blendEquationAlpha?: number;\n    blendSrc?: number;\n    blendSrcAlpha?: number;\n    clipIntersection?: boolean;\n    clippingPlanes?: Plane[];\n    clipShadows?: boolean;\n    colorWrite?: boolean;\n    depthFunc?: number;\n    depthTest?: boolean;\n    depthWrite?: boolean;\n    dithering?: boolean;\n    flatShading?: boolean;\n    fog?: boolean;\n    lights?: boolean;\n    name?: string;\n    needsUpdate?: boolean;\n    opacity?: number;\n    overdraw?: number;\n    polygonOffset?: boolean;\n    polygonOffsetFactor?: number;\n    polygonOffsetUnits?: number;\n    precision?: string;\n    premultipliedAlpha?: boolean;\n    shadowSide?: number;\n    side?: number;\n    transparent?: boolean;\n    userData?: object;\n    vertexColors?: number;\n    visible?: boolean;\n}\n\nexport class Material extends EventDispatcher {\n    public readonly id: number = materialId++;\n    public readonly uuid: string = MathUtil.generateUUID();\n    public readonly type: string = \"Material\";\n\n    public alphaTest: number = 0;\n\n    public blending: number = NormalBlending;\n    public blendDst: number = OneMinusSrcAlphaFactor;\n    public blendDstAlpha: number = null;\n    public blendEquation: number = AddEquation;\n    public blendEquationAlpha: number = null;\n    public blendSrc: number = SrcAlphaFactor;\n    public blendSrcAlpha: number = null;\n\n    public clipIntersection: boolean = false;\n    public clippingPlanes: Plane[] = [];\n    public clipShadows: boolean = false;\n\n    public colorWrite: boolean = true;\n\n    public depthFunc: number = LessEqualDepth;\n    public depthTest: boolean = true;\n    public depthWrite: boolean = true;\n\n    public dithering: boolean = false;\n    public flatShading: boolean = false;\n    public fog: boolean = true;\n    public lights: boolean = true;\n    /**\n     * For mesh type extension\n     */\n    public morphTargets: boolean = false;\n    public name: string = \"\";\n    public needsUpdate: boolean = true;\n    public opacity: number = 1;\n    public overdraw: number = 0;\n\n    public onBeforeCompile: (shader?: WebGLShader) => any;\n\n    public polygonOffset: boolean = false;\n    public polygonOffsetFactor: number = 0;\n    public polygonOffsetUnits: number = 0;\n\n    /**\n     * override the renderer's default precision for this material\n     * \"highp\", \"mediump\" or \"lowp\"\n     * @type {string}\n     */\n    public precision: string = null;\n    public premultipliedAlpha: boolean = false;\n\n    /**\n     * For WebGLRenderList\n     */\n    public program?: any = null;\n\n    /**\n     * THREE.FrontSide  back side\n     * THREE.BackSide   front side\n     * THREE.DoubleSide both sides\n     * @type {number}\n     */\n    public shadowSide: number = null;\n    public side: number = FrontSide;\n    public transparent: boolean = false;\n    public userData: object = {};\n\n    /**\n     * THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n     */\n    public vertexColors: number = NoColors;\n\n    /**\n     * Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n     * @type {number}\n     */\n    public visible: boolean = true;\n\n    public alphaMap?: Texture;\n    public aoMap?: Texture;\n    public bumpMap?: Texture;\n    public combine?: number;\n    public defines?: { [key: string]: object };\n    public depthPacking?: number;\n    public displacementMap?: Texture;\n    public emissiveMap?: Texture;\n    public envMap?: CubeTexture;\n    public extensions?: { [key: string]: boolean };\n    public fragmentShader?: string;\n    public gradientMap?: Texture;\n    public index0AttributeName?: string;\n    public lightMap?: Texture;\n    public linewidth?: number;\n    public map?: Texture;\n    public metalnessMap?: Texture;\n    public morphNormals?: boolean;\n    public normalMap?: Texture;\n    public roughnessMap?: Texture;\n    public sizeAttenuation?: boolean;\n    public skinning?: boolean;\n    public specularMap?: Texture;\n    public vertexShader?: string;\n    public wireframe?: boolean;\n    public wireframeLinewidth?: number;\n\n    public setValues(values: IMaterialParameters): this {\n        if (values === undefined) return this;\n        for (const key in values) {\n            if (!values.hasOwnProperty(key)) continue;\n            const newValue = values[key];\n            if (newValue === undefined) {\n                console.warn(\n                    `THREE.Material: \"${key}\" parameter is undefined.`,\n                );\n                continue;\n            }\n            /**\n             * for backward compatability if shading is set in the constructor\n             */\n            if (key === \"shading\") {\n                console.warn(\n                    `THREE.${\n                        this.type\n                    }: .shading has been removed. Use the boolean .flatShading instead.`,\n                );\n                this.flatShading = newValue === FlatShading;\n                continue;\n            }\n\n            const currentValue = this[key];\n            if (currentValue === undefined) {\n                console.warn(\n                    `THREE.${\n                        this.type\n                    }: \"${key}\" is not a property of this material.`,\n                );\n                continue;\n            }\n            if (currentValue && currentValue instanceof Color) {\n                if (newValue instanceof Color) currentValue.copy(newValue);\n                else if (typeof newValue === \"number\") {\n                    currentValue.setHex(newValue);\n                } else if (typeof newValue === \"string\") {\n                    currentValue.setStyle(newValue);\n                }\n            } else if (\n                currentValue &&\n                currentValue instanceof Vector3 &&\n                (newValue && newValue instanceof Vector3)\n            ) {\n                currentValue.copy(newValue);\n            } else if (key === \"overdraw\") {\n                /**\n                 * ensure overdraw is backwards-compatible with legacy boolean type\n                 * @type {Number}\n                 */\n                this[key] = Number(newValue);\n            } else {\n                this[key] = newValue;\n            }\n        }\n        return this;\n    }\n\n    public clone(): Material {\n        return new (this.constructor as new () => Material)().copy(this);\n    }\n\n    public copy(source: Material): this {\n        this.name = source.name;\n        this.fog = source.fog;\n        this.lights = source.lights;\n        this.blending = source.blending;\n        this.side = source.side;\n        this.flatShading = source.flatShading;\n        this.vertexColors = source.vertexColors;\n        this.opacity = source.opacity;\n        this.transparent = source.transparent;\n        this.blendSrc = source.blendSrc;\n        this.blendDst = source.blendDst;\n        this.blendEquation = source.blendEquation;\n        this.blendSrcAlpha = source.blendSrcAlpha;\n        this.blendDstAlpha = source.blendDstAlpha;\n        this.blendEquationAlpha = source.blendEquationAlpha;\n        this.depthFunc = source.depthFunc;\n        this.depthTest = source.depthTest;\n        this.depthWrite = source.depthWrite;\n        this.colorWrite = source.colorWrite;\n        this.precision = source.precision;\n        this.polygonOffset = source.polygonOffset;\n        this.polygonOffsetFactor = source.polygonOffsetFactor;\n        this.polygonOffsetUnits = source.polygonOffsetUnits;\n        this.dithering = source.dithering;\n        this.alphaTest = source.alphaTest;\n        this.premultipliedAlpha = source.premultipliedAlpha;\n        this.overdraw = source.overdraw;\n        this.visible = source.visible;\n        this.userData = JSON.parse(JSON.stringify(source.userData));\n        this.clipShadows = source.clipShadows;\n        this.clipIntersection = source.clipIntersection;\n        const srcPlanes: Plane[] = source.clippingPlanes;\n        let dstPlanes: Plane[] = null;\n        if (srcPlanes !== null) {\n            const n: number = srcPlanes.length;\n            dstPlanes = new Array(n);\n            for (let i: number = 0; i !== n; ++i) {\n                dstPlanes[i] = srcPlanes[i].clone();\n            }\n        }\n        this.clippingPlanes = dstPlanes;\n        this.shadowSide = source.shadowSide;\n        return this;\n    }\n\n    public dispose(): void {\n        this.dispatchEvent({ type: \"dispose\" });\n    }\n}\n","import { MultiplyOperation } from \"../constants\";\nimport { Color } from \"../math/Color\";\nimport { CubeTexture } from \"../textures/CubeTexture\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IMeshBasicMaterialParameter extends IMaterialParameters {\n    alphaMap?: Texture;\n    aoMap?: Texture;\n    aoMapIntensity?: number;\n    color?: Color | number | string;\n    combine?: number;\n    envMap?: CubeTexture;\n    lightMap?: Texture;\n    lightMapIntensity?: number;\n    map?: Texture;\n    morphTargets?: boolean;\n    reflectivity?: number;\n    refractionRatio?: number;\n    skinning?: boolean;\n    specularMap?: Texture;\n    wireframe?: boolean;\n    wireframeLinecap?: string;\n    wireframeLinejoin?: string;\n    wireframeLinewidth?: number;\n}\n\nexport class MeshBasicMaterial extends Material {\n    public readonly type: string = \"MeshBasicMaterial\";\n\n    public alphaMap: Texture = null;\n    public aoMap: Texture = null;\n    public aoMapIntensity: number = 1.0;\n    public color: Color = new Color().setHex(0xffffff);\n    public combine: number = MultiplyOperation;\n    public envMap: CubeTexture = null;\n    public lights: boolean = false;\n    public lightMap: Texture = null;\n    public lightMapIntensity: number = 1.0;\n    public map: Texture = null;\n    public morphTargets: boolean = false;\n    public reflectivity: number = 1;\n    public refractionRatio: number = 0.98;\n    public skinning: boolean = false;\n    public specularMap: Texture = null;\n    public wireframe: boolean = false;\n    public wireframeLinecap: string = \"round\";\n    public wireframeLinejoin: string = \"round\";\n    public wireframeLinewidth: number = 1;\n\n    constructor(parameters: IMeshBasicMaterialParameter) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: MeshBasicMaterial): this {\n        super.copy(source);\n        this.color.copy(source.color);\n\n        this.map = source.map;\n\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n\n        this.specularMap = source.specularMap;\n\n        this.alphaMap = source.alphaMap;\n\n        this.envMap = source.envMap;\n        this.combine = source.combine;\n        this.reflectivity = source.reflectivity;\n        this.refractionRatio = source.refractionRatio;\n\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n\n        return this;\n    }\n}\n","import { BasicDepthPacking } from \"../constants\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IMeshDepthMaterialParameters extends IMaterialParameters {\n    alphaMap?: Texture;\n    depthPacking?: number;\n    displacementMap?: Texture;\n    displacementScale?: number;\n    displacementBias?: number;\n    map?: Texture;\n    morphTargets?: boolean;\n    skinning?: boolean;\n    wireframe?: boolean;\n    wireframeLinewidth?: number;\n}\n\nexport class MeshDepthMaterial extends Material {\n    public readonly type: string = \"MeshDepthMaterial\";\n\n    public alphaMap: Texture = null;\n    public depthPacking: number = BasicDepthPacking;\n    public displacementMap: Texture = null;\n    public displacementScale: number = 1;\n    public displacementBias: number = 0;\n\n    public fog: boolean = false;\n    public lights: boolean = false;\n\n    public map: Texture = null;\n    public morphTargets: boolean = false;\n    public skinning: boolean = false;\n    public wireframe: boolean = false;\n    public wireframeLinewidth: number = 1;\n\n    constructor(parameters: IMeshDepthMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: MeshDepthMaterial): this {\n        super.copy(source);\n        this.depthPacking = source.depthPacking;\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        this.map = source.map;\n        this.alphaMap = source.alphaMap;\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        return this;\n    }\n}\n","import { BasicDepthPacking } from \"../constants\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IMeshDistanceMaterialParameters extends IMaterialParameters {\n    alphaMap?: Texture;\n    displacementMap?: Texture;\n    displacementScale?: number;\n    displacementBias?: number;\n    farDistance?: number;\n    map?: Texture;\n    morphTargets?: boolean;\n    nearDistance?: number;\n    referencePosition?: Vector3;\n    skinning?: boolean;\n}\n\nexport class MeshDistanceMaterial extends Material {\n    public readonly type: string = \"MeshDepthMaterial\";\n\n    public alphaMap: Texture = null;\n    public displacementMap: Texture = null;\n    public displacementScale: number = 1;\n    public displacementBias: number = 0;\n\n    public farDistance: number = 1;\n    public fog: boolean = false;\n    public lights: boolean = false;\n\n    public map: Texture = null;\n    public morphTargets: boolean = false;\n    public nearDistance: number = 1;\n    public referencePosition: Vector3 = new Vector3();\n    public skinning: boolean = false;\n\n    constructor(parameters: IMeshDistanceMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: MeshDistanceMaterial): this {\n        super.copy(source);\n        this.referencePosition.copy(source.referencePosition);\n        this.nearDistance = source.nearDistance;\n        this.farDistance = source.farDistance;\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        this.map = source.map;\n        this.alphaMap = source.alphaMap;\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n        return this;\n    }\n}\n","import { MultiplyOperation } from \"../constants\";\nimport { Color } from \"../math/Color\";\nimport { CubeTexture } from \"../textures/CubeTexture\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IMeshLambertMaterialParameters extends IMaterialParameters {\n    aoMap?: Texture;\n    aoMapIntensity?: number;\n    alphaMap?: Texture;\n    color?: Color | number | string;\n    combine?: number;\n    emissive?: Color | number | string;\n    emissiveIntensity?: number;\n    emissiveMap?: Texture;\n    envMap?: CubeTexture;\n    map?: Texture;\n    morphNormals?: boolean;\n    morphTargets?: boolean;\n    lightMap?: Texture;\n    lightMapIntensity?: number;\n    skinning?: boolean;\n    specularMap?: Texture;\n    reflectivity?: number;\n    refractionRatio?: number;\n    wireframe?: boolean;\n    wireframeLinecap?: string;\n    wireframeLinejoin?: string;\n    wireframeLinewidth?: number;\n}\n\nexport class MeshLambertMaterial extends Material {\n    public readonly type: string = \"MeshLambertMaterial\";\n\n    public aoMap: Texture = null;\n    public aoMapIntensity: number = 1;\n\n    public alphaMap: Texture = null;\n\n    public color: Color = new Color().setHex(0xffffff);\n    public combine: number = MultiplyOperation;\n\n    public emissive: Color = new Color().setHex(0x000000);\n    public emissiveIntensity: number = 1;\n    public emissiveMap: Texture = null;\n    public envMap: CubeTexture = null;\n\n    public map: Texture = null;\n    public morphNormals: boolean = true;\n    public morphTargets: boolean = true;\n\n    public lightMap: Texture = null;\n    public lightMapIntensity: number = 1;\n\n    public skinning: boolean = false;\n    public specularMap: Texture = null;\n\n    public reflectivity: number = 1;\n    public refractionRatio: number = 0.98;\n\n    public wireframe: boolean = false;\n    public wireframeLinecap: string = \"round\";\n    public wireframeLinejoin: string = \"round\";\n    public wireframeLinewidth: number = 1;\n\n    constructor(parameters: IMeshLambertMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: MeshLambertMaterial): this {\n        super.copy(source);\n        this.color.copy(source.color);\n\n        this.map = source.map;\n\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n\n        this.emissive.copy(source.emissive);\n        this.emissiveMap = source.emissiveMap;\n        this.emissiveIntensity = source.emissiveIntensity;\n\n        this.specularMap = source.specularMap;\n\n        this.alphaMap = source.alphaMap;\n\n        this.envMap = source.envMap;\n        this.combine = source.combine;\n        this.reflectivity = source.reflectivity;\n        this.refractionRatio = source.refractionRatio;\n\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        this.morphNormals = source.morphNormals;\n\n        return this;\n    }\n}\n","import { Vector2 } from \"../math/Vector2\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IMeshNormalMaterialParameters extends IMaterialParameters {\n    bumpMap?: Texture;\n    bumpScale?: number;\n    normalMap?: Texture;\n    normalScale?: Vector2;\n    displacementMap?: Texture;\n    displacementScale?: number;\n    displacementBias?: number;\n    wireframe?: boolean;\n    wireframeLinewidth?: number;\n    skinning?: boolean;\n    morphTargets?: boolean;\n    morphNormals?: boolean;\n}\n\nexport class MeshNormalMaterial extends Material {\n    public readonly type: string = \"MeshNormalMaterial\";\n\n    public bumpMap: Texture = null;\n    public bumpScale: number = 1;\n\n    public normalMap: Texture = null;\n    public normalScale: Vector2 = new Vector2(1, 1);\n\n    public displacementMap: Texture = null;\n    public displacementScale: number = 1;\n    public displacementBias: number = 0;\n\n    public wireframe: boolean = false;\n    public wireframeLinewidth: number = 1;\n\n    public fog: boolean = false;\n    public lights: boolean = false;\n\n    public skinning: boolean = false;\n    public morphTargets: boolean = false;\n    public morphNormals: boolean = false;\n\n    constructor(paramenters: IMeshNormalMaterialParameters) {\n        super();\n        this.setValues(paramenters);\n    }\n}\n","import { MultiplyOperation } from \"../constants\";\nimport { Color } from \"../math/Color\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { CubeTexture } from \"../textures/CubeTexture\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IMeshPhongMaterialParameters extends IMaterialParameters {\n    alphaMap?: Texture;\n    aoMap?: Texture;\n    aoMapIntensity?: number;\n    bumpMap?: Texture;\n    bumpScale?: number;\n    color?: Color | number | string;\n    combine?: number;\n    displacementBias?: number;\n    displacementMap?: Texture;\n    displacementScale?: number;\n    emissive?: Color | number | string;\n    emissiveIntensity?: number;\n    emissiveMap?: Texture;\n    envMap?: CubeTexture;\n    lightMap?: Texture;\n    lightMapIntensity?: number;\n    map?: Texture;\n    morphNormals?: boolean;\n    morphTargets?: boolean;\n    normalMap?: Texture;\n    normalScale?: Vector2;\n    reflectivity?: number;\n    refractionRatio?: number;\n    shininess?: number;\n    skinning?: boolean;\n    specular?: Color | number | string;\n    specularMap?: Texture;\n    wireframe?: boolean;\n    wireframeLinecap?: string;\n    wireframeLinejoin?: string;\n    wireframeLinewidth?: number;\n}\n/**\n * parameters = {\n *  color: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\nexport class MeshPhongMaterial extends Material {\n    public readonly type: string = \"MeshPhongMaterial\";\n\n    public alphaMap: Texture = null;\n    public aoMap: Texture = null;\n    public aoMapIntensity: number = 1.0;\n    public bumpMap: Texture = null;\n    public bumpScale: number = 1;\n    public color: Color = new Color().setHex(0xffffff);\n    public combine: number = MultiplyOperation;\n    public displacementBias: number = 0;\n    public displacementMap: Texture = null;\n    public displacementScale: number = 1;\n    public emissive: Color = new Color().setHex(0x000000);\n    public emissiveIntensity: number = 1.0;\n    public emissiveMap: Texture = null;\n    public envMap: CubeTexture = null;\n    public lightMap: Texture = null;\n    public lightMapIntensity: number = 1.0;\n    public map: Texture = null;\n    public morphNormals: boolean = false;\n    public morphTargets: boolean = false;\n    public normalMap: Texture = null;\n    public normalScale: Vector2 = new Vector2(1, 1);\n    public reflectivity: number = 1;\n    public refractionRatio: number = 0.98;\n    public shininess: number = 30;\n    public skinning: boolean = false;\n    public specular: Color = new Color().setHex(0x111111);\n    public specularMap: Texture = null;\n    public wireframe: boolean = false;\n    public wireframeLinecap: string = \"round\";\n    public wireframeLinejoin: string = \"round\";\n    public wireframeLinewidth: number = 1;\n\n    constructor(parameters: IMeshPhongMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: MeshPhongMaterial): this {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.specular.copy(source.specular);\n        this.shininess = source.shininess;\n\n        this.map = source.map;\n\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n\n        this.emissive.copy(source.emissive);\n        this.emissiveMap = source.emissiveMap;\n        this.emissiveIntensity = source.emissiveIntensity;\n\n        this.bumpMap = source.bumpMap;\n        this.bumpScale = source.bumpScale;\n\n        this.normalMap = source.normalMap;\n        this.normalScale.copy(source.normalScale);\n\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n\n        this.specularMap = source.specularMap;\n\n        this.alphaMap = source.alphaMap;\n\n        this.envMap = source.envMap;\n        this.combine = source.combine;\n        this.reflectivity = source.reflectivity;\n        this.refractionRatio = source.refractionRatio;\n\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        this.morphNormals = source.morphNormals;\n        return this;\n    }\n}\n","import { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IMeshPhysicalMaterialParameters extends IMaterialParameters {\n    clearCoat?: number;\n    clearCoatRoughness?: number;\n    reflectivity?: number;\n}\n\nexport class MeshPhysicalMaterial extends Material {\n    public readonly type: string = \"MeshPhysicalMaterial\";\n\n    // maps to F0 = 0.04\n    public clearCoat: number = 0.0;\n    public clearCoatRoughness: number = 0.0;\n    public defines: { [key: string]: any } = { PHYSICAL: \"\" };\n    public reflectivity: number = 0.5;\n\n    constructor(parameters: IMeshPhysicalMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: MeshPhysicalMaterial): this {\n        this.defines = { PHYSICAL: \"\" };\n        this.reflectivity = source.reflectivity;\n        this.clearCoat = source.clearCoat;\n        this.clearCoatRoughness = source.clearCoatRoughness;\n        return this;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { CubeTexture } from \"../textures/CubeTexture\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IMeshStandardMaterialParameters extends IMaterialParameters {\n    alphaMap?: Texture;\n    aoMap?: Texture;\n    aoMapIntensity?: number;\n    bumpMap?: Texture;\n    bumpScale?: number;\n    color?: Color | number | string;\n    displacementBias?: number;\n    displacementMap?: Texture;\n    displacementScale?: number;\n    emissive?: Color | number | string;\n    emissiveIntensity?: number;\n    emissiveMap?: Texture;\n    envMap?: CubeTexture;\n    envMapIntensity?: number;\n    lightMap?: Texture;\n    lightMapIntensity?: number;\n    map?: Texture;\n    metalness?: number;\n    metalnessMap?: Texture;\n    morphNormals?: boolean;\n    morphTargets?: boolean;\n    normalMap?: Texture;\n    normalScale?: Vector2;\n    refractionRatio?: number;\n    roughness?: number;\n    roughnessMap?: Texture;\n    skinning?: boolean;\n    wireframe?: boolean;\n    wireframeLinecap?: string;\n    wireframeLinejoin?: string;\n    wireframeLinewidth?: number;\n}\n\n/**\n *\n * parameters = {\n *  color: <hex>,\n *  roughness: <float>,\n *  metalness: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  roughnessMap: new THREE.Texture( <Image> ),\n *\n *  metalnessMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  envMapIntensity: <float>\n *\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nexport class MeshStandardMaterial extends Material {\n    public readonly type: string = \"MeshStandardMaterial\";\n\n    public alphaMap: Texture = null;\n    public aoMap: Texture = null;\n    public aoMapIntensity: number = 1.0;\n    public bumpMap: Texture = null;\n    public bumpScale: number = 1;\n    public color: Color = new Color().setHex(0xffffff);\n    public defines: { [key: string]: any } = { STANDARD: \"\" };\n    public displacementBias: number = 0;\n    public displacementMap: Texture = null;\n    public displacementScale: number = 1;\n    public emissive: Color = new Color().setHex(0x000000);\n    public emissiveIntensity: number = 1.0;\n    public emissiveMap: Texture = null;\n    public envMap: CubeTexture = null;\n    public envMapIntensity: number = 1.0;\n    public lightMap: Texture = null;\n    public lightMapIntensity: number = 1.0;\n    public map: Texture = null;\n    public metalness: number = 0.5;\n    public metalnessMap: Texture = null;\n    public morphNormals: boolean = false;\n    public morphTargets: boolean = false;\n    public normalMap: Texture = null;\n    public normalScale: Vector2 = new Vector2(1, 1);\n    public refractionRatio: number = 0.98;\n    public roughness: number = 0.5;\n    public roughnessMap: Texture = null;\n    public skinning: boolean = false;\n    public wireframe: boolean = false;\n    public wireframeLinecap: string = \"round\";\n    public wireframeLinejoin: string = \"round\";\n    public wireframeLinewidth: number = 1;\n\n    constructor(parameters: IMeshStandardMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: MeshStandardMaterial): this {\n        super.copy(source);\n        this.defines = { STANDARD: \"\" };\n        this.color.copy(source.color);\n        this.roughness = source.roughness;\n        this.metalness = source.metalness;\n\n        this.map = source.map;\n\n        this.lightMap = source.lightMap;\n        this.lightMapIntensity = source.lightMapIntensity;\n\n        this.aoMap = source.aoMap;\n        this.aoMapIntensity = source.aoMapIntensity;\n\n        this.emissive.copy(source.emissive);\n        this.emissiveMap = source.emissiveMap;\n        this.emissiveIntensity = source.emissiveIntensity;\n\n        this.bumpMap = source.bumpMap;\n        this.bumpScale = source.bumpScale;\n\n        this.normalMap = source.normalMap;\n        this.normalScale.copy(source.normalScale);\n\n        this.displacementMap = source.displacementMap;\n        this.displacementScale = source.displacementScale;\n        this.displacementBias = source.displacementBias;\n\n        this.roughnessMap = source.roughnessMap;\n\n        this.metalnessMap = source.metalnessMap;\n\n        this.alphaMap = source.alphaMap;\n\n        this.envMap = source.envMap;\n        this.envMapIntensity = source.envMapIntensity;\n\n        this.refractionRatio = source.refractionRatio;\n\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n        this.wireframeLinecap = source.wireframeLinecap;\n        this.wireframeLinejoin = source.wireframeLinejoin;\n\n        this.skinning = source.skinning;\n        this.morphTargets = source.morphTargets;\n        this.morphNormals = source.morphNormals;\n        return this;\n    }\n}\n","import { Texture } from \"../textures/Texture\";\nimport {\n    IMeshPhongMaterialParameters,\n    MeshPhongMaterial,\n} from \"./MeshPhongMaterial\";\n\nexport interface IMeshToonMaterialParameters\n    extends IMeshPhongMaterialParameters {\n    gradientMap?: Texture;\n}\n\nexport class MeshToonMaterial extends MeshPhongMaterial {\n    public readonly type: string = \"MeshToonMaterial\";\n\n    public defines: { [key: string]: any } = { TOON: \"\" };\n    public gradientMap: Texture = null;\n\n    constructor(parameters: IMeshPhongMaterialParameters) {\n        super(parameters);\n        this.setValues(parameters);\n    }\n\n    public copy(source: MeshToonMaterial): this {\n        super.copy(source);\n        this.gradientMap = source.gradientMap;\n        return this;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IPointsMaterialParameters extends IMaterialParameters {\n    color?: Color | number | string;\n    map?: Texture;\n    size?: number;\n    sizeAttenuation?: boolean;\n}\n\nexport class PointsMaterial extends Material {\n    public readonly type: string = \"PointsMaterial\";\n\n    public color: Color = new Color().setHex(0xffffff);\n    public lights: boolean = false;\n    public map: Texture = null;\n    public size: number = 1;\n    public sizeAttenuation: boolean = true;\n\n    constructor(parameters: IPointsMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: PointsMaterial): this {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.map = source.map;\n        this.size = source.size;\n        this.sizeAttenuation = source.sizeAttenuation;\n        return this;\n    }\n}\n","import { IUniform, UniformsUtils } from \"../renderers/shaders/UniformsUtils\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IShaderMaterialParameters extends IMaterialParameters {\n    clipping?: boolean;\n    fog?: boolean;\n    fragmentShader?: string;\n    index0AttributeName?: string;\n    linewidth?: number;\n    morphNormals?: boolean;\n    morphTargets?: boolean;\n    skinning?: boolean;\n    vertexShader?: string;\n    wireframe?: boolean;\n    wireframeLinewidth?: number;\n}\n\nexport class ShaderMaterial extends Material {\n    public readonly type: string = \"ShaderMaterial\";\n\n    public defines: { [key: string]: any } = {};\n    public uniforms: { [key: string]: IUniform } = {};\n\n    public vertexShader: string = `void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}`;\n    public fragmentShader: string = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n    public linewidth: number = 1;\n    public wireframe: boolean = false;\n    public wireframeLinewidth: number = 1;\n\n    public fog: boolean = false; // set to use scene fog\n    public lights: boolean = false; // set to use scene lights\n    public clipping: boolean = false; // set to use user-defined clipping planes\n\n    public skinning: boolean = false; // set to use skinning attribute streams\n    public morphTargets: boolean = false; // set to use morph targets\n    public morphNormals: boolean = false; // set to use morph normals\n\n    public extensions: { [key: string]: boolean } = {\n        derivatives: false, // set to use derivatives\n        drawBuffers: false, // set to use draw buffers\n        fragDepth: false, // set to use fragment depth values\n        shaderTextureLOD: false, // set to use shader texture LOD\n    };\n\n    // When rendered geometry doesn't include these attributes but the material does,\n    // use these default values in WebGL. This avoids errors when buffer data is missing.\n    public defaultAttributeValues: { [key: string]: number[] } = {\n        color: [1, 1, 1],\n        uv: [0, 0],\n        uv2: [0, 0],\n    };\n\n    /**\n     * TODO: WebGLProgram undefined check change\n     */\n    public index0AttributeName: string = null;\n\n    constructor(parameters: IShaderMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: ShaderMaterial): this {\n        this.fragmentShader = source.fragmentShader;\n        this.vertexShader = source.vertexShader;\n\n        this.uniforms = UniformsUtils.clone(source.uniforms);\n\n        this.defines = source.defines;\n\n        this.wireframe = source.wireframe;\n        this.wireframeLinewidth = source.wireframeLinewidth;\n\n        this.lights = source.lights;\n        this.clipping = source.clipping;\n\n        this.skinning = source.skinning;\n\n        this.morphTargets = source.morphTargets;\n        this.morphNormals = source.morphNormals;\n\n        this.extensions = source.extensions;\n\n        return this;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface IShadowMaterialParameters extends IMaterialParameters {\n    color?: Color | number | string;\n}\n\nexport class ShadowMaterial extends Material {\n    public readonly type: string = \"ShadowMaterial\";\n\n    public color: Color = new Color().setHex(0x000000);\n    public transparent: boolean = true;\n\n    constructor(parameters: IShadowMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: ShadowMaterial): this {\n        super.copy(source);\n        this.color.copy(source.color);\n        return this;\n    }\n}\n","import { Color } from \"../math/Color\";\nimport { Texture } from \"../textures/Texture\";\nimport { IMaterialParameters, Material } from \"./Material\";\n\nexport interface ISpriteMaterialParameters extends IMaterialParameters {\n    color?: Color | number | string;\n    fog?: boolean;\n    map?: Texture;\n    rotation?: number;\n}\n\nexport class SpriteMaterial extends Material {\n    public readonly type: string = \"SpriteMaterial\";\n\n    public color: Color = new Color().setHex(0xffffff);\n    public fog: boolean = false;\n    public lights: boolean = false;\n    public map: Texture = null;\n    public rotation: number = 0;\n\n    constructor(parameters?: ISpriteMaterialParameters) {\n        super();\n        this.setValues(parameters);\n    }\n\n    public copy(source: SpriteMaterial): this {\n        super.copy(source);\n        this.color.copy(source.color);\n        this.map = source.map;\n        this.rotation = source.rotation;\n        return this;\n    }\n}\n","import { Matrix4 } from \"./Matrix4\";\nimport { Plane } from \"./Plane\";\nimport { Sphere } from \"./Sphere\";\nimport { Vector3 } from \"./Vector3\";\nimport { vectorFromBufferAttribute } from \"../utils\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { BufferAttribute } from \"../core/BufferAttribute\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Mesh } from \"../objects/Mesh\";\nimport { Line } from \"../objects/Line\";\nimport { LineLoop } from \"../objects/LineLoop\";\nimport { LineSegments } from \"../objects/LineSegments\";\nimport { Points } from \"../objects/Points\";\n\nexport type ObjectWithGeometry = Mesh | Line | LineLoop | LineSegments | Points;\n\nexport class Box3 {\n    public min: Vector3 = new Vector3(+Infinity, +Infinity, +Infinity);\n    public max: Vector3 = new Vector3(-Infinity, -Infinity, -Infinity);\n\n    constructor(\n        min: Vector3 = new Vector3(+Infinity, +Infinity, +Infinity),\n        max: Vector3 = new Vector3(-Infinity, -Infinity, -Infinity),\n    ) {\n        this.max = max;\n        this.min = min;\n    }\n\n    public set(min: Vector3, max: Vector3): this {\n        this.min.copy(min);\n        this.max.copy(max);\n        return this;\n    }\n\n    public setFromArray(array: number[]): this {\n        let minX: number = +Infinity,\n            minY: number = +Infinity,\n            minZ: number = +Infinity;\n        let maxX: number = -Infinity,\n            maxY: number = -Infinity,\n            maxZ: number = -Infinity;\n        for (let i: number = 0, l: number = array.length; i < l; i += 3) {\n            const x: number = array[i],\n                y: number = array[i + 1],\n                z: number = array[i + 2];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (z < minZ) minZ = z;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            if (z > maxZ) maxZ = z;\n        }\n        this.min.set(minX, minY, minZ);\n        this.max.set(maxX, maxY, maxZ);\n        return this;\n    }\n\n    public setFromPoints(points: Vector3[]): this {\n        this.makeEmpty();\n        for (let i: number = 0, il: number = points.length; i < il; i++) {\n            this.expandByPoint(points[i]);\n        }\n        return this;\n    }\n\n    public setFromCenterAndSize(center: Vector3, size: Vector3): this {\n        const halfSize: Vector3 = new Vector3().copy(size).multiplyScalar(0.5);\n        this.min.copy(center).sub(halfSize);\n        this.max.copy(center).add(halfSize);\n        return this;\n    }\n\n    public setFromObject(object: ObjectWithGeometry): this {\n        this.makeEmpty();\n        return this.expandByObject(object);\n    }\n\n    public clone(): Box3 {\n        return new (this.constructor as new () => Box3)().copy(this);\n    }\n\n    public copy(box: Box3): this {\n        this.min.copy(box.min);\n        this.max.copy(box.max);\n        return this;\n    }\n\n    public makeEmpty(): this {\n        this.min.x = this.min.y = this.min.z = +Infinity;\n        this.max.x = this.max.y = this.max.z = -Infinity;\n        return this;\n    }\n\n    /**\n     * this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n     * @returns {boolean}\n     */\n    public isEmpty(): boolean {\n        return (\n            this.max.x < this.min.x ||\n            this.max.y < this.min.y ||\n            this.max.z < this.min.z\n        );\n    }\n\n    public getCenter(): Vector3 {\n        const result: Vector3 = new Vector3();\n        return this.isEmpty()\n            ? result.set(0, 0, 0)\n            : result\n                  .copy(this.min)\n                  .add(this.max)\n                  .multiplyScalar(0.5);\n    }\n\n    public getSize(): Vector3 {\n        const result = new Vector3();\n        return this.isEmpty()\n            ? result.set(0, 0, 0)\n            : result.copy(this.max).sub(this.min);\n    }\n\n    public expandByPoint(point: Vector3): this {\n        this.min.min(point);\n        this.max.max(point);\n        return this;\n    }\n\n    public expandByVector(vector: Vector3): this {\n        this.min.sub(vector);\n        this.max.add(vector);\n        return this;\n    }\n\n    public expandByScalar(scalar: number): this {\n        this.min.addScalar(-scalar);\n        this.max.addScalar(scalar);\n        return this;\n    }\n\n    /**\n     * TODO expandByObject\n     * @param object\n     * @returns {Box3}\n     */\n    public expandByObject(object: ObjectWithGeometry): this {\n        // Computes the world-axis-aligned bounding box of an object (including its children),\n        // accounting for both the object's, and children's, world transforms\n        const traverse = (node: ObjectWithGeometry) => {\n            const geometry: Geometry | BufferGeometry = node.geometry;\n            if (geometry !== undefined) {\n                if (geometry instanceof Geometry) {\n                    const vertices: Vector3[] = geometry.vertices;\n                    for (\n                        let i: number = 0, l: number = vertices.length;\n                        i < l;\n                        i++\n                    ) {\n                        const v1: Vector3 = new Vector3().copy(vertices[i]);\n                        v1.applyMatrix4(node.matrixWorld);\n                        this.expandByPoint(v1);\n                    }\n                } else if (geometry instanceof BufferGeometry) {\n                    const attribute: BufferAttribute =\n                        geometry.attributes.position;\n                    if (attribute !== undefined) {\n                        for (\n                            let i: number = 0, l: number = attribute.count;\n                            i < l;\n                            i++\n                        ) {\n                            const v1: Vector3 = vectorFromBufferAttribute(\n                                new Vector3(),\n                                attribute,\n                                i,\n                            ).applyMatrix4(node.matrixWorld);\n                            this.expandByPoint(v1);\n                        }\n                    }\n                }\n            }\n        };\n        object.updateMatrixWorld(true);\n        object.traverse(traverse);\n        return this;\n    }\n\n    public containsPoint(point: Vector3): boolean {\n        return !(\n            point.x < this.min.x ||\n            point.x > this.max.x ||\n            point.y < this.min.y ||\n            point.y > this.max.y ||\n            point.z < this.min.z ||\n            point.z > this.max.z\n        );\n    }\n\n    public containsBox(box: Box3): boolean {\n        return (\n            this.min.x <= box.min.x &&\n            box.max.x <= this.max.x &&\n            this.min.y <= box.min.y &&\n            box.max.y <= this.max.y &&\n            this.min.z <= box.min.z &&\n            box.max.z <= this.max.z\n        );\n    }\n\n    /**\n     * This can potentially have a divide by zero if the box has a size dimension of 0.\n     * @param point\n     * @returns {Vector3}\n     */\n    public getParameter(point: Vector3): Vector3 {\n        const result: Vector3 = new Vector3();\n        return result.set(\n            (point.x - this.min.x) / (this.max.x - this.min.x),\n            (point.y - this.min.y) / (this.max.y - this.min.y),\n            (point.z - this.min.z) / (this.max.z - this.min.z),\n        );\n    }\n\n    /**\n     * using 6 splitting planes to rule out intersections\n     * @param box\n     * @returns {boolean}\n     */\n    public intersectsBox(box: Box3): boolean {\n        return !(\n            box.max.x < this.min.x ||\n            box.min.x > this.max.x ||\n            box.max.y < this.min.y ||\n            box.min.y > this.max.y ||\n            box.max.z < this.min.z ||\n            box.min.z > this.max.z\n        );\n    }\n\n    /**\n     * Find the point on the AABB closest to the sphere center.\n     * If that point is inside the sphere, the AABB and sphere intersect.\n     * @param sphere\n     * @returns {boolean}\n     */\n    public intersectsSphere(sphere: Sphere): boolean {\n        const closestPoint: Vector3 = this.clampPoint(sphere.center);\n        return (\n            closestPoint.distanceToSquared(sphere.center) <=\n            sphere.radius * sphere.radius\n        );\n    }\n\n    /**\n     * We compute the minimum and maximum dot product values. If those values\n     * are on the same side (back or front) of the plane, then there is no intersection.\n     * @param plane\n     * @returns {boolean}\n     */\n    public intersectsPlane(plane: Plane): boolean {\n        let min: number, max: number;\n        if (plane.normal.x > 0) {\n            min = plane.normal.x * this.min.x;\n            max = plane.normal.x * this.max.x;\n        } else {\n            min = plane.normal.x * this.max.x;\n            max = plane.normal.x * this.min.x;\n        }\n        if (plane.normal.y > 0) {\n            min += plane.normal.y * this.min.y;\n            max += plane.normal.y * this.max.y;\n        } else {\n            min += plane.normal.y * this.max.y;\n            max += plane.normal.y * this.min.y;\n        }\n        if (plane.normal.z > 0) {\n            min += plane.normal.z * this.min.z;\n            max += plane.normal.z * this.max.z;\n        } else {\n            min += plane.normal.z * this.max.z;\n            max += plane.normal.z * this.min.z;\n        }\n        return min <= plane.constant && max >= plane.constant;\n    }\n\n    public clampPoint(point: Vector3): Vector3 {\n        return new Vector3().copy(point).clamp(this.min, this.max);\n    }\n\n    public distanceToPoint(point: Vector3): number {\n        const clampedPoint: Vector3 = new Vector3()\n            .copy(point)\n            .clamp(this.min, this.max);\n        return clampedPoint.sub(point).length();\n    }\n\n    public getBoundingSphere(): Sphere {\n        const result: Sphere = new Sphere();\n        result.center = this.getCenter();\n        result.radius = this.getSize().length() * 0.5;\n        return result;\n    }\n\n    public intersect(box: Box3): this {\n        this.min.max(box.min);\n        this.max.min(box.max);\n        // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n        if (this.isEmpty()) this.makeEmpty();\n        return this;\n    }\n\n    public union(box: Box3): this {\n        this.min.min(box.min);\n        this.max.max(box.max);\n        return this;\n    }\n\n    public applyMatrix4(matrix: Matrix4): this {\n        // transform of empty box is an empty box.\n        if (this.isEmpty()) return this;\n        const points: Vector3[] = [\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n        ];\n        // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n        points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n        points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n        points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n        points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n        points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n        points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n        points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n        points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n        this.setFromPoints(points);\n        return this;\n    }\n\n    public translate(offset: Vector3): this {\n        this.min.add(offset);\n        this.max.add(offset);\n        return this;\n    }\n\n    public equals(box: Box3): boolean {\n        return box.min.equals(this.min) && box.max.equals(this.max);\n    }\n}\n","import { MathUtil } from \"./Math\";\n\nfunction HUE_TO_RGB(p: number, q: number, t: number): number {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n    return p;\n}\n\nexport class Color {\n    public static ColorKeywords: { [key: string]: number } = {\n        aliceblue: 0xf0f8ff,\n        antiquewhite: 0xfaebd7,\n        aqua: 0x00ffff,\n        aquamarine: 0x7fffd4,\n        azure: 0xf0ffff,\n        beige: 0xf5f5dc,\n        bisque: 0xffe4c4,\n        black: 0x000000,\n        blanchedalmond: 0xffebcd,\n        blue: 0x0000ff,\n        blueviolet: 0x8a2be2,\n        brown: 0xa52a2a,\n        burlywood: 0xdeb887,\n        cadetblue: 0x5f9ea0,\n        chartreuse: 0x7fff00,\n        chocolate: 0xd2691e,\n        coral: 0xff7f50,\n        cornflowerblue: 0x6495ed,\n        cornsilk: 0xfff8dc,\n        crimson: 0xdc143c,\n        cyan: 0x00ffff,\n        darkblue: 0x00008b,\n        darkcyan: 0x008b8b,\n        darkgoldenrod: 0xb8860b,\n        darkgray: 0xa9a9a9,\n        darkgreen: 0x006400,\n        darkgrey: 0xa9a9a9,\n        darkkhaki: 0xbdb76b,\n        darkmagenta: 0x8b008b,\n        darkolivegreen: 0x556b2f,\n        darkorange: 0xff8c00,\n        darkorchid: 0x9932cc,\n        darkred: 0x8b0000,\n        darksalmon: 0xe9967a,\n        darkseagreen: 0x8fbc8f,\n        darkslateblue: 0x483d8b,\n        darkslategray: 0x2f4f4f,\n        darkslategrey: 0x2f4f4f,\n        darkturquoise: 0x00ced1,\n        darkviolet: 0x9400d3,\n        deeppink: 0xff1493,\n        deepskyblue: 0x00bfff,\n        dimgray: 0x696969,\n        dimgrey: 0x696969,\n        dodgerblue: 0x1e90ff,\n        firebrick: 0xb22222,\n        floralwhite: 0xfffaf0,\n        forestgreen: 0x228b22,\n        fuchsia: 0xff00ff,\n        gainsboro: 0xdcdcdc,\n        ghostwhite: 0xf8f8ff,\n        gold: 0xffd700,\n        goldenrod: 0xdaa520,\n        gray: 0x808080,\n        green: 0x008000,\n        greenyellow: 0xadff2f,\n        grey: 0x808080,\n        honeydew: 0xf0fff0,\n        hotpink: 0xff69b4,\n        indianred: 0xcd5c5c,\n        indigo: 0x4b0082,\n        ivory: 0xfffff0,\n        khaki: 0xf0e68c,\n        lavender: 0xe6e6fa,\n        lavenderblush: 0xfff0f5,\n        lawngreen: 0x7cfc00,\n        lemonchiffon: 0xfffacd,\n        lightblue: 0xadd8e6,\n        lightcoral: 0xf08080,\n        lightcyan: 0xe0ffff,\n        lightgoldenrodyellow: 0xfafad2,\n        lightgray: 0xd3d3d3,\n        lightgreen: 0x90ee90,\n        lightgrey: 0xd3d3d3,\n        lightpink: 0xffb6c1,\n        lightsalmon: 0xffa07a,\n        lightseagreen: 0x20b2aa,\n        lightskyblue: 0x87cefa,\n        lightslategray: 0x778899,\n        lightslategrey: 0x778899,\n        lightsteelblue: 0xb0c4de,\n        lightyellow: 0xffffe0,\n        lime: 0x00ff00,\n        limegreen: 0x32cd32,\n        linen: 0xfaf0e6,\n        magenta: 0xff00ff,\n        maroon: 0x800000,\n        mediumaquamarine: 0x66cdaa,\n        mediumblue: 0x0000cd,\n        mediumorchid: 0xba55d3,\n        mediumpurple: 0x9370db,\n        mediumseagreen: 0x3cb371,\n        mediumslateblue: 0x7b68ee,\n        mediumspringgreen: 0x00fa9a,\n        mediumturquoise: 0x48d1cc,\n        mediumvioletred: 0xc71585,\n        midnightblue: 0x191970,\n        mintcream: 0xf5fffa,\n        mistyrose: 0xffe4e1,\n        moccasin: 0xffe4b5,\n        navajowhite: 0xffdead,\n        navy: 0x000080,\n        oldlace: 0xfdf5e6,\n        olive: 0x808000,\n        olivedrab: 0x6b8e23,\n        orange: 0xffa500,\n        orangered: 0xff4500,\n        orchid: 0xda70d6,\n        palegoldenrod: 0xeee8aa,\n        palegreen: 0x98fb98,\n        paleturquoise: 0xafeeee,\n        palevioletred: 0xdb7093,\n        papayawhip: 0xffefd5,\n        peachpuff: 0xffdab9,\n        peru: 0xcd853f,\n        pink: 0xffc0cb,\n        plum: 0xdda0dd,\n        powderblue: 0xb0e0e6,\n        purple: 0x800080,\n        rebeccapurple: 0x663399,\n        red: 0xff0000,\n        rosybrown: 0xbc8f8f,\n        royalblue: 0x4169e1,\n        saddlebrown: 0x8b4513,\n        salmon: 0xfa8072,\n        sandybrown: 0xf4a460,\n        seagreen: 0x2e8b57,\n        seashell: 0xfff5ee,\n        sienna: 0xa0522d,\n        silver: 0xc0c0c0,\n        skyblue: 0x87ceeb,\n        slateblue: 0x6a5acd,\n        slategray: 0x708090,\n        slategrey: 0x708090,\n        snow: 0xfffafa,\n        springgreen: 0x00ff7f,\n        steelblue: 0x4682b4,\n        tan: 0xd2b48c,\n        teal: 0x008080,\n        thistle: 0xd8bfd8,\n        tomato: 0xff6347,\n        turquoise: 0x40e0d0,\n        violet: 0xee82ee,\n        wheat: 0xf5deb3,\n        white: 0xffffff,\n        whitesmoke: 0xf5f5f5,\n        yellow: 0xffff00,\n        yellowgreen: 0x9acd32,\n    };\n\n    public r: number = 1;\n    public g: number = 1;\n    public b: number = 1;\n\n    constructor(r: number = 0, g: number = 0, b: number = 0) {\n        this.setRGB(r, g, b);\n    }\n\n    public copy(color: Color): this {\n        this.r = color.r;\n        this.g = color.g;\n        this.b = color.b;\n        return this;\n    }\n\n    public setScalar(scalar: number): this {\n        this.r = scalar;\n        this.g = scalar;\n        this.b = scalar;\n        return this;\n    }\n\n    public setHex(hex: number): this {\n        hex = Math.floor(hex);\n        this.r = ((hex >> 16) & 255) / 255;\n        this.g = ((hex >> 8) & 255) / 255;\n        this.b = (hex & 255) / 255;\n        return this;\n    }\n\n    public setRGB(r: number, g: number, b: number): this {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        return this;\n    }\n\n    /**\n     * HSL即是代表色相，饱和度，明度三个通道的颜色\n     * H: Hue 色相 S：Saturation 饱和度 L Lightness 明度\n     * @param h\n     * @param s\n     * @param l\n     * @returns {Color}\n     */\n    public setHSL(h: number, s: number, l: number): this {\n        // h,s,l ranges are in 0.0 - 1.0\n        h = MathUtil.euclideanModulo(h, 1);\n        s = MathUtil.clamp(s, 0, 1);\n        l = MathUtil.clamp(l, 0, 1);\n        if (s === 0) {\n            this.r = this.g = this.b = l;\n        } else {\n            const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n            const q = 2 * l - p;\n            this.r = HUE_TO_RGB(q, p, h + 1 / 3);\n            this.g = HUE_TO_RGB(q, p, h);\n            this.b = HUE_TO_RGB(q, p, h - 1 / 3);\n        }\n        return this;\n    }\n\n    public setStyle(style: string): this {\n        let matches;\n        /**\n         * rgb || hsl\n         */\n        if ((matches = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(style))) {\n            let color;\n            const name = matches[1];\n            const components = matches[2];\n\n            switch (name) {\n                case \"rgb\":\n                case \"rgba\":\n                    if (\n                        (color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(\n                            components,\n                        ))\n                    ) {\n                        // rgb(255,0,0) rgba(255,0,0,0.5)\n                        this.r = Math.min(255, parseInt(color[1], 10)) / 255;\n                        this.g = Math.min(255, parseInt(color[2], 10)) / 255;\n                        this.b = Math.min(255, parseInt(color[3], 10)) / 255;\n                        // handleAlpha(color[5]);\n                        return this;\n                    }\n\n                    if (\n                        (color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(\n                            components,\n                        ))\n                    ) {\n                        // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n                        this.r = Math.min(100, parseInt(color[1], 10)) / 100;\n                        this.g = Math.min(100, parseInt(color[2], 10)) / 100;\n                        this.b = Math.min(100, parseInt(color[3], 10)) / 100;\n                        // handleAlpha(color[5]);\n                        return this;\n                    }\n                    break;\n                case \"hsl\":\n                case \"hsla\":\n                    if (\n                        (color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(\n                            components,\n                        ))\n                    ) {\n                        // hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n                        const h = parseFloat(color[1]) / 360;\n                        const s = parseInt(color[2], 10) / 100;\n                        const l = parseInt(color[3], 10) / 100;\n                        // handleAlpha(color[5]);\n                        return this.setHSL(h, s, l);\n                    }\n                    break;\n            }\n        } else if ((matches = /^\\#([A-Fa-f0-9]+)$/.exec(style))) {\n            // hex color\n            const hex = matches[1];\n            const size = hex.length;\n            if (size === 3) {\n                // #ff0\n                this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n                this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n                this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n                return this;\n            } else if (size === 6) {\n                // #ff0000\n                this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n                this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n                this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n                return this;\n            }\n        }\n\n        if (style && style.length > 0) {\n            // color keywords\n            const hex = Color.ColorKeywords[style];\n            if (hex !== undefined) {\n                // red\n                this.setHex(hex);\n            } else {\n                console.warn(\"THREE.Color: Unknown color \" + style);\n            }\n        }\n        return this;\n    }\n\n    public convertGammaToLinear(color: Color, gammaFactor: number = 2.0): this {\n        return this.setRGB(\n            Math.pow(color.r, gammaFactor),\n            Math.pow(color.g, gammaFactor),\n            Math.pow(color.b, gammaFactor),\n        );\n    }\n\n    public convertLinearToGamma(color: Color, gammaFactor: number = 2.0): this {\n        const safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n        return this.setRGB(\n            Math.pow(color.r, safeInverse),\n            Math.pow(color.g, safeInverse),\n            Math.pow(color.b, safeInverse),\n        );\n    }\n\n    public getHex(): number {\n        return (\n            ((this.r * 255) << 16) ^\n            ((this.g * 255) << 8) ^\n            ((this.b * 255) << 0)\n        );\n    }\n\n    public getHexString(): string {\n        return (\"000000\" + this.getHex().toString(16)).slice(-6);\n    }\n\n    public getHSL(\n        hsl: { h: number; s: number; l: number } = { h: 0, s: 0, l: 0 },\n    ): { h: number; s: number; l: number } {\n        // h,s,l ranges are in 0.0 - 1.0\n        const { r, g, b } = this;\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n\n        let hue, saturation;\n        const lightness = (min + max) / 2.0;\n\n        if (min === max) {\n            hue = 0;\n            saturation = 0;\n        } else {\n            const delta = max - min;\n            saturation =\n                lightness <= 0.5\n                    ? delta / (max + min)\n                    : delta / (2 - max - min);\n            switch (max) {\n                case r:\n                    hue = (g - b) / delta + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    hue = (b - r) / delta + 2;\n                    break;\n                case b:\n                    hue = (r - g) / delta + 4;\n                    break;\n            }\n            hue /= 6;\n        }\n        hsl.h = hue;\n        hsl.s = saturation;\n        hsl.l = lightness;\n        return hsl;\n    }\n\n    public getStyle(): string {\n        const { r, g, b } = this;\n        return (\n            \"rgb(\" +\n            ((r * 255) | 0) +\n            \",\" +\n            ((g * 255) | 0) +\n            \",\" +\n            ((b * 255) | 0) +\n            \")\"\n        );\n    }\n\n    public offsetHSL(h: number, s: number, l: number): this {\n        const hsl = this.getHSL();\n        hsl.h += h;\n        hsl.s += s;\n        hsl.l += l;\n        return this.setHSL(hsl.h, hsl.s, hsl.l);\n    }\n\n    public add(color: Color): this {\n        this.r = Math.min(1, this.r + color.r);\n        this.g = Math.min(1, this.g + color.g);\n        this.b = Math.min(1, this.b + color.b);\n        return this;\n    }\n\n    public addScalar(scalar: number): this {\n        this.r = Math.min(1, this.r + scalar);\n        this.g = Math.min(1, this.g + scalar);\n        this.b = Math.min(1, this.b + scalar);\n        return this;\n    }\n\n    public sub(color: Color): this {\n        this.r = Math.max(0, this.r - color.r);\n        this.g = Math.max(0, this.g - color.g);\n        this.b = Math.max(0, this.b - color.b);\n        return this;\n    }\n\n    public subScalar(scalar: number): this {\n        this.r = Math.min(1, this.r - scalar);\n        this.g = Math.min(1, this.g - scalar);\n        this.b = Math.min(1, this.b - scalar);\n        return this;\n    }\n\n    public multiply(color: Color): this {\n        this.r *= color.r;\n        this.g *= color.g;\n        this.b *= color.b;\n        return this;\n    }\n\n    public multiplyScalar(scalar: number): this {\n        this.r = Math.min(1, this.r * scalar);\n        this.g = Math.min(1, this.g * scalar);\n        this.b = Math.min(1, this.b * scalar);\n        return this;\n    }\n\n    public lerp(color: Color, alpha: number): this {\n        this.r += (color.r - this.r) * alpha;\n        this.g += (color.g - this.g) * alpha;\n        this.b += (color.b - this.b) * alpha;\n        return this;\n    }\n\n    public equals(c: Color): boolean {\n        return c.r === this.r && c.g === this.g && c.b === this.b;\n    }\n\n    public clone(): Color {\n        return new (this.constructor as new () => Color)().copy(this);\n    }\n}\n","import { MathUtil } from \"./Math\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Quaternion } from \"./Quaternion\";\n\nexport enum EulerOrder {\n    XYZ,\n    YZX,\n    ZXY,\n    XZY,\n    YXZ,\n    ZYX,\n}\n\n/**\n * TODO: setFromVector3\n */\nexport class Euler {\n    public static DefaultOrder: EulerOrder = EulerOrder.XYZ;\n\n    protected _order: EulerOrder = Euler.DefaultOrder;\n    protected _x: number;\n    protected _y: number;\n    protected _z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    set x(x: number) {\n        this._x = x;\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set y(y: number) {\n        this._y = y;\n    }\n\n    get z() {\n        return this._z;\n    }\n\n    set z(z: number) {\n        this._z = z;\n    }\n\n    get order(): EulerOrder {\n        return this._order;\n    }\n\n    set order(_order: EulerOrder) {\n        this._order = _order;\n    }\n\n    public set(x: number, y: number, z: number, order: EulerOrder): this {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._order = order;\n        return this;\n    }\n\n    public copy(euler: Euler): this {\n        return this.set(euler.x, euler.y, euler.z, euler.order);\n    }\n\n    /**\n     * assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n     * @param m\n     * @param order\n     * @returns {Euler}\n     */\n    public setFromRotationMatrix(\n        m: Matrix4,\n        order: EulerOrder = this.order,\n    ): this {\n        const clamp: (value: number, min: number, max: number) => number =\n            MathUtil.clamp;\n        const te: number[] = m.elements;\n        const m11: number = te[0],\n            m12: number = te[4],\n            m13: number = te[8];\n        const m21: number = te[1],\n            m22: number = te[5],\n            m23: number = te[9];\n        const m31: number = te[2],\n            m32: number = te[6],\n            m33: number = te[10];\n\n        if (order === EulerOrder.XYZ) {\n            this._y = Math.asin(clamp(m13, -1, 1));\n            if (Math.abs(m13) < 0.99999) {\n                this._x = Math.atan2(-m23, m33);\n                this._z = Math.atan2(-m12, m11);\n            } else {\n                this._x = Math.atan2(m32, m22);\n                this._z = 0;\n            }\n        } else if (order === EulerOrder.YXZ) {\n            this._x = Math.asin(-clamp(m23, -1, 1));\n            if (Math.abs(m23) < 0.99999) {\n                this._y = Math.atan2(m13, m33);\n                this._z = Math.atan2(m21, m22);\n            } else {\n                this._y = Math.atan2(-m31, m11);\n                this._z = 0;\n            }\n        } else if (order === EulerOrder.ZXY) {\n            this._x = Math.asin(clamp(m32, -1, 1));\n            if (Math.abs(m32) < 0.99999) {\n                this._y = Math.atan2(-m31, m33);\n                this._z = Math.atan2(-m12, m22);\n            } else {\n                this._y = 0;\n                this._z = Math.atan2(m21, m11);\n            }\n        } else if (order === EulerOrder.ZYX) {\n            this._y = Math.asin(-clamp(m31, -1, 1));\n            if (Math.abs(m31) < 0.99999) {\n                this._x = Math.atan2(m32, m33);\n                this._z = Math.atan2(m21, m11);\n            } else {\n                this._x = 0;\n                this._z = Math.atan2(-m12, m22);\n            }\n        } else if (order === EulerOrder.YZX) {\n            this._z = Math.asin(clamp(m21, -1, 1));\n            if (Math.abs(m21) < 0.99999) {\n                this._x = Math.atan2(-m23, m22);\n                this._y = Math.atan2(-m31, m11);\n            } else {\n                this._x = 0;\n                this._y = Math.atan2(m13, m33);\n            }\n        } else if (order === EulerOrder.XZY) {\n            this._z = Math.asin(-clamp(m12, -1, 1));\n            if (Math.abs(m12) < 0.99999) {\n                this._x = Math.atan2(m32, m22);\n                this._y = Math.atan2(m13, m11);\n            } else {\n                this._x = Math.atan2(-m23, m33);\n                this._y = 0;\n            }\n        }\n        this.order = order;\n        return this;\n    }\n\n    public setFromQuaternion(q: Quaternion, order: EulerOrder): this {\n        const matrix: Matrix4 = new Matrix4();\n        matrix.makeRotationFromQuaternion(q);\n        return this.setFromRotationMatrix(matrix, order);\n    }\n\n    /**\n     * this discards revolution information -bhouston\n     * @param newOrder\n     * @returns {Euler}\n     */\n    public reorder(newOrder: EulerOrder): this {\n        const q: Quaternion = new Quaternion();\n        q.setFromEuler(this);\n        return this.setFromQuaternion(q, newOrder);\n    }\n\n    public equals(euler: Euler): boolean {\n        return (\n            euler.x === this.x &&\n            euler.y === this.y &&\n            euler.z === this.z &&\n            euler.order === this.order\n        );\n    }\n\n    public fromArray(\n        array: [number, number, number] | [number, number, number, EulerOrder],\n    ): this {\n        return this.set(array[0], array[1], array[2], array[3] || this.order);\n    }\n\n    public toArray(array: any[] = [], offset: number = 0): any[] {\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        array[offset + 2] = this.z;\n        array[offset + 3] = this.order;\n        return array;\n    }\n\n    public clone(): Euler {\n        return new (this.constructor as new () => Euler)().copy(this);\n    }\n}\n","import { Plane } from \"./Plane\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Sphere } from \"./Sphere\";\nimport { ObjectWithGeometry, Box3 } from \"./Box3\";\nimport { Geometry } from \"../core/Geometry\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Vector3 } from \"./Vector3\";\nimport { Sprite } from \"../objects/Sprite\";\n\nexport class Frustum {\n    public planes: [Plane, Plane, Plane, Plane, Plane, Plane];\n\n    constructor(\n        p0: Plane = new Plane(),\n        p1: Plane = new Plane(),\n        p2: Plane = new Plane(),\n        p3: Plane = new Plane(),\n        p4: Plane = new Plane(),\n        p5: Plane = new Plane(),\n    ) {\n        this.planes = [p0, p1, p2, p3, p4, p5];\n    }\n\n    public set(\n        p0: Plane,\n        p1: Plane,\n        p2: Plane,\n        p3: Plane,\n        p4: Plane,\n        p5: Plane,\n    ): this {\n        const planes: Plane[] = this.planes;\n        planes[0].copy(p0);\n        planes[1].copy(p1);\n        planes[2].copy(p2);\n        planes[3].copy(p3);\n        planes[4].copy(p4);\n        planes[5].copy(p5);\n        return this;\n    }\n\n    public copy(frustum: Frustum): this {\n        const planes: Plane[] = this.planes;\n        for (let i: number = 0; i < 6; i++) {\n            planes[i].copy(frustum.planes[i]);\n        }\n        return this;\n    }\n\n    public clone(): Frustum {\n        return new (this.constructor as new () => Frustum)().copy(this);\n    }\n\n    public setFromMatrix(m: Matrix4): this {\n        const planes: Plane[] = this.planes;\n        const me: number[] = m.elements;\n        const me0: number = me[0],\n            me1: number = me[1],\n            me2: number = me[2],\n            me3: number = me[3];\n        const me4: number = me[4],\n            me5: number = me[5],\n            me6: number = me[6],\n            me7: number = me[7];\n        const me8: number = me[8],\n            me9: number = me[9],\n            me10: number = me[10],\n            me11: number = me[11];\n        const me12: number = me[12],\n            me13: number = me[13],\n            me14: number = me[14],\n            me15: number = me[15];\n        const setPlane = (\n            plane: Plane,\n            x: number,\n            y: number,\n            z: number,\n            w: number,\n        ) => {\n            plane.normal.set(x, y, z);\n            plane.constant = w;\n            plane.normalize();\n        };\n        setPlane(planes[0], me3 - me0, me7 - me4, me11 - me8, me15 - me12);\n        setPlane(planes[1], me3 + me0, me7 + me4, me11 + me8, me15 + me12);\n        setPlane(planes[2], me3 + me1, me7 + me5, me11 + me9, me15 + me13);\n        setPlane(planes[3], me3 - me1, me7 - me5, me11 - me9, me15 - me13);\n        setPlane(planes[4], me3 - me2, me7 - me6, me11 - me10, me15 - me14);\n        setPlane(planes[5], me3 + me2, me7 + me6, me11 + me10, me15 + me14);\n        return this;\n    }\n\n    public intersectsObject(object: ObjectWithGeometry): boolean {\n        const geometry: Geometry | BufferGeometry = object.geometry;\n        if (geometry.boundingSphere === null) {\n            geometry.computeBoundingSphere();\n        }\n        const sphere = new Sphere()\n            .copy(geometry.boundingSphere)\n            .applyMatrix4(object.matrixWorld);\n        return this.intersectsSphere(sphere);\n    }\n\n    public intersectsSprite(sprite: Sprite) {\n        const sphere: Sphere = new Sphere();\n        sphere.center.set(0, 0, 0);\n        sphere.radius = 0.7071067811865476;\n        sphere.applyMatrix4(sprite.matrixWorld);\n        return this.intersectsSphere(sphere);\n    }\n\n    public intersectsSphere(sphere: Sphere): boolean {\n        const planes: Plane[] = this.planes;\n        const center: Vector3 = sphere.center;\n        const negRadius: number = -sphere.radius;\n        for (let i: number = 0; i < 6; i++) {\n            const distance: number = planes[i].distanceToPoint(center);\n            if (distance < negRadius) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public intersectsBox(box: Box3): boolean {\n        const p1: Vector3 = new Vector3(),\n            p2: Vector3 = new Vector3();\n        const planes: Plane[] = this.planes;\n\n        for (let i: number = 0; i < 6; i++) {\n            const plane: Plane = planes[i];\n            p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n            p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n            p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n            p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n            p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n            p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n            const d1: number = plane.distanceToPoint(p1);\n            const d2: number = plane.distanceToPoint(p2);\n            // if both outside plane, no intersection\n            if (d1 < 0 && d2 < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public containsPoint(point: Vector3): boolean {\n        const planes: Plane[] = this.planes;\n        for (let i: number = 0; i < 6; i++) {\n            if (planes[i].distanceToPoint(point) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","import { MathUtil } from \"./Math\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Vector3 } from \"./Vector3\";\n\nexport class Line3 {\n    public start: Vector3 = new Vector3();\n    public end: Vector3 = new Vector3();\n\n    constructor(start: Vector3 = new Vector3(), end: Vector3 = new Vector3()) {\n        this.start = start;\n        this.end = end;\n    }\n\n    public set(start: Vector3, end: Vector3): this {\n        this.start.copy(start);\n        this.end.copy(end);\n        return this;\n    }\n\n    public clone(): Line3 {\n        return new (this.constructor as new () => Line3)().copy(this);\n    }\n\n    public copy(line: Line3): this {\n        this.start.copy(line.start);\n        this.end.copy(line.end);\n        return this;\n    }\n\n    public getCenter(): Vector3 {\n        return new Vector3()\n            .copy(this.start)\n            .add(this.end)\n            .multiplyScalar(0.5);\n    }\n\n    public delta(): Vector3 {\n        return new Vector3().copy(this.end).sub(this.start);\n    }\n\n    public distanceSquared(): number {\n        return this.start.distanceToSquared(this.end);\n    }\n\n    public distance(): number {\n        return this.start.distanceTo(this.end);\n    }\n\n    public at(t: number): Vector3 {\n        return this.delta()\n            .multiplyScalar(t)\n            .add(this.start);\n    }\n\n    public closestPointToPointParameter(\n        point: Vector3,\n        clampToLine: boolean = false,\n    ): number {\n        const startP = new Vector3();\n        const startEnd = new Vector3();\n        startP.copy(point).sub(this.start);\n        startEnd.copy(this.end).sub(this.start);\n        const startEnd2 = startEnd.dot(startEnd);\n        const startEndStartP = startEnd.dot(startP);\n        let t: number = startEndStartP / startEnd2;\n        if (clampToLine) {\n            t = MathUtil.clamp(t, 0, 1);\n        }\n        return t;\n    }\n\n    public closestPointToPoint(\n        point: Vector3,\n        clampToLine: boolean = false,\n    ): Vector3 {\n        const t = this.closestPointToPointParameter(point, clampToLine);\n        return this.delta()\n            .multiplyScalar(t)\n            .add(this.start);\n    }\n\n    public applyMatrix4(matrix: Matrix4): this {\n        this.start.applyMatrix4(matrix);\n        this.end.applyMatrix4(matrix);\n        return this;\n    }\n\n    public equals(line: Line3): boolean {\n        return line.start.equals(this.start) && line.end.equals(this.end);\n    }\n}\n","const lut: string[] = [];\nfor (let i: number = 0; i < 256; i++) {\n    lut[i] = (i < 16 ? \"0\" : \"\") + i.toString(16).toUpperCase();\n}\n\n/**\n * Finished\n */\nexport class MathUtil {\n    /**\n     * 弧度/角度\n     * @type {number}\n     */\n    public static DEG2RAD: number = Math.PI / 180;\n\n    /**\n     * 角度/弧度\n     * @type {number}\n     */\n    public static RAD2DEG: number = 180 / Math.PI;\n\n    /**\n     * 产生一个UUID的算法，主要是遵循UUID的规范来产生字符串\n     * http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n     * @returns {string}\n     */\n    public static generateUUID(): string {\n        const d0 = (Math.random() * 0xffffffff) | 0;\n        const d1 = (Math.random() * 0xffffffff) | 0;\n        const d2 = (Math.random() * 0xffffffff) | 0;\n        const d3 = (Math.random() * 0xffffffff) | 0;\n        return (\n            lut[d0 & 0xff] +\n            lut[(d0 >> 8) & 0xff] +\n            lut[(d0 >> 16) & 0xff] +\n            lut[(d0 >> 24) & 0xff] +\n            \"-\" +\n            lut[d1 & 0xff] +\n            lut[(d1 >> 8) & 0xff] +\n            \"-\" +\n            lut[((d1 >> 16) & 0x0f) | 0x40] +\n            lut[(d1 >> 24) & 0xff] +\n            \"-\" +\n            lut[(d2 & 0x3f) | 0x80] +\n            lut[(d2 >> 8) & 0xff] +\n            \"-\" +\n            lut[(d2 >> 16) & 0xff] +\n            lut[(d2 >> 24) & 0xff] +\n            lut[d3 & 0xff] +\n            lut[(d3 >> 8) & 0xff] +\n            lut[(d3 >> 16) & 0xff] +\n            lut[(d3 >> 24) & 0xff]\n        );\n    }\n\n    /**\n     * 在一定范围内截断value的数值\n     * @param value\n     * @param min\n     * @param max\n     * @returns {number}\n     */\n    public static clamp(value: number, min: number, max: number): number {\n        return Math.max(min, Math.min(max, value));\n    }\n\n    /**\n     * 计算欧几里得取模算法\n     * 详见 https://en.wikipedia.org/wiki/Modulo_operation\n     * 这里还需要+m的原因是考虑负数取模的原因\n     * @param n\n     * @param m\n     * @returns {number}\n     */\n    public static euclideanModulo(n: number, m: number): number {\n        return (n % m + m) % m;\n    }\n\n    /**\n     * 将x在a范围内的值映射到b范围中\n     * @param x\n     * @param a1\n     * @param a2\n     * @param b1\n     * @param b2\n     * @returns {number}\n     */\n    public static mapLinear(\n        x: number,\n        a1: number,\n        a2: number,\n        b1: number,\n        b2: number,\n    ): number {\n        return b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n    }\n\n    /**\n     * 线性插值\n     * https://en.wikipedia.org/wiki/Linear_interpolation\n     * @param x\n     * @param y\n     * @param t\n     * @returns {number}\n     */\n    public static lerp(x: number, y: number, t: number): number {\n        return (1 - t) * x + t * y;\n    }\n\n    /**\n     * 这个插值过程是将点原本的线性插值的点映射到f(x) = 3 * x^2 - 2 * x^3上，\n     * f\"(x) = 6 * x - 6 * x^2 x \\in [0, 1] \\geq 0\n     * 所以f(x)在[0, 1]上单调递增，\n     * 观察其二阶导可知f(x)在[0, 0.5]和[0.5 , 1]上分别为下凸和上凸函数，\n     * 所以其形状类似于电梯\n     * http://en.wikipedia.org/wiki/Smoothstep\n     * @param x\n     * @param min\n     * @param max\n     * @returns {number}\n     */\n    public static smoothstep(x: number, min: number, max: number): number {\n        if (x <= min) return 0;\n        if (x >= max) return 1;\n        x = (x - min) / (max - min);\n        return x * x * (3 - 2 * x);\n    }\n\n    /**\n     * 类似与上面的函数，计算量更大\n     * @param x\n     * @param min\n     * @param max\n     * @returns {number}\n     */\n    public static smootherstep(x: number, min: number, max: number): number {\n        if (x <= min) return 0;\n        if (x >= max) return 1;\n        x = (x - min) / (max - min);\n        return x * x * x * (x * (x * 6 - 15) + 10);\n    }\n\n    /**\n     * 随机整数\n     * @param low\n     * @param high\n     * @returns {number}\n     */\n    public static randInt(low: number, high: number): number {\n        return low + Math.floor(Math.random() * (high - low + 1));\n    }\n\n    /**\n     * 随机浮点数\n     * @param low\n     * @param high\n     * @returns {number}\n     */\n    public static randFloat(low: number, high: number): number {\n        return low + Math.random() * (high - low);\n    }\n\n    /**\n     * [-range/2, range/2]的随机浮点数\n     * @param range\n     * @returns {number}\n     */\n    public static randFloatSpread(range: number): number {\n        return range * (0.5 - Math.random());\n    }\n\n    /***************************** 下面的太简单了不说明了 *******************************/\n\n    public static degToRad(degrees: number): number {\n        return degrees * MathUtil.DEG2RAD;\n    }\n\n    public static radToDeg(radians: number): number {\n        return radians * MathUtil.RAD2DEG;\n    }\n\n    /**\n     * 这里用到了二进制的技巧\n     * @param value\n     * @returns {boolean}\n     */\n    public static isPowerOfTwo(value: number): boolean {\n        return (value & (value - 1)) === 0 && value !== 0;\n    }\n\n    public static ceilPowerOfTwo(value: number): number {\n        return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n    }\n\n    public static floorPowerOfTwo(value: number): number {\n        return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n    }\n}\n","import { TypedArray } from \"../core/BufferAttribute\";\n\nexport class Matrix2 {\n    public elements: number[] = [1, 0, 0, 1];\n\n    public set(n11: number, n12: number, n21: number, n22: number): this {\n        const te: number[] = this.elements;\n        te[0] = n11;\n        te[1] = n21;\n        te[3] = n12;\n        te[4] = n22;\n        return this;\n    }\n\n    public identity(): this {\n        return this.set(1, 0, 0, 1);\n    }\n\n    public copy(mat2: Matrix2): this {\n        const te: number[] = this.elements;\n        const me: number[] = mat2.elements;\n\n        te[0] = me[0];\n        te[1] = me[1];\n        te[2] = me[2];\n        te[3] = me[3];\n        return this;\n    }\n\n    public setFromMatrix4(mat2: Matrix2): this {\n        const me: number[] = mat2.elements;\n        return this.set(me[0], me[2], me[1], me[3]);\n    }\n\n    public multiply(mat2: Matrix2): this {\n        return this.multiplyMatrices(this, mat2);\n    }\n\n    public premultiply(m: Matrix2): this {\n        return this.multiplyMatrices(m, this);\n    }\n\n    public multiplyMatrices(a: Matrix2, b: Matrix2): this {\n        const ae: number[] = a.elements;\n        const be: number[] = b.elements;\n        const te: number[] = this.elements;\n\n        const a11: number = ae[0],\n            a12: number = ae[2];\n        const a21: number = ae[1],\n            a22: number = ae[3];\n\n        const b11: number = be[0],\n            b12: number = be[2];\n        const b21: number = be[1],\n            b22: number = be[3];\n\n        te[0] = a11 * b11 + a12 * b21;\n        te[2] = a11 * b12 + a12 * b22;\n\n        te[1] = a21 * b11 + a22 * b21;\n        te[3] = a21 * b12 + a22 * b22;\n\n        return this;\n    }\n\n    public multiplyScalar(s: number): this {\n        const te: number[] = this.elements;\n        te[0] *= s;\n        te[2] *= s;\n        te[1] *= s;\n        te[3] *= s;\n        return this;\n    }\n\n    public determinant(): number {\n        const te: number[] = this.elements;\n        const a: number = te[0],\n            b: number = te[1],\n            c: number = te[2],\n            d: number = te[3];\n        return a * d - b * c;\n    }\n\n    // getInverse\n\n    public transpose(): this {\n        let tmp;\n        const m: number[] = this.elements;\n        tmp = m[1];\n        m[1] = m[2];\n        m[2] = tmp;\n        return this;\n    }\n\n    public equals(matrix: Matrix2): boolean {\n        const te: number[] = this.elements;\n        const me: number[] = matrix.elements;\n        for (let i: number = 0; i < 4; i++) {\n            if (te[i] !== me[i]) return false;\n        }\n        return true;\n    }\n\n    public fromArray(array: number[] | TypedArray, offset: number = 0): this {\n        for (let i: number = 0; i < 4; i++) {\n            this.elements[i] = array[i + offset];\n        }\n        return this;\n    }\n\n    public toArray(\n        array: number[] | TypedArray = [],\n        offset: number = 0,\n    ): number[] | TypedArray {\n        const te: number[] = this.elements;\n\n        array[offset] = te[0];\n        array[offset + 1] = te[1];\n        array[offset + 2] = te[2];\n\n        array[offset + 3] = te[3];\n\n        return array;\n    }\n\n    public clone(): Matrix2 {\n        return new (this.constructor as new () => Matrix2)().copy(this);\n    }\n}\n","import { TypedArray } from \"../core/BufferAttribute\";\nimport { Matrix4 } from \"./Matrix4\";\n\nexport class Matrix3 {\n    public elements: number[] = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n    public set(\n        n11: number,\n        n12: number,\n        n13: number,\n        n21: number,\n        n22: number,\n        n23: number,\n        n31: number,\n        n32: number,\n        n33: number,\n    ): this {\n        const te: number[] = this.elements;\n        te[0] = n11;\n        te[1] = n21;\n        te[2] = n31;\n        te[3] = n12;\n        te[4] = n22;\n        te[5] = n32;\n        te[6] = n13;\n        te[7] = n23;\n        te[8] = n33;\n        return this;\n    }\n\n    public identity(): this {\n        return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n    }\n\n    public copy(mat3: Matrix3): this {\n        const te: number[] = this.elements;\n        const me: number[] = mat3.elements;\n\n        te[0] = me[0];\n        te[1] = me[1];\n        te[2] = me[2];\n        te[3] = me[3];\n        te[4] = me[4];\n        te[5] = me[5];\n        te[6] = me[6];\n        te[7] = me[7];\n        te[8] = me[8];\n\n        return this;\n    }\n\n    public setFromMatrix4(mat4: Matrix4): this {\n        const me: number[] = mat4.elements;\n        return this.set(\n            me[0],\n            me[4],\n            me[8],\n            me[1],\n            me[5],\n            me[9],\n            me[2],\n            me[6],\n            me[10],\n        );\n    }\n\n    public multiply(mat3: Matrix3): this {\n        return this.multiplyMatrices(this, mat3);\n    }\n\n    public premultiply(m: Matrix3): this {\n        return this.multiplyMatrices(m, this);\n    }\n\n    public multiplyMatrices(a: Matrix3, b: Matrix3): this {\n        const ae: number[] = a.elements;\n        const be: number[] = b.elements;\n        const te: number[] = this.elements;\n\n        const a11: number = ae[0],\n            a12: number = ae[3],\n            a13: number = ae[6];\n        const a21: number = ae[1],\n            a22: number = ae[4],\n            a23: number = ae[7];\n        const a31: number = ae[2],\n            a32: number = ae[5],\n            a33: number = ae[8];\n\n        const b11: number = be[0],\n            b12: number = be[3],\n            b13: number = be[6];\n        const b21: number = be[1],\n            b22: number = be[4],\n            b23: number = be[7];\n        const b31: number = be[2],\n            b32: number = be[5],\n            b33: number = be[8];\n\n        te[0] = a11 * b11 + a12 * b21 + a13 * b31;\n        te[3] = a11 * b12 + a12 * b22 + a13 * b32;\n        te[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\n        te[1] = a21 * b11 + a22 * b21 + a23 * b31;\n        te[4] = a21 * b12 + a22 * b22 + a23 * b32;\n        te[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\n        te[2] = a31 * b11 + a32 * b21 + a33 * b31;\n        te[5] = a31 * b12 + a32 * b22 + a33 * b32;\n        te[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\n        return this;\n    }\n\n    public multiplyScalar(s: number): this {\n        const te: number[] = this.elements;\n        te[0] *= s;\n        te[3] *= s;\n        te[6] *= s;\n        te[1] *= s;\n        te[4] *= s;\n        te[7] *= s;\n        te[2] *= s;\n        te[5] *= s;\n        te[8] *= s;\n        return this;\n    }\n\n    public determinant(): number {\n        const te: number[] = this.elements;\n        const a: number = te[0],\n            b: number = te[1],\n            c: number = te[2],\n            d: number = te[3],\n            e: number = te[4],\n            f: number = te[5],\n            g: number = te[6],\n            h: number = te[7],\n            i: number = te[8];\n        return (\n            a * e * i -\n            a * f * h -\n            b * d * i +\n            b * f * g +\n            c * d * h -\n            c * e * g\n        );\n    }\n\n    public getInverse(\n        matrix: Matrix3,\n        throwOnDegenerate: boolean = false,\n    ): this {\n        const me: number[] = matrix.elements,\n            te: number[] = this.elements,\n            n11: number = me[0],\n            n21: number = me[1],\n            n31: number = me[2],\n            n12: number = me[3],\n            n22: number = me[4],\n            n32: number = me[5],\n            n13: number = me[6],\n            n23: number = me[7],\n            n33: number = me[8],\n            t11: number = n33 * n22 - n32 * n23,\n            t12: number = n32 * n13 - n33 * n12,\n            t13: number = n23 * n12 - n22 * n13,\n            det: number = n11 * t11 + n21 * t12 + n31 * t13;\n\n        if (det === 0) {\n            const msg = `THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0`;\n            if (throwOnDegenerate === true) {\n                throw new Error(msg);\n            } else {\n                console.warn(msg);\n            }\n            return this.identity();\n        }\n\n        const detInv: number = 1 / det;\n\n        te[0] = t11 * detInv;\n        te[1] = (n31 * n23 - n33 * n21) * detInv;\n        te[2] = (n32 * n21 - n31 * n22) * detInv;\n\n        te[3] = t12 * detInv;\n        te[4] = (n33 * n11 - n31 * n13) * detInv;\n        te[5] = (n31 * n12 - n32 * n11) * detInv;\n\n        te[6] = t13 * detInv;\n        te[7] = (n21 * n13 - n23 * n11) * detInv;\n        te[8] = (n22 * n11 - n21 * n12) * detInv;\n\n        return this;\n    }\n\n    public transpose(): this {\n        let tmp;\n        const m: number[] = this.elements;\n\n        tmp = m[1];\n        m[1] = m[3];\n        m[3] = tmp;\n        tmp = m[2];\n        m[2] = m[6];\n        m[6] = tmp;\n        tmp = m[5];\n        m[5] = m[7];\n        m[7] = tmp;\n        return this;\n    }\n\n    public getNormalMatrix(matrix4: Matrix4): this {\n        return this.setFromMatrix4(matrix4)\n            .getInverse(this)\n            .transpose();\n    }\n\n    public setUvTransform(\n        tx: number,\n        ty: number,\n        sx: number,\n        sy: number,\n        rotation: number,\n        cx: number,\n        cy: number,\n    ): this {\n        const c = Math.cos(rotation);\n        const s = Math.sin(rotation);\n        return this.set(\n            sx * c,\n            sx * s,\n            -sx * (c * cx + s * cy) + cx + tx,\n            -sy * s,\n            sy * c,\n            -sy * (-s * cx + c * cy) + cy + ty,\n            0,\n            0,\n            1,\n        );\n    }\n\n    public scale(sx: number, sy: number): this {\n        const te: number[] = this.elements;\n        te[0] *= sx;\n        te[3] *= sx;\n        te[6] *= sx;\n        te[1] *= sy;\n        te[4] *= sy;\n        te[7] *= sy;\n        return this;\n    }\n\n    public rotate(theta: number): this {\n        const c: number = Math.cos(theta);\n        const s: number = Math.sin(theta);\n\n        const te: number[] = this.elements;\n\n        const a11: number = te[0],\n            a12: number = te[3],\n            a13: number = te[6];\n        const a21: number = te[1],\n            a22: number = te[4],\n            a23: number = te[7];\n\n        te[0] = c * a11 + s * a21;\n        te[3] = c * a12 + s * a22;\n        te[6] = c * a13 + s * a23;\n\n        te[1] = -s * a11 + c * a21;\n        te[4] = -s * a12 + c * a22;\n        te[7] = -s * a13 + c * a23;\n\n        return this;\n    }\n\n    public translate(tx: number, ty: number): this {\n        const te: number[] = this.elements;\n        te[0] += tx * te[2];\n        te[3] += tx * te[5];\n        te[6] += tx * te[8];\n        te[1] += ty * te[2];\n        te[4] += ty * te[5];\n        te[7] += ty * te[8];\n        return this;\n    }\n\n    public equals(matrix: Matrix3): boolean {\n        const te: number[] = this.elements;\n        const me: number[] = matrix.elements;\n        for (let i: number = 0; i < 9; i++) {\n            if (te[i] !== me[i]) return false;\n        }\n        return true;\n    }\n\n    public fromArray(array: number[] | TypedArray, offset: number = 0): this {\n        for (let i: number = 0; i < 9; i++) {\n            this.elements[i] = array[i + offset];\n        }\n        return this;\n    }\n\n    public toArray(\n        array: number[] | TypedArray = [],\n        offset: number = 0,\n    ): number[] | TypedArray {\n        const te: number[] = this.elements;\n\n        array[offset] = te[0];\n        array[offset + 1] = te[1];\n        array[offset + 2] = te[2];\n\n        array[offset + 3] = te[3];\n        array[offset + 4] = te[4];\n        array[offset + 5] = te[5];\n\n        array[offset + 6] = te[6];\n        array[offset + 7] = te[7];\n        array[offset + 8] = te[8];\n\n        return array;\n    }\n\n    public clone(): Matrix3 {\n        return new (this.constructor as new () => Matrix3)().copy(this);\n    }\n}\n","import { TypedArray } from \"../core/BufferAttribute\";\nimport { Euler, EulerOrder } from \"./Euler\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * TODO: applyToBufferAttribute\n */\nexport class Matrix4 {\n    public elements: number[] = [\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n    ];\n\n    public copy(mat4: Matrix4): this {\n        const te: number[] = this.elements;\n        const me: number[] = mat4.elements;\n\n        te[0] = me[0];\n        te[1] = me[1];\n        te[2] = me[2];\n        te[3] = me[3];\n        te[4] = me[4];\n        te[5] = me[5];\n        te[6] = me[6];\n        te[7] = me[7];\n        te[8] = me[8];\n        te[9] = me[9];\n        te[10] = me[10];\n        te[11] = me[11];\n        te[12] = me[12];\n        te[13] = me[13];\n        te[14] = me[14];\n        te[15] = me[15];\n\n        return this;\n    }\n\n    public set(\n        n11: number,\n        n12: number,\n        n13: number,\n        n14: number,\n        n21: number,\n        n22: number,\n        n23: number,\n        n24: number,\n        n31: number,\n        n32: number,\n        n33: number,\n        n34: number,\n        n41: number,\n        n42: number,\n        n43: number,\n        n44: number,\n    ): this {\n        const te = this.elements;\n        te[0] = n11;\n        te[4] = n12;\n        te[8] = n13;\n        te[12] = n14;\n        te[1] = n21;\n        te[5] = n22;\n        te[9] = n23;\n        te[13] = n24;\n        te[2] = n31;\n        te[6] = n32;\n        te[10] = n33;\n        te[14] = n34;\n        te[3] = n41;\n        te[7] = n42;\n        te[11] = n43;\n        te[15] = n44;\n        return this;\n    }\n\n    public identity(): this {\n        return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n    }\n\n    public copyPosition(m: Matrix4): this {\n        const te: number[] = this.elements,\n            me: number[] = m.elements;\n        te[12] = me[12];\n        te[13] = me[13];\n        te[14] = me[14];\n        return this;\n    }\n\n    public extractBasis(xAxis: Vector3, yAxis: Vector3, zAxis: Vector3): this {\n        xAxis.fromArray(this.elements, 0);\n        yAxis.fromArray(this.elements, 4);\n        zAxis.fromArray(this.elements, 8);\n        return this;\n    }\n\n    public makeBasis(xAxis: Vector3, yAxis: Vector3, zAxis: Vector3): this {\n        return this.set(\n            xAxis.x,\n            yAxis.x,\n            zAxis.x,\n            0,\n            xAxis.y,\n            yAxis.y,\n            zAxis.y,\n            0,\n            xAxis.z,\n            yAxis.z,\n            zAxis.z,\n            0,\n            0,\n            0,\n            0,\n            1,\n        );\n    }\n\n    public extractRotation(mat4: Matrix4): this {\n        const vec: Vector3 = new Vector3();\n        const te: number[] = this.elements;\n        const me: number[] = mat4.elements;\n        const scaleX: number = 1 / vec.fromArray(mat4.elements, 0).length();\n        const scaleY: number = 1 / vec.fromArray(mat4.elements, 4).length();\n        const scaleZ: number = 1 / vec.fromArray(mat4.elements, 8).length();\n        te[0] = me[0] * scaleX;\n        te[1] = me[1] * scaleX;\n        te[2] = me[2] * scaleX;\n        te[4] = me[4] * scaleY;\n        te[5] = me[5] * scaleY;\n        te[6] = me[6] * scaleY;\n        te[8] = me[8] * scaleZ;\n        te[9] = me[9] * scaleZ;\n        te[10] = me[10] * scaleZ;\n        return this;\n    }\n\n    public makeRotationFromEuler(euler: Euler): this {\n        const te: number[] = this.elements;\n        const x: number = euler.x,\n            y: number = euler.y,\n            z: number = euler.z;\n        const a: number = Math.cos(x),\n            b: number = Math.sin(x);\n        const c: number = Math.cos(y),\n            d: number = Math.sin(y);\n        const e: number = Math.cos(z),\n            f: number = Math.sin(z);\n\n        if (euler.order === EulerOrder.XYZ) {\n            const ae = a * e,\n                af = a * f,\n                be = b * e,\n                bf = b * f;\n            te[0] = c * e;\n            te[4] = -c * f;\n            te[8] = d;\n            te[1] = af + be * d;\n            te[5] = ae - bf * d;\n            te[9] = -b * c;\n            te[2] = bf - ae * d;\n            te[6] = be + af * d;\n            te[10] = a * c;\n        } else if (euler.order === EulerOrder.YXZ) {\n            const ce = c * e,\n                cf = c * f,\n                de = d * e,\n                df = d * f;\n            te[0] = ce + df * b;\n            te[4] = de * b - cf;\n            te[8] = a * d;\n            te[1] = a * f;\n            te[5] = a * e;\n            te[9] = -b;\n            te[2] = cf * b - de;\n            te[6] = df + ce * b;\n            te[10] = a * c;\n        } else if (euler.order === EulerOrder.ZXY) {\n            const ce = c * e,\n                cf = c * f,\n                de = d * e,\n                df = d * f;\n            te[0] = ce - df * b;\n            te[4] = -a * f;\n            te[8] = de + cf * b;\n            te[1] = cf + de * b;\n            te[5] = a * e;\n            te[9] = df - ce * b;\n            te[2] = -a * d;\n            te[6] = b;\n            te[10] = a * c;\n        } else if (euler.order === EulerOrder.ZYX) {\n            const ae = a * e,\n                af = a * f,\n                be = b * e,\n                bf = b * f;\n            te[0] = c * e;\n            te[4] = be * d - af;\n            te[8] = ae * d + bf;\n            te[1] = c * f;\n            te[5] = bf * d + ae;\n            te[9] = af * d - be;\n            te[2] = -d;\n            te[6] = b * c;\n            te[10] = a * c;\n        } else if (euler.order === EulerOrder.YZX) {\n            const ac = a * c,\n                ad = a * d,\n                bc = b * c,\n                bd = b * d;\n            te[0] = c * e;\n            te[4] = bd - ac * f;\n            te[8] = bc * f + ad;\n            te[1] = f;\n            te[5] = a * e;\n            te[9] = -b * e;\n            te[2] = -d * e;\n            te[6] = ad * f + bc;\n            te[10] = ac - bd * f;\n        } else if (euler.order === EulerOrder.XZY) {\n            const ac = a * c,\n                ad = a * d,\n                bc = b * c,\n                bd = b * d;\n            te[0] = c * e;\n            te[4] = -f;\n            te[8] = d * e;\n            te[1] = ac * f + bd;\n            te[5] = a * e;\n            te[9] = ad * f - bc;\n            te[2] = bc * f - ad;\n            te[6] = b * e;\n            te[10] = bd * f + ac;\n        }\n\n        // last column\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = 0;\n\n        // bottom row\n        te[12] = 0;\n        te[13] = 0;\n        te[14] = 0;\n        te[15] = 1;\n        return this;\n    }\n\n    public makeRotationFromQuaternion(quaternion: Quaternion): this {\n        const te: number[] = this.elements;\n        const x: number = quaternion.x,\n            y: number = quaternion.y,\n            z: number = quaternion.z,\n            w: number = quaternion.w;\n        const x2: number = x + x,\n            y2: number = y + y,\n            z2: number = z + z;\n        const xx: number = x * x2,\n            xy: number = x * y2,\n            xz: number = x * z2;\n        const yy: number = y * y2,\n            yz: number = y * z2,\n            zz: number = z * z2;\n        const wx: number = w * x2,\n            wy: number = w * y2,\n            wz: number = w * z2;\n\n        te[0] = 1 - (yy + zz);\n        te[4] = xy - wz;\n        te[8] = xz + wy;\n\n        te[1] = xy + wz;\n        te[5] = 1 - (xx + zz);\n        te[9] = yz - wx;\n\n        te[2] = xz - wy;\n        te[6] = yz + wx;\n        te[10] = 1 - (xx + yy);\n\n        // last column\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = 0;\n\n        // bottom row\n        te[12] = 0;\n        te[13] = 0;\n        te[14] = 0;\n        te[15] = 1;\n\n        return this;\n    }\n\n    public lookAt(eye: Vector3, target: Vector3, up: Vector3): this {\n        const x: Vector3 = new Vector3();\n        const y: Vector3 = new Vector3();\n        const z: Vector3 = new Vector3();\n        const te: number[] = this.elements;\n        z.copy(eye).cross(target);\n        if (z.lengthSquared() === 0) {\n            // eye and target are in the same position\n            z.z = 1;\n        }\n        z.normalize();\n        x.copy(up).cross(z);\n\n        if (x.lengthSquared() === 0) {\n            // up and z are parallel\n            if (Math.abs(up.z) === 1) {\n                z.x += 0.0001;\n            } else {\n                z.z += 0.0001;\n            }\n            z.normalize();\n            x.copy(up).cross(z);\n        }\n\n        x.normalize();\n        y.copy(z).cross(x);\n\n        te[0] = x.x;\n        te[4] = y.x;\n        te[8] = z.x;\n        te[1] = x.y;\n        te[5] = y.y;\n        te[9] = z.y;\n        te[2] = x.z;\n        te[6] = y.z;\n        te[10] = z.z;\n\n        return this;\n    }\n\n    public multiply(mat: Matrix4): this {\n        return this.multiplyMatrices(this, mat);\n    }\n\n    public premultiply(mat: Matrix4): this {\n        return this.multiplyMatrices(mat, this);\n    }\n\n    public multiplyMatrices(matA: Matrix4, matB: Matrix4): this {\n        const ae: number[] = matA.elements;\n        const be: number[] = matB.elements;\n        const te: number[] = this.elements;\n\n        const a11: number = ae[0],\n            a12: number = ae[4],\n            a13: number = ae[8],\n            a14: number = ae[12];\n        const a21: number = ae[1],\n            a22: number = ae[5],\n            a23: number = ae[9],\n            a24: number = ae[13];\n        const a31: number = ae[2],\n            a32: number = ae[6],\n            a33: number = ae[10],\n            a34: number = ae[14];\n        const a41: number = ae[3],\n            a42: number = ae[7],\n            a43: number = ae[11],\n            a44: number = ae[15];\n\n        const b11: number = be[0],\n            b12: number = be[4],\n            b13: number = be[8],\n            b14: number = be[12];\n        const b21: number = be[1],\n            b22: number = be[5],\n            b23: number = be[9],\n            b24: number = be[13];\n        const b31: number = be[2],\n            b32: number = be[6],\n            b33: number = be[10],\n            b34: number = be[14];\n        const b41: number = be[3],\n            b42: number = be[7],\n            b43: number = be[11],\n            b44: number = be[15];\n\n        te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n        te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n        te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n        te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n        te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n        te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n        te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n        te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n        te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n        te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n        te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n        te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n        te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n        te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n        te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n        te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n        return this;\n    }\n\n    public multiplyScalar(s: number): this {\n        const te: number[] = this.elements;\n        te[0] *= s;\n        te[4] *= s;\n        te[8] *= s;\n        te[12] *= s;\n        te[1] *= s;\n        te[5] *= s;\n        te[9] *= s;\n        te[13] *= s;\n        te[2] *= s;\n        te[6] *= s;\n        te[10] *= s;\n        te[14] *= s;\n        te[3] *= s;\n        te[7] *= s;\n        te[11] *= s;\n        te[15] *= s;\n        return this;\n    }\n\n    /**\n     * http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n     * @returns {number}\n     */\n    public determinant(): number {\n        const te: number[] = this.elements;\n\n        const n11: number = te[0],\n            n12: number = te[4],\n            n13: number = te[8],\n            n14: number = te[12];\n        const n21: number = te[1],\n            n22: number = te[5],\n            n23: number = te[9],\n            n24: number = te[13];\n        const n31: number = te[2],\n            n32: number = te[6],\n            n33: number = te[10],\n            n34: number = te[14];\n        const n41: number = te[3],\n            n42: number = te[7],\n            n43: number = te[11],\n            n44: number = te[15];\n\n        return (\n            n41 *\n                (+n14 * n23 * n32 -\n                    n13 * n24 * n32 -\n                    n14 * n22 * n33 +\n                    n12 * n24 * n33 +\n                    n13 * n22 * n34 -\n                    n12 * n23 * n34) +\n            n42 *\n                (+n11 * n23 * n34 -\n                    n11 * n24 * n33 +\n                    n14 * n21 * n33 -\n                    n13 * n21 * n34 +\n                    n13 * n24 * n31 -\n                    n14 * n23 * n31) +\n            n43 *\n                (+n11 * n24 * n32 -\n                    n11 * n22 * n34 -\n                    n14 * n21 * n32 +\n                    n12 * n21 * n34 +\n                    n14 * n22 * n31 -\n                    n12 * n24 * n31) +\n            n44 *\n                (-n13 * n22 * n31 -\n                    n11 * n23 * n32 +\n                    n11 * n22 * n33 +\n                    n13 * n21 * n32 -\n                    n12 * n21 * n33 +\n                    n12 * n23 * n31)\n        );\n    }\n\n    public transpose(): this {\n        const te: number[] = this.elements;\n        let tmp: number;\n        tmp = te[1];\n        te[1] = te[4];\n        te[4] = tmp;\n        tmp = te[2];\n        te[2] = te[8];\n        te[8] = tmp;\n        tmp = te[6];\n        te[6] = te[9];\n        te[9] = tmp;\n        tmp = te[3];\n        te[3] = te[12];\n        te[12] = tmp;\n        tmp = te[7];\n        te[7] = te[13];\n        te[13] = tmp;\n        tmp = te[11];\n        te[11] = te[14];\n        te[14] = tmp;\n        return this;\n    }\n\n    public setPosition(v: Vector3): this {\n        const te: number[] = this.elements;\n        te[12] = v.x;\n        te[13] = v.y;\n        te[14] = v.z;\n        return this;\n    }\n\n    /**\n     * http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n     * @param m\n     * @param throwOnDegenerate\n     * @returns {Matrix4}\n     */\n    public getInverse(m: Matrix4, throwOnDegenerate: boolean = false): this {\n        const te: number[] = this.elements,\n            me: number[] = m.elements;\n        const n11: number = me[0],\n            n21: number = me[1],\n            n31: number = me[2],\n            n41: number = me[3],\n            n12: number = me[4],\n            n22: number = me[5],\n            n32: number = me[6],\n            n42: number = me[7],\n            n13: number = me[8],\n            n23: number = me[9],\n            n33: number = me[10],\n            n43: number = me[11],\n            n14: number = me[12],\n            n24: number = me[13],\n            n34: number = me[14],\n            n44: number = me[15],\n            t11: number =\n                n23 * n34 * n42 -\n                n24 * n33 * n42 +\n                n24 * n32 * n43 -\n                n22 * n34 * n43 -\n                n23 * n32 * n44 +\n                n22 * n33 * n44,\n            t12: number =\n                n14 * n33 * n42 -\n                n13 * n34 * n42 -\n                n14 * n32 * n43 +\n                n12 * n34 * n43 +\n                n13 * n32 * n44 -\n                n12 * n33 * n44,\n            t13: number =\n                n13 * n24 * n42 -\n                n14 * n23 * n42 +\n                n14 * n22 * n43 -\n                n12 * n24 * n43 -\n                n13 * n22 * n44 +\n                n12 * n23 * n44,\n            t14: number =\n                n14 * n23 * n32 -\n                n13 * n24 * n32 -\n                n14 * n22 * n33 +\n                n12 * n24 * n33 +\n                n13 * n22 * n34 -\n                n12 * n23 * n34;\n\n        const det: number = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n        if (det === 0) {\n            const msg = `THREE.Matrix4: .getInverse() can\"t invert matrix, determinant is 0`;\n            if (throwOnDegenerate === true) {\n                throw new Error(msg);\n            } else {\n                console.warn(msg);\n            }\n            return this.identity();\n        }\n\n        const detInv: number = 1 / det;\n\n        te[0] = t11 * detInv;\n        te[1] =\n            (n24 * n33 * n41 -\n                n23 * n34 * n41 -\n                n24 * n31 * n43 +\n                n21 * n34 * n43 +\n                n23 * n31 * n44 -\n                n21 * n33 * n44) *\n            detInv;\n        te[2] =\n            (n22 * n34 * n41 -\n                n24 * n32 * n41 +\n                n24 * n31 * n42 -\n                n21 * n34 * n42 -\n                n22 * n31 * n44 +\n                n21 * n32 * n44) *\n            detInv;\n        te[3] =\n            (n23 * n32 * n41 -\n                n22 * n33 * n41 -\n                n23 * n31 * n42 +\n                n21 * n33 * n42 +\n                n22 * n31 * n43 -\n                n21 * n32 * n43) *\n            detInv;\n\n        te[4] = t12 * detInv;\n        te[5] =\n            (n13 * n34 * n41 -\n                n14 * n33 * n41 +\n                n14 * n31 * n43 -\n                n11 * n34 * n43 -\n                n13 * n31 * n44 +\n                n11 * n33 * n44) *\n            detInv;\n        te[6] =\n            (n14 * n32 * n41 -\n                n12 * n34 * n41 -\n                n14 * n31 * n42 +\n                n11 * n34 * n42 +\n                n12 * n31 * n44 -\n                n11 * n32 * n44) *\n            detInv;\n        te[7] =\n            (n12 * n33 * n41 -\n                n13 * n32 * n41 +\n                n13 * n31 * n42 -\n                n11 * n33 * n42 -\n                n12 * n31 * n43 +\n                n11 * n32 * n43) *\n            detInv;\n\n        te[8] = t13 * detInv;\n        te[9] =\n            (n14 * n23 * n41 -\n                n13 * n24 * n41 -\n                n14 * n21 * n43 +\n                n11 * n24 * n43 +\n                n13 * n21 * n44 -\n                n11 * n23 * n44) *\n            detInv;\n        te[10] =\n            (n12 * n24 * n41 -\n                n14 * n22 * n41 +\n                n14 * n21 * n42 -\n                n11 * n24 * n42 -\n                n12 * n21 * n44 +\n                n11 * n22 * n44) *\n            detInv;\n        te[11] =\n            (n13 * n22 * n41 -\n                n12 * n23 * n41 -\n                n13 * n21 * n42 +\n                n11 * n23 * n42 +\n                n12 * n21 * n43 -\n                n11 * n22 * n43) *\n            detInv;\n\n        te[12] = t14 * detInv;\n        te[13] =\n            (n13 * n24 * n31 -\n                n14 * n23 * n31 +\n                n14 * n21 * n33 -\n                n11 * n24 * n33 -\n                n13 * n21 * n34 +\n                n11 * n23 * n34) *\n            detInv;\n        te[14] =\n            (n14 * n22 * n31 -\n                n12 * n24 * n31 -\n                n14 * n21 * n32 +\n                n11 * n24 * n32 +\n                n12 * n21 * n34 -\n                n11 * n22 * n34) *\n            detInv;\n        te[15] =\n            (n12 * n23 * n31 -\n                n13 * n22 * n31 +\n                n13 * n21 * n32 -\n                n11 * n23 * n32 -\n                n12 * n21 * n33 +\n                n11 * n22 * n33) *\n            detInv;\n\n        return this;\n    }\n\n    public scale(v: Vector3): this {\n        const te: number[] = this.elements;\n        const x: number = v.x,\n            y: number = v.y,\n            z: number = v.z;\n        te[0] *= x;\n        te[4] *= y;\n        te[8] *= z;\n        te[1] *= x;\n        te[5] *= y;\n        te[9] *= z;\n        te[2] *= x;\n        te[6] *= y;\n        te[10] *= z;\n        te[3] *= x;\n        te[7] *= y;\n        te[11] *= z;\n        return this;\n    }\n\n    public getMaxScaleOnAxis(): number {\n        const te: number[] = this.elements;\n        const scaleXSq: number = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n        const scaleYSq: number = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n        const scaleZSq: number =\n            te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n        return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n    }\n\n    public makeTranslation(x: number, y: number, z: number): this {\n        return this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n    }\n\n    public makeRotationX(theta: number): this {\n        const c: number = Math.cos(theta),\n            s: number = Math.sin(theta);\n        return this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n    }\n\n    public makeRotationY(theta: number): this {\n        const c: number = Math.cos(theta),\n            s: number = Math.sin(theta);\n        return this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n    }\n\n    public makeRotationZ(theta: number): this {\n        const c: number = Math.cos(theta),\n            s: number = Math.sin(theta);\n        return this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n    }\n\n    /**\n     * http://www.gamedev.net/reference/articles/article1199.asp\n     * @param axis\n     * @param angle\n     * @returns {Matrix4}\n     */\n    public makeRotationAxis(axis: Vector3, angle: number): this {\n        const c: number = Math.cos(angle);\n        const s: number = Math.sin(angle);\n        const t: number = 1 - c;\n        const x: number = axis.x,\n            y: number = axis.y,\n            z: number = axis.z;\n        const tx: number = t * x,\n            ty = t * y;\n        return this.set(\n            tx * x + c,\n            tx * y - s * z,\n            tx * z + s * y,\n            0,\n            tx * y + s * z,\n            ty * y + c,\n            ty * z - s * x,\n            0,\n            tx * z - s * y,\n            ty * z + s * x,\n            t * z * z + c,\n            0,\n            0,\n            0,\n            0,\n            1,\n        );\n    }\n\n    public makeScale(x: number, y: number, z: number): this {\n        return this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n    }\n\n    public makeShear(x: number, y: number, z: number): this {\n        return this.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);\n    }\n\n    public compose(\n        position: Vector3,\n        quaternion: Quaternion,\n        scale: Vector3,\n    ): this {\n        this.makeRotationFromQuaternion(quaternion);\n        this.scale(scale);\n        this.setPosition(position);\n        return this;\n    }\n\n    public decompose(\n        position: Vector3,\n        quaternion: Quaternion,\n        scale: Vector3,\n    ): this {\n        const vector: Vector3 = new Vector3();\n        const matrix: Matrix4 = new Matrix4();\n        const te: number[] = this.elements;\n\n        let sx: number = vector.set(te[0], te[1], te[2]).length();\n        const sy: number = vector.set(te[4], te[5], te[6]).length();\n        const sz: number = vector.set(te[8], te[9], te[10]).length();\n\n        // if determine is negative, we need to invert one scale\n        const det: number = this.determinant();\n        if (det < 0) sx = -sx;\n\n        position.x = te[12];\n        position.y = te[13];\n        position.z = te[14];\n\n        // scale the rotation part\n        matrix.copy(this);\n\n        const invSX: number = 1 / sx;\n        const invSY: number = 1 / sy;\n        const invSZ: number = 1 / sz;\n\n        matrix.elements[0] *= invSX;\n        matrix.elements[1] *= invSX;\n        matrix.elements[2] *= invSX;\n\n        matrix.elements[4] *= invSY;\n        matrix.elements[5] *= invSY;\n        matrix.elements[6] *= invSY;\n\n        matrix.elements[8] *= invSZ;\n        matrix.elements[9] *= invSZ;\n        matrix.elements[10] *= invSZ;\n\n        quaternion.setFromRotationMatrix(matrix);\n        scale.set(sx, sy, sz);\n        return this;\n    }\n\n    public makePerspective(\n        left: number,\n        right: number,\n        top: number,\n        bottom: number,\n        near: number,\n        far: number,\n    ): this {\n        return this.set(\n            2 * near / (right - left),\n            0,\n            (right + left) / (right - left),\n            0,\n            0,\n            2 * near / (top - bottom),\n            (top + bottom) / (top - bottom),\n            0,\n            0,\n            0,\n            -(far + near) / (far - near),\n            -2 * far * near / (far - near),\n            0,\n            0,\n            -1,\n            0,\n        );\n    }\n\n    public makeOrthographic(\n        left: number,\n        right: number,\n        top: number,\n        bottom: number,\n        near: number,\n        far: number,\n    ): this {\n        const w: number = 1.0 / (right - left);\n        const h: number = 1.0 / (top - bottom);\n        const p: number = 1.0 / (far - near);\n\n        const x: number = (right + left) * w;\n        const y: number = (top + bottom) * h;\n        const z: number = (far + near) * p;\n\n        return this.set(\n            2 * w,\n            0,\n            0,\n            -x,\n            0,\n            2 * h,\n            0,\n            -y,\n            0,\n            0,\n            -2 * p,\n            -z,\n            0,\n            0,\n            0,\n            1,\n        );\n    }\n\n    public equals(matrix: Matrix4): boolean {\n        const me: number[] = matrix.elements;\n        for (let i: number = 0; i < 16; i++) {\n            if (this.elements[i] !== me[i]) return false;\n        }\n        return true;\n    }\n\n    public fromArray(array: number[] | TypedArray, offset: number = 0): this {\n        for (let i: number = 0; i < 16; i++) {\n            this.elements[i] = array[i + offset];\n        }\n        return this;\n    }\n\n    public toArray(\n        array: number[] | TypedArray = [],\n        offset: number = 0,\n    ): number[] | TypedArray {\n        const te: number[] = this.elements;\n\n        array[offset] = te[0];\n        array[offset + 1] = te[1];\n        array[offset + 2] = te[2];\n        array[offset + 3] = te[3];\n\n        array[offset + 4] = te[4];\n        array[offset + 5] = te[5];\n        array[offset + 6] = te[6];\n        array[offset + 7] = te[7];\n\n        array[offset + 8] = te[8];\n        array[offset + 9] = te[9];\n        array[offset + 10] = te[10];\n        array[offset + 11] = te[11];\n\n        array[offset + 12] = te[12];\n        array[offset + 13] = te[13];\n        array[offset + 14] = te[14];\n        array[offset + 15] = te[15];\n        return array;\n    }\n\n    public clone(): Matrix4 {\n        return new (this.constructor as new () => Matrix4)().copy(this);\n    }\n}\n","import { Box3 } from \"./Box3\";\nimport { Line3 } from \"./Line3\";\nimport { Matrix3 } from \"./Matrix3\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Sphere } from \"./Sphere\";\nimport { Vector3 } from \"./Vector3\";\n\nexport class Plane {\n    public normal: Vector3 = new Vector3(1, 0, 0);\n    public constant: number = 0;\n\n    constructor(normal: Vector3 = new Vector3(1, 0, 0), constant: number = 0) {\n        this.normal = normal;\n        this.constant = constant;\n    }\n\n    public set(normal: Vector3, constant: number): this {\n        this.normal.copy(normal);\n        this.constant = constant;\n        return this;\n    }\n\n    public setFromNormalAndCoplanarPoint(\n        normal: Vector3,\n        point: Vector3,\n    ): this {\n        this.normal.copy(normal);\n        this.constant = -point.dot(this.normal);\n        return this;\n    }\n\n    public setFromCoplanarPoints(a: Vector3, b: Vector3, c: Vector3): this {\n        const v1: Vector3 = new Vector3();\n        const v2: Vector3 = new Vector3();\n        const normal: Vector3 = v1\n            .copy(c)\n            .sub(b)\n            .cross(v2.copy(a).sub(b))\n            .normalize();\n        // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n        this.setFromNormalAndCoplanarPoint(normal, a);\n        return this;\n    }\n\n    public clone(): Plane {\n        return new (this.constructor as new () => Plane)().copy(this);\n    }\n\n    public copy(plane: Plane): this {\n        this.normal.copy(plane.normal);\n        this.constant = plane.constant;\n        return this;\n    }\n\n    /**\n     * Note: will lead to a divide by zero if the plane is invalid\n     * @returns {Plane}\n     */\n    public normalize(): this {\n        const inverseNormalLength: number = 1.0 / this.normal.length();\n        this.normal.multiplyScalar(inverseNormalLength);\n        this.constant *= inverseNormalLength;\n        return this;\n    }\n\n    public negate(): this {\n        this.constant *= -1;\n        this.normal.negate();\n        return this;\n    }\n\n    public distanceToPoint(point: Vector3): number {\n        return this.normal.dot(point) + this.constant;\n    }\n\n    public distanceToSphere(sphere: Sphere): number {\n        return this.distanceToPoint(sphere.center) - sphere.radius;\n    }\n\n    public projectPoint(point: Vector3): Vector3 {\n        return new Vector3()\n            .copy(this.normal)\n            .multiplyScalar(-this.distanceToPoint(point))\n            .add(point);\n    }\n\n    public intersectLine(line: Line3): Vector3 | undefined {\n        const direction: Vector3 = line.delta();\n        const denominator: number = this.normal.dot(direction);\n        if (denominator === 0) {\n            // line is coplanar, return origin\n            if (this.distanceToPoint(line.start) === 0) {\n                return new Vector3().copy(line.start);\n            }\n            // Unsure if this is the correct method to handle this case.\n            return undefined;\n        }\n        const t: number =\n            -(line.start.dot(this.normal) + this.constant) / denominator;\n        if (t < 0 || t > 1) {\n            return undefined;\n        }\n        return new Vector3()\n            .copy(direction)\n            .multiplyScalar(t)\n            .add(line.start);\n    }\n\n    public intersectsLine(line: Line3): boolean {\n        // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n        const startSign: number = this.distanceToPoint(line.start);\n        const endSign: number = this.distanceToPoint(line.end);\n        return (startSign < 0 && endSign > 0) || (endSign < 0 && startSign > 0);\n    }\n\n    public intersectsBox(box: Box3): boolean {\n        return box.intersectsPlane(this);\n    }\n\n    public intersectsSphere(sphere: Sphere): boolean {\n        return sphere.intersectsPlane(this);\n    }\n\n    public coplanarPoint(): Vector3 {\n        return new Vector3().copy(this.normal).multiplyScalar(-this.constant);\n    }\n\n    public applyMatrix4(matrix: Matrix4): this {\n        const normalMatrix: Matrix3 = new Matrix3().getNormalMatrix(matrix);\n        const referencePoint: Vector3 = this.coplanarPoint().applyMatrix4(\n            matrix,\n        );\n        const normal: Vector3 = this.normal\n            .applyMatrix3(normalMatrix)\n            .normalize();\n        this.constant = -referencePoint.dot(normal);\n        return this;\n    }\n\n    public translate(offset: Vector3): this {\n        this.constant -= offset.dot(this.normal);\n        return this;\n    }\n\n    public equals(plane: Plane): boolean {\n        return (\n            plane.normal.equals(this.normal) && plane.constant === this.constant\n        );\n    }\n}\n","import { Euler, EulerOrder } from \"./Euler\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Vector3 } from \"./Vector3\";\nimport { Vector4 } from \"./Vector4\";\nimport { TypedArray } from \"../core/BufferAttribute\";\n\nexport class Quaternion {\n    protected _x: number;\n    protected _y: number;\n    protected _z: number;\n    protected _w: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._w = w;\n    }\n\n    get x(): number {\n        return this._x;\n    }\n\n    set x(_x: number) {\n        this._x = _x;\n    }\n\n    get y(): number {\n        return this._y;\n    }\n\n    set y(_y: number) {\n        this._y = _y;\n    }\n\n    get z(): number {\n        return this._z;\n    }\n\n    set z(_z: number) {\n        this._z = _z;\n    }\n\n    get w(): number {\n        return this._w;\n    }\n\n    set w(_w: number) {\n        this._w = _w;\n    }\n\n    public set(x: number, y: number, z: number, w: number): this {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._w = w;\n        return this;\n    }\n\n    public copy(quaternion: Quaternion): this {\n        return this.set(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n    }\n\n    public setFromEuler(euler: Euler): this {\n        const { x, y, z, order } = euler;\n\n        const cos: (arg: number) => number = Math.cos;\n        const sin: (arg: number) => number = Math.sin;\n\n        const c1: number = cos(x / 2);\n        const c2: number = cos(y / 2);\n        const c3: number = cos(z / 2);\n\n        const s1: number = sin(x / 2);\n        const s2: number = sin(y / 2);\n        const s3: number = sin(z / 2);\n\n        if (order === EulerOrder.XYZ) {\n            return this.set(\n                s1 * c2 * c3 + c1 * s2 * s3,\n                c1 * s2 * c3 - s1 * c2 * s3,\n                c1 * c2 * s3 + s1 * s2 * c3,\n                c1 * c2 * c3 - s1 * s2 * s3,\n            );\n        } else if (order === EulerOrder.YXZ) {\n            return this.set(\n                s1 * c2 * c3 + c1 * s2 * s3,\n                c1 * s2 * c3 - s1 * c2 * s3,\n                c1 * c2 * s3 - s1 * s2 * c3,\n                c1 * c2 * c3 + s1 * s2 * s3,\n            );\n        } else if (order === EulerOrder.ZXY) {\n            return this.set(\n                s1 * c2 * c3 - c1 * s2 * s3,\n                c1 * s2 * c3 + s1 * c2 * s3,\n                c1 * c2 * s3 + s1 * s2 * c3,\n                c1 * c2 * c3 - s1 * s2 * s3,\n            );\n        } else if (order === EulerOrder.ZYX) {\n            return this.set(\n                s1 * c2 * c3 - c1 * s2 * s3,\n                c1 * s2 * c3 + s1 * c2 * s3,\n                c1 * c2 * s3 - s1 * s2 * c3,\n                c1 * c2 * c3 + s1 * s2 * s3,\n            );\n        } else if (order === EulerOrder.YZX) {\n            return this.set(\n                s1 * c2 * c3 + c1 * s2 * s3,\n                c1 * s2 * c3 + s1 * c2 * s3,\n                c1 * c2 * s3 - s1 * s2 * c3,\n                c1 * c2 * c3 - s1 * s2 * s3,\n            );\n        } else if (order === EulerOrder.XZY) {\n            return this.set(\n                s1 * c2 * c3 - c1 * s2 * s3,\n                c1 * s2 * c3 - s1 * c2 * s3,\n                c1 * c2 * s3 + s1 * s2 * c3,\n                c1 * c2 * c3 + s1 * s2 * s3,\n            );\n        }\n        return this;\n    }\n\n    /**\n     * !!! assumes axis is normalized\n     * http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n     * @param axis\n     * @param angle\n     * @returns {Quaternion}\n     */\n    public setFromAxisAngle(axis: Vector3, angle: number): this {\n        const halfAngle: number = angle / 2,\n            s: number = Math.sin(halfAngle);\n        return this.set(\n            axis.x * s,\n            axis.y * s,\n            axis.z * s,\n            Math.cos(halfAngle),\n        );\n    }\n\n    /**\n     * !!! assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n     * http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n     * @param m\n     * @returns {Quaternion}\n     */\n    public setFromRotationMatrix(m: Matrix4): this {\n        const te: number[] = m.elements,\n            m11: number = te[0],\n            m12: number = te[4],\n            m13: number = te[8],\n            m21: number = te[1],\n            m22: number = te[5],\n            m23: number = te[9],\n            m31: number = te[2],\n            m32: number = te[6],\n            m33: number = te[10],\n            trace: number = m11 + m22 + m33;\n        let s: number;\n\n        if (trace > 0) {\n            s = 0.5 / Math.sqrt(trace + 1.0);\n            return this.set(\n                (m32 - m23) * s,\n                (m13 - m31) * s,\n                (m21 - m12) * s,\n                0.25 / s,\n            );\n        } else if (m11 > m22 && m11 > m33) {\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n            return this.set(\n                0.25 * s,\n                (m12 + m21) / s,\n                (m13 + m31) / s,\n                (m32 - m23) / s,\n            );\n        } else if (m22 > m33) {\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n            return this.set(\n                (m12 + m21) / s,\n                0.25 * s,\n                (m23 + m32) / s,\n                (m13 - m31) / s,\n            );\n        } else {\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n            return this.set(\n                (m13 + m31) / s,\n                (m23 + m32) / s,\n                0.25 * s,\n                (m21 - m12) / s,\n            );\n        }\n    }\n\n    /**\n     * !! assumes direction vectors vFrom and vTo are normalized\n     * @param vFrom\n     * @param vTo\n     * @returns {Quaternion}\n     */\n    public setFromUnitVectors(vFrom: Vector3, vTo: Vector3): this {\n        const vec: Vector3 = new Vector3();\n        const EPS: number = 0.000001;\n        let r: number = vFrom.dot(vTo) + 1;\n        if (r < EPS) {\n            r = 0;\n            if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n                vec.set(-vFrom.y, vFrom.x, 0);\n            } else {\n                vec.set(0, -vFrom.z, vFrom.y);\n            }\n        } else {\n            vec.copy(vFrom).cross(vTo);\n        }\n        this._x = vec.x;\n        this._y = vec.y;\n        this._z = vec.z;\n        this._w = r;\n        return this.normalize();\n    }\n\n    public inverse(): this {\n        return this.conjugate().normalize();\n    }\n\n    public conjugate(): this {\n        return this.set(this.x * -1, this.y * -1, this.z * -1, this.w);\n    }\n\n    public dot(vec: Vector4): number {\n        return (\n            this.x * vec.x + this.y * vec.y + this.z * vec.z + this.w * vec.w\n        );\n    }\n\n    public lengthSquared(): number {\n        const { x, y, z, w } = this;\n        return x * x + y * y + z * z + w * w;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.lengthSquared());\n    }\n\n    public normalize(): this {\n        let l: number = this.length();\n        if (l === 0) {\n            return this.set(0, 0, 0, 1);\n        } else {\n            l = 1 / l;\n            return this.set(this.x * l, this.y * l, this.z * l, this.w * l);\n        }\n    }\n\n    public multiply(quaternion: Quaternion): this {\n        return this.multiplyQuaternions(this, quaternion);\n    }\n\n    public premultiply(quaternion: Quaternion): this {\n        return this.multiplyQuaternions(quaternion, this);\n    }\n\n    /**\n     * http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n     * @param a\n     * @param b\n     * @returns {Quaternion}\n     */\n    public multiplyQuaternions(a: Quaternion, b: Quaternion): this {\n        const qax: number = a.x,\n            qay: number = a.y,\n            qaz: number = a.z,\n            qaw: number = a.w;\n        const qbx: number = b.x,\n            qby: number = b.y,\n            qbz: number = b.z,\n            qbw: number = b.w;\n        return this.set(\n            qax * qbw + qaw * qbx + qay * qbz - qaz * qby,\n            qay * qbw + qaw * qby + qaz * qbx - qax * qbz,\n            qaz * qbw + qaw * qbz + qax * qby - qay * qbx,\n            qaw * qbw - qax * qbx - qay * qby - qaz * qbz,\n        );\n    }\n\n    /**\n     * http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n     * @param qb\n     * @param t\n     * @returns {Quaternion}\n     */\n    public slerp(qb: Quaternion, t: number): this {\n        if (t === 0) return this;\n        if (t === 1) return this.copy(qb);\n\n        const { x, y, z, w } = this;\n\n        let cosHalfTheta: number = w * qb.w + x * qb.x + y * qb.y + z * qb.z;\n\n        if (cosHalfTheta < 0) {\n            this.set(-qb.x, -qb.y, -qb.z, -qb.w);\n            cosHalfTheta = -cosHalfTheta;\n        } else {\n            this.copy(qb);\n        }\n\n        if (cosHalfTheta >= 1.0) {\n            return this.set(x, y, z, w);\n        }\n\n        const sinHalfTheta: number = Math.sqrt(\n            1.0 - cosHalfTheta * cosHalfTheta,\n        );\n\n        if (Math.abs(sinHalfTheta) < 0.001) {\n            return this.set(\n                0.5 * (x + this.x),\n                0.5 * (y + this.y),\n                0.5 * (z + this.z),\n                0.5 * (w + this.w),\n            );\n        }\n\n        const halfTheta: number = Math.atan2(sinHalfTheta, cosHalfTheta);\n        const ratioA: number = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n            ratioB: number = Math.sin(t * halfTheta) / sinHalfTheta;\n\n        return this.set(\n            x * ratioA + this.x * ratioB,\n            y * ratioA + this.y * ratioB,\n            z * ratioA + this.z * ratioB,\n            w * ratioA + this.w * ratioB,\n        );\n    }\n\n    public equals(quaternion: Quaternion): boolean {\n        const { x, y, z, w } = this;\n        return (\n            quaternion.x === x &&\n            quaternion.y === y &&\n            quaternion.z === z &&\n            quaternion.w === w\n        );\n    }\n\n    public fromArray(array: number[] | TypedArray, offset: number = 0): this {\n        return this.set(\n            array[offset],\n            array[offset + 1],\n            array[offset + 2],\n            array[offset + 3],\n        );\n    }\n\n    public toArray(\n        array: number[] | TypedArray = [],\n        offset: number = 0,\n    ): number[] | TypedArray {\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        array[offset + 2] = this.z;\n        array[offset + 3] = this.w;\n        return array;\n    }\n\n    public clone(): Quaternion {\n        return new (this.constructor as new () => Quaternion)().copy(this);\n    }\n}\n","import { Box3 } from \"./Box3\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Plane } from \"./Plane\";\nimport { Sphere } from \"./Sphere\";\nimport { Triangle } from \"./Triangle\";\nimport { Vector3 } from \"./Vector3\";\n\nexport class Ray {\n    public origin: Vector3 = new Vector3();\n    public direction: Vector3 = new Vector3();\n\n    constructor(\n        origin: Vector3 = new Vector3(),\n        direction: Vector3 = new Vector3(),\n    ) {\n        this.origin = origin;\n        this.direction = direction;\n    }\n\n    public set(origin: Vector3, direction: Vector3): this {\n        this.origin.copy(origin);\n        this.direction.copy(direction);\n        return this;\n    }\n\n    public clone(): Ray {\n        return new (this.constructor as new () => Ray)().copy(this);\n    }\n\n    public copy(ray: Ray): this {\n        this.origin.copy(ray.origin);\n        this.direction.copy(ray.direction);\n        return this;\n    }\n\n    public at(t: number): Vector3 {\n        return new Vector3()\n            .copy(this.direction)\n            .multiplyScalar(t)\n            .add(this.origin);\n    }\n\n    public lookAt(v: Vector3): this {\n        this.direction\n            .copy(v)\n            .sub(this.origin)\n            .normalize();\n        return this;\n    }\n\n    public recast(t: number): this {\n        this.origin.copy(this.at(t));\n        return this;\n    }\n\n    public closestPointToPoint(point: Vector3): Vector3 {\n        const result = new Vector3().copy(point).sub(this.origin);\n        const directionDistance: number = result.dot(this.direction);\n        if (directionDistance < 0) {\n            return result.copy(this.origin);\n        }\n        return result\n            .copy(this.direction)\n            .multiplyScalar(directionDistance)\n            .add(this.origin);\n    }\n\n    public distanceToPoint(point: Vector3): number {\n        return Math.sqrt(this.distanceSquaredToPoint(point));\n    }\n\n    public distanceSquaredToPoint(point: Vector3): number {\n        const directionDistance: number = new Vector3()\n            .copy(point)\n            .sub(this.origin)\n            .dot(this.direction);\n        // point behind the ray\n        if (directionDistance < 0) {\n            return this.origin.distanceToSquared(point);\n        }\n        return new Vector3()\n            .copy(this.direction)\n            .multiplyScalar(directionDistance)\n            .add(this.origin)\n            .distanceToSquared(point);\n    }\n\n    public distanceSqToSegment(\n        v0: Vector3,\n        v1: Vector3,\n        optionalPointOnRay?: Vector3,\n        optionalPointOnSegment?: Vector3,\n    ): number {\n        const segCenter: Vector3 = new Vector3();\n        const segDir: Vector3 = new Vector3();\n        const diff: Vector3 = new Vector3();\n        // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n        // It returns the min distance between the ray and the segment\n        // defined by v0 and v1\n        // It can also set two optional targets :\n        // - The closest point on the ray\n        // - The closest point on the segment\n\n        segCenter\n            .copy(v0)\n            .add(v1)\n            .multiplyScalar(0.5);\n        segDir\n            .copy(v1)\n            .sub(v0)\n            .normalize();\n        diff.copy(this.origin).sub(segCenter);\n\n        const segExtent: number = v0.distanceTo(v1) * 0.5;\n        const a01: number = -this.direction.dot(segDir);\n        const b0: number = diff.dot(this.direction);\n        const b1: number = -diff.dot(segDir);\n        const c: number = diff.lengthSquared();\n        const det: number = Math.abs(1 - a01 * a01);\n\n        let s0: number, s1: number, sqrDist: number, extDet: number;\n        if (det > 0) {\n            // The ray and segment are not parallel.\n            s0 = a01 * b1 - b0;\n            s1 = a01 * b0 - b1;\n            extDet = segExtent * det;\n            if (s0 >= 0) {\n                if (s1 >= -extDet) {\n                    if (s1 <= extDet) {\n                        // region 0\n                        // Minimum at interior points of ray and segment.\n                        const invDet: number = 1 / det;\n                        s0 *= invDet;\n                        s1 *= invDet;\n                        sqrDist =\n                            s0 * (s0 + a01 * s1 + 2 * b0) +\n                            s1 * (a01 * s0 + s1 + 2 * b1) +\n                            c;\n                    } else {\n                        // region 1\n                        s1 = segExtent;\n                        s0 = Math.max(0, -(a01 * s1 + b0));\n                        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n                    }\n                } else {\n                    // region 5\n                    s1 = -segExtent;\n                    s0 = Math.max(0, -(a01 * s1 + b0));\n                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n                }\n            } else {\n                if (s1 <= -extDet) {\n                    // region 4\n                    s0 = Math.max(0, -(-a01 * segExtent + b0));\n                    s1 =\n                        s0 > 0\n                            ? -segExtent\n                            : Math.min(Math.max(-segExtent, -b1), segExtent);\n                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n                } else if (s1 <= extDet) {\n                    // region 3\n                    s0 = 0;\n                    s1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n                    sqrDist = s1 * (s1 + 2 * b1) + c;\n                } else {\n                    // region 2\n                    s0 = Math.max(0, -(a01 * segExtent + b0));\n                    s1 =\n                        s0 > 0\n                            ? segExtent\n                            : Math.min(Math.max(-segExtent, -b1), segExtent);\n                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n                }\n            }\n        } else {\n            // Ray and segment are parallel.\n            s1 = a01 > 0 ? -segExtent : segExtent;\n            s0 = Math.max(0, -(a01 * s1 + b0));\n            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        }\n        if (optionalPointOnRay) {\n            optionalPointOnRay\n                .copy(this.direction)\n                .multiplyScalar(s0)\n                .add(this.origin);\n        }\n        if (optionalPointOnSegment) {\n            optionalPointOnSegment\n                .copy(segDir)\n                .multiplyScalar(s1)\n                .add(segCenter);\n        }\n        return sqrDist;\n    }\n\n    public intersectSphere(sphere: Sphere): Vector3 | null {\n        const vec: Vector3 = new Vector3().copy(sphere.center).sub(this.origin);\n        const tca: number = vec.dot(this.direction);\n        const d2: number = vec.dot(vec) - tca * tca;\n        const radius2: number = sphere.radius * sphere.radius;\n\n        if (d2 > radius2) return null;\n\n        const thc: number = Math.sqrt(radius2 - d2);\n\n        // t0 = first intersect point - entrance on front of sphere\n        const t0: number = tca - thc;\n\n        // t1 = second intersect point - exit point on back of sphere\n        const t1: number = tca + thc;\n\n        // test to see if both t0 and t1 are behind the ray - if so, return null\n        if (t0 < 0 && t1 < 0) return null;\n\n        // test to see if t0 is behind the ray:\n        // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n        // in order to always return an intersect point that is in front of the ray.\n        if (t0 < 0) return this.at(t1);\n\n        // else t0 is in front of the ray, so return the first collision point scaled by t0\n        return this.at(t0);\n    }\n\n    public intersectsSphere(sphere: Sphere): boolean {\n        return this.distanceToPoint(sphere.center) <= sphere.radius;\n    }\n\n    public distanceToPlane(plane: Plane): number {\n        const denominator: number = plane.normal.dot(this.direction);\n        if (denominator === 0) {\n            // line is coplanar, return origin\n            if (plane.distanceToPoint(this.origin) === 0) {\n                return 0;\n            }\n            // Null is preferable to undefined since undefined means.... it is undefined\n            return Infinity;\n        }\n        const t: number =\n            -(this.origin.dot(plane.normal) + plane.constant) / denominator;\n        // Return if the ray never intersects the plane\n        return t >= 0 ? t : Infinity;\n    }\n\n    public intersectPlane(plane: Plane): Vector3 {\n        const t: number = this.distanceToPlane(plane);\n        if (!isFinite(t)) {\n            return null;\n        }\n        return this.at(t);\n    }\n\n    public intersectsPlane(plane: Plane): boolean {\n        // check if the ray lies on the plane first\n        const distToPoint: number = plane.distanceToPoint(this.origin);\n        if (distToPoint === 0) {\n            return true;\n        }\n        const denominator: number = plane.normal.dot(this.direction);\n        if (denominator * distToPoint < 0) {\n            return true;\n        }\n        // ray origin is behind the plane (and is pointing behind it)\n        return false;\n    }\n\n    public intersectBox(box: Box3): Vector3 {\n        let tmin: number,\n            tmax: number,\n            tymin: number,\n            tymax: number,\n            tzmin: number,\n            tzmax: number;\n        const invdirx: number = 1 / this.direction.x,\n            invdiry: number = 1 / this.direction.y,\n            invdirz: number = 1 / this.direction.z;\n        const origin: Vector3 = this.origin;\n        if (invdirx >= 0) {\n            tmin = (box.min.x - origin.x) * invdirx;\n            tmax = (box.max.x - origin.x) * invdirx;\n        } else {\n            tmin = (box.max.x - origin.x) * invdirx;\n            tmax = (box.min.x - origin.x) * invdirx;\n        }\n        if (invdiry >= 0) {\n            tymin = (box.min.y - origin.y) * invdiry;\n            tymax = (box.max.y - origin.y) * invdiry;\n        } else {\n            tymin = (box.max.y - origin.y) * invdiry;\n            tymax = (box.min.y - origin.y) * invdiry;\n        }\n        if (tmin > tymax || tymin > tmax) return null;\n        // These lines also handle the case where tmin or tmax is NaN\n        // (result of 0 * Infinity). x !== x returns true if x is NaN\n        if (tymin > tmin || tmin !== tmin) tmin = tymin;\n        if (tymax < tmax || tmax !== tmax) tmax = tymax;\n        if (invdirz >= 0) {\n            tzmin = (box.min.z - origin.z) * invdirz;\n            tzmax = (box.max.z - origin.z) * invdirz;\n        } else {\n            tzmin = (box.max.z - origin.z) * invdirz;\n            tzmax = (box.min.z - origin.z) * invdirz;\n        }\n        if (tmin > tzmax || tzmin > tmax) return null;\n        if (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n        if (tzmax < tmax || tmax !== tmax) tmax = tzmax;\n        // return point closest to the ray (positive side)\n        if (tmax < 0) return null;\n        return this.at(tmin >= 0 ? tmin : tmax);\n    }\n\n    public intersectsBox(box: Box3): boolean {\n        return this.intersectBox(box) !== null;\n    }\n\n    public intersectTriangle(\n        triangle: Triangle,\n        backFaceCulling: boolean = false,\n    ): Vector3 {\n        // Compute the offset origin, edges, and normal.\n        const a: Vector3 = triangle.a,\n            b: Vector3 = triangle.b,\n            c: Vector3 = triangle.c;\n        const edge1: Vector3 = new Vector3().copy(b).sub(a);\n        const edge2: Vector3 = new Vector3().copy(c).sub(a);\n        const normal: Vector3 = new Vector3().copy(edge1).cross(edge2);\n        // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n        // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n        //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n        //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n        //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n        let DdN: number = this.direction.dot(normal);\n        let sign: number;\n        if (DdN > 0) {\n            if (backFaceCulling) return null;\n            sign = 1;\n        } else if (DdN < 0) {\n            sign = -1;\n            DdN = -DdN;\n        } else {\n            return null;\n        }\n        const diff: Vector3 = new Vector3().copy(this.origin).sub(a);\n        const DdQxE2: number =\n            sign * this.direction.dot(edge2.copy(diff).cross(edge2));\n        // b1 < 0, no intersection\n        if (DdQxE2 < 0) {\n            return null;\n        }\n        const DdE1xQ: number = sign * this.direction.dot(edge1.cross(diff));\n        // b2 < 0, no intersection\n        if (DdE1xQ < 0) {\n            return null;\n        }\n        // b1+b2 > 1, no intersection\n        if (DdQxE2 + DdE1xQ > DdN) {\n            return null;\n        }\n        // Line intersects triangle, check if ray does.\n        const QdN: number = -sign * diff.dot(normal);\n        // t < 0, no intersection\n        if (QdN < 0) {\n            return null;\n        }\n        // Ray intersects triangle.\n        return this.at(QdN / DdN);\n    }\n\n    public intersectsTriangle(triangle: Triangle): boolean {\n        return this.intersectTriangle(triangle) !== null;\n    }\n\n    public applyMatrix4(matrix4: Matrix4): this {\n        this.origin.applyMatrix4(matrix4);\n        this.direction.transformDirection(matrix4);\n        return this;\n    }\n\n    public equals(ray: Ray): boolean {\n        return (\n            ray.origin.equals(this.origin) &&\n            ray.direction.equals(this.direction)\n        );\n    }\n}\n","import { Box3 } from \"./Box3\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Plane } from \"./Plane\";\nimport { Vector3 } from \"./Vector3\";\n\nexport class Sphere {\n    public center: Vector3 = new Vector3();\n    public radius: number = 0;\n\n    constructor(center: Vector3 = new Vector3(), radius: number = 0) {\n        this.center = center;\n        this.radius = radius;\n    }\n\n    public set(center: Vector3, radius: number): this {\n        this.center.copy(center);\n        this.radius = radius;\n        return this;\n    }\n\n    public setFromPoints(points: Vector3[], optionalCenter?: Vector3): this {\n        if (optionalCenter !== undefined) {\n            this.center.copy(optionalCenter);\n        } else {\n            this.center = new Box3().setFromPoints(points).getCenter();\n        }\n        let maxRadiusSq: number = 0;\n        for (let i: number = 0, il: number = points.length; i < il; i++) {\n            maxRadiusSq = Math.max(\n                maxRadiusSq,\n                this.center.distanceToSquared(points[i]),\n            );\n        }\n        this.radius = Math.sqrt(maxRadiusSq);\n        return this;\n    }\n\n    public clone(): Sphere {\n        return new (this.constructor as new () => Sphere)().copy(this);\n    }\n\n    public copy(sphere: Sphere): this {\n        this.center.copy(sphere.center);\n        this.radius = sphere.radius;\n        return this;\n    }\n\n    public empty(): boolean {\n        return this.radius <= 0;\n    }\n\n    public containsPoint(point: Vector3): boolean {\n        return (\n            point.distanceToSquared(this.center) <= this.radius * this.radius\n        );\n    }\n\n    public distanceToPoint(point: Vector3): number {\n        return point.distanceTo(this.center) - this.radius;\n    }\n\n    public intersectsSphere(sphere: Sphere): boolean {\n        const radiusSum: number = this.radius + sphere.radius;\n        return (\n            sphere.center.distanceToSquared(this.center) <=\n            radiusSum * radiusSum\n        );\n    }\n\n    public intersectsBox(box: Box3): boolean {\n        return box.intersectsSphere(this);\n    }\n\n    public intersectsPlane(plane: Plane): boolean {\n        return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n    }\n\n    public clampPoint(point: Vector3): Vector3 {\n        const deltaLengthSquared: number = this.center.distanceToSquared(point);\n        const result: Vector3 = new Vector3().copy(point);\n        if (deltaLengthSquared > this.radius * this.radius) {\n            result.sub(this.center).normalize();\n            result.multiplyScalar(this.radius).add(this.center);\n        }\n        return result;\n    }\n\n    public getBoundingBox(): Box3 {\n        return new Box3()\n            .set(this.center, this.center)\n            .expandByScalar(this.radius);\n    }\n\n    public applyMatrix4(matrix: Matrix4) {\n        this.center.applyMatrix4(matrix);\n        this.radius = this.radius * matrix.getMaxScaleOnAxis();\n        return this;\n    }\n\n    public translate(offset: Vector3): this {\n        this.center.add(offset);\n        return this;\n    }\n\n    public equals(sphere: Sphere): boolean {\n        return (\n            sphere.center.equals(this.center) && sphere.radius === this.radius\n        );\n    }\n}\n","import { Line3 } from \"./Line3\";\nimport { Plane } from \"./Plane\";\nimport { Vector3 } from \"./Vector3\";\n\nexport class Triangle {\n    public a: Vector3 = new Vector3();\n    public b: Vector3 = new Vector3();\n    public c: Vector3 = new Vector3();\n\n    constructor(\n        a: Vector3 = new Vector3(),\n        b: Vector3 = new Vector3(),\n        c: Vector3 = new Vector3(),\n    ) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n    }\n\n    public set(a: Vector3, b: Vector3, c: Vector3): this {\n        this.a.copy(a);\n        this.b.copy(b);\n        this.c.copy(c);\n        return this;\n    }\n\n    public clone(): Triangle {\n        return new (this.constructor as new () => Triangle)().copy(this);\n    }\n\n    public copy(triangle: Triangle): this {\n        this.a.copy(triangle.a);\n        this.b.copy(triangle.b);\n        this.c.copy(triangle.c);\n        return this;\n    }\n\n    public area(): number {\n        const v0: Vector3 = new Vector3().copy(this.c).sub(this.b);\n        const v1: Vector3 = new Vector3().copy(this.a).sub(this.b);\n        return v0.cross(v1).length() * 0.5;\n    }\n\n    public midpoint(): Vector3 {\n        return new Vector3()\n            .copy(this.a)\n            .add(this.b)\n            .add(this.c)\n            .multiplyScalar(1 / 3);\n    }\n\n    public normal(): Vector3 {\n        const vec = new Vector3().copy(this.a).sub(this.b);\n        const result = new Vector3()\n            .copy(this.c)\n            .sub(this.b)\n            .cross(vec);\n        const resultLengthSquared = result.lengthSquared();\n        if (resultLengthSquared > 0) {\n            return result.multiplyScalar(1 / Math.sqrt(resultLengthSquared));\n        }\n        return result.set(0, 0, 0);\n    }\n\n    public plane(): Plane {\n        return new Plane().setFromCoplanarPoints(this.a, this.b, this.c);\n    }\n\n    /**\n     * based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n     * @param point\n     */\n    public barycoordFromPoint(point: Vector3): Vector3 {\n        const v0: Vector3 = new Vector3().copy(this.c).sub(this.a);\n        const v1: Vector3 = new Vector3().copy(this.b).sub(this.a);\n        const v2: Vector3 = new Vector3().copy(point).sub(this.a);\n\n        const dot00: number = v0.dot(v0);\n        const dot01: number = v0.dot(v1);\n        const dot02: number = v0.dot(v2);\n        const dot11: number = v1.dot(v1);\n        const dot12: number = v1.dot(v2);\n\n        const denom: number = dot00 * dot11 - dot01 * dot01;\n\n        // collinear or singular triangle\n        if (denom === 0) {\n            // arbitrary location outside of triangle?\n            // not sure if this is the best idea, maybe should be returning undefined\n            return new Vector3().set(-2, -1, -1);\n        }\n\n        const invDenom: number = 1 / denom;\n        const u: number = (dot11 * dot02 - dot01 * dot12) * invDenom;\n        const v: number = (dot00 * dot12 - dot01 * dot02) * invDenom;\n\n        // barycentric coordinates must always sum to 1\n        return new Vector3().set(1 - u - v, v, u);\n    }\n\n    public containsPoint(point: Vector3): boolean {\n        const result: Vector3 = this.barycoordFromPoint(point);\n        return result.x >= 0 && result.y >= 0 && result.x + result.y <= 1;\n    }\n\n    public closestPointToPoint(point: Vector3): Vector3 {\n        // project the point onto the plane of the triangle\n        const plane: Plane = new Plane().setFromCoplanarPoints(\n            this.a,\n            this.b,\n            this.c,\n        );\n        const projectedPoint: Vector3 = plane.projectPoint(point);\n\n        // check if the projection lies within the triangle\n        if (this.containsPoint(projectedPoint) === true) {\n            // if so, this is the closest point\n            return new Vector3().copy(projectedPoint);\n        } else {\n            const result: Vector3 = new Vector3();\n            let minDistance: number = Infinity;\n\n            // if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n            const edgeList: Line3[] = [\n                new Line3(this.a, this.b),\n                new Line3(this.b, this.c),\n                new Line3(this.c, this.a),\n            ];\n\n            for (let i: number = 0; i < edgeList.length; i++) {\n                const closestPoint: Vector3 = edgeList[i].closestPointToPoint(\n                    projectedPoint,\n                    true,\n                );\n                const distance: number = projectedPoint.distanceToSquared(\n                    closestPoint,\n                );\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    result.copy(closestPoint);\n                }\n            }\n            return result;\n        }\n    }\n\n    public equals(triangle: Triangle): boolean {\n        return (\n            triangle.a.equals(this.a) &&\n            triangle.b.equals(this.b) &&\n            triangle.c.equals(this.c)\n        );\n    }\n}\n","import { TypedArray } from \"../core/BufferAttribute\";\nimport { Matrix3 } from \"./Matrix3\";\n\nexport class Vector2 {\n    public _x: number;\n    public _y: number;\n\n    get x() {\n        return this._x;\n    }\n\n    set x(x: number) {\n        this._x = x;\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set y(y: number) {\n        this._y = y;\n    }\n\n    get width(): number {\n        return this.x;\n    }\n\n    set width(width: number) {\n        this._x = width;\n    }\n\n    get height(): number {\n        return this.y;\n    }\n\n    set height(height: number) {\n        this._y = height;\n    }\n\n    constructor(x: number = 0, y: number = 0) {\n        this._x = x;\n        this._y = y;\n    }\n\n    public set(x: number, y: number): this {\n        this._x = x;\n        this._y = y;\n        return this;\n    }\n\n    public setScalar(scalar: number): this {\n        return this.set(scalar, scalar);\n    }\n\n    public copy(v: Vector2): this {\n        return this.set(v.x, v.y);\n    }\n\n    public add(v: Vector2): this {\n        return this.set(this.x + v.x, this.y + v.y);\n    }\n\n    public addScalar(s: number): this {\n        return this.set(this.x + s, this.y + s);\n    }\n\n    public sub(v: Vector2): this {\n        return this.set(this.x - v.x, this.y - v.y);\n    }\n\n    public subScalar(s: number): this {\n        return this.set(this.x - s, this.y - s);\n    }\n\n    public multiply(v: Vector2): this {\n        return this.set(this.x * v.x, this.y * v.y);\n    }\n\n    public multiplyScalar(s: number): this {\n        return this.set(this.x * s, this.y * s);\n    }\n\n    public divide(v: Vector2): this {\n        return this.set(this.x / v.x, this.y / v.y);\n    }\n\n    public divideScalar(s: number): this {\n        return this.set(this.x / s, this.y / s);\n    }\n\n    public applyMatrix3(m: Matrix3): this {\n        const x: number = this.x,\n            y: number = this.y;\n        const e: number[] = m.elements;\n        return this.set(e[0] * x + e[3] * y + e[6], e[1] * x + e[4] * y + e[7]);\n    }\n\n    public min(v: Vector2): this {\n        this.x = Math.min(this.x, v.x);\n        this.y = Math.min(this.y, v.y);\n        return this;\n    }\n\n    public max(v: Vector2): this {\n        this.x = Math.max(this.x, v.x);\n        this.y = Math.max(this.y, v.y);\n        return this;\n    }\n\n    public clamp(min: Vector2, max: Vector2): this {\n        return this.set(\n            Math.max(min.x, Math.min(max.x, this.x)),\n            Math.max(min.y, Math.min(max.y, this.y)),\n        );\n    }\n\n    public negate(): this {\n        return this.set(-this.x, -this.y);\n    }\n\n    public dot(v: Vector2): number {\n        return this.x * v.x + this.y * v.y;\n    }\n\n    public lengthSquared(): number {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.lengthSquared());\n    }\n\n    public manhattanLength(): number {\n        return Math.abs(this.x) + Math.abs(this.y);\n    }\n\n    public normalize(): this {\n        return this.divideScalar(this.length() || 1);\n    }\n\n    public setLength(length: number): this {\n        return this.normalize().multiplyScalar(length);\n    }\n\n    public lerp(v: Vector2, alpha: number): this {\n        return this.set(\n            this.x + (v.x - this.x) * alpha,\n            this.y + (v.y - this.y) * alpha,\n        );\n    }\n\n    public lerpVectors(v1: Vector2, v2: Vector2, alpha: number): this {\n        return this.copy(v2)\n            .sub(v1)\n            .multiplyScalar(alpha)\n            .add(v1);\n    }\n\n    public equals(v: Vector2): boolean {\n        return v.x === this.x && v.y === this.y;\n    }\n\n    public fromArray(array: number[] | TypedArray, offset: number = 0): this {\n        return this.set(array[offset], array[offset + 1]);\n    }\n\n    public toArray(\n        array: number[] | TypedArray = [],\n        offset: number = 0,\n    ): number[] | TypedArray {\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        return array;\n    }\n\n    public rotateAround(center: Vector2, angle: number): this {\n        const c: number = Math.cos(angle),\n            s: number = Math.sin(angle);\n        const x: number = this.x - center.x;\n        const y: number = this.y - center.y;\n        return this.set(x * c - y * s + center.x, x * s + y * c + center.y);\n    }\n\n    public clone(): Vector2 {\n        return new (this.constructor as new () => Vector2)().copy(this);\n    }\n}\n","import { TypedArray } from \"../core/BufferAttribute\";\nimport { Euler } from \"./Euler\";\nimport { MathUtil } from \"./Math\";\nimport { Matrix3 } from \"./Matrix3\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector4 } from \"./Vector4\";\n\nexport class Vector3 {\n    private _x: number;\n    private _y: number;\n    private _z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n    }\n\n    get x(): number {\n        return this._x;\n    }\n\n    set x(x: number) {\n        this._x = x;\n    }\n\n    get y(): number {\n        return this._y;\n    }\n\n    set y(y: number) {\n        this._y = y;\n    }\n\n    get z(): number {\n        return this._z;\n    }\n\n    set z(z: number) {\n        this._z = z;\n    }\n\n    public set(x: number, y: number, z: number): this {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        return this;\n    }\n\n    public setScalar(scalar: number): this {\n        return this.set(scalar, scalar, scalar);\n    }\n\n    public copy(vec: Vector3): this {\n        return this.set(vec.x, vec.y, vec.z);\n    }\n\n    public add(vec: Vector3): this {\n        return this.set(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public addScalar(scalar: number): this {\n        return this.set(this.x + scalar, this.y + scalar, this.z + scalar);\n    }\n\n    public sub(vec: Vector3): this {\n        return this.set(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public subScalar(scalar: number): this {\n        return this.set(this.x - scalar, this.y - scalar, this.z - scalar);\n    }\n\n    public multiply(vec: Vector3): this {\n        return this.set(this.x * vec.x, this.y * vec.y, this.z * vec.z);\n    }\n\n    public multiplyScalar(scalar: number): this {\n        return this.set(this.x * scalar, this.y * scalar, this.z * scalar);\n    }\n\n    public divide(vec: Vector3): this {\n        return this.set(this.x / vec.x, this.y / vec.y, this.z / vec.z);\n    }\n\n    public divideScalar(scalar: number): this {\n        return this.set(this.x / scalar, this.y / scalar, this.z / scalar);\n    }\n\n    public applyEuler(euler: Euler): this {\n        const quaternion: Quaternion = new Quaternion();\n        return this.applyQuaternion(quaternion.setFromEuler(euler));\n    }\n\n    public applyAxisAngle(axis: Vector3, angle: number): this {\n        const quaternion: Quaternion = new Quaternion();\n        return this.applyQuaternion(quaternion.setFromAxisAngle(axis, angle));\n    }\n\n    public applyMatrix3(m: Matrix3): this {\n        const x: number = this.x,\n            y: number = this.y,\n            z: number = this.z;\n        const e: number[] = m.elements;\n        return this.set(\n            e[0] * x + e[3] * y + e[6] * z,\n            e[1] * x + e[4] * y + e[7] * z,\n            e[2] * x + e[5] * y + e[8] * z,\n        );\n    }\n\n    public applyMatrix4(matrix: Matrix4): this {\n        const x: number = this.x,\n            y: number = this.y,\n            z: number = this.z;\n        const e: number[] = matrix.elements;\n        const w: number = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n        return this.set(\n            (e[0] * x + e[4] * y + e[8] * z + e[12]) * w,\n            (e[1] * x + e[5] * y + e[9] * z + e[13]) * w,\n            (e[2] * x + e[6] * y + e[10] * z + e[14]) * w,\n        );\n    }\n\n    public applyQuaternion(quaternion: Quaternion): this {\n        const x: number = this.x,\n            y: number = this.y,\n            z: number = this.z;\n        const qx: number = quaternion.x,\n            qy: number = quaternion.y,\n            qz: number = quaternion.z,\n            qw: number = quaternion.w;\n\n        // calculate quat * vector\n        const ix: number = qw * x + qy * z - qz * y;\n        const iy: number = qw * y + qz * x - qx * z;\n        const iz: number = qw * z + qx * y - qy * x;\n        const iw: number = -qx * x - qy * y - qz * z;\n\n        // calculate result * inverse quat\n        return this.set(\n            ix * qw + iw * -qx + iy * -qz - iz * -qy,\n            iy * qw + iw * -qy + iz * -qx - ix * -qz,\n            iz * qw + iw * -qz + ix * -qy - iy * -qx,\n        );\n    }\n\n    public transformDirection(mat4: Matrix4): this {\n        const x: number = this.x,\n            y: number = this.y,\n            z: number = this.z;\n        const e: number[] = mat4.elements;\n        return this.set(\n            e[0] * x + e[4] * y + e[8] * z,\n            e[1] * x + e[5] * y + e[9] * z,\n            e[2] * x + e[6] * y + e[10] * z,\n        ).normalize();\n    }\n\n    public min(vec: Vector3): this {\n        return this.set(\n            Math.min(this.x, vec.x),\n            Math.min(this.y, vec.y),\n            Math.min(this.z, vec.z),\n        );\n    }\n\n    public max(vec: Vector3): this {\n        return this.set(\n            Math.max(this.x, vec.x),\n            Math.max(this.y, vec.y),\n            Math.max(this.z, vec.z),\n        );\n    }\n\n    public clamp(min: Vector3, max: Vector3): this {\n        return this.set(\n            Math.max(min.x, Math.min(max.x, this.x)),\n            Math.max(min.y, Math.min(max.y, this.y)),\n            Math.max(min.z, Math.min(max.z, this.z)),\n        );\n    }\n\n    public negate(): this {\n        return this.set(-this.x, -this.y, -this.z);\n    }\n\n    public dot(v: Vector3 | Vector4): number {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n\n    public lengthSquared(): number {\n        const x: number = this.x,\n            y: number = this.y,\n            z: number = this.z;\n        return x * x + y * y + z * z;\n    }\n\n    public length(): number {\n        const x: number = this.x,\n            y: number = this.y,\n            z: number = this.z;\n        return Math.sqrt(x * x + y * y + z * z);\n    }\n\n    public setLength(length: number): this {\n        return this.normalize().multiplyScalar(length);\n    }\n\n    public manhattanLength(): number {\n        const x: number = this.x,\n            y: number = this.y,\n            z: number = this.z;\n        return Math.abs(x) + Math.abs(y) + Math.abs(z);\n    }\n\n    public normalize(): this {\n        return this.divideScalar(this.length() || 1);\n    }\n\n    public lerp(vec: Vector3, alpha: number): this {\n        return this.set(\n            (vec.x - this.x) * alpha,\n            (vec.y - this.y) * alpha,\n            (vec.z - this.z) * alpha,\n        );\n    }\n\n    public lerpVectors(v1: Vector3, v2: Vector3, alpha: number): this {\n        return this.set(v2.x - v1.x, v2.y - v1.y, v2.z - v1.z)\n            .multiplyScalar(alpha)\n            .add(v1);\n    }\n\n    public cross(vec: Vector3): this {\n        const ax: number = this.x,\n            ay: number = this.y,\n            az: number = this.z;\n        const bx: number = vec.x,\n            by: number = vec.y,\n            bz: number = vec.z;\n        return this.set(\n            ay * bz - az * by,\n            az * bx - ax * bz,\n            ax * by - ay * bx,\n        );\n    }\n\n    public projectOnVector(vector: Vector3): this {\n        const scalar: number = vector.dot(this) / vector.lengthSquared();\n        return this.copy(vector).multiplyScalar(scalar);\n    }\n\n    public projectOnPlane(planeNormal: Vector3): this {\n        const vec: Vector3 = new Vector3();\n        vec.copy(this).projectOnVector(planeNormal);\n        return this.sub(vec);\n    }\n\n    /**\n     * reflect incident vector off plane orthogonal to normal\n     * normal is assumed to have unit length\n     * @param normal\n     * @returns {Vector3}\n     */\n    public reflect(normal: Vector3): this {\n        const vec: Vector3 = new Vector3();\n        return this.sub(vec.copy(normal).multiplyScalar(2 * this.dot(normal)));\n    }\n\n    public angleTo(v: Vector3): number {\n        const theta: number =\n            this.dot(v) / Math.sqrt(this.lengthSquared() * v.lengthSquared());\n        return Math.acos(MathUtil.clamp(theta, -1, 1));\n    }\n\n    public distanceTo(vec: Vector3): number {\n        return Math.sqrt(this.distanceToSquared(vec));\n    }\n\n    public distanceToSquared(vec: Vector3): number {\n        const dx: number = this.x - vec.x,\n            dy: number = this.y - vec.y,\n            dz: number = this.z - vec.z;\n        return dx * dx + dy * dy + dz * dz;\n    }\n\n    public equals(vec: Vector3): boolean {\n        return vec.x === this.x && vec.y === this.y && vec.z === this.z;\n    }\n\n    public setFromMatrixPosition(m: Matrix4): this {\n        const e: number[] = m.elements;\n        return this.set(e[12], e[13], e[14]);\n    }\n\n    public setFromMatrixScale(m: Matrix4): this {\n        const sx: number = this.setFromMatrixColumn(m, 0).length();\n        const sy: number = this.setFromMatrixColumn(m, 1).length();\n        const sz: number = this.setFromMatrixColumn(m, 2).length();\n        this.x = sx;\n        this.y = sy;\n        this.z = sz;\n        return this;\n    }\n\n    public setFromMatrixColumn(m: Matrix4, index: number): this {\n        return this.fromArray(m.elements, index * 4);\n    }\n\n    public fromArray(array: number[] | TypedArray, offset: number = 0): this {\n        return this.set(array[offset], array[offset + 1], array[offset + 2]);\n    }\n\n    public toArray(\n        array: number[] | TypedArray = [],\n        offset: number = 0,\n    ): number[] | TypedArray {\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        array[offset + 2] = this.z;\n        return array;\n    }\n\n    public clone(): Vector3 {\n        return new (this.constructor as new () => Vector3)().copy(this);\n    }\n}\n","import { TypedArray } from \"../core/BufferAttribute\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector3 } from \"./Vector3\";\n\nexport class Vector4 {\n    protected _x: number;\n    protected _y: number;\n    protected _z: number;\n    protected _w: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._w = w;\n    }\n\n    get x(): number {\n        return this._x;\n    }\n\n    set x(x: number) {\n        this._x = x;\n    }\n\n    get y(): number {\n        return this._y;\n    }\n\n    set y(y: number) {\n        this._y = y;\n    }\n\n    get z(): number {\n        return this._z;\n    }\n\n    set z(z: number) {\n        this._z = z;\n    }\n\n    get w(): number {\n        return this._w;\n    }\n\n    set w(w: number) {\n        this._w = w;\n    }\n\n    public set(x: number, y: number, z: number, w: number): this {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._w = w;\n        return this;\n    }\n\n    public setScalar(scalar: number): this {\n        return this.set(scalar, scalar, scalar, scalar);\n    }\n\n    public copy(v: Vector4 | Vector3): this {\n        return this.set(\n            v.x,\n            v.y,\n            v.z,\n            (v instanceof Vector4 ? v.w : undefined) || 1,\n        );\n    }\n\n    public add(v: Vector4): this {\n        return this.set(this.x + v.x, this.y + v.y, this.z + v.z, this.w + v.w);\n    }\n\n    public addScalar(s: number): this {\n        return this.set(this.x + s, this.y + s, this.z + s, this.w + s);\n    }\n\n    public sub(v: Vector4): this {\n        return this.set(this.x - v.x, this.y - v.y, this.z - v.z, this.w - v.w);\n    }\n\n    public subScalar(s: number): this {\n        return this.set(this.x - s, this.y - s, this.z - s, this.w - s);\n    }\n\n    public multiplyScalar(s: number): this {\n        return this.set(this.x * s, this.y * s, this.z * s, this.w * s);\n    }\n\n    public divideScalar(s: number): this {\n        return this.set(this.x / s, this.y / s, this.z / s, this.w / s);\n    }\n\n    public applyMatrix4(m: Matrix4): this {\n        const x: number = this.x,\n            y: number = this.y,\n            z: number = this.z,\n            w: number = this.w;\n        const e: number[] = m.elements;\n        return this.set(\n            e[0] * x + e[4] * y + e[8] * z + e[12] * w,\n            e[1] * x + e[5] * y + e[9] * z + e[13] * w,\n            e[2] * x + e[6] * y + e[10] * z + e[14] * w,\n            e[3] * x + e[7] * y + e[11] * z + e[15] * w,\n        );\n    }\n\n    /**\n     * http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n     * q is assumed to be normalized\n     * @param q\n     * @returns {Vector4}\n     */\n    public setAxisAngleFromQuaternion(q: Quaternion): this {\n        const s = Math.sqrt(1 - q.w * q.w);\n        if (s < 0.0001) {\n            return this.set(1, 0, 0, 2 * Math.acos(q.w));\n        } else {\n            return this.set(q.x / s, q.y / s, q.z / s, 2 * Math.acos(q.w));\n        }\n    }\n\n    /**\n     * http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n     * @param m\n     * @returns {Vector4}\n     */\n    public setAxisAngleFromRotationMatrix(m: Matrix4): this {\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n        let angle: number, x: number, y: number, z: number; // variables for result\n        const epsilon: number = 0.01, // margin to allow for rounding errors\n            epsilon2: number = 0.1, // margin to distinguish between 0 and 180 degrees\n            te: number[] = m.elements,\n            m11: number = te[0],\n            m12: number = te[4],\n            m13: number = te[8],\n            m21: number = te[1],\n            m22: number = te[5],\n            m23: number = te[9],\n            m31: number = te[2],\n            m32: number = te[6],\n            m33: number = te[10];\n        if (\n            Math.abs(m12 - m21) < epsilon &&\n            Math.abs(m13 - m31) < epsilon &&\n            Math.abs(m23 - m32) < epsilon\n        ) {\n            // singularity found\n            // first check for identity matrix which must have +1 for all terms\n            // in leading diagonal and zero in other terms\n            if (\n                Math.abs(m12 + m21) < epsilon2 &&\n                Math.abs(m13 + m31) < epsilon2 &&\n                Math.abs(m23 + m32) < epsilon2 &&\n                Math.abs(m11 + m22 + m33 - 3) < epsilon2\n            ) {\n                // this singularity is identity matrix so angle = 0\n                // zero angle, arbitrary axis\n                return this.set(1, 0, 0, 0);\n            }\n            // otherwise this singularity is angle = 180\n            angle = Math.PI;\n            const xx: number = (m11 + 1) / 2;\n            const yy: number = (m22 + 1) / 2;\n            const zz: number = (m33 + 1) / 2;\n            const xy: number = (m12 + m21) / 4;\n            const xz: number = (m13 + m31) / 4;\n            const yz: number = (m23 + m32) / 4;\n            if (xx > yy && xx > zz) {\n                // m11 is the largest diagonal term\n                if (xx < epsilon) {\n                    x = 0;\n                    y = 0.707106781;\n                    z = 0.707106781;\n                } else {\n                    x = Math.sqrt(xx);\n                    y = xy / x;\n                    z = xz / x;\n                }\n            } else if (yy > zz) {\n                // m22 is the largest diagonal term\n                if (yy < epsilon) {\n                    x = 0.707106781;\n                    y = 0;\n                    z = 0.707106781;\n                } else {\n                    y = Math.sqrt(yy);\n                    x = xy / y;\n                    z = yz / y;\n                }\n            } else {\n                // m33 is the largest diagonal term so base result on this\n                if (zz < epsilon) {\n                    x = 0.707106781;\n                    y = 0.707106781;\n                    z = 0;\n                } else {\n                    z = Math.sqrt(zz);\n                    x = xz / z;\n                    y = yz / z;\n                }\n            }\n            // return 180 deg rotation\n            return this.set(x, y, z, angle);\n        }\n        // as we have reached here there are no singularities so we can handle normally\n        let s: number = Math.sqrt(\n            (m32 - m23) * (m32 - m23) +\n                (m13 - m31) * (m13 - m31) +\n                (m21 - m12) * (m21 - m12),\n        ); // used to normalize\n        if (Math.abs(s) < 0.001) s = 1;\n        // prevent divide by zero, should not happen if matrix is orthogonal and should be\n        // caught by singularity test above, but I\"ve left it in just in case\n        return this.set(\n            (m32 - m23) / s,\n            (m13 - m31) / s,\n            (m21 - m12) / s,\n            Math.acos((m11 + m22 + m33 - 1) / 2),\n        );\n    }\n\n    public min(v: Vector4): this {\n        return this.set(\n            Math.min(this.x, v.x),\n            Math.min(this.y, v.y),\n            Math.min(this.z, v.z),\n            Math.min(this.w, v.w),\n        );\n    }\n\n    public max(v: Vector4): this {\n        return this.set(\n            Math.max(this.x, v.x),\n            Math.max(this.y, v.y),\n            Math.max(this.z, v.z),\n            Math.max(this.w, v.w),\n        );\n    }\n\n    public clamp(min: Vector4, max: Vector4): this {\n        return this.set(\n            Math.max(min.x, Math.min(max.x, this.x)),\n            Math.max(min.y, Math.min(max.y, this.y)),\n            Math.max(min.z, Math.min(max.z, this.z)),\n            Math.max(min.w, Math.min(max.w, this.w)),\n        );\n    }\n\n    public negate(): this {\n        return this.set(-this.x, -this.y, -this.z, -this.w);\n    }\n\n    public dot(v: Vector4): number {\n        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n    }\n\n    public lengthSquared(): number {\n        return (\n            this.x * this.x +\n            this.y * this.y +\n            this.z * this.z +\n            this.w * this.w\n        );\n    }\n\n    public length(): number {\n        return Math.sqrt(this.lengthSquared());\n    }\n\n    public manhattanLength(): number {\n        return (\n            Math.abs(this.x) +\n            Math.abs(this.y) +\n            Math.abs(this.z) +\n            Math.abs(this.w)\n        );\n    }\n\n    public normalize(): this {\n        return this.divideScalar(this.length() || 1);\n    }\n\n    public setLength(length: number): this {\n        return this.normalize().multiplyScalar(length);\n    }\n\n    public lerp(v: Vector4, alpha: number): this {\n        return this.set(\n            this.x + (v.x - this.x) * alpha,\n            this.y + (v.y - this.y) * alpha,\n            this.z + (v.z - this.z) * alpha,\n            this.w + (v.w - this.w) * alpha,\n        );\n    }\n\n    public lerpVectors(v1: Vector4, v2: Vector4, alpha: number): this {\n        return this.copy(v2)\n            .sub(v1)\n            .multiplyScalar(alpha)\n            .add(v1);\n    }\n\n    public equals(v: Vector4): boolean {\n        return (\n            v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w\n        );\n    }\n\n    public fromArray(array: number[] | TypedArray, offset: number = 0): this {\n        return this.set(\n            array[offset],\n            array[offset + 1],\n            array[offset + 2],\n            array[offset + 3],\n        );\n    }\n\n    public toArray(\n        array: number[] | TypedArray = [],\n        offset: number = 0,\n    ): number[] | TypedArray {\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        array[offset + 2] = this.z;\n        array[offset + 3] = this.w;\n        return array;\n    }\n\n    public clone(): Vector4 {\n        return new (this.constructor as new () => Vector4)().copy(this);\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\n\nexport class Bone extends Object3D {\n    public readonly type: string = \"Bone\";\n}\n","import { Object3D } from \"../core/Object3D\";\n\nexport class Group extends Object3D {\n    public readonly type: string = \"IGroup\";\n}\n","import { Camera } from \"../cameras/Camera\";\nimport { Object3D } from \"../core/Object3D\";\nimport { IIntersection, Raycaster } from \"../core/Raycaster\";\nimport { Vector3 } from \"../math/Vector3\";\n\nexport interface ILODLevel {\n    object: Object3D;\n    distance: number;\n}\n\nexport class LOD extends Object3D {\n    public readonly type: string = \"LOD\";\n    public levels: ILODLevel[] = [];\n\n    public addLevel(object: Object3D, distance: number = 0): LOD {\n        const levels: ILODLevel[] = this.levels;\n        distance = Math.abs(distance);\n        let l: number = 0;\n        for (; l < levels.length; l++) {\n            if (distance < levels[l].distance) {\n                break;\n            }\n        }\n        levels.splice(l, 0, { distance: distance, object: object });\n        this.add(object);\n        return this;\n    }\n\n    public getObjectForDistance(distance: number) {\n        const levels: ILODLevel[] = this.levels;\n        let i: number = 1;\n        for (const l: number = levels.length; i < l; i++) {\n            if (distance < levels[i].distance) {\n                break;\n            }\n        }\n        return levels[i - 1].object;\n    }\n\n    public raycast(\n        raycaster: Raycaster,\n        intersects: IIntersection[] = [],\n    ): IIntersection[] {\n        const matrixPosition: Vector3 = new Vector3().setFromMatrixPosition(\n            this.matrixWorld,\n        );\n        const distance: number = raycaster.ray.origin.distanceTo(\n            matrixPosition,\n        );\n        this.getObjectForDistance(distance).raycast(raycaster, intersects);\n        return intersects;\n    }\n\n    public update(camera: Camera): this {\n        const levels: ILODLevel[] = this.levels;\n        if (levels.length > 1) {\n            const v1: Vector3 = new Vector3().setFromMatrixPosition(\n                camera.matrixWorld,\n            );\n            const v2: Vector3 = new Vector3().setFromMatrixPosition(\n                this.matrixWorld,\n            );\n            const distance: number = v1.distanceTo(v2);\n            levels[0].object.visible = true;\n            let i: number = 1;\n            const l: number = levels.length;\n            for (; i < l; i++) {\n                if (distance >= levels[i].distance) {\n                    levels[i - 1].object.visible = false;\n                    levels[i].object.visible = true;\n                } else {\n                    break;\n                }\n            }\n            for (; i < l; i++) {\n                levels[i].object.visible = false;\n            }\n        }\n        return this;\n    }\n\n    public copy(source: LOD): this {\n        super.copy(source);\n        const levels: ILODLevel[] = source.levels;\n        for (let i: number = 0, l: number = levels.length; i < l; i++) {\n            const level: ILODLevel = levels[i];\n            this.addLevel(level.object.clone(), level.distance);\n        }\n        return this;\n    }\n\n    public clone(): LOD {\n        return new (this.constructor as new () => LOD)().copy(this);\n    }\n}\n","import { BufferAttribute, TypedArray } from \"../core/BufferAttribute\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Object3D } from \"../core/Object3D\";\nimport { IIntersection, Raycaster } from \"../core/Raycaster\";\nimport { LineBasicMaterial } from \"../materials/LineBasicMaterial\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Ray } from \"../math/Ray\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { LineSegments } from \"./LineSegments\";\n\nexport class Line extends Object3D {\n    public readonly type: string = \"Line\";\n    public geometry: BufferGeometry | Geometry = null;\n    public material: LineBasicMaterial = null;\n\n    constructor(\n        geometry: BufferGeometry | Geometry = new BufferGeometry(),\n        material: LineBasicMaterial = new LineBasicMaterial({\n            color: Math.random() * 0xffffff,\n        }),\n    ) {\n        super();\n        this.geometry = geometry;\n        this.material = material;\n    }\n\n    public raycast(\n        raycaster: Raycaster,\n        intersects: IIntersection[] = [],\n    ): IIntersection[] {\n        const precision: number = raycaster.linePrecision;\n        const precisionSquared: number = precision * precision;\n\n        const geometry: BufferGeometry | Geometry = this.geometry;\n        const matrixWorld: Matrix4 = this.matrixWorld;\n\n        // Checking boundingSphere distance to ray\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n        const sphere: Sphere = new Sphere().copy(geometry.boundingSphere);\n        sphere.applyMatrix4(matrixWorld);\n        if (raycaster.ray.intersectsSphere(sphere) === false) return null;\n        const inverseMatrix: Matrix4 = new Matrix4().getInverse(matrixWorld);\n        const ray: Ray = new Ray();\n        ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n\n        const vStart: Vector3 = new Vector3();\n        const vEnd: Vector3 = new Vector3();\n        const interSegment: Vector3 = new Vector3();\n        const interRay: Vector3 = new Vector3();\n        const step: number = this instanceof LineSegments ? 2 : 1;\n\n        if (geometry instanceof BufferGeometry) {\n            const index: BufferAttribute = geometry.index;\n            const attributes: { [key: string]: BufferAttribute } =\n                geometry.attributes;\n            const positions: TypedArray = attributes.position.array;\n            if (index !== null) {\n                const indices: TypedArray = index.array;\n                for (\n                    let i: number = 0, l: number = indices.length - 1;\n                    i < l;\n                    i += step\n                ) {\n                    const a: number = indices[i];\n                    const b: number = indices[i + 1];\n                    vStart.fromArray(positions, a * 3);\n                    vEnd.fromArray(positions, b * 3);\n                    const distSquared: number = ray.distanceSqToSegment(\n                        vStart,\n                        vEnd,\n                        interRay,\n                        interSegment,\n                    );\n                    if (distSquared > precisionSquared) continue;\n                    interRay.applyMatrix4(this.matrixWorld); // Move back to world space for distance calculation\n                    const distance: number = raycaster.ray.origin.distanceTo(\n                        interRay,\n                    );\n                    if (distance < raycaster.near || distance > raycaster.far) {\n                        continue;\n                    }\n                    intersects.push({\n                        distance: distance,\n                        index: i,\n                        object: this,\n                        // What do we want? intersection point on the ray or on the segment??\n                        // point: raycaster.ray.at( distance ),\n                        point: interSegment\n                            .clone()\n                            .applyMatrix4(this.matrixWorld),\n                    });\n                }\n            } else {\n                for (\n                    let i: number = 0, l = positions.length / 3 - 1;\n                    i < l;\n                    i += step\n                ) {\n                    vStart.fromArray(positions, 3 * i);\n                    vEnd.fromArray(positions, 3 * i + 3);\n                    const distSquared: number = ray.distanceSqToSegment(\n                        vStart,\n                        vEnd,\n                        interRay,\n                        interSegment,\n                    );\n                    if (distSquared > precisionSquared) continue;\n                    interRay.applyMatrix4(this.matrixWorld); // Move back to world space for distance calculation\n                    const distance: number = raycaster.ray.origin.distanceTo(\n                        interRay,\n                    );\n                    if (distance < raycaster.near || distance > raycaster.far) {\n                        continue;\n                    }\n                    intersects.push({\n                        distance: distance,\n                        index: i,\n                        object: this,\n                        // What do we want? intersection point on the ray or on the segment??\n                        // point: raycaster.ray.at( distance ),\n                        point: interSegment\n                            .clone()\n                            .applyMatrix4(this.matrixWorld),\n                    });\n                }\n            }\n        } else if (geometry instanceof Geometry) {\n            const vertices: Vector3[] = geometry.vertices;\n            const nbVertices: number = vertices.length;\n            for (let i: number = 0; i < nbVertices - 1; i += step) {\n                const distSquared: number = ray.distanceSqToSegment(\n                    vertices[i],\n                    vertices[i + 1],\n                    interRay,\n                    interSegment,\n                );\n                if (distSquared > precisionSquared) continue;\n                interRay.applyMatrix4(this.matrixWorld); // Move back to world space for distance calculation\n                const distance: number = raycaster.ray.origin.distanceTo(\n                    interRay,\n                );\n                if (distance < raycaster.near || distance > raycaster.far) {\n                    continue;\n                }\n                intersects.push({\n                    distance: distance,\n                    index: i,\n                    object: this,\n                    // What do we want? intersection point on the ray or on the segment??\n                    // point: raycaster.ray.at( distance ),\n                    point: interSegment.clone().applyMatrix4(this.matrixWorld),\n                });\n            }\n        }\n        return intersects;\n    }\n\n    public clone(): Line {\n        return new (this.constructor as new (\n            geometry: BufferGeometry | Geometry,\n            material: LineBasicMaterial,\n        ) => Line)(this.geometry, this.material).copy(this);\n    }\n}\n","import { Line } from \"./Line\";\nexport class LineLoop extends Line {\n    public readonly type: string = \"LineLoop\";\n}\n","import { Line } from \"./Line\";\nexport class LineSegments extends Line {\n    public readonly type: string = \"LineSegments\";\n}\n","import { BackSide, DoubleSide, TrianglesDrawMode } from \"../constants\";\nimport { BufferAttribute } from \"../core/BufferAttribute\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Face3 } from \"../core/Face3\";\nimport { Geometry, IMorphTarget } from \"../core/Geometry\";\nimport { Object3D } from \"../core/Object3D\";\nimport { IIntersection, Raycaster } from \"../core/Raycaster\";\nimport { Material } from \"../materials/Material\";\nimport { MeshBasicMaterial } from \"../materials/MeshBasicMaterial\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Ray } from \"../math/Ray\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Triangle } from \"../math/Triangle\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { vectorFromBufferAttribute } from \"../utils\";\n\nexport class Mesh extends Object3D {\n    public static uvIntersection(\n        point: Vector3,\n        triangle: Triangle,\n        uv1: Vector2,\n        uv2: Vector2,\n        uv3: Vector2,\n    ): Vector2 {\n        const baryCoord: Vector3 = triangle.barycoordFromPoint(point);\n        uv1.multiplyScalar(baryCoord.x);\n        uv2.multiplyScalar(baryCoord.y);\n        uv3.multiplyScalar(baryCoord.z);\n        uv1.add(uv2).add(uv3);\n        return uv1.clone();\n    }\n\n    public static checkIntersection(\n        object: Mesh,\n        material: Material,\n        raycaster: Raycaster,\n        ray: Ray,\n        pA: Vector3,\n        pB: Vector3,\n        pC: Vector3,\n        point: Vector3,\n    ): IIntersection {\n        let intersect: Vector3;\n        const intersectionPointWorld: Vector3 = new Vector3();\n        if (material.side === BackSide) {\n            intersect = ray.intersectTriangle(new Triangle(pC, pB, pA), true);\n        } else {\n            intersect = ray.intersectTriangle(\n                new Triangle(pC, pB, pA),\n                material.side !== DoubleSide,\n            );\n        }\n        if (intersect === null) return null;\n        point.copy(intersect);\n        intersectionPointWorld.copy(point);\n        intersectionPointWorld.applyMatrix4(object.matrixWorld);\n        const distance: number = raycaster.ray.origin.distanceTo(\n            intersectionPointWorld,\n        );\n        if (distance < raycaster.near || distance > raycaster.far) return null;\n        return {\n            distance: distance,\n            object: object,\n            point: intersectionPointWorld.clone(),\n        };\n    }\n\n    public static checkBufferGeometryIntersection(\n        object: Mesh,\n        raycaster: Raycaster,\n        ray: Ray,\n        position: BufferAttribute,\n        uv: BufferAttribute,\n        a: number,\n        b: number,\n        c: number,\n    ): IIntersection {\n        const intersectionPoint: Vector3 = new Vector3();\n        const vA = vectorFromBufferAttribute(new Vector3(), position, a);\n        const vB = vectorFromBufferAttribute(new Vector3(), position, b);\n        const vC = vectorFromBufferAttribute(new Vector3(), position, c);\n        const triangle = new Triangle(\n            vectorFromBufferAttribute(new Vector3(), position, a),\n            vectorFromBufferAttribute(new Vector3(), position, b),\n            vectorFromBufferAttribute(new Vector3(), position, c),\n        );\n        const intersection: IIntersection = Mesh.checkIntersection(\n            object,\n            object.material as Material,\n            raycaster,\n            ray,\n            vA,\n            vB,\n            vC,\n            intersectionPoint,\n        );\n        if (intersection) {\n            if (uv) {\n                const uvA = vectorFromBufferAttribute(new Vector2(), uv, a);\n                const uvB = vectorFromBufferAttribute(new Vector2(), uv, b);\n                const uvC = vectorFromBufferAttribute(new Vector2(), uv, c);\n                intersection.uv = Mesh.uvIntersection(\n                    intersectionPoint,\n                    triangle,\n                    uvA,\n                    uvB,\n                    uvC,\n                );\n            }\n            intersection.face = new Face3(a, b, c, triangle.normal());\n            intersection.faceIndex = a;\n        }\n        return intersection;\n    }\n\n    public readonly type: string = \"Mesh\";\n\n    public geometry: BufferGeometry | Geometry = null;\n    public material: Material | Material[] = null;\n    public drawMode: number = TrianglesDrawMode;\n\n    public morphTargetInfluences: number[] = [];\n    public morphTargetDictionary: { [key: string]: number } = {};\n\n    constructor(\n        geometry: BufferGeometry | Geometry = new BufferGeometry(),\n        material: Material | Material[] = new MeshBasicMaterial({\n            color: Math.random() * 0xffffff,\n        }),\n    ) {\n        super();\n        this.geometry = geometry;\n        this.material = material;\n        this.updateMorphTargets();\n    }\n\n    public setDrawMode(value: number): this {\n        this.drawMode = value;\n        return this;\n    }\n\n    public updateMorphTargets(): this {\n        const geometry: BufferGeometry | Geometry = this.geometry;\n        if (geometry instanceof BufferGeometry) {\n            const morphAttributes: { [key: string]: BufferAttribute[] } =\n                geometry.morphAttributes;\n            const keys: string[] = Object.keys(morphAttributes);\n            if (keys.length > 0) {\n                const morphAttribute: BufferAttribute[] =\n                    morphAttributes[keys[0]];\n                if (morphAttribute !== undefined) {\n                    for (\n                        let m: number = 0, ml: number = morphAttribute.length;\n                        m < ml;\n                        m++\n                    ) {\n                        const name: string =\n                            morphAttribute[m].name || String(m);\n                        this.morphTargetInfluences.push(0);\n                        this.morphTargetDictionary[name] = m;\n                    }\n                }\n            }\n        } else if (geometry instanceof Geometry) {\n            const morphTargets: IMorphTarget[] = geometry.morphTargets;\n            if (morphTargets !== undefined && morphTargets.length > 0) {\n                for (\n                    let m: number = 0, ml: number = morphTargets.length;\n                    m < ml;\n                    m++\n                ) {\n                    const name: string = morphTargets[m].name || String(m);\n                    this.morphTargetInfluences.push(0);\n                    this.morphTargetDictionary[name] = m;\n                }\n            }\n        }\n        return this;\n    }\n\n    public raycast(\n        raycaster: Raycaster,\n        intersects: IIntersection[] = [],\n    ): IIntersection[] {\n        const geometry: BufferGeometry | Geometry = this.geometry;\n        const material: Material | Material[] = this.material;\n        const matrixWorld: Matrix4 = this.matrixWorld;\n        if (material === undefined) return null;\n        // Checking boundingSphere distance to ray\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n        const sphere: Sphere = new Sphere()\n            .copy(geometry.boundingSphere)\n            .applyMatrix4(matrixWorld);\n        if (raycaster.ray.intersectsSphere(sphere) === false) return null;\n        const inverseMatrix: Matrix4 = new Matrix4().getInverse(matrixWorld);\n        const ray = new Ray().copy(raycaster.ray).applyMatrix4(inverseMatrix);\n        // Check boundingBox before continuing\n        if (geometry.boundingBox !== null) {\n            if (ray.intersectsBox(geometry.boundingBox) === false) return null;\n        }\n        if (geometry instanceof BufferGeometry) {\n            const index: BufferAttribute = geometry.index;\n            const position: BufferAttribute = geometry.attributes.position;\n            const uv: BufferAttribute = geometry.attributes.uv;\n            if (index !== null) {\n                // indexed buffer geometry\n                for (\n                    let i: number = 0, l: number = index.count;\n                    i < l;\n                    i += 3\n                ) {\n                    const a: number = index.getProperty(i, \"x\") as number;\n                    const b: number = index.getProperty(i + 1, \"x\") as number;\n                    const c: number = index.getProperty(i + 2, \"x\") as number;\n                    const intersection: IIntersection = Mesh.checkBufferGeometryIntersection(\n                        this,\n                        raycaster,\n                        ray,\n                        position,\n                        uv,\n                        a,\n                        b,\n                        c,\n                    );\n                    if (intersection) {\n                        intersection.faceIndex = Math.floor(i / 3); // triangle number in indices buffer semantics\n                        intersects.push(intersection);\n                    }\n                }\n            } else if (position !== undefined) {\n                // non-indexed buffer geometry\n                for (\n                    let i: number = 0, l: number = position.count;\n                    i < l;\n                    i += 3\n                ) {\n                    const a: number = i;\n                    const b: number = i + 1;\n                    const c: number = i + 2;\n                    const intersection: IIntersection = Mesh.checkBufferGeometryIntersection(\n                        this,\n                        raycaster,\n                        ray,\n                        position,\n                        uv,\n                        a,\n                        b,\n                        c,\n                    );\n                    if (intersection) {\n                        intersection.index = a; // triangle number in positions buffer semantics\n                        intersects.push(intersection);\n                    }\n                }\n            }\n        } else if (geometry instanceof Geometry) {\n            const vertices: Vector3[] = geometry.vertices;\n            const faces: Face3[] = geometry.faces;\n            let uvs: Vector2[][] | undefined;\n            const faceVertexUvs: Vector2[][] = geometry.faceVertexUvs[0];\n            if (faceVertexUvs.length > 0) uvs = faceVertexUvs;\n            for (let f: number = 0, fl: number = faces.length; f < fl; f++) {\n                const face: Face3 = faces[f];\n                const faceMaterial: Material = Array.isArray(material)\n                    ? material[face.materialIndex]\n                    : material;\n                if (faceMaterial === undefined) continue;\n                let fvA: Vector3 = vertices[face.a];\n                let fvB: Vector3 = vertices[face.b];\n                let fvC: Vector3 = vertices[face.c];\n                if (faceMaterial.morphTargets === true) {\n                    const morphTargets: IMorphTarget[] = geometry.morphTargets;\n                    const vA = new Vector3(),\n                        vB = new Vector3(),\n                        vC = new Vector3();\n                    for (\n                        let t: number = 0, tl: number = morphTargets.length;\n                        t < tl;\n                        t++\n                    ) {\n                        const influence: number = this.morphTargetInfluences[t];\n                        if (influence === 0) continue;\n                        const targets: Vector3[] = morphTargets[t].vertices;\n                        vA.add(\n                            new Vector3()\n                                .copy(targets[face.a])\n                                .sub(fvA)\n                                .multiplyScalar(influence),\n                        );\n                        vB.add(\n                            new Vector3()\n                                .copy(targets[face.b])\n                                .sub(fvB)\n                                .multiplyScalar(influence),\n                        );\n                        vC.add(\n                            new Vector3()\n                                .copy(targets[face.c])\n                                .sub(fvC)\n                                .multiplyScalar(influence),\n                        );\n                    }\n                    vA.add(fvA);\n                    vB.add(fvB);\n                    vC.add(fvC);\n                    fvA = vA;\n                    fvB = vB;\n                    fvC = vC;\n                }\n\n                const intersectionPoint: Vector3 = new Vector3();\n                const intersection: IIntersection = Mesh.checkIntersection(\n                    this,\n                    faceMaterial,\n                    raycaster,\n                    ray,\n                    fvA,\n                    fvB,\n                    fvC,\n                    intersectionPoint,\n                );\n\n                if (intersection) {\n                    if (uvs && uvs[f]) {\n                        const uvsF: Vector2[] = uvs[f];\n                        const uvA = new Vector2().copy(uvsF[0]);\n                        const uvB = new Vector2().copy(uvsF[1]);\n                        const uvC = new Vector2().copy(uvsF[2]);\n                        intersection.uv = Mesh.uvIntersection(\n                            intersectionPoint,\n                            new Triangle(fvA, fvB, fvC),\n                            uvA,\n                            uvB,\n                            uvC,\n                        );\n                    }\n                    intersection.face = face;\n                    intersection.faceIndex = f;\n                    intersects.push(intersection);\n                }\n            }\n        }\n        return intersects;\n    }\n\n    public clone(): Mesh {\n        return new (this.constructor as new (\n            geometry: BufferGeometry | Geometry,\n            material: Material | Material[],\n        ) => Mesh)(this.geometry, this.material).copy(this);\n    }\n}\n","import { BufferAttribute, TypedArray } from \"../core/BufferAttribute\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Object3D } from \"../core/Object3D\";\nimport { IIntersection, Raycaster } from \"../core/Raycaster\";\nimport { Material } from \"../materials/Material\";\nimport { PointsMaterial } from \"../materials/PointsMaterial\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Ray } from \"../math/Ray\";\nimport { Sphere } from \"../math/Sphere\";\nimport { Vector3 } from \"../math/Vector3\";\n\nexport class Points extends Object3D {\n    public readonly type: string = \"Points\";\n\n    public geometry: Geometry | BufferGeometry = null;\n    public material: Material = null;\n\n    constructor(\n        geometry: Geometry | BufferGeometry = new BufferGeometry(),\n        material: Material = new PointsMaterial({\n            color: Math.random() * 0xffffff,\n        }),\n    ) {\n        super();\n        this.geometry = geometry;\n        this.material = material;\n    }\n\n    public raycast(\n        raycaster: Raycaster,\n        intersects: IIntersection[] = [],\n    ): IIntersection[] {\n        const geometry: Geometry | BufferGeometry = this.geometry;\n        const matrixWorld: Matrix4 = this.matrixWorld;\n        const threshold: number = raycaster.params.Points.threshold;\n\n        // Checking boundingSphere distance to ray\n\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n        const sphere: Sphere = new Sphere().copy(geometry.boundingSphere);\n        sphere.applyMatrix4(matrixWorld);\n        sphere.radius += threshold;\n\n        if (raycaster.ray.intersectsSphere(sphere) === false) return null;\n        const inverseMatrix: Matrix4 = new Matrix4().getInverse(matrixWorld);\n        const ray: Ray = new Ray()\n            .copy(raycaster.ray)\n            .applyMatrix4(inverseMatrix);\n\n        const testPoint = (point: Vector3, index2: number): void => {\n            const localThreshold: number =\n                threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n            const localThresholdSquare: number =\n                localThreshold * localThreshold;\n            const rayPointDistanceSquare: number = ray.distanceSquaredToPoint(\n                point,\n            );\n            if (rayPointDistanceSquare < localThresholdSquare) {\n                const intersectPoint = ray.closestPointToPoint(point);\n                intersectPoint.applyMatrix4(matrixWorld);\n                const distance = raycaster.ray.origin.distanceTo(\n                    intersectPoint,\n                );\n                if (distance < raycaster.near || distance > raycaster.far) {\n                    return;\n                }\n                intersects.push({\n                    distance: distance,\n                    distanceToRay: Math.sqrt(rayPointDistanceSquare),\n                    index: index2,\n                    object: this,\n                    point: intersectPoint.clone(),\n                });\n            }\n        };\n\n        if (geometry instanceof BufferGeometry) {\n            const position: Vector3 = new Vector3();\n            const index: BufferAttribute = geometry.index;\n            const positions: TypedArray = geometry.attributes.position.array;\n            if (index !== null) {\n                const indices: TypedArray = index.array;\n                for (\n                    let i: number = 0, il: number = indices.length;\n                    i < il;\n                    i++\n                ) {\n                    const a: number = indices[i];\n                    position.fromArray(positions, a * 3);\n                    testPoint(position, a);\n                }\n            } else {\n                for (\n                    let i: number = 0, l: number = positions.length / 3;\n                    i < l;\n                    i++\n                ) {\n                    position.fromArray(positions, i * 3);\n                    testPoint(position, i);\n                }\n            }\n        } else if (geometry instanceof Geometry) {\n            const vertices: Vector3[] = geometry.vertices;\n            for (let i: number = 0, l: number = vertices.length; i < l; i++) {\n                testPoint(vertices[i], i);\n            }\n        }\n        return intersects;\n    }\n\n    public clone(): Points {\n        return new (this.constructor as new (\n            geometry: BufferGeometry | Geometry,\n            material: Material | Material[],\n        ) => Points)(this.geometry, this.material).copy(this);\n    }\n}\n","import { Matrix4 } from \"../math/Matrix4\";\nimport { DataTexture } from \"../textures/DataTexture\";\nimport { Bone } from \"./Bone\";\n\nconst offsetMatrix: Matrix4 = new Matrix4();\nconst identityMatrix: Matrix4 = new Matrix4();\n\nexport class Skeleton {\n    public bones: Bone[] = [];\n    public boneMatrices: Float32Array = null;\n    public boneInverses: Matrix4[] = [];\n    public boneTexture?: DataTexture = null;\n\n    constructor(bones: Bone[] = [], boneInverses?: Matrix4[]) {\n        this.bones = bones.slice(0);\n        this.boneMatrices = new Float32Array(this.bones.length * 16);\n        if (boneInverses === undefined) {\n            this.calculateInverses();\n        } else {\n            if (this.bones.length === boneInverses.length) {\n                this.boneInverses = boneInverses.slice(0);\n            } else {\n                console.warn(\n                    \"THREE.Skeleton boneInverses is the wrong length.\",\n                );\n                for (let i = 0, il = this.bones.length; i < il; i++) {\n                    this.boneInverses.push(new Matrix4());\n                }\n            }\n        }\n    }\n\n    public calculateInverses(): void {\n        this.boneInverses = [];\n        for (let i: number = 0, il: number = this.bones.length; i < il; i++) {\n            const inverse: Matrix4 = new Matrix4();\n            if (this.bones[i]) {\n                inverse.getInverse(this.bones[i].matrixWorld);\n            }\n            this.boneInverses.push(inverse);\n        }\n    }\n\n    public pose(): void {\n        // recover the bind-time world matrices\n        for (let i: number = 0, il: number = this.bones.length; i < il; i++) {\n            const bone: Bone = this.bones[i];\n            if (bone) {\n                bone.matrixWorld.getInverse(this.boneInverses[i]);\n            }\n        }\n\n        // compute the local matrices, positions, rotations and scales\n        for (let i: number = 0, il: number = this.bones.length; i < il; i++) {\n            const bone: Bone = this.bones[i];\n            if (bone) {\n                if (bone.parent && bone.parent instanceof Bone) {\n                    bone.matrix.getInverse(bone.parent.matrixWorld);\n                    bone.matrix.multiply(bone.matrixWorld);\n                } else {\n                    bone.matrix.copy(bone.matrixWorld);\n                }\n                bone.matrix.decompose(\n                    bone.position,\n                    bone.quaternion,\n                    bone.scale,\n                );\n            }\n        }\n    }\n\n    public update(): void {\n        const bones: Bone[] = this.bones;\n        const boneInverses: Matrix4[] = this.boneInverses;\n        const boneMatrices: Float32Array = this.boneMatrices;\n        const boneTexture: DataTexture = this.boneTexture;\n        // flatten bone matrices to array\n        for (let i: number = 0, il: number = bones.length; i < il; i++) {\n            // compute the offset between the current and the original transform\n            const matrix: Matrix4 = bones[i]\n                ? bones[i].matrixWorld\n                : identityMatrix;\n            offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n            offsetMatrix.toArray(boneMatrices, i * 16);\n        }\n        if (boneTexture !== undefined) {\n            boneTexture.needsUpdate = true;\n        }\n    }\n\n    public getBoneByName(name: string): Bone | null {\n        for (let i: number = 0, il: number = this.bones.length; i < il; i++) {\n            const bone: Bone = this.bones[i];\n            if (bone.name === name) {\n                return bone;\n            }\n        }\n        return null;\n    }\n\n    public clone(): Skeleton {\n        return new (this.constructor as new (\n            bones: Bone[],\n            boneInverses: Matrix4[],\n        ) => Skeleton)(this.bones, this.boneInverses);\n    }\n}\n","import { Mesh } from \"./Mesh\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { Geometry } from \"../core/Geometry\";\nimport { Material } from \"../materials/Material\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Bone } from \"./Bone\";\nimport { TypedArray, BufferAttribute } from \"../core/BufferAttribute\";\nimport { Skeleton } from \"./Skeleton\";\nimport { Vector4 } from \"../math/Vector4\";\n\nexport interface IGeometeryBone {\n    name: string;\n    parent: number;\n    pos: number[] | TypedArray;\n    rotq: number[] | TypedArray;\n    scl?: number[] | TypedArray;\n}\n\nexport class SkinnedMesh extends Mesh {\n    public readonly type: string = \"SkinnedMesh\";\n    public bindMode: string = \"attached\";\n    public bindMatrix: Matrix4 = new Matrix4();\n    public bindMatrixInverse: Matrix4 = new Matrix4();\n    public skeleton: Skeleton = null;\n\n    /**\n     * skinIndices and skinWeights should be set to true on the Geometry\n     * skinIndex and skinWeights attribute on BufferGeometry\n     * @param geometry\n     * @param material\n     */\n    constructor(\n        geometry: Geometry | BufferGeometry,\n        material?: Material | Material[],\n    ) {\n        super(geometry, material);\n        const bones: Bone[] = this.initBones();\n        const skeleton: Skeleton = new Skeleton(bones);\n        this.bind(skeleton, this.matrixWorld);\n        this.normalizeSkinWeights();\n    }\n\n    public initBones(): Bone[] {\n        const bones: Bone[] = [];\n        if (\n            this.geometry &&\n            this.geometry instanceof Geometry &&\n            this.geometry.bones !== undefined\n        ) {\n            // first, create array of 'Bone' objects from geometry data\n            for (\n                let i: number = 0, il: number = this.geometry.bones.length;\n                i < il;\n                i++\n            ) {\n                const gbone = this.geometry.bones[i];\n                // create new 'Bone' object\n                const bone: Bone = new Bone();\n                bones.push(bone);\n                // apply values\n                bone.name = gbone.name;\n                bone.position.fromArray(gbone.pos);\n                bone.quaternion.fromArray(gbone.rotq);\n                if (gbone.scl !== undefined) {\n                    bone.scale.fromArray(gbone.scl);\n                }\n            }\n            // second, create bone hierarchy\n            for (\n                let i: number = 0, il: number = this.geometry.bones.length;\n                i < il;\n                i++\n            ) {\n                const gbone = this.geometry.bones[i];\n                if (\n                    gbone.parent !== -1 &&\n                    gbone.parent !== null &&\n                    bones[gbone.parent] !== undefined\n                ) {\n                    // subsequent bones in the hierarchy\n                    bones[gbone.parent].add(bones[i]);\n                } else {\n                    // topmost bone, immediate child of the skinned mesh\n                    this.add(bones[i]);\n                }\n            }\n        }\n        // now the bones are part of the scene graph and children of the skinned mesh.\n        // let's update the corresponding matrices\n        this.updateMatrixWorld(true);\n        return bones;\n    }\n\n    public bind(skeleton: Skeleton, bindMatrix: Matrix4): void {\n        this.skeleton = skeleton;\n        if (bindMatrix === undefined) {\n            this.updateMatrixWorld(true);\n            this.skeleton.calculateInverses();\n            bindMatrix = this.matrixWorld;\n        }\n        this.bindMatrix.copy(bindMatrix);\n        this.bindMatrixInverse.getInverse(bindMatrix);\n    }\n\n    public pose(): void {\n        this.skeleton.pose();\n    }\n\n    public normalizeSkinWeights(): void {\n        if (this.geometry && this.geometry instanceof Geometry) {\n            for (let i: number = 0; i < this.geometry.skinWeights.length; i++) {\n                const sw: Vector4 = this.geometry.skinWeights[i];\n                const scale: number = 1.0 / sw.manhattanLength();\n                if (scale !== Infinity) {\n                    sw.multiplyScalar(scale);\n                } else {\n                    sw.set(1, 0, 0, 0); // do something reasonable\n                }\n            }\n        } else if (this.geometry && this.geometry instanceof BufferGeometry) {\n            const vec: Vector4 = new Vector4();\n            const skinWeight: BufferAttribute = this.geometry.attributes\n                .skinWeight;\n            for (let i: number = 0; i < skinWeight.count; i++) {\n                vec.x = skinWeight.getProperty(i, \"x\") as number;\n                vec.y = skinWeight.getProperty(i, \"y\") as number;\n                vec.z = skinWeight.getProperty(i, \"z\") as number;\n                vec.w = skinWeight.getProperty(i, \"w\") as number;\n                const scale: number = 1.0 / vec.manhattanLength();\n                if (scale !== Infinity) {\n                    vec.multiplyScalar(scale);\n                } else {\n                    vec.set(1, 0, 0, 0); // do something reasonable\n                }\n                skinWeight.setProperty(i, \"xyzw\", vec);\n            }\n        }\n    }\n\n    public updateMatrixWorld(force: boolean = false): this {\n        super.updateMatrixWorld(force);\n        if (this.bindMode === \"attached\") {\n            this.bindMatrixInverse.getInverse(this.matrixWorld);\n        } else if (this.bindMode === \"detached\") {\n            this.bindMatrixInverse.getInverse(this.bindMatrix);\n        } else {\n            console.warn(\n                \"THREE.SkinnedMesh: Unrecognized bindMode: \" + this.bindMode,\n            );\n        }\n        return this;\n    }\n\n    public clone(): SkinnedMesh {\n        return new (this.constructor as new (\n            geometry: Geometry | BufferGeometry,\n            material: Material | Material[],\n        ) => SkinnedMesh)(this.geometry, this.material).copy(this);\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Material } from \"../materials/Material\";\nimport { SpriteMaterial } from \"../materials/Materials\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Raycaster, IIntersection } from \"../core/Raycaster\";\n\nexport class Sprite extends Object3D {\n    public readonly type: string = \"Sprite\";\n\n    public material: Material = null;\n\n    constructor(material: Material = new SpriteMaterial()) {\n        super();\n        this.material = material;\n    }\n\n    public raycast(\n        raycaster: Raycaster,\n        intersects: IIntersection[] = [],\n    ): IIntersection[] {\n        const worldPosition: Vector3 = new Vector3().setFromMatrixPosition(\n            this.matrixWorld,\n        );\n        const intersectPoint: Vector3 = raycaster.ray.closestPointToPoint(\n            worldPosition,\n        );\n        const worldScale: Vector3 = new Vector3().setFromMatrixScale(\n            this.matrixWorld,\n        );\n        const guessSizeSq: number = worldScale.x * worldScale.y / 4;\n        if (worldPosition.distanceToSquared(intersectPoint) > guessSizeSq) {\n            return null;\n        }\n        const distance: number = raycaster.ray.origin.distanceTo(\n            intersectPoint,\n        );\n        if (distance < raycaster.near || distance > raycaster.far) {\n            return null;\n        }\n        intersects.push({\n            distance: distance,\n            point: intersectPoint.clone(),\n            object: this,\n        });\n        return intersects;\n    }\n\n    public clone(): Sprite {\n        return new (this.constructor as new (material: Material) => Sprite)(\n            this.material,\n        ).copy(this);\n    }\n}\n","import { MathUtil } from \"../math/Math\";\nimport { Vector4 } from \"../math/Vector4\";\nimport { LinearFilter } from \"../constants\";\nimport { Texture } from \"../textures/Texture\";\nimport { EventDispatcher } from \"../core/EventDispatcher\";\n\nexport interface IWebGLRenderTargetOptions {\n    minFilter?: number;\n    wrapS?: number;\n    wrapT?: number;\n    magFilter?: number;\n    format?: number;\n    type?: number;\n    anisotropy?: number;\n    encoding?: number;\n    depthBuffer?: boolean;\n    stencilBuffer?: boolean;\n    depthTexture?: boolean;\n}\n\nexport class WebGLRenderTarget extends EventDispatcher {\n    public readonly uuid: string = MathUtil.generateUUID();\n    public width: number;\n    public height: number;\n    public scissor: Vector4;\n    public scissorTest: boolean = false;\n    public viewport: Vector4;\n    public texture: Texture = null;\n    public depthBuffer?: boolean;\n    public stencilBuffer?: boolean;\n    public depthTexture?: boolean;\n\n    constructor(\n        width: number,\n        height: number,\n        options: IWebGLRenderTargetOptions = {},\n    ) {\n        super();\n        this.width = width;\n        this.height = height;\n        this.scissor = new Vector4(0, 0, width, height);\n        this.viewport = new Vector4(0, 0, width, height);\n        if (options.minFilter === undefined) {\n            options.minFilter = LinearFilter;\n        }\n        this.texture = new Texture(\n            undefined,\n            undefined,\n            options.wrapS,\n            options.wrapT,\n            options.magFilter,\n            options.minFilter,\n            options.format,\n            options.type,\n            options.anisotropy,\n            options.encoding,\n        );\n        this.depthBuffer =\n            options.depthBuffer !== undefined ? options.depthBuffer : true;\n        this.stencilBuffer =\n            options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n        this.depthTexture =\n            options.depthTexture !== undefined ? options.depthTexture : null;\n    }\n\n    public setSize(width: number, height: number): void {\n        if (this.width !== width || this.height !== height) {\n            this.width = width;\n            this.height = height;\n            this.dispose();\n        }\n        this.viewport.set(0, 0, width, height);\n        this.scissor.set(0, 0, width, height);\n    }\n\n    public copy(source: WebGLRenderTarget): this {\n        this.width = source.width;\n        this.height = source.height;\n        this.viewport.copy(source.viewport);\n        this.texture = source.texture.clone();\n        this.depthBuffer = source.depthBuffer;\n        this.stencilBuffer = source.stencilBuffer;\n        this.depthTexture = source.depthTexture;\n        return this;\n    }\n\n    public clone(): WebGLRenderTarget {\n        return new (this.constructor as new () => WebGLRenderTarget)().copy(\n            this,\n        );\n    }\n\n    public dispose(): void {\n        this.dispatchEvent({ type: \"dispose\" });\n    }\n}\n","import {\n    WebGLRenderTarget,\n    IWebGLRenderTargetOptions,\n} from \"./WebGLRenderTarget\";\n\nexport class WebGLRenderTargetCube extends WebGLRenderTarget {\n    // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n    public activeCubeFace: number = 0;\n    public activeMipMapLevel: number = 0;\n\n    constructor(\n        width: number,\n        height: number,\n        options: IWebGLRenderTargetOptions = {},\n    ) {\n        super(width, height, options);\n    }\n}\n","import {\n    REVISION,\n    RGBAFormat,\n    HalfFloatType,\n    FloatType,\n    UnsignedByteType,\n    FrontFaceDirectionCW,\n    TriangleFanDrawMode,\n    TriangleStripDrawMode,\n    TrianglesDrawMode,\n    NoColors,\n    LinearToneMapping,\n} from \"../constants\";\nimport { Texture } from \"../textures/Texture\";\nimport { CubeTexture } from \"../textures/CubeTexture\";\nimport { WebGLRenderTarget } from \"./WebGLRenderTarget\";\nimport { WebGLShadowMap } from \"./webgl/WebGLShadowMap\";\nimport { WebGLState } from \"./webgl/WebGLState\";\nimport { Camera } from \"../cameras/Camera\";\nimport { Fog } from \"../scenes/Fog\";\nimport { Object3D } from \"../core/Object3D\";\nimport { Material } from \"../materials/Material\";\nimport { Geometry } from \"../core/Geometry\";\nimport { BufferGeometry } from \"../core/BufferGeometry\";\nimport { IGroup } from \"../core/DirectGeometry\";\nimport { IUniform } from \"./shaders/UniformsUtils\";\n\nexport interface IInfoMemory {\n    geometries: number;\n    textures: number;\n}\n\nexport interface IInfoRender {\n    frame: number;\n    calls: number;\n    vertices: number;\n    faces: number;\n    points: number;\n}\n\nexport interface IShader {\n    name: string;\n    uniforms: { [key: string]: IUniform };\n    vertexShader: string;\n    fragmentShader: string;\n}\n\nexport class WebGLRenderer {\n    public context: WebGLRenderingContext = null;\n    public gammaInput: boolean;\n    public gammaFactor: number;\n    public gammaOutput: boolean;\n    public localClippingEnabled: boolean = false;\n    public maxMorphNormals: number;\n    public maxMorphTargets: number;\n    public physicallyCorrectLights: boolean = false;\n    public shadowMap: WebGLShadowMap;\n    public toneMapping: number = LinearToneMapping;\n    public state: WebGLState;\n\n    protected currentRendererTarget: WebGLRenderTarget;\n\n    public allocTextureUnit(): number {\n        return 0;\n    }\n\n    public renderBufferDirect(\n        camera: Camera,\n        fog: Fog,\n        geometry: BufferGeometry,\n        material: Material,\n        object: Object3D,\n        group: IGroup,\n    ): void {}\n\n    public setTexture2D(texture: Texture, unit: number) {}\n\n    public setTextureCube(cubeTexture: CubeTexture, unit: number) {}\n\n    public getRenderTarget(): WebGLRenderTarget {\n        return this.currentRendererTarget;\n    }\n\n    public setRenderTarget(currentRendererTarget: WebGLRenderTarget): void {}\n\n    public clear(): void {}\n}\n","import alphamap_fragment from \"./ShaderChunk/alphamap_fragment.glsl\";\nimport alphamap_pars_fragment from \"./ShaderChunk/alphamap_pars_fragment.glsl\";\nimport alphatest_fragment from \"./ShaderChunk/alphatest_fragment.glsl\";\nimport aomap_fragment from \"./ShaderChunk/aomap_fragment.glsl\";\nimport aomap_pars_fragment from \"./ShaderChunk/aomap_pars_fragment.glsl\";\nimport begin_vertex from \"./ShaderChunk/begin_vertex.glsl\";\nimport beginnormal_vertex from \"./ShaderChunk/beginnormal_vertex.glsl\";\nimport bsdfs from \"./ShaderChunk/bsdfs.glsl\";\nimport bumpmap_pars_fragment from \"./ShaderChunk/bumpmap_pars_fragment.glsl\";\nimport clipping_planes_fragment from \"./ShaderChunk/clipping_planes_fragment.glsl\";\nimport clipping_planes_pars_fragment from \"./ShaderChunk/clipping_planes_pars_fragment.glsl\";\nimport clipping_planes_pars_vertex from \"./ShaderChunk/clipping_planes_pars_vertex.glsl\";\nimport clipping_planes_vertex from \"./ShaderChunk/clipping_planes_vertex.glsl\";\nimport color_fragment from \"./ShaderChunk/color_fragment.glsl\";\nimport color_pars_fragment from \"./ShaderChunk/color_pars_fragment.glsl\";\nimport color_pars_vertex from \"./ShaderChunk/color_pars_vertex.glsl\";\nimport color_vertex from \"./ShaderChunk/color_vertex.glsl\";\nimport common from \"./ShaderChunk/common.glsl\";\nimport cube_uv_reflection_fragment from \"./ShaderChunk/cube_uv_reflection_fragment.glsl\";\nimport defaultnormal_vertex from \"./ShaderChunk/defaultnormal_vertex.glsl\";\nimport displacementmap_pars_vertex from \"./ShaderChunk/displacementmap_pars_vertex.glsl\";\nimport displacementmap_vertex from \"./ShaderChunk/displacementmap_vertex.glsl\";\nimport emissivemap_fragment from \"./ShaderChunk/emissivemap_fragment.glsl\";\nimport emissivemap_pars_fragment from \"./ShaderChunk/emissivemap_pars_fragment.glsl\";\nimport encodings_fragment from \"./ShaderChunk/encodings_fragment.glsl\";\nimport encodings_pars_fragment from \"./ShaderChunk/encodings_pars_fragment.glsl\";\nimport envmap_fragment from \"./ShaderChunk/envmap_fragment.glsl\";\nimport envmap_pars_fragment from \"./ShaderChunk/envmap_pars_fragment.glsl\";\nimport envmap_pars_vertex from \"./ShaderChunk/envmap_pars_vertex.glsl\";\nimport envmap_vertex from \"./ShaderChunk/envmap_vertex.glsl\";\nimport fog_vertex from \"./ShaderChunk/fog_vertex.glsl\";\nimport fog_pars_vertex from \"./ShaderChunk/fog_pars_vertex.glsl\";\nimport fog_fragment from \"./ShaderChunk/fog_fragment.glsl\";\nimport fog_pars_fragment from \"./ShaderChunk/fog_pars_fragment.glsl\";\nimport gradientmap_pars_fragment from \"./ShaderChunk/gradientmap_pars_fragment.glsl\";\nimport lightmap_fragment from \"./ShaderChunk/lightmap_fragment.glsl\";\nimport lightmap_pars_fragment from \"./ShaderChunk/lightmap_pars_fragment.glsl\";\nimport lights_lambert_vertex from \"./ShaderChunk/lights_lambert_vertex.glsl\";\nimport lights_pars from \"./ShaderChunk/lights_pars.glsl\";\nimport lights_phong_fragment from \"./ShaderChunk/lights_phong_fragment.glsl\";\nimport lights_phong_pars_fragment from \"./ShaderChunk/lights_phong_pars_fragment.glsl\";\nimport lights_physical_fragment from \"./ShaderChunk/lights_physical_fragment.glsl\";\nimport lights_physical_pars_fragment from \"./ShaderChunk/lights_physical_pars_fragment.glsl\";\nimport lights_template from \"./ShaderChunk/lights_template.glsl\";\nimport logdepthbuf_fragment from \"./ShaderChunk/logdepthbuf_fragment.glsl\";\nimport logdepthbuf_pars_fragment from \"./ShaderChunk/logdepthbuf_pars_fragment.glsl\";\nimport logdepthbuf_pars_vertex from \"./ShaderChunk/logdepthbuf_pars_vertex.glsl\";\nimport logdepthbuf_vertex from \"./ShaderChunk/logdepthbuf_vertex.glsl\";\nimport map_fragment from \"./ShaderChunk/map_fragment.glsl\";\nimport map_pars_fragment from \"./ShaderChunk/map_pars_fragment.glsl\";\nimport map_particle_fragment from \"./ShaderChunk/map_particle_fragment.glsl\";\nimport map_particle_pars_fragment from \"./ShaderChunk/map_particle_pars_fragment.glsl\";\nimport metalnessmap_fragment from \"./ShaderChunk/metalnessmap_fragment.glsl\";\nimport metalnessmap_pars_fragment from \"./ShaderChunk/metalnessmap_pars_fragment.glsl\";\nimport morphnormal_vertex from \"./ShaderChunk/morphnormal_vertex.glsl\";\nimport morphtarget_pars_vertex from \"./ShaderChunk/morphtarget_pars_vertex.glsl\";\nimport morphtarget_vertex from \"./ShaderChunk/morphtarget_vertex.glsl\";\nimport normal_fragment from \"./ShaderChunk/normal_fragment.glsl\";\nimport normalmap_pars_fragment from \"./ShaderChunk/normalmap_pars_fragment.glsl\";\nimport packing from \"./ShaderChunk/packing.glsl\";\nimport premultiplied_alpha_fragment from \"./ShaderChunk/premultiplied_alpha_fragment.glsl\";\nimport project_vertex from \"./ShaderChunk/project_vertex.glsl\";\nimport dithering_fragment from \"./ShaderChunk/dithering_fragment.glsl\";\nimport dithering_pars_fragment from \"./ShaderChunk/dithering_pars_fragment.glsl\";\nimport roughnessmap_fragment from \"./ShaderChunk/roughnessmap_fragment.glsl\";\nimport roughnessmap_pars_fragment from \"./ShaderChunk/roughnessmap_pars_fragment.glsl\";\nimport shadowmap_pars_fragment from \"./ShaderChunk/shadowmap_pars_fragment.glsl\";\nimport shadowmap_pars_vertex from \"./ShaderChunk/shadowmap_pars_vertex.glsl\";\nimport shadowmap_vertex from \"./ShaderChunk/shadowmap_vertex.glsl\";\nimport shadowmask_pars_fragment from \"./ShaderChunk/shadowmask_pars_fragment.glsl\";\nimport skinbase_vertex from \"./ShaderChunk/skinbase_vertex.glsl\";\nimport skinning_pars_vertex from \"./ShaderChunk/skinning_pars_vertex.glsl\";\nimport skinning_vertex from \"./ShaderChunk/skinning_vertex.glsl\";\nimport skinnormal_vertex from \"./ShaderChunk/skinnormal_vertex.glsl\";\nimport specularmap_fragment from \"./ShaderChunk/specularmap_fragment.glsl\";\nimport specularmap_pars_fragment from \"./ShaderChunk/specularmap_pars_fragment.glsl\";\nimport tonemapping_fragment from \"./ShaderChunk/tonemapping_fragment.glsl\";\nimport tonemapping_pars_fragment from \"./ShaderChunk/tonemapping_pars_fragment.glsl\";\nimport uv_pars_fragment from \"./ShaderChunk/uv_pars_fragment.glsl\";\nimport uv_pars_vertex from \"./ShaderChunk/uv_pars_vertex.glsl\";\nimport uv_vertex from \"./ShaderChunk/uv_vertex.glsl\";\nimport uv2_pars_fragment from \"./ShaderChunk/uv2_pars_fragment.glsl\";\nimport uv2_pars_vertex from \"./ShaderChunk/uv2_pars_vertex.glsl\";\nimport uv2_vertex from \"./ShaderChunk/uv2_vertex.glsl\";\nimport worldpos_vertex from \"./ShaderChunk/worldpos_vertex.glsl\";\n\nimport cube_frag from \"./ShaderLib/cube_frag.glsl\";\nimport cube_vert from \"./ShaderLib/cube_vert.glsl\";\nimport depth_frag from \"./ShaderLib/depth_frag.glsl\";\nimport depth_vert from \"./ShaderLib/depth_vert.glsl\";\nimport distanceRGBA_frag from \"./ShaderLib/distanceRGBA_frag.glsl\";\nimport distanceRGBA_vert from \"./ShaderLib/distanceRGBA_vert.glsl\";\nimport equirect_frag from \"./ShaderLib/equirect_frag.glsl\";\nimport equirect_vert from \"./ShaderLib/equirect_vert.glsl\";\nimport linedashed_frag from \"./ShaderLib/linedashed_frag.glsl\";\nimport linedashed_vert from \"./ShaderLib/linedashed_vert.glsl\";\nimport meshbasic_frag from \"./ShaderLib/meshbasic_frag.glsl\";\nimport meshbasic_vert from \"./ShaderLib/meshbasic_vert.glsl\";\nimport meshlambert_frag from \"./ShaderLib/meshlambert_frag.glsl\";\nimport meshlambert_vert from \"./ShaderLib/meshlambert_vert.glsl\";\nimport meshphong_frag from \"./ShaderLib/meshphong_frag.glsl\";\nimport meshphong_vert from \"./ShaderLib/meshphong_vert.glsl\";\nimport meshphysical_frag from \"./ShaderLib/meshphysical_frag.glsl\";\nimport meshphysical_vert from \"./ShaderLib/meshphysical_vert.glsl\";\nimport normal_frag from \"./ShaderLib/normal_frag.glsl\";\nimport normal_vert from \"./ShaderLib/normal_vert.glsl\";\nimport points_frag from \"./ShaderLib/points_frag.glsl\";\nimport points_vert from \"./ShaderLib/points_vert.glsl\";\nimport shadow_frag from \"./ShaderLib/shadow_frag.glsl\";\nimport shadow_vert from \"./ShaderLib/shadow_vert.glsl\";\n\nexport const ShaderChunk = {\n\talphamap_fragment: alphamap_fragment,\n\talphamap_pars_fragment: alphamap_pars_fragment,\n\talphatest_fragment: alphatest_fragment,\n\taomap_fragment: aomap_fragment,\n\taomap_pars_fragment: aomap_pars_fragment,\n\tbegin_vertex: begin_vertex,\n\tbeginnormal_vertex: beginnormal_vertex,\n\tbsdfs: bsdfs,\n\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\tclipping_planes_fragment: clipping_planes_fragment,\n\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\tclipping_planes_vertex: clipping_planes_vertex,\n\tcolor_fragment: color_fragment,\n\tcolor_pars_fragment: color_pars_fragment,\n\tcolor_pars_vertex: color_pars_vertex,\n\tcolor_vertex: color_vertex,\n\tcommon: common,\n\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\tdefaultnormal_vertex: defaultnormal_vertex,\n\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\tdisplacementmap_vertex: displacementmap_vertex,\n\temissivemap_fragment: emissivemap_fragment,\n\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\tencodings_fragment: encodings_fragment,\n\tencodings_pars_fragment: encodings_pars_fragment,\n\tenvmap_fragment: envmap_fragment,\n\tenvmap_pars_fragment: envmap_pars_fragment,\n\tenvmap_pars_vertex: envmap_pars_vertex,\n\tenvmap_vertex: envmap_vertex,\n\tfog_vertex: fog_vertex,\n\tfog_pars_vertex: fog_pars_vertex,\n\tfog_fragment: fog_fragment,\n\tfog_pars_fragment: fog_pars_fragment,\n\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\tlightmap_fragment: lightmap_fragment,\n\tlightmap_pars_fragment: lightmap_pars_fragment,\n\tlights_lambert_vertex: lights_lambert_vertex,\n\tlights_pars: lights_pars,\n\tlights_phong_fragment: lights_phong_fragment,\n\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\tlights_physical_fragment: lights_physical_fragment,\n\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\tlights_template: lights_template,\n\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\tmap_fragment: map_fragment,\n\tmap_pars_fragment: map_pars_fragment,\n\tmap_particle_fragment: map_particle_fragment,\n\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\tmetalnessmap_fragment: metalnessmap_fragment,\n\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\tmorphnormal_vertex: morphnormal_vertex,\n\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\tmorphtarget_vertex: morphtarget_vertex,\n\tnormal_fragment: normal_fragment,\n\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\tpacking: packing,\n\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\tproject_vertex: project_vertex,\n\tdithering_fragment: dithering_fragment,\n\tdithering_pars_fragment: dithering_pars_fragment,\n\troughnessmap_fragment: roughnessmap_fragment,\n\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\tshadowmap_vertex: shadowmap_vertex,\n\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\tskinbase_vertex: skinbase_vertex,\n\tskinning_pars_vertex: skinning_pars_vertex,\n\tskinning_vertex: skinning_vertex,\n\tskinnormal_vertex: skinnormal_vertex,\n\tspecularmap_fragment: specularmap_fragment,\n\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\ttonemapping_fragment: tonemapping_fragment,\n\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\tuv_pars_fragment: uv_pars_fragment,\n\tuv_pars_vertex: uv_pars_vertex,\n\tuv_vertex: uv_vertex,\n\tuv2_pars_fragment: uv2_pars_fragment,\n\tuv2_pars_vertex: uv2_pars_vertex,\n\tuv2_vertex: uv2_vertex,\n\tworldpos_vertex: worldpos_vertex,\n\n\tcube_frag: cube_frag,\n\tcube_vert: cube_vert,\n\tdepth_frag: depth_frag,\n\tdepth_vert: depth_vert,\n\tdistanceRGBA_frag: distanceRGBA_frag,\n\tdistanceRGBA_vert: distanceRGBA_vert,\n\tequirect_frag: equirect_frag,\n\tequirect_vert: equirect_vert,\n\tlinedashed_frag: linedashed_frag,\n\tlinedashed_vert: linedashed_vert,\n\tmeshbasic_frag: meshbasic_frag,\n\tmeshbasic_vert: meshbasic_vert,\n\tmeshlambert_frag: meshlambert_frag,\n\tmeshlambert_vert: meshlambert_vert,\n\tmeshphong_frag: meshphong_frag,\n\tmeshphong_vert: meshphong_vert,\n\tmeshphysical_frag: meshphysical_frag,\n\tmeshphysical_vert: meshphysical_vert,\n\tnormal_frag: normal_frag,\n\tnormal_vert: normal_vert,\n\tpoints_frag: points_frag,\n\tpoints_vert: points_vert,\n\tshadow_frag: shadow_frag,\n\tshadow_vert: shadow_vert\n};\n","export default \"#ifdef USE_ALPHAMAP\\n\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n\\n#endif\\n\";","export default \"#ifdef USE_ALPHAMAP\\n\\n\\tuniform sampler2D alphaMap;\\n\\n#endif\\n\";","export default \"#ifdef ALPHATEST\\n\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n\\n#endif\\n\";","export default \"#ifdef USE_AOMAP\\n\\n\\t// reads channel R, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef USE_AOMAP\\n\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n\\n#endif\";","export default \"\\nvec3 transformed = vec3( position );\\n\";","export default \"\\nvec3 objectNormal = vec3( normal );\\n\";","export default \"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\n\\tif( decayExponent > 0.0 ) {\\n\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\n\\t\\t// based upon Frostbite 3 Moving to Physically-based Rendering\\n\\t\\t// page 32, equation 26: E[window1]\\n\\t\\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\\n\\t\\t// this is intended to be used on spot and point lights who are represented as luminous intensity\\n\\t\\t// but who must be converted to luminous irradiance for surface lighting calculation\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n\\n#else\\n\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\n#endif\\n\\n\\t}\\n\\n\\treturn 1.0;\\n\\n}\\n\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n\\n} // validated\\n\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\n\\t// Original approximation by Christophe Schlick '94\\n\\t// float fresnel = pow( 1.0 - dotLH, 5.0 );\\n\\n\\t// Optimized variant (presented by Epic at SIGGRAPH '13)\\n\\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n\\n} // validated\\n\\n// Microfacet Models for Refraction through Rough Surfaces - equation (34)\\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\\n// alpha is \\\"roughness squared\\\" in Disney’s reparameterization\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\n\\t// geometry term (normalized) = G(l)⋅G(v) / 4(n⋅l)(n⋅v)\\n\\t// also see #12151\\n\\n\\tfloat a2 = pow2( alpha );\\n\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\n\\treturn 1.0 / ( gl * gv );\\n\\n} // validated\\n\\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\n\\tfloat a2 = pow2( alpha );\\n\\n\\t// dotNL and dotNV are explicitly swapped. This is not a mistake.\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n\\n}\\n\\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\\n// alpha is \\\"roughness squared\\\" in Disney’s reparameterization\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\n\\tfloat a2 = pow2( alpha );\\n\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1\\n\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n\\n}\\n\\n// GGX Distribution, Schlick Fresnel, GGX-Smith Visibility\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\n\\tfloat alpha = pow2( roughness ); // UE4's roughness\\n\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\n\\treturn F * ( G * D );\\n\\n} // validated\\n\\n// Rect Area Light\\n\\n// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines\\n// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt\\n// code: https://github.com/selfshadow/ltc_code/\\n\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\n\\t// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\n\\treturn uv;\\n\\n}\\n\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\n\\t// Real-Time Area Lighting: a Journey from Research to Production (p.102)\\n\\t// An approximation of the form factor of a horizon-clipped rectangle.\\n\\n\\tfloat l = length( f );\\n\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n\\n}\\n\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\n\\tfloat x = dot( v1, v2 );\\n\\n\\tfloat y = abs( x );\\n\\n\\t// rational polynomial approximation to theta / sin( theta ) / 2PI\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n\\n}\\n\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\n\\t// bail if point is on back side of plane of light\\n\\t// assumes ccw winding order of light vertices\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\n\\t// construct orthonormal basis around N\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system\\n\\n\\t// compute transform\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\n\\t// transform rect\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\n\\t// project rect onto sphere\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\n\\t// calculate vector form factor\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\n\\t// adjust for horizon clipping\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\n\\n\\n\\treturn vec3( result );\\n\\n}\\n\\n// End Rect Area Light\\n\\n// ref: https://www.unrealengine.com/blog/physically-based-shading-on-mobile - environmentBRDF for GGX on mobile\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\n\\tvec4 r = roughness * c0 + c1;\\n\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\n\\treturn specularColor * AB.x + AB.y;\\n\\n} // validated\\n\\n\\nfloat G_BlinnPhong_Implicit( ) {\\n\\n\\t// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)\\n\\treturn 0.25;\\n\\n}\\n\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n\\n}\\n\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\n\\t//float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\t//float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\n\\treturn F * ( G * D );\\n\\n} // validated\\n\\n// source: http://simonstechblog.blogspot.ca/2011/12/microfacet-brdf.html\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\n\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";","export default \"#ifdef USE_BUMPMAP\\n\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\n\\t// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\\n\\t// http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\\n\\n\\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\\n\\n\\tvec2 dHdxy_fwd() {\\n\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\n\\t\\treturn vec2( dBx, dBy );\\n\\n\\t}\\n\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\n\\t\\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\\n\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\t\\t// normalized\\n\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\n\\t}\\n\\n#endif\\n\";","export default \"#if NUM_CLIPPING_PLANES > 0\\n\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\\n\\n\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\n\\t}\\n\\t\\t\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\n\\t\\tbool clipped = true;\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\\t\\t\\tvec4 plane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\n\\t\\tif ( clipped ) discard;\\n\\t\\n\\t#endif\\n\\n#endif\\n\";","export default \"#if NUM_CLIPPING_PLANES > 0\\n\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n\\n#endif\\n\";","export default \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";","export default \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\\n\";","export default \"#ifdef USE_COLOR\\n\\n\\tdiffuseColor.rgb *= vColor;\\n\\n#endif\";","export default \"#ifdef USE_COLOR\\n\\n\\tvarying vec3 vColor;\\n\\n#endif\\n\";","export default \"#ifdef USE_COLOR\\n\\n\\tvarying vec3 vColor;\\n\\n#endif\";","export default \"#ifdef USE_COLOR\\n\\n\\tvColor.xyz = color.xyz;\\n\\n#endif\";","export default \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\n\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\n// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.\\n// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\n\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\n\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\n\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n\\n}\\n\\n// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n\\n}\\n\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\n\\treturn - distance * planeNormal + point;\\n\\n}\\n\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n\\n}\\n\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n\\n}\\n\\nmat3 transposeMat3( const in mat3 m ) {\\n\\n\\tmat3 tmp;\\n\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\n\\treturn tmp;\\n\\n}\\n\\n// https://en.wikipedia.org/wiki/Relative_luminance\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\n\\treturn dot( weights, color.rgb );\\n\\n}\\n\";","export default \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\n#define cubeUV_textureSize (1024.0)\\n\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\n\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\t// Clamp the value to the max mip level counts. hard coded to 6 mips\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\n\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\t// float powScale = exp2(roughnessLevel + mipLevel);\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\t// float scale =  1.0 / exp2(roughnessLevel + 2.0 + mipLevel);\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\t// float mipOffset = 0.75*(1.0 - 1.0/exp2(mipLevel))/exp2(roughnessLevel);\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\n\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\n\\t// round to nearest mipmap if we are not interpolating.\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\n\\t// Tri linear interpolation.\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\n\\tvec4 result = mix(color10, color20, t);\\n\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n\\n#endif\\n\";","export default \"vec3 transformedNormal = normalMatrix * objectNormal;\\n\\n#ifdef FLIP_SIDED\\n\\n\\ttransformedNormal = - transformedNormal;\\n\\n#endif\\n\";","export default \"#ifdef USE_DISPLACEMENTMAP\\n\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n\\n#endif\\n\";","export default \"#ifdef USE_DISPLACEMENTMAP\\n\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n\\n#endif\\n\";","export default \"#if defined( DITHERING )\\n\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n\\n#endif\\n\";","export default \"#if defined( DITHERING )\\n\\n\\t// based on https://www.shadertoy.com/view/MslGR8\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\t//Calculate grid position\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\n\\t\\t//Shift the individual colors differently, thus making it even harder to see the dithering pattern\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\n\\t\\t//modify shift acording to grid position.\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\n\\t\\t//shift the color by dither_shift\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n\\n#endif\\n\";","export default \"#ifdef USE_EMISSIVEMAP\\n\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n\\n#endif\\n\";","export default \"#ifdef USE_EMISSIVEMAP\\n\\n\\tuniform sampler2D emissiveMap;\\n\\n#endif\\n\";","export default \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";","export default \"// For a discussion of what this is, please read this: http://lousodrome.net/blog/light/2013/05/26/gamma-correct-and-hdr-rendering-in-a-32-bits-buffer/\\n\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\n\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\n\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\n\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n//  return vec4( value.brg, ( 3.0 + 128.0 ) / 256.0 );\\n}\\n\\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\n\\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\n\\n// LogLuv reference: http://graphicrants.blogspot.ca/2009/04/rgbm-color-encoding.html\\n\\n// M matrix, for encoding\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract(Le);\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n\\treturn vResult;\\n}\\n\\n// Inverse M matrix, for decoding\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";","export default \"#ifdef USE_ENVMAP\\n\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\n\\t\\t// Transforming Normal Vectors with the Inverse Transformation\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\n\\t\\t#else\\n\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\n\\t\\t#endif\\n\\n\\t#else\\n\\n\\t\\tvec3 reflectVec = vReflect;\\n\\n\\t#endif\\n\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\n\\t\\tvec2 sampleUV;\\n\\n\\t\\treflectVec = normalize( reflectVec );\\n\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\n\\t\\treflectVec = normalize( reflectVec );\\n\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\n\\t#else\\n\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\n\\t#endif\\n\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n\\n#ifdef USE_ENVMAP\\n\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef USE_ENVMAP\\n\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\n\\t#else\\n\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef USE_ENVMAP\\n\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\n\\t#else\\n\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\n\\t\\t#else\\n\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\n\\t\\t#endif\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef USE_FOG\\n\\n\\t#ifdef FOG_EXP2\\n\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\n\\t#else\\n\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\n\\t#endif\\n\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n\\n#endif\\n\";","export default \"#ifdef USE_FOG\\n\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\n\\t#ifdef FOG_EXP2\\n\\n\\t\\tuniform float fogDensity;\\n\\n\\t#else\\n\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef USE_FOG\\n\\n  varying float fogDepth;\\n\\n#endif\\n\";","export default \"\\n#ifdef USE_FOG\\nfogDepth = -mvPosition.z;\\n#endif\";","export default \"#ifdef TOON\\n\\n\\tuniform sampler2D gradientMap;\\n\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\n\\t\\t// dotNL will be from -1.0 to 1.0\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\n\\t\\t#else\\n\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\n\\t\\t#endif\\n\\n\\n\\t}\\n\\n#endif\\n\";","export default \"#ifdef USE_LIGHTMAP\\n\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity; // factor of PI should not be present; included here to prevent breakage\\n\\n#endif\\n\";","export default \"#ifdef USE_LIGHTMAP\\n\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n\\n#endif\";","export default \"vec3 diffuse = vec3( 1.0 );\\n\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\n\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\n\\nvLightFront = vec3( 0.0 );\\n\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\n\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n\\n#if NUM_POINT_LIGHTS > 0\\n\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\n\\t\\t#endif\\n\\n\\t}\\n\\n#endif\\n\\n#if NUM_SPOT_LIGHTS > 0\\n\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\n\\t\\t#endif\\n\\t}\\n\\n#endif\\n\\n\\n\\n#if NUM_DIR_LIGHTS > 0\\n\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\n\\t\\t#endif\\n\\n\\t}\\n\\n#endif\\n\\n#if NUM_HEMI_LIGHTS > 0\\n\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\n\\t\\t#endif\\n\\n\\t}\\n\\n#endif\\n\";","export default \"uniform vec3 ambientLightColor;\\n\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\n\\tvec3 irradiance = ambientLightColor;\\n\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\n\\t\\tirradiance *= PI;\\n\\n\\t#endif\\n\\n\\treturn irradiance;\\n\\n}\\n\\n#if NUM_DIR_LIGHTS > 0\\n\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\n\\t}\\n\\n#endif\\n\\n\\n#if NUM_POINT_LIGHTS > 0\\n\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\n\\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\n\\t\\tfloat lightDistance = length( lVector );\\n\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\n\\t}\\n\\n#endif\\n\\n\\n#if NUM_SPOT_LIGHTS > 0\\n\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\n\\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\n\\t\\t}\\n\\t}\\n\\n#endif\\n\\n\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\n\\t// Pre-computed values of LinearTransformedCosine approximation of BRDF\\n\\t// BRDF approximation Texture is 64x64\\n\\tuniform sampler2D ltc_1; // RGBA Float\\n\\tuniform sampler2D ltc_2; // RGBA Float\\n\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n\\n#endif\\n\\n\\n#if NUM_HEMI_LIGHTS > 0\\n\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\n\\t\\t\\tirradiance *= PI;\\n\\n\\t\\t#endif\\n\\n\\t\\treturn irradiance;\\n\\n\\t}\\n\\n#endif\\n\\n\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\n\\t\\t\\t// TODO: replace with properly filtered cubemaps and access the irradiance LOD level, be it the last LOD level\\n\\t\\t\\t// of a specular cubemap, or just the default level of a specially created irradiance cubemap.\\n\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\n\\t\\t\\t#else\\n\\n\\t\\t\\t\\t// force the bias high to get the last LOD level as it is the most blurred.\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\n\\t\\t#else\\n\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\n\\t\\t#endif\\n\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\n\\t}\\n\\n\\t// taken from here: http://casual-effects.blogspot.ca/2011/08/plausible-environment-lighting-in-two.html\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\n\\t\\t//float envMapWidth = pow( 2.0, maxMIPLevelScalar );\\n\\t\\t//float desiredMIPLevel = log2( envMapWidth * sqrt( 3.0 ) ) - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\n\\t\\t// clamp to allowable LOD ranges.\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\n\\t}\\n\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\n\\t\\t#else\\n\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\n\\t\\t#endif\\n\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\n\\t\\t\\t#else\\n\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\n\\t\\t\\t#else\\n\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\n\\t\\t\\t#else\\n\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\n\\t\\t#endif\\n\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\n\\t}\\n\\n#endif\\n\";","export default \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";","export default \"varying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n\\nstruct BlinnPhongMaterial {\\n\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n\\n};\\n\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\n\\t#ifdef TOON\\n\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\n\\t#else\\n\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\n\\t#endif\\n\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\n\\t\\tirradiance *= PI; // punctual light\\n\\n\\t#endif\\n\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n\\n}\\n\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\n}\\n\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";","export default \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat ); // Burley clearcoat model\\n\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";","export default \"struct PhysicalMaterial {\\n\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n\\n};\\n\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\n\\n// Clear coat directional hemishperical reflectance (this approximation should be improved)\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n\\n}\\n\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight; // counterclockwise\\n\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\n\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\n\\t\\t// LTC Fresnel Approximation by Stephen Hill\\n\\t\\t// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\n\\t}\\n\\n#endif\\n\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\n\\t\\tirradiance *= PI; // punctual light\\n\\n\\t#endif\\n\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\n\\t#ifndef STANDARD\\n\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\n\\t#endif\\n\\n}\\n\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\n}\\n\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\n\\t#ifndef STANDARD\\n\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\n\\t#endif\\n\\n}\\n\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\n\\n// ref: https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n\\n}\\n\";","export default \"\\n\\nGeometricContext geometry;\\n\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\n\\nIncidentLight directLight;\\n\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\n\\tPointLight pointLight;\\n\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\n\\t\\tpointLight = pointLights[ i ];\\n\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\n\\t}\\n\\n#endif\\n\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\n\\tSpotLight spotLight;\\n\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\n\\t\\tspotLight = spotLights[ i ];\\n\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\n\\t}\\n\\n#endif\\n\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\n\\tDirectionalLight directionalLight;\\n\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\n\\t}\\n\\n#endif\\n\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\n\\tRectAreaLight rectAreaLight;\\n\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\n\\t}\\n\\n#endif\\n\\n#if defined( RE_IndirectDiffuse )\\n\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\n\\t#ifdef USE_LIGHTMAP\\n\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\n\\t\\t\\tlightMapIrradiance *= PI; // factor of PI should not be present; included here to prevent breakage\\n\\n\\t\\t#endif\\n\\n\\t\\tirradiance += lightMapIrradiance;\\n\\n\\t#endif\\n\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\n\\t\\t}\\n\\n\\t#endif\\n\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\n\\t\\t// TODO, replace 8 with the real maxMIPLevel\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\n\\t#endif\\n\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n\\n#endif\\n\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\n\\t// TODO, replace 8 with the real maxMIPLevel\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n\\n#endif\\n\";","export default \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\n\\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\\n\\n#endif\";","export default \"#ifdef USE_LOGDEPTHBUF\\n\\n\\tuniform float logDepthBufFC;\\n\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\\t\\tvarying float vFragDepth;\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef USE_LOGDEPTHBUF\\n\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\\t\\tvarying float vFragDepth;\\n\\n\\t#endif\\n\\n\\tuniform float logDepthBufFC;\\n\\n#endif\";","export default \"#ifdef USE_LOGDEPTHBUF\\n\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\n\\t#else\\n\\n\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\n\\t\\tgl_Position.z *= gl_Position.w;\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef USE_MAP\\n\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n\\n#endif\\n\";","export default \"#ifdef USE_MAP\\n\\n\\tuniform sampler2D map;\\n\\n#endif\\n\";","export default \"#ifdef USE_MAP\\n\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n\\n#endif\\n\";","export default \"#ifdef USE_MAP\\n\\n\\tuniform mat3 uvTransform;\\n\\tuniform sampler2D map;\\n\\n#endif\\n\";","export default \"float metalnessFactor = metalness;\\n\\n#ifdef USE_METALNESSMAP\\n\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\n\\t// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\n\\tmetalnessFactor *= texelMetalness.b;\\n\\n#endif\\n\";","export default \"#ifdef USE_METALNESSMAP\\n\\n\\tuniform sampler2D metalnessMap;\\n\\n#endif\";","export default \"#ifdef USE_MORPHNORMALS\\n\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n\\n#endif\\n\";","export default \"#ifdef USE_MORPHTARGETS\\n\\n\\t#ifndef USE_MORPHNORMALS\\n\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\n\\t#else\\n\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\n\\t#endif\\n\\n#endif\";","export default \"#ifdef USE_MORPHTARGETS\\n\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\n\\t#ifndef USE_MORPHNORMALS\\n\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef FLAT_SHADED\\n\\n\\t// Workaround for Adreno/Nexus5 not able able to do dFdx( vViewPosition ) ...\\n\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n\\n#else\\n\\n\\tvec3 normal = normalize( vNormal );\\n\\n\\t#ifdef DOUBLE_SIDED\\n\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\n\\t#endif\\n\\n#endif\\n\\n#ifdef USE_NORMALMAP\\n\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n\\n#elif defined( USE_BUMPMAP )\\n\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n\\n#endif\\n\";","export default \"#ifdef USE_NORMALMAP\\n\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\n\\t// Per-Pixel Tangent Space Normal Mapping\\n\\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\\n\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\n\\t\\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\\n\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\n\\t}\\n\\n#endif\\n\";","export default \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\n\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\n\\nconst float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)\\nconst float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)\\n\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\n\\nconst float ShiftRight8 = 1. / 256.;\\n\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8; // tidy overflow\\n\\treturn r * PackUpscale;\\n}\\n\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\n\\n// NOTE: viewZ/eyeZ is < 0 when in front of the camera per OpenGL conventions\\n\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\n\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";","export default \"#ifdef PREMULTIPLIED_ALPHA\\n\\n\\t// Get get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n\\n#endif\\n\";","export default \"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n\\ngl_Position = projectionMatrix * mvPosition;\\n\";","export default \"float roughnessFactor = roughness;\\n\\n#ifdef USE_ROUGHNESSMAP\\n\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\n\\t// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\n\\troughnessFactor *= texelRoughness.g;\\n\\n#endif\\n\";","export default \"#ifdef USE_ROUGHNESSMAP\\n\\n\\tuniform sampler2D roughnessMap;\\n\\n#endif\";","export default \"#ifdef USE_SHADOWMAP\\n\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\n\\t#endif\\n\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\n\\t#endif\\n\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\n\\t#endif\\n\\n\\t\\n\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\n\\t}\\n\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\n\\t\\treturn c;\\n\\n\\t}\\n\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\n\\t\\tfloat shadow = 1.0;\\n\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\n\\t\\t// if ( something && something ) breaks ATI OpenGL shader compiler\\n\\t\\t// if ( all( something, something ) ) using this instead\\n\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\n\\t\\tif ( frustumTest ) {\\n\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\n\\t\\t#else // no percentage-closer filtering:\\n\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\n\\t\\t#endif\\n\\n\\t\\t}\\n\\n\\t\\treturn shadow;\\n\\n\\t}\\n\\n\\t// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\\n\\t// vector suitable for 2D texture mapping. This code uses the following layout for the\\n\\t// 2D texture:\\n\\t//\\n\\t// xzXZ\\n\\t//  y Y\\n\\t//\\n\\t// Y - Positive y direction\\n\\t// y - Negative y direction\\n\\t// X - Positive x direction\\n\\t// x - Negative x direction\\n\\t// Z - Positive z direction\\n\\t// z - Negative z direction\\n\\t//\\n\\t// Source and test bed:\\n\\t// https://gist.github.com/tschw/da10c43c467ce8afd0c4\\n\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\n\\t\\t// Number of texels to avoid at the edge of each square\\n\\n\\t\\tvec3 absV = abs( v );\\n\\n\\t\\t// Intersect unit cube\\n\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\n\\t\\t// Apply scale to avoid seams\\n\\n\\t\\t// two texels less per square (one texel will do for NEAREST)\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\n\\t\\t// Unwrap\\n\\n\\t\\t// space: -1 ... 1 range for each square\\n\\t\\t//\\n\\t\\t// #X##\\t\\tdim    := ( 4 , 2 )\\n\\t\\t//  # #\\t\\tcenter := ( 1 , 1 )\\n\\n\\t\\tvec2 planar = v.xy;\\n\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\n\\t\\t}\\n\\n\\t\\t// Transform to UV space\\n\\n\\t\\t// scale := 0.5 / dim\\n\\t\\t// translate := ( center + 0.5 ) / dim\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\n\\t}\\n\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\n\\t\\t// for point lights, the uniform @vShadowCoord is re-purposed to hold\\n\\t\\t// the vector from the light to the world-space position of the fragment.\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\n\\t\\t// dp = normalized distance from light to fragment position\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear ); // need to clamp?\\n\\t\\tdp += shadowBias;\\n\\n\\t\\t// bd3D = base direction 3D\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\n\\t\\t#else // no percentage-closer filtering\\n\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\n\\t\\t#endif\\n\\n\\t}\\n\\n#endif\\n\";","export default \"#ifdef USE_SHADOWMAP\\n\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\n\\t#endif\\n\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\n\\t#endif\\n\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\n\\t#endif\\n\\n\\t\\n\\n#endif\\n\";","export default \"#ifdef USE_SHADOWMAP\\n\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\n\\t}\\n\\n\\t#endif\\n\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\n\\t}\\n\\n\\t#endif\\n\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\n\\t}\\n\\n\\t#endif\\n\\n\\t\\n\\n#endif\\n\";","export default \"float getShadowMask() {\\n\\n\\tfloat shadow = 1.0;\\n\\n\\t#ifdef USE_SHADOWMAP\\n\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\n\\tDirectionalLight directionalLight;\\n\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\n\\t}\\n\\n\\t#endif\\n\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\n\\tSpotLight spotLight;\\n\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\n\\t}\\n\\n\\t#endif\\n\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\n\\tPointLight pointLight;\\n\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\n\\t}\\n\\n\\t#endif\\n\\n\\t\\n\\n\\t#endif\\n\\n\\treturn shadow;\\n\\n}\\n\";","export default \"#ifdef USE_SKINNING\\n\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n\\n#endif\";","export default \"#ifdef USE_SKINNING\\n\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\n\\t#ifdef BONE_TEXTURE\\n\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\n\\t\\t\\treturn bone;\\n\\n\\t\\t}\\n\\n\\t#else\\n\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\n\\t\\t}\\n\\n\\t#endif\\n\\n#endif\\n\";","export default \"#ifdef USE_SKINNING\\n\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n\\n#endif\\n\";","export default \"#ifdef USE_SKINNING\\n\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\n#endif\\n\";","export default \"float specularStrength;\\n\\n#ifdef USE_SPECULARMAP\\n\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n\\n#else\\n\\n\\tspecularStrength = 1.0;\\n\\n#endif\";","export default \"#ifdef USE_SPECULARMAP\\n\\n\\tuniform sampler2D specularMap;\\n\\n#endif\";","export default \"#if defined( TONE_MAPPING )\\n\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n\\n#endif\\n\";","export default \"#ifndef saturate\\n\\t#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\n\\n// exposure only\\nvec3 LinearToneMapping( vec3 color ) {\\n\\n\\treturn toneMappingExposure * color;\\n\\n}\\n\\n// source: https://www.cs.utah.edu/~reinhard/cdrom/\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n\\n}\\n\\n// source: http://filmicgames.com/archives/75\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\n\\t// John Hable's filmic operator from Uncharted 2 video game\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n\\n}\\n\\n// source: http://filmicgames.com/archives/75\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\n\\t// optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n\\n}\\n\";","export default \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\n\\tvarying vec2 vUv2;\\n\\n#endif\";","export default \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\n#endif\";","export default \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\n\\tvUv2 = uv2;\\n\\n#endif\";","export default \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\n\\tvarying vec2 vUv;\\n\\n#endif\";","export default \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n\\n#endif\\n\";","export default \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\n#endif\";","export default \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\n#endif\\n\";","import { Color } from \"../../math/Color\";\nimport { Vector3 } from \"../../math/Vector3\";\nimport { ShaderChunk } from \"./ShaderChunk\";\nimport { UniformsLib } from \"./UniformsLib\";\nimport { IUniform, UniformsUtils } from \"./UniformsUtils\";\n\nconst ShaderLib: {\n    [key: string]: {\n        uniforms: { [key: string]: IUniform };\n        vertexShader: string;\n        fragmentShader: string;\n    };\n} = {\n    basic: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.specularmap,\n            UniformsLib.envmap,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.fog,\n        ]),\n\n        vertexShader: ShaderChunk.meshbasic_vert,\n        fragmentShader: ShaderChunk.meshbasic_frag,\n    },\n\n    lambert: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.specularmap,\n            UniformsLib.envmap,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.emissivemap,\n            UniformsLib.fog,\n            UniformsLib.lights,\n            {\n                emissive: { value: new Color(0x000000) },\n            },\n        ]),\n\n        vertexShader: ShaderChunk.meshlambert_vert,\n        fragmentShader: ShaderChunk.meshlambert_frag,\n    },\n\n    phong: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.specularmap,\n            UniformsLib.envmap,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.emissivemap,\n            UniformsLib.bumpmap,\n            UniformsLib.normalmap,\n            UniformsLib.displacementmap,\n            UniformsLib.gradientmap,\n            UniformsLib.fog,\n            UniformsLib.lights,\n            {\n                emissive: { value: new Color(0x000000) },\n                specular: { value: new Color(0x111111) },\n                shininess: { value: 30 },\n            },\n        ]),\n\n        vertexShader: ShaderChunk.meshphong_vert,\n        fragmentShader: ShaderChunk.meshphong_frag,\n    },\n\n    standard: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.envmap,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.emissivemap,\n            UniformsLib.bumpmap,\n            UniformsLib.normalmap,\n            UniformsLib.displacementmap,\n            UniformsLib.roughnessmap,\n            UniformsLib.metalnessmap,\n            UniformsLib.fog,\n            UniformsLib.lights,\n            {\n                emissive: { value: new Color(0x000000) },\n                roughness: { value: 0.5 },\n                metalness: { value: 0.5 },\n                envMapIntensity: { value: 1 }, // temporary\n            },\n        ]),\n\n        vertexShader: ShaderChunk.meshphysical_vert,\n        fragmentShader: ShaderChunk.meshphysical_frag,\n    },\n\n    points: {\n        uniforms: UniformsUtils.merge([UniformsLib.points, UniformsLib.fog]),\n\n        vertexShader: ShaderChunk.points_vert,\n        fragmentShader: ShaderChunk.points_frag,\n    },\n\n    dashed: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.fog,\n            {\n                scale: { value: 1 },\n                dashSize: { value: 1 },\n                totalSize: { value: 2 },\n            },\n        ]),\n\n        vertexShader: ShaderChunk.linedashed_vert,\n        fragmentShader: ShaderChunk.linedashed_frag,\n    },\n\n    depth: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.displacementmap,\n        ]),\n\n        vertexShader: ShaderChunk.depth_vert,\n        fragmentShader: ShaderChunk.depth_frag,\n    },\n\n    normal: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.bumpmap,\n            UniformsLib.normalmap,\n            UniformsLib.displacementmap,\n            {\n                opacity: { value: 1.0 },\n            },\n        ]),\n\n        vertexShader: ShaderChunk.normal_vert,\n        fragmentShader: ShaderChunk.normal_frag,\n    },\n\n    /* -------------------------------------------------------------------------\n     //\tCube map shader\n     ------------------------------------------------------------------------- */\n\n    cube: {\n        uniforms: {\n            tCube: { value: null },\n            tFlip: { value: -1 },\n            opacity: { value: 1.0 },\n        },\n\n        vertexShader: ShaderChunk.cube_vert,\n        fragmentShader: ShaderChunk.cube_frag,\n    },\n\n    equirect: {\n        uniforms: {\n            tEquirect: { value: null },\n        },\n\n        vertexShader: ShaderChunk.equirect_vert,\n        fragmentShader: ShaderChunk.equirect_frag,\n    },\n\n    distanceRGBA: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.displacementmap,\n            {\n                referencePosition: { value: new Vector3() },\n                nearDistance: { value: 1 },\n                farDistance: { value: 1000 },\n            },\n        ]),\n\n        vertexShader: ShaderChunk.distanceRGBA_vert,\n        fragmentShader: ShaderChunk.distanceRGBA_frag,\n    },\n\n    shadow: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.lights,\n            UniformsLib.fog,\n            {\n                color: { value: new Color(0x00000) },\n                opacity: { value: 1.0 },\n            },\n        ]),\n\n        vertexShader: ShaderChunk.shadow_vert,\n        fragmentShader: ShaderChunk.shadow_frag,\n    },\n};\n\nShaderLib.physical = {\n    uniforms: UniformsUtils.merge([\n        ShaderLib.standard.uniforms,\n        {\n            clearCoat: { value: 0 },\n            clearCoatRoughness: { value: 0 },\n        },\n    ]),\n\n    vertexShader: ShaderChunk.meshphysical_vert,\n    fragmentShader: ShaderChunk.meshphysical_frag,\n};\n\nexport { ShaderLib };\n","export default \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\n\\nvarying vec3 vWorldPosition;\\n\\nvoid main() {\\n\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n\\n}\\n\";","export default \"varying vec3 vWorldPosition;\\n\\n#include <common>\\n\\nvoid main() {\\n\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\n\\tgl_Position.z = gl_Position.w; // set z to camera.far\\n\\n}\\n\";","export default \"#if DEPTH_PACKING == 3200\\n\\n\\tuniform float opacity;\\n\\n#endif\\n\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\n\\t#if DEPTH_PACKING == 3200\\n\\n\\t\\tdiffuseColor.a = opacity;\\n\\n\\t#endif\\n\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\n\\t#include <logdepthbuf_fragment>\\n\\n\\t#if DEPTH_PACKING == 3200\\n\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\n\\t#elif DEPTH_PACKING == 3201\\n\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\n\\t#endif\\n\\n}\\n\";","export default \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\n\\t#include <skinbase_vertex>\\n\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\n\\t#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n}\\n\";","export default \"#define DISTANCE\\n\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main () {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist ); // clamp to [ 0, 1 ]\\n\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n\\n}\\n\";","export default \"#define DISTANCE\\n\\nvarying vec3 vWorldPosition;\\n\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\n\\t#include <skinbase_vertex>\\n\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\n\\t#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\tvWorldPosition = worldPosition.xyz;\\n\\n}\\n\";","export default \"uniform sampler2D tEquirect;\\n\\nvarying vec3 vWorldPosition;\\n\\n#include <common>\\n\\nvoid main() {\\n\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\n\\tvec2 sampleUV;\\n\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\n}\\n\";","export default \"varying vec3 vWorldPosition;\\n\\n#include <common>\\n\\nvoid main() {\\n\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\n}\\n\";","export default \"uniform vec3 diffuse;\\nuniform float opacity;\\n\\nuniform float dashSize;\\nuniform float totalSize;\\n\\nvarying float vLineDistance;\\n\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\n\\t\\tdiscard;\\n\\n\\t}\\n\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\n\\toutgoingLight = diffuseColor.rgb; // simple shader\\n\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\n}\\n\";","export default \"uniform float scale;\\nattribute float lineDistance;\\n\\nvarying float vLineDistance;\\n\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <color_vertex>\\n\\n\\tvLineDistance = scale * lineDistance;\\n\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\";","export default \"uniform vec3 diffuse;\\nuniform float opacity;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\n\\t// accumulation (baked indirect lighting only)\\n\\t#ifdef USE_LIGHTMAP\\n\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\n\\t#else\\n\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\n\\t#endif\\n\\n\\t// modulation\\n\\t#include <aomap_fragment>\\n\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\n\\t#include <envmap_fragment>\\n\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\n}\\n\";","export default \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\n\\t#ifdef USE_ENVMAP\\n\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\n\\t#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\";","export default \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n\\nvarying vec3 vLightFront;\\n\\n#ifdef DOUBLE_SIDED\\n\\n\\tvarying vec3 vLightBack;\\n\\n#endif\\n\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\n\\t// accumulation\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\n\\t#include <lightmap_fragment>\\n\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\n\\t#ifdef DOUBLE_SIDED\\n\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\n\\t#else\\n\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\n\\t#endif\\n\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\n\\t// modulation\\n\\t#include <aomap_fragment>\\n\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\n\\t#include <envmap_fragment>\\n\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n\\n}\\n\";","export default \"#define LAMBERT\\n\\nvarying vec3 vLightFront;\\n\\n#ifdef DOUBLE_SIDED\\n\\n\\tvarying vec3 vLightBack;\\n\\n#endif\\n\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\";","export default \"#define PHONG\\n\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\n\\t// accumulation\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\n\\t// modulation\\n\\t#include <aomap_fragment>\\n\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\n\\t#include <envmap_fragment>\\n\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n\\n}\\n\";","export default \"#define PHONG\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\n\\n\\tvNormal = normalize( transformedNormal );\\n\\n#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\tvViewPosition = - mvPosition.xyz;\\n\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\";","export default \"#define PHYSICAL\\n\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\n\\t// accumulation\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\n\\t// modulation\\n\\t#include <aomap_fragment>\\n\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n\\n}\\n\";","export default \"#define PHYSICAL\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\n\\n\\tvNormal = normalize( transformedNormal );\\n\\n#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\tvViewPosition = - mvPosition.xyz;\\n\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\";","export default \"#define NORMAL\\n\\nuniform float opacity;\\n\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\n\\tvarying vec3 vViewPosition;\\n\\n#endif\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment>\\n\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n\\n}\\n\";","export default \"#define NORMAL\\n\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\n\\tvarying vec3 vViewPosition;\\n\\n#endif\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n#endif\\n\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\n\\n\\tvNormal = normalize( transformedNormal );\\n\\n#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\n\\tvViewPosition = - mvPosition.xyz;\\n\\n#endif\\n\\n}\\n\";","export default \"uniform vec3 diffuse;\\nuniform float opacity;\\n\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\n\\toutgoingLight = diffuseColor.rgb;\\n\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\n}\\n\";","export default \"uniform float size;\\nuniform float scale;\\n\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\";","export default \"uniform vec3 color;\\nuniform float opacity;\\n\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n\\nvoid main() {\\n\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\n\\t#include <fog_fragment>\\n\\n}\\n\";","export default \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n\\nvoid main() {\\n\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\";","import { Color } from \"../../math/Color\";\nimport { Vector2 } from \"../../math/Vector2\";\nimport { Matrix3 } from \"../../math/Matrix3\";\nimport { IUniform } from \"./UniformsUtils\";\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nconst UniformsLib: {\n    [key: string]: {\n        [name: string]: IUniform;\n    };\n} = {\n    common: {\n        diffuse: { value: new Color(0xeeeeee) },\n        opacity: { value: 1.0 },\n\n        map: { value: null },\n        uvTransform: { value: new Matrix3() },\n\n        alphaMap: { value: null },\n    },\n\n    specularmap: {\n        specularMap: { value: null },\n    },\n\n    envmap: {\n        envMap: { value: null },\n        flipEnvMap: { value: -1 },\n        reflectivity: { value: 1.0 },\n        refractionRatio: { value: 0.98 },\n    },\n\n    aomap: {\n        aoMap: { value: null },\n        aoMapIntensity: { value: 1 },\n    },\n\n    lightmap: {\n        lightMap: { value: null },\n        lightMapIntensity: { value: 1 },\n    },\n\n    emissivemap: {\n        emissiveMap: { value: null },\n    },\n\n    bumpmap: {\n        bumpMap: { value: null },\n        bumpScale: { value: 1 },\n    },\n\n    normalmap: {\n        normalMap: { value: null },\n        normalScale: { value: new Vector2(1, 1) },\n    },\n\n    displacementmap: {\n        displacementMap: { value: null },\n        displacementScale: { value: 1 },\n        displacementBias: { value: 0 },\n    },\n\n    roughnessmap: {\n        roughnessMap: { value: null },\n    },\n\n    metalnessmap: {\n        metalnessMap: { value: null },\n    },\n\n    gradientmap: {\n        gradientMap: { value: null },\n    },\n\n    fog: {\n        fogDensity: { value: 0.00025 },\n        fogNear: { value: 1 },\n        fogFar: { value: 2000 },\n        fogColor: { value: new Color(0xffffff) },\n    },\n\n    lights: {\n        ambientLightColor: { value: [] },\n\n        directionalLights: {\n            value: [],\n            properties: {\n                direction: {},\n                color: {},\n\n                shadow: {},\n                shadowBias: {},\n                shadowRadius: {},\n                shadowMapSize: {},\n            },\n        },\n\n        directionalShadowMap: { value: [] },\n        directionalShadowMatrix: { value: [] },\n\n        spotLights: {\n            value: [],\n            properties: {\n                color: {},\n                position: {},\n                direction: {},\n                distance: {},\n                coneCos: {},\n                penumbraCos: {},\n                decay: {},\n\n                shadow: {},\n                shadowBias: {},\n                shadowRadius: {},\n                shadowMapSize: {},\n            },\n        },\n\n        spotShadowMap: { value: [] },\n        spotShadowMatrix: { value: [] },\n\n        pointLights: {\n            value: [],\n            properties: {\n                color: {},\n                position: {},\n                decay: {},\n                distance: {},\n\n                shadow: {},\n                shadowBias: {},\n                shadowRadius: {},\n                shadowMapSize: {},\n                shadowCameraNear: {},\n                shadowCameraFar: {},\n            },\n        },\n\n        pointShadowMap: { value: [] },\n        pointShadowMatrix: { value: [] },\n\n        hemisphereLights: {\n            value: [],\n            properties: {\n                direction: {},\n                skyColor: {},\n                groundColor: {},\n            },\n        },\n\n        // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n        rectAreaLights: {\n            value: [],\n            properties: {\n                color: {},\n                position: {},\n                width: {},\n                height: {},\n            },\n        },\n    },\n\n    points: {\n        diffuse: { value: new Color(0xeeeeee) },\n        opacity: { value: 1.0 },\n        size: { value: 1.0 },\n        scale: { value: 1.0 },\n        map: { value: null },\n        uvTransform: { value: new Matrix3() },\n    },\n};\n\nexport { UniformsLib };\n","import { Color } from \"../../math/Color\";\nimport { Matrix3 } from \"../../math/Matrix3\";\nimport { Matrix4 } from \"../../math/Matrix4\";\nimport { Vector2 } from \"../../math/Vector2\";\nimport { Vector3 } from \"../../math/Vector3\";\nimport { Vector4 } from \"../../math/Vector4\";\nimport { Texture } from \"../../textures/Texture\";\nimport { NestUniformType } from \"../webgl/WebGLUniforms\";\n\nexport interface IUniform {\n    value?: NestUniformType;\n    properties?: object;\n    type?: string;\n    needsUpdate?: boolean;\n}\n\nexport class UniformsUtils {\n    public static merge(\n        uniforms: Array<{ [key: string]: IUniform }>,\n    ): { [key: string]: IUniform } {\n        const merged: { [key: string]: IUniform } = {};\n        for (let u: number = 0; u < uniforms.length; u++) {\n            const tmp = this.clone(uniforms[u]);\n            for (const p in tmp) {\n                if (tmp.hasOwnProperty(p)) {\n                    merged[p] = tmp[p];\n                }\n            }\n        }\n        return merged;\n    }\n\n    public static clone(uniformsSrc: {\n        [key: string]: IUniform;\n    }): { [key: string]: IUniform } {\n        const uniformsDst: { [key: string]: IUniform } = {};\n        for (const u in uniformsSrc) {\n            if (!uniformsSrc.hasOwnProperty(u)) continue;\n            uniformsDst[u] = {};\n            for (const p in uniformsSrc[u]) {\n                if (!uniformsSrc[u].hasOwnProperty(p)) continue;\n                const parameterSrc = uniformsSrc[u][p];\n                if (\n                    parameterSrc &&\n                    (parameterSrc instanceof Color ||\n                        parameterSrc instanceof Matrix3 ||\n                        parameterSrc instanceof Matrix4 ||\n                        parameterSrc instanceof Vector2 ||\n                        parameterSrc instanceof Vector3 ||\n                        parameterSrc instanceof Vector4 ||\n                        parameterSrc instanceof Texture)\n                ) {\n                    uniformsDst[u][p] = parameterSrc.clone();\n                } else if (Array.isArray(parameterSrc)) {\n                    uniformsDst[u][p] = parameterSrc.slice();\n                } else {\n                    uniformsDst[u][p] = parameterSrc;\n                }\n            }\n        }\n        return uniformsDst;\n    }\n}\n","import {\n    AddEquation,\n    AlphaFormat,\n    ByteType,\n    ClampToEdgeWrapping,\n    DepthFormat,\n    DepthStencilFormat,\n    DstAlphaFactor,\n    DstColorFactor,\n    FloatType,\n    HalfFloatType,\n    IntType,\n    LinearFilter,\n    LinearMipMapLinearFilter,\n    LinearMipMapNearestFilter,\n    LuminanceAlphaFormat,\n    LuminanceFormat,\n    MaxEquation,\n    MinEquation,\n    MirroredRepeatWrapping,\n    NearestFilter,\n    NearestMipMapLinearFilter,\n    NearestMipMapNearestFilter,\n    OneFactor,\n    OneMinusDstAlphaFactor,\n    OneMinusDstColorFactor,\n    OneMinusSrcAlphaFactor,\n    OneMinusSrcColorFactor,\n    RGBAFormat,\n    RGBA_ASTC_10x10_Format,\n    RGBA_ASTC_10x5_Format,\n    RGBA_ASTC_10x6_Format,\n    RGBA_ASTC_10x8_Format,\n    RGBA_ASTC_12x10_Format,\n    RGBA_ASTC_12x12_Format,\n    RGBA_ASTC_4x4_Format,\n    RGBA_ASTC_5x4_Format,\n    RGBA_ASTC_5x5_Format,\n    RGBA_ASTC_6x5_Format,\n    RGBA_ASTC_6x6_Format,\n    RGBA_ASTC_8x5_Format,\n    RGBA_ASTC_8x6_Format,\n    RGBA_ASTC_8x8_Format,\n    RGBA_PVRTC_2BPPV1_Format,\n    RGBA_PVRTC_4BPPV1_Format,\n    RGBA_S3TC_DXT1_Format,\n    RGBA_S3TC_DXT3_Format,\n    RGBA_S3TC_DXT5_Format,\n    RGBFormat,\n    RGB_ETC1_Format,\n    RGB_PVRTC_2BPPV1_Format,\n    RGB_PVRTC_4BPPV1_Format,\n    RGB_S3TC_DXT1_Format,\n    RepeatWrapping,\n    ReverseSubtractEquation,\n    ShortType,\n    SrcAlphaFactor,\n    SrcAlphaSaturateFactor,\n    SrcColorFactor,\n    SubtractEquation,\n    UnsignedByteType,\n    UnsignedInt248Type,\n    UnsignedIntType,\n    UnsignedShort4444Type,\n    UnsignedShort5551Type,\n    UnsignedShort565Type,\n    UnsignedShortType,\n    ZeroFactor,\n} from \"../../constants\";\nimport { WebGLExtensions } from \"./WebGLExtensions\";\n\nexport class WebGLUtils {\n    public context: WebGLRenderingContext = null;\n    public extensions: WebGLExtensions = null;\n\n    constructor(context: WebGLRenderingContext, extensions: WebGLExtensions) {\n        this.context = context;\n        this.extensions = extensions;\n    }\n\n    public convert(parameter: number): any {\n        const extensions: WebGLExtensions = this.extensions;\n        const context = this.context;\n\n        let extension;\n\n        if (parameter === RepeatWrapping) {\n            return context.REPEAT;\n        }\n        if (parameter === ClampToEdgeWrapping) {\n            return context.CLAMP_TO_EDGE;\n        }\n        if (parameter === MirroredRepeatWrapping) {\n            return context.MIRRORED_REPEAT;\n        }\n\n        if (parameter === NearestFilter) {\n            return context.NEAREST;\n        }\n        if (parameter === NearestMipMapNearestFilter) {\n            return context.NEAREST_MIPMAP_NEAREST;\n        }\n        if (parameter === NearestMipMapLinearFilter) {\n            return context.NEAREST_MIPMAP_LINEAR;\n        }\n\n        if (parameter === LinearFilter) {\n            return context.LINEAR;\n        }\n        if (parameter === LinearMipMapNearestFilter) {\n            return context.LINEAR_MIPMAP_NEAREST;\n        }\n        if (parameter === LinearMipMapLinearFilter) {\n            return context.LINEAR_MIPMAP_LINEAR;\n        }\n\n        if (parameter === UnsignedByteType) {\n            return context.UNSIGNED_BYTE;\n        }\n        if (parameter === UnsignedShort4444Type) {\n            return context.UNSIGNED_SHORT_4_4_4_4;\n        }\n        if (parameter === UnsignedShort5551Type) {\n            return context.UNSIGNED_SHORT_5_5_5_1;\n        }\n        if (parameter === UnsignedShort565Type) {\n            return context.UNSIGNED_SHORT_5_6_5;\n        }\n\n        if (parameter === ByteType) {\n            return context.BYTE;\n        }\n        if (parameter === ShortType) {\n            return context.SHORT;\n        }\n        if (parameter === UnsignedShortType) {\n            return context.UNSIGNED_SHORT;\n        }\n        if (parameter === IntType) {\n            return context.INT;\n        }\n        if (parameter === UnsignedIntType) {\n            return context.UNSIGNED_INT;\n        }\n        if (parameter === FloatType) {\n            return context.FLOAT;\n        }\n\n        if (parameter === HalfFloatType) {\n            extension = extensions.get(\"OES_texture_half_float\");\n\n            if (extension !== null) {\n                return extension.HALF_FLOAT_OES;\n            }\n        }\n\n        if (parameter === AlphaFormat) {\n            return context.ALPHA;\n        }\n        if (parameter === RGBFormat) {\n            return context.RGB;\n        }\n        if (parameter === RGBAFormat) {\n            return context.RGBA;\n        }\n        if (parameter === LuminanceFormat) {\n            return context.LUMINANCE;\n        }\n        if (parameter === LuminanceAlphaFormat) {\n            return context.LUMINANCE_ALPHA;\n        }\n        if (parameter === DepthFormat) {\n            return context.DEPTH_COMPONENT;\n        }\n        if (parameter === DepthStencilFormat) {\n            return context.DEPTH_STENCIL;\n        }\n\n        if (parameter === AddEquation) {\n            return context.FUNC_ADD;\n        }\n        if (parameter === SubtractEquation) {\n            return context.FUNC_SUBTRACT;\n        }\n        if (parameter === ReverseSubtractEquation) {\n            return context.FUNC_REVERSE_SUBTRACT;\n        }\n\n        if (parameter === ZeroFactor) {\n            return context.ZERO;\n        }\n        if (parameter === OneFactor) {\n            return context.ONE;\n        }\n        if (parameter === SrcColorFactor) {\n            return context.SRC_COLOR;\n        }\n        if (parameter === OneMinusSrcColorFactor) {\n            return context.ONE_MINUS_SRC_COLOR;\n        }\n        if (parameter === SrcAlphaFactor) {\n            return context.SRC_ALPHA;\n        }\n        if (parameter === OneMinusSrcAlphaFactor) {\n            return context.ONE_MINUS_SRC_ALPHA;\n        }\n        if (parameter === DstAlphaFactor) {\n            return context.DST_ALPHA;\n        }\n        if (parameter === OneMinusDstAlphaFactor) {\n            return context.ONE_MINUS_DST_ALPHA;\n        }\n\n        if (parameter === DstColorFactor) {\n            return context.DST_COLOR;\n        }\n        if (parameter === OneMinusDstColorFactor) {\n            return context.ONE_MINUS_DST_COLOR;\n        }\n        if (parameter === SrcAlphaSaturateFactor) {\n            return context.SRC_ALPHA_SATURATE;\n        }\n\n        if (\n            parameter === RGB_S3TC_DXT1_Format ||\n            parameter === RGBA_S3TC_DXT1_Format ||\n            parameter === RGBA_S3TC_DXT3_Format ||\n            parameter === RGBA_S3TC_DXT5_Format\n        ) {\n            extension = extensions.get(\"WEBGL_compressed_texture_s3tc\");\n            if (extension !== null) {\n                if (parameter === RGB_S3TC_DXT1_Format) {\n                    return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n                }\n                if (parameter === RGBA_S3TC_DXT1_Format) {\n                    return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n                }\n                if (parameter === RGBA_S3TC_DXT3_Format) {\n                    return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n                }\n                if (parameter === RGBA_S3TC_DXT5_Format) {\n                    return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n                }\n            }\n        }\n\n        if (\n            parameter === RGB_PVRTC_4BPPV1_Format ||\n            parameter === RGB_PVRTC_2BPPV1_Format ||\n            parameter === RGBA_PVRTC_4BPPV1_Format ||\n            parameter === RGBA_PVRTC_2BPPV1_Format\n        ) {\n            extension = extensions.get(\"WEBGL_compressed_texture_pvrtc\");\n            if (extension !== null) {\n                if (parameter === RGB_PVRTC_4BPPV1_Format) {\n                    return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n                }\n                if (parameter === RGB_PVRTC_2BPPV1_Format) {\n                    return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n                }\n                if (parameter === RGBA_PVRTC_4BPPV1_Format) {\n                    return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n                }\n                if (parameter === RGBA_PVRTC_2BPPV1_Format) {\n                    return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n                }\n            }\n        }\n\n        if (parameter === RGB_ETC1_Format) {\n            extension = extensions.get(\"WEBGL_compressed_texture_etc1\");\n            if (extension !== null) {\n                return extension.COMPRESSED_RGB_ETC1_WEBGL;\n            }\n        }\n\n        if (\n            parameter === RGBA_ASTC_4x4_Format ||\n            parameter === RGBA_ASTC_5x4_Format ||\n            parameter === RGBA_ASTC_5x5_Format ||\n            parameter === RGBA_ASTC_6x5_Format ||\n            parameter === RGBA_ASTC_6x6_Format ||\n            parameter === RGBA_ASTC_8x5_Format ||\n            parameter === RGBA_ASTC_8x6_Format ||\n            parameter === RGBA_ASTC_8x8_Format ||\n            parameter === RGBA_ASTC_10x5_Format ||\n            parameter === RGBA_ASTC_10x6_Format ||\n            parameter === RGBA_ASTC_10x8_Format ||\n            parameter === RGBA_ASTC_10x10_Format ||\n            parameter === RGBA_ASTC_12x10_Format ||\n            parameter === RGBA_ASTC_12x12_Format\n        ) {\n            extension = extensions.get(\"WEBGL_compressed_texture_astc\");\n            if (extension !== null) {\n                return parameter;\n            }\n        }\n\n        if (parameter === MinEquation || parameter === MaxEquation) {\n            extension = extensions.get(\"EXT_blend_minmax\");\n            if (extension !== null) {\n                if (parameter === MinEquation) {\n                    return extension.MIN_EXT;\n                }\n                if (parameter === MaxEquation) {\n                    return extension.MAX_EXT;\n                }\n            }\n        }\n\n        if (parameter === UnsignedInt248Type) {\n            extension = extensions.get(\"WEBGL_depth_texture\");\n            if (extension !== null) {\n                return extension.UNSIGNED_INT_24_8_WEBGL;\n            }\n        }\n\n        return 0;\n    }\n}\n","import { Color } from \"../math/Color\";\n\nexport class Fog {\n    public name: string = \"\";\n    public color: Color = null;\n    public near: number = 1;\n    public far: number = 1000;\n\n    constructor(\n        color: Color | number | string,\n        near: number = 1,\n        far: number = 1000,\n    ) {\n        if (color instanceof Color) {\n            this.color = new Color().copy(color);\n        } else if (typeof color === \"number\") {\n            this.color = new Color().setHex(color);\n        } else if (typeof color === \"string\") {\n            this.color = new Color().setStyle(color);\n        }\n        this.near = near;\n        this.far = far;\n    }\n\n    public copy(source: Fog): this {\n        this.color.copy(source.color);\n        this.near = source.near;\n        this.far = source.far;\n        return this;\n    }\n\n    public clone(): Fog {\n        return new (this.constructor as new (\n            color: Color,\n            near: number,\n            far: number,\n        ) => Fog)(this.color, this.near, this.far).copy(this);\n    }\n}\n","import { Color } from \"../math/Color\";\n\nexport class FogExp2 {\n    public name: string = \"\";\n    public color: Color = null;\n    public density: number = 0.00025;\n\n    constructor(color: Color | number | string, density: number = 1) {\n        if (color instanceof Color) {\n            this.color = new Color().copy(color);\n        } else if (typeof color === \"number\") {\n            this.color = new Color().setHex(color);\n        } else if (typeof color === \"string\") {\n            this.color = new Color().setStyle(color);\n        }\n        this.density = density;\n    }\n\n    public copy(source: FogExp2): this {\n        this.color.copy(source.color);\n        this.density = source.density;\n        return this;\n    }\n\n    public clone(): FogExp2 {\n        return new (this.constructor as new (\n            color: Color,\n            density: number,\n        ) => FogExp2)(this.color, this.density).copy(this);\n    }\n}\n","import { Object3D } from \"../core/Object3D\";\nimport { Color } from \"../math/Color\";\nimport { CubeTexture } from \"../textures/CubeTexture\";\nimport { Texture } from \"../textures/Texture\";\nimport { Fog } from \"./Fog\";\nimport { FogExp2 } from \"./FogExp2\";\nimport { Material } from \"../materials/Material\";\n\nexport class Scene extends Object3D {\n    public readonly type: string = \"Scene\";\n\n    public background: Color | Texture | CubeTexture = null;\n    public fog: Fog | FogExp2 = null;\n    public overrideMaterial: Material = null;\n    public autoUpdate: boolean = true; // checked by the renderer\n\n    public copy(source: Scene): this {\n        super.copy(source);\n        if (source.background !== null) {\n            this.background = source.background.clone();\n        }\n        if (source.fog !== null) {\n            this.fog = source.fog.clone();\n        }\n        if (source.overrideMaterial !== null) {\n            this.overrideMaterial = source.overrideMaterial.clone();\n        }\n        this.autoUpdate = source.autoUpdate;\n        // this.matrixAutoUpdate = source.matrixAutoUpdate;\n        return this;\n    }\n\n    public clone(): Scene {\n        return new (this.constructor as new () => Scene)().copy(this);\n    }\n}\n","import { Texture } from \"./Texture\";\n\nexport class CanvasTexture extends Texture {\n    constructor(\n        canvas: HTMLCanvasElement,\n        mapping?: number,\n        wrapS?: number,\n        wrapT?: number,\n        magFilter?: number,\n        minFilter?: number,\n        format?: number,\n        type?: number,\n        anisotropy?: number,\n    ) {\n        super(\n            canvas,\n            mapping,\n            wrapS,\n            wrapT,\n            magFilter,\n            minFilter,\n            format,\n            type,\n            anisotropy,\n        );\n        this.needsUpdate = true;\n    }\n}\n","import { Texture } from \"./Texture\";\n\nexport class CompressedTexture extends Texture {\n    constructor(\n        mipmaps: Array<{ data: any; width: number; height: number }>,\n        width: number,\n        height: number,\n        mapping?: number,\n        wrapS?: number,\n        wrapT?: number,\n        magFilter?: number,\n        minFilter?: number,\n        format?: number,\n        type?: number,\n        anisotropy?: number,\n        encoding?: number,\n    ) {\n        super(\n            null,\n            mapping,\n            wrapS,\n            wrapT,\n            magFilter,\n            minFilter,\n            format,\n            type,\n            anisotropy,\n            encoding,\n        );\n        this.image = { width: width, height: height };\n        this.mipmaps = mipmaps;\n\n        /**\n         * no flipping for cube textures\n         * (also flipping doesn't work for compressed textures )\n         * @type {boolean}\n         */\n        this.flipY = false;\n\n        /**\n         * can't generate mipmaps for compressed textures\n         * mips must be embedded in DDS files\n         * @type {boolean}\n         */\n        this.generateMipmaps = false;\n    }\n}\n","import { CubeReflectionMapping } from \"../constants\";\nimport { Texture, TextureSource } from \"./Texture\";\n\nexport class CubeTexture extends Texture {\n    constructor(\n        images: TextureSource = [],\n        mapping: number = CubeReflectionMapping,\n        wrapS?: number,\n        wrapT?: number,\n        magFilter?: number,\n        minFilter?: number,\n        format?: number,\n        type?: number,\n        anisotropy?: number,\n        encoding?: number,\n    ) {\n        super(\n            images,\n            mapping,\n            wrapS,\n            wrapT,\n            magFilter,\n            minFilter,\n            format,\n            type,\n            anisotropy,\n            encoding,\n        );\n        this.flipY = false;\n    }\n\n    get images(): TextureSource {\n        return this.image;\n    }\n\n    set images(images: TextureSource) {\n        this.image = images;\n    }\n}\n","import { NearestFilter } from \"../constants\";\nimport { Texture } from \"./Texture\";\n\nexport class DataTexture extends Texture {\n    constructor(\n        data: any,\n        width: number,\n        height: number,\n        mapping?: number,\n        wrapS?: number,\n        wrapT?: number,\n        magFilter?: number,\n        minFilter?: number,\n        format?: number,\n        type?: number,\n        anisotropy?: number,\n        encoding?: number,\n    ) {\n        super(\n            null,\n            mapping,\n            wrapS,\n            wrapT,\n            magFilter,\n            minFilter,\n            format,\n            type,\n            anisotropy,\n            encoding,\n        );\n        this.image = { data: data, width: width, height: height };\n        this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n        this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n        this.generateMipmaps = false;\n        this.flipY = false;\n        this.unpackAlignment = 1;\n    }\n}\n","import {\n    DepthFormat,\n    DepthStencilFormat,\n    NearestFilter,\n    UnsignedInt248Type,\n    UnsignedShortType,\n} from \"../constants\";\nimport { Texture } from \"./Texture\";\n\nexport class DepthTexture extends Texture {\n    constructor(\n        width: number,\n        height: number,\n        mapping?: number,\n        wrapS?: number,\n        wrapT?: number,\n        magFilter?: number,\n        minFilter?: number,\n        format?: number,\n        type?: number,\n        anisotropy?: number,\n        encoding?: number,\n    ) {\n        format = format !== undefined ? format : DepthFormat;\n        if (format !== DepthFormat && format !== DepthStencilFormat) {\n            throw new Error(\n                `DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat`,\n            );\n        }\n        if (type === undefined && format === DepthFormat) {\n            type = UnsignedShortType;\n        }\n        if (type === undefined && format === DepthStencilFormat) {\n            type = UnsignedInt248Type;\n        }\n        super(\n            null,\n            mapping,\n            wrapS,\n            wrapT,\n            magFilter,\n            minFilter,\n            format,\n            type,\n            anisotropy,\n            encoding,\n        );\n        this.image = { width: width, height: height };\n        this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n        this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n        this.flipY = false;\n        this.generateMipmaps = false;\n    }\n}\n","import {\n    ClampToEdgeWrapping,\n    LinearEncoding,\n    LinearFilter,\n    LinearMipMapLinearFilter,\n    MirroredRepeatWrapping,\n    RepeatWrapping,\n    RGBAFormat,\n    UnsignedByteType,\n    UVMapping,\n} from \"../constants\";\nimport { EventDispatcher } from \"../core/EventDispatcher\";\nimport { MathUtil } from \"../math/Math\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Vector2 } from \"../math/Vector2\";\n\nlet textureId: number = 0;\n\ntype InnerTextureSource =\n    | HTMLImageElement\n    | HTMLCanvasElement\n    | HTMLVideoElement\n    | { data?: any; width: number; height: number };\n\nexport type TextureSource = InnerTextureSource | InnerTextureSource[];\n\nexport class Texture extends EventDispatcher {\n    public static DEFAULT_IMAGE: HTMLImageElement = null;\n    public static DEFAULT_MAPPING: number = UVMapping;\n\n    public readonly id: number = textureId++;\n    public readonly uuid: string = MathUtil.generateUUID();\n    public name: string = \"\";\n    public image: TextureSource = Texture.DEFAULT_IMAGE;\n    public mipmaps: Array<{ data: any; width: number; height: number }> = [];\n    public mapping: number = Texture.DEFAULT_MAPPING;\n    public wrapS: number = ClampToEdgeWrapping;\n    public wrapT: number = ClampToEdgeWrapping;\n    public magFilter: number = LinearFilter;\n    public minFilter: number = LinearMipMapLinearFilter;\n    public anisotropy: number = 1;\n    public format: number = RGBAFormat;\n    public type: number = UnsignedByteType;\n    public offset: Vector2 = new Vector2(0, 0);\n    public repeat: Vector2 = new Vector2(1, 1);\n    public center: Vector2 = new Vector2(0, 0);\n    public rotation: number = 0;\n\n    public matrix: Matrix3 = new Matrix3();\n    public matrixAutoUpdate: boolean = true;\n    public generateMipmaps: boolean = true;\n    public premultiplyAlpha: boolean = false;\n    public flipY: boolean = true;\n\n    /**\n     * valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n     * @type {number}\n     */\n    public unpackAlignment: number = 4;\n\n    /**\n     * Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n     * Also changing the encoding after already used by a Material will not automatically make the Material update.\n     * You need to explicitly call Material.needsUpdate to trigger it to recompile.\n     */\n    public encoding: number = LinearEncoding;\n    public version: number = 0;\n\n    constructor(\n        image: TextureSource = Texture.DEFAULT_IMAGE,\n        mapping: number = Texture.DEFAULT_MAPPING,\n        wrapS: number = ClampToEdgeWrapping,\n        wrapT: number = ClampToEdgeWrapping,\n        magFilter: number = LinearFilter,\n        minFilter: number = LinearMipMapLinearFilter,\n        format: number = RGBAFormat,\n        type: number = UnsignedByteType,\n        anisotropy: number = 1,\n        encoding: number = LinearEncoding,\n    ) {\n        super();\n        this.image = image;\n        this.mapping = mapping;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.magFilter = magFilter;\n        this.minFilter = minFilter;\n        this.format = format;\n        this.type = type;\n        this.anisotropy = anisotropy;\n        this.encoding = encoding;\n    }\n\n    set needsUpdate(value: boolean) {\n        if (value === true) this.version++;\n    }\n\n    public dispose(): void {\n        this.dispatchEvent({ type: \"dispose\" });\n    }\n\n    public transformUv(uv: Vector2): this {\n        if (this.mapping !== UVMapping) return this;\n        uv.applyMatrix3(this.matrix);\n        if (uv.x < 0 || uv.x > 1) {\n            switch (this.wrapS) {\n                case RepeatWrapping:\n                    uv.x = uv.x - Math.floor(uv.x);\n                    break;\n                case ClampToEdgeWrapping:\n                    uv.x = uv.x < 0 ? 0 : 1;\n                    break;\n                case MirroredRepeatWrapping:\n                    if (Math.abs(Math.floor(uv.x) % 2) === 1) {\n                        uv.x = Math.ceil(uv.x) - uv.x;\n                    } else {\n                        uv.x = uv.x - Math.floor(uv.x);\n                    }\n                    break;\n            }\n        }\n\n        if (uv.y < 0 || uv.y > 1) {\n            switch (this.wrapT) {\n                case RepeatWrapping:\n                    uv.y = uv.y - Math.floor(uv.y);\n                    break;\n                case ClampToEdgeWrapping:\n                    uv.y = uv.y < 0 ? 0 : 1;\n                    break;\n                case MirroredRepeatWrapping:\n                    if (Math.abs(Math.floor(uv.y) % 2) === 1) {\n                        uv.y = Math.ceil(uv.y) - uv.y;\n                    } else {\n                        uv.y = uv.y - Math.floor(uv.y);\n                    }\n                    break;\n            }\n        }\n        if (this.flipY) {\n            uv.y = 1 - uv.y;\n        }\n        return this;\n    }\n\n    public clone(): Texture {\n        return new (this.constructor as new () => Texture)().copy(this);\n    }\n\n    public copy(source: Texture): this {\n        this.name = source.name;\n        this.image = source.image;\n        this.mipmaps = source.mipmaps.slice(0);\n        this.mapping = source.mapping;\n        this.wrapS = source.wrapS;\n        this.wrapT = source.wrapT;\n        this.magFilter = source.magFilter;\n        this.minFilter = source.minFilter;\n        this.anisotropy = source.anisotropy;\n        this.format = source.format;\n        this.type = source.type;\n        this.offset.copy(source.offset);\n        this.repeat.copy(source.repeat);\n        this.center.copy(source.center);\n        this.rotation = source.rotation;\n        this.matrixAutoUpdate = source.matrixAutoUpdate;\n        this.matrix.copy(source.matrix);\n        this.generateMipmaps = source.generateMipmaps;\n        this.premultiplyAlpha = source.premultiplyAlpha;\n        this.flipY = source.flipY;\n        this.unpackAlignment = source.unpackAlignment;\n        this.encoding = source.encoding;\n        return this;\n    }\n}\n","import { Texture } from \"./Texture\";\n\nexport class VideoTexture extends Texture {\n    constructor(\n        video: HTMLVideoElement,\n        mapping?: number,\n        wrapS?: number,\n        wrapT?: number,\n        magFilter?: number,\n        minFilter?: number,\n        format?: number,\n        type?: number,\n        anisotropy?: number,\n    ) {\n        super(\n            video,\n            mapping,\n            wrapS,\n            wrapT,\n            magFilter,\n            minFilter,\n            format,\n            type,\n            anisotropy,\n        );\n        this.generateMipmaps = false;\n    }\n\n    public update(): this {\n        const video: HTMLVideoElement = this.image as HTMLVideoElement;\n        if (video.readyState >= video.HAVE_CURRENT_DATA) {\n            this.needsUpdate = true;\n        }\n        return this;\n    }\n}\n","import { Matrix4 } from \"./math/Matrix4\";\nimport { Matrix3 } from \"./math/Matrix3\";\nimport { BufferAttribute } from \"./core/BufferAttribute\";\nimport { Vector3 } from \"./math/Vector3\";\nimport { Box3 } from \"./math/Box3\";\nimport { Camera } from \"./cameras/Camera\";\nimport { Vector2 } from \"./math/Vector2\";\nimport { Vector4 } from \"./math/Vector4\";\n\nexport function arrayMin(array: number[]): number {\n    if (array.length === 0) return Infinity;\n    let min: number = array[0];\n    for (let i: number = 1, l: number = array.length; i < l; ++i) {\n        if (array[i] < min) min = array[i];\n    }\n    return min;\n}\n\nexport function arrayMax(array: number[]): number {\n    if (array.length === 0) return -Infinity;\n    let max: number = array[0];\n    for (let i: number = 1, l: number = array.length; i < l; ++i) {\n        if (array[i] > max) max = array[i];\n    }\n    return max;\n}\n\nexport function applyMatrixToBufferAttribute(\n    matrix: Matrix4 | Matrix3,\n    attribute: BufferAttribute,\n): BufferAttribute {\n    const vec: Vector3 = new Vector3();\n    for (let i: number = 0, l: number = attribute.count; i < l; i++) {\n        vec.x = attribute.getProperty(i, \"x\") as number;\n        vec.y = attribute.getProperty(i, \"y\") as number;\n        vec.z = attribute.getProperty(i, \"z\") as number;\n        if (matrix instanceof Matrix4) {\n            vec.applyMatrix4(matrix);\n        } else if (matrix instanceof Matrix3) {\n            vec.applyMatrix3(matrix);\n        }\n        attribute.setProperty(i, \"xyz\", vec);\n    }\n    return attribute;\n}\n\nexport function setBoxFromBufferAttribute(\n    target: Box3,\n    attribute: BufferAttribute,\n): void {\n    let minX: number = +Infinity;\n    let minY: number = +Infinity;\n    let minZ: number = +Infinity;\n    let maxX: number = -Infinity;\n    let maxY: number = -Infinity;\n    let maxZ: number = -Infinity;\n    for (let i: number = 0, l: number = attribute.count; i < l; i++) {\n        const x: number = attribute.getProperty(i, \"x\") as number;\n        const y: number = attribute.getProperty(i, \"y\") as number;\n        const z: number = attribute.getProperty(i, \"z\") as number;\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (z < minZ) minZ = z;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n        if (z > maxZ) maxZ = z;\n    }\n    target.min.set(minX, minY, minZ);\n    target.max.set(maxX, maxY, maxZ);\n}\n\nexport function unprojectVector3onCamera(\n    vector: Vector3,\n    camera: Camera,\n): Vector3 {\n    const matrix: Matrix4 = new Matrix4();\n    vector.applyMatrix4(\n        matrix.multiplyMatrices(\n            camera.matrixWorld,\n            matrix.getInverse(camera.projectionMatrix),\n        ),\n    );\n    return vector;\n}\n\nexport function vectorFromBufferAttribute<T = Vector4 | Vector3 | Vector2>(\n    vector: T,\n    attribute: BufferAttribute,\n    index: number = 0,\n): T {\n    if (vector instanceof Vector2) {\n        return vector.set(\n            attribute.getProperty(index, \"x\") as number,\n            attribute.getProperty(index, \"y\") as number,\n        );\n    } else if (vector instanceof Vector3) {\n        return vector.set(\n            attribute.getProperty(index, \"x\") as number,\n            attribute.getProperty(index, \"y\") as number,\n            attribute.getProperty(index, \"z\") as number,\n        );\n    } else if (vector instanceof Vector4) {\n        return vector.set(\n            attribute.getProperty(index, \"x\") as number,\n            attribute.getProperty(index, \"y\") as number,\n            attribute.getProperty(index, \"z\") as number,\n            attribute.getProperty(index, \"w\") as number,\n        );\n    }\n    return vector;\n}\n"],"sourceRoot":""}